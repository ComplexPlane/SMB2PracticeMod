/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __WORDSIZE: u32 = 32;
pub const __GLIBC_HAVE_LONG_LONG: u32 = 1;
pub type undefined = ::core::ffi::c_uchar;
pub type bool_ = ::core::ffi::c_uchar;
pub type byte = ::core::ffi::c_uchar;
pub type dword = ::core::ffi::c_uint;
pub type longlong = ::core::ffi::c_longlong;
pub type qword = ::core::ffi::c_ulonglong;
pub type uchar = ::core::ffi::c_uchar;
pub type uint = ::core::ffi::c_uint;
pub type uint16 = ::core::ffi::c_ulonglong;
pub type uint3 = ::core::ffi::c_uint;
pub type ulong = ::core::ffi::c_ulong;
pub type ulonglong = ::core::ffi::c_ulonglong;
pub type undefined1 = ::core::ffi::c_uchar;
pub type undefined2 = ::core::ffi::c_ushort;
pub type undefined3 = ::core::ffi::c_uint;
pub type undefined4 = ::core::ffi::c_uint;
pub type undefined7 = ::core::ffi::c_ulonglong;
pub type undefined8 = ::core::ffi::c_ulonglong;
pub type ushort = ::core::ffi::c_ushort;
pub type word = ::core::ffi::c_ushort;
pub type PSeesawState = *mut SeesawState;
pub type f32_ = f32;
pub type Mtx = [[f32_; 4usize]; 3usize];
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SeesawState {
    pub angle: f32,
    pub prev_angle: f32,
    pub angle_vel: f32,
    pub sensitivity: f32,
    pub friction: f32,
    pub spring: f32,
    pub inv_transform: Mtx,
    pub transform: Mtx,
}
pub const APE_AIAI: _bindgen_ty_1 = 0;
pub const APE_MEEMEE: _bindgen_ty_1 = 1;
pub const APE_BABY: _bindgen_ty_1 = 2;
pub const APE_GONGON: _bindgen_ty_1 = 3;
pub const APE_MADH: _bindgen_ty_1 = 4;
pub const APE_KOBUN: _bindgen_ty_1 = 5;
pub const APE_MALE: _bindgen_ty_1 = 6;
pub const APE_FEMALE: _bindgen_ty_1 = 7;
pub const APE_JIJI: _bindgen_ty_1 = 8;
pub const APE_BABA: _bindgen_ty_1 = 9;
pub const APE_MADSPA: _bindgen_ty_1 = 10;
pub const APE_MADFRG: _bindgen_ty_1 = 11;
pub const APE_MADNKD: _bindgen_ty_1 = 12;
pub const APE_ROB: _bindgen_ty_1 = 13;
pub const APE_WHALE: _bindgen_ty_1 = 14;
pub const APE_MADCRS: _bindgen_ty_1 = 15;
pub const APE_KOBSPA: _bindgen_ty_1 = 16;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
pub type ApeCharacter = undefined4;
pub const DIFF_BEGINNER: _bindgen_ty_2 = 0;
pub const DIFF_ADVANCED: _bindgen_ty_2 = 1;
pub const DIFF_EXPERT: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
pub type Difficulty = undefined4;
pub const G_STORY_LEVEL_SELECT_NO_BACKGROUND: _bindgen_ty_3 = 0;
pub const G_LAVA_NO_BACKGROUND: _bindgen_ty_3 = 1;
pub const JUNGLE1: _bindgen_ty_3 = 2;
pub const WATER1: _bindgen_ty_3 = 3;
pub const NIGHT: _bindgen_ty_3 = 4;
pub const SKY: _bindgen_ty_3 = 5;
pub const SPACE1: _bindgen_ty_3 = 6;
pub const SAND: _bindgen_ty_3 = 7;
pub const ICE: _bindgen_ty_3 = 8;
pub const STORM: _bindgen_ty_3 = 9;
pub const BONUS1: _bindgen_ty_3 = 10;
pub const TARGET1: _bindgen_ty_3 = 11;
pub const G_CONTINUE_A: _bindgen_ty_3 = 12;
pub const G_CONTINUE_B: _bindgen_ty_3 = 13;
pub const G_FIGHT2: _bindgen_ty_3 = 14;
pub const MASTER: _bindgen_ty_3 = 15;
pub const G_ENDING: _bindgen_ty_3 = 16;
pub const LAVA: _bindgen_ty_3 = 17;
pub const WATER2: _bindgen_ty_3 = 18;
pub const JUNGLE2: _bindgen_ty_3 = 19;
pub const PARK: _bindgen_ty_3 = 20;
pub const POT: _bindgen_ty_3 = 21;
pub const SPACE2: _bindgen_ty_3 = 22;
pub const ELECTRIC: _bindgen_ty_3 = 23;
pub const GEAR: _bindgen_ty_3 = 24;
pub const BUBBLY: _bindgen_ty_3 = 25;
pub const BONUS2: _bindgen_ty_3 = 26;
pub const SOCCER: _bindgen_ty_3 = 27;
pub const BOWLING2: _bindgen_ty_3 = 28;
pub const TARGET2: _bindgen_ty_3 = 29;
pub const BILLIARDS2: _bindgen_ty_3 = 30;
pub const BOAT: _bindgen_ty_3 = 31;
pub const WHALE: _bindgen_ty_3 = 32;
pub const GOLF: _bindgen_ty_3 = 33;
pub const POT_FIGHT: _bindgen_ty_3 = 34;
pub const VILLAGE_STORY: _bindgen_ty_3 = 35;
pub const BUBBLY_STORY: _bindgen_ty_3 = 36;
pub const PARK_STORY: _bindgen_ty_3 = 37;
pub const GEAR_STORY: _bindgen_ty_3 = 38;
pub const UNDERWATER_STORY: _bindgen_ty_3 = 39;
pub const WATER_SURFACE_STORY: _bindgen_ty_3 = 40;
pub const BOWLING_STORY: _bindgen_ty_3 = 41;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
pub type WorldTheme = undefined2;
pub type PGoalTape = *mut GoalTape;
pub type s32 = ::core::ffi::c_long;
pub type PStobj = *mut Stobj;
pub type PPhysicsBall = *mut PhysicsBall;
pub const STOBJ_BUMPER: _bindgen_ty_4 = 0;
pub const STOBJ_JAMABAR: _bindgen_ty_4 = 1;
pub const STOBJ_GOALTAPE: _bindgen_ty_4 = 2;
pub const STOBJ_GOALBAG: _bindgen_ty_4 = 3;
pub const STOBJ_GOALBAG_EXMASTER: _bindgen_ty_4 = 4;
pub const STOBJ_MF_PNL_BUMPER: _bindgen_ty_4 = 5;
pub const STOBJ_MF_PNL_ELECTRAP: _bindgen_ty_4 = 6;
pub const STOBJ_MF_BULLET_TEST: _bindgen_ty_4 = 7;
pub const STOBJ_MF_BOX: _bindgen_ty_4 = 8;
pub const STOBJ_BUMPER_BGSPECIAL: _bindgen_ty_4 = 9;
pub const STOBJ_NAMEENT_BTN: _bindgen_ty_4 = 10;
pub const STOBJ_BUTTON: _bindgen_ty_4 = 11;
pub const STOBJ_RETURNGATE: _bindgen_ty_4 = 12;
pub type _bindgen_ty_4 = ::core::ffi::c_uint;
pub type StobjType = undefined2;
pub type PVec = *mut Vec;
pub type PGmaModel = *mut GmaModel;
pub type PS16Vec = *mut S16Vec;
pub type s8 = ::core::ffi::c_schar;
pub const GCMF_ATTR_16BIT: _bindgen_ty_5 = 1;
pub const GCMF_ATTR_STITCHING_MODEL: _bindgen_ty_5 = 4;
pub const GCMF_ATTR_SKIN_MODEL: _bindgen_ty_5 = 8;
pub const GCMF_ATTR_EFFECTIVE_MODEL: _bindgen_ty_5 = 16;
pub type _bindgen_ty_5 = ::core::ffi::c_uint;
pub type GcmfAttributes = undefined4;
pub type u16_ = ushort;
pub type PGXTexObj = *mut GXTexObj;
pub type s16 = ::core::ffi::c_short;
pub const GX_TF_I4: _bindgen_ty_6 = 0;
pub const GX_TF_I8: _bindgen_ty_6 = 1;
pub const GX_TF_IA4: _bindgen_ty_6 = 2;
pub const GX_TF_IA8: _bindgen_ty_6 = 3;
pub const GX_TF_RGB565: _bindgen_ty_6 = 4;
pub const GX_TF_RGB5A3: _bindgen_ty_6 = 5;
pub const GX_TF_RGBA8: _bindgen_ty_6 = 6;
pub const GX_TF_CMPR: _bindgen_ty_6 = 14;
pub const GX_CTF_R4: _bindgen_ty_6 = 15;
pub const GX_CTF_RA4: _bindgen_ty_6 = 16;
pub const GX_CTF_RA8: _bindgen_ty_6 = 17;
pub const GX_CTF_YUVA8: _bindgen_ty_6 = 18;
pub const GX_CTF_A8: _bindgen_ty_6 = 19;
pub const GX_CTF_R8: _bindgen_ty_6 = 20;
pub const GX_CTF_G8: _bindgen_ty_6 = 21;
pub const GX_CTF_B8: _bindgen_ty_6 = 22;
pub const GX_CTF_RG8: _bindgen_ty_6 = 23;
pub const GX_CTF_GB8: _bindgen_ty_6 = 24;
pub const GX_TF_Z8: _bindgen_ty_6 = 25;
pub const GX_TF_Z16: _bindgen_ty_6 = 26;
pub const GX_TF_Z24X8: _bindgen_ty_6 = 27;
pub const GX_CTF_Z4: _bindgen_ty_6 = 28;
pub const GX_CTF_Z8M: _bindgen_ty_6 = 29;
pub const GX_CTF_Z8L: _bindgen_ty_6 = 30;
pub const GX_CTF_Z16L: _bindgen_ty_6 = 31;
pub const GX_TF_A8: _bindgen_ty_6 = 32;
pub type _bindgen_ty_6 = ::core::ffi::c_uint;
pub type GXTexFmt = undefined4;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct S16Vec {
    pub x: s16,
    pub y: s16,
    pub z: s16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GoalTape {
    pub field_0x0: [undefined; 4usize],
    pub field4_0x4: f32,
    pub field5_0x8: f32,
    pub field6_0xc: f32,
    pub g_timer_frames_remaining: s32,
    pub g_stobj_ptr: *mut Stobj,
    pub field9_0x18: f32,
    pub field10_0x1c: f32,
    pub field11_0x20: f32,
    pub field12_0x24: f32,
    pub field13_0x28: f32,
    pub field14_0x2c: f32,
    pub field15_0x30: f32,
    pub field16_0x34: f32,
    pub field17_0x38: f32,
    pub field18_0x3c: f32,
    pub field19_0x40: f32,
    pub field20_0x44: f32,
    pub field_0x48: [undefined; 328usize],
    pub field349_0x190: uint,
    pub field_0x194: [undefined; 4usize],
}
impl Default for GoalTape {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXTexObj {
    pub field_0x0: [undefined; 20usize],
    pub format: GXTexFmt,
    pub field_0x18: [undefined; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Vec {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PhysicsBall {
    pub flags: dword,
    pub pos: Vec,
    pub prev_pos: Vec,
    pub vel: Vec,
    pub radius: f32,
    pub acceleration: f32,
    pub restitution: f32,
    pub g_jerk: dword,
    pub field_0x38: [undefined; 12usize],
    pub g_some_vec: Vec,
    pub field_0x50: [undefined; 4usize],
    pub field25_0x54: dword,
    pub field26_0x58: f32,
    pub itemgroup_idx: dword,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Stobj {
    pub idx: word,
    pub id: ::core::ffi::c_short,
    pub type_: StobjType,
    pub field_0x6: [undefined; 2usize],
    pub g_some_bitflag: uint,
    pub g_mode: ::core::ffi::c_short,
    pub g_counter: ::core::ffi::c_short,
    pub g_model_origin: Vec,
    pub position: Vec,
    pub position_2: Vec,
    pub bounding_sphere_radius: f32,
    pub coli_func:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj, arg2: *mut PhysicsBall)>,
    pub scale: Vec,
    pub field14_0x48: f32,
    pub field15_0x4c: f32,
    pub field16_0x50: f32,
    pub model: *mut GmaModel,
    pub pos: Vec,
    pub vel: Vec,
    pub rot: S16Vec,
    pub field21_0x76: ::core::ffi::c_short,
    pub field22_0x78: ::core::ffi::c_short,
    pub field_0x7a: [undefined; 2usize],
    pub g_prev_pos: Vec,
    pub g_prev_rot: S16Vec,
    pub field_0x8e: [undefined; 2usize],
    pub field29_0x90: f32,
    pub field30_0x94: f32,
    pub field31_0x98: f32,
    pub field32_0x9c: f32,
    pub itemgroup_idx: s8,
    pub field_0xa1: [undefined; 3usize],
    pub extra_data: *mut ::core::ffi::c_void,
    pub g_some_pos2: Vec,
    pub g_local_position: Vec,
    pub g_local_velocity: Vec,
}
impl Default for Stobj {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GmaModel {
    pub gcmf_magic: [::core::ffi::c_char; 4usize],
    pub attrs: GcmfAttributes,
    pub bound_sphere_center: Vec,
    pub bound_sphere_radius: f32,
    pub tev_layer_count: u16_,
    pub opaque_shape_count: u16_,
    pub translucent_shape_count: u16_,
    pub mtx_count: s8,
    pub field_0x1f: [undefined; 1usize],
    pub header_size: s32,
    pub texobjs: *mut GXTexObj,
    pub mtx_indexes: [s8; 8usize],
    pub field_0x30: [undefined; 16usize],
}
impl Default for GmaModel {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PMenuScreen = *mut MenuScreen;
pub type PMenuEntry = *mut MenuEntry;
pub type u32_ = u32;
pub const MENUSCREEN_MODE_SELECT: _bindgen_ty_7 = 0;
pub const MENUSCREEN_PARTY_GAME_SELECT: _bindgen_ty_7 = 1;
pub const MENUSCREEN_OPTIONS: _bindgen_ty_7 = 2;
pub const MENUSCREEN_RETURN_TO_TITLE_SCREEN: _bindgen_ty_7 = 3;
pub const MENUSCREEN_NUMBER_OF_PLAYERS: _bindgen_ty_7 = 4;
pub const MENUSCREEN_CHARACTER_SELECT_1: _bindgen_ty_7 = 5;
pub const MENUSCREEN_CHARACTER_SELECT_2: _bindgen_ty_7 = 6;
pub const MENUSCREEN_MAIN_GAME_SELECT: _bindgen_ty_7 = 7;
pub const MENUSCREEN_LEVEL_SELECT_NOMASTER: _bindgen_ty_7 = 8;
pub const MENUSCREEN_LEVEL_SELECT_WITHMASTER: _bindgen_ty_7 = 9;
pub const MENUSCREEN_PRACTICE_STAGE_SELECT: _bindgen_ty_7 = 10;
pub const MENUSCREEN_CHALLENGE_GAMEPLAY_SETTINGS: _bindgen_ty_7 = 11;
pub const MENUSCREEN_STORY_MODE_SELECTED: _bindgen_ty_7 = 12;
pub const MENUSCREEN_CHALLENGE_DIFFICULTY: _bindgen_ty_7 = 13;
pub const MENUSCREEN_MONKEY_RACE_MODE_SELECT: _bindgen_ty_7 = 15;
pub const MENUSCREEN_MONKEY_RACE_COURSE_SELECT: _bindgen_ty_7 = 16;
pub const MENUSCREEN_REPLAY: _bindgen_ty_7 = 80;
pub const MENUSCREEN_PLAY_POINTS: _bindgen_ty_7 = 81;
pub const MENUSCREEN_GIFT: _bindgen_ty_7 = 82;
pub const MENUSCREEN_RANKING: _bindgen_ty_7 = 83;
pub const MENUSCREEN_GAME_DATA_SETTINGS: _bindgen_ty_7 = 84;
pub const MENUSCREEN_CONTROLLER_SETTINGS: _bindgen_ty_7 = 85;
pub const MENUSCREEN_SCREEN_SETTINGS: _bindgen_ty_7 = 86;
pub const MENUSCREEN_SOUND_SETTINGS: _bindgen_ty_7 = 87;
pub type _bindgen_ty_7 = ::core::ffi::c_uint;
pub type MenuScreenID = undefined1;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct MenuScreen {
    pub menu_entries: *mut MenuEntry,
    pub tick: *mut ::core::ffi::c_void,
    pub g_some_bitflag: u32_,
    pub field_0xc: [undefined; 4usize],
}
impl Default for MenuScreen {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct MenuEntry {
    pub next_screen_id: MenuScreenID,
    pub padding_0x1: [undefined; 3usize],
    pub name_en: *mut ::core::ffi::c_char,
    pub name_de: *mut ::core::ffi::c_char,
    pub name_fr: *mut ::core::ffi::c_char,
    pub name_es: *mut ::core::ffi::c_char,
    pub name_it: *mut ::core::ffi::c_char,
    pub name_ja: *mut ::core::ffi::c_char,
    pub description_en: *mut ::core::ffi::c_char,
    pub description_de: *mut ::core::ffi::c_char,
    pub description_fr: *mut ::core::ffi::c_char,
    pub description_es: *mut ::core::ffi::c_char,
    pub description_it: *mut ::core::ffi::c_char,
    pub description_ja: *mut ::core::ffi::c_char,
}
impl Default for MenuEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PBmpInfo = *mut BmpInfo;
pub type BOOL32 = ::core::ffi::c_int;
pub type PTplBuffer = *mut TplBuffer;
pub type OSHeapHandle = ::core::ffi::c_int;
pub type PTplTextureHeader = *mut TplTextureHeader;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TplBuffer {
    pub texture_count: s32,
    pub texture_headers: *mut TplTextureHeader,
    pub raw_tpl_buffer: *mut ::core::ffi::c_void,
    pub texobjs: *mut GXTexObj,
    pub field_0x10: [undefined; 16usize],
}
impl Default for TplBuffer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct BmpInfo {
    pub is_loaded: BOOL32,
    pub filepath: *mut ::core::ffi::c_char,
    pub category: *mut ::core::ffi::c_char,
    pub field_0xc: [undefined; 4usize],
    pub tpl: *mut TplBuffer,
    pub heap: OSHeapHandle,
}
impl Default for BmpInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TplTextureHeader {
    pub format: GXTexFmt,
    pub data_offset: dword,
    pub width: u16_,
    pub height: u16_,
    pub mipmap_count: u16_,
    pub always_0x1234: u16_,
}
pub type PCoinType = *mut CoinType;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CoinType {
    pub banana_count: s16,
    pub g_score_increment_flag: s16,
    pub g_score_value: s16,
    pub angular_velocity: S16Vec,
    pub field_0xc: [undefined; 8usize],
}
pub type PGMotionData = *mut GMotionData;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GMotionData {
    pub field_0x0: [undefined; 76usize],
    pub progress: f32,
    pub length: f32,
}
impl Default for GMotionData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const STAT_NULL: _bindgen_ty_8 = 0;
pub const STAT_INIT: _bindgen_ty_8 = 1;
pub const STAT_NORMAL: _bindgen_ty_8 = 2;
pub const STAT_DEST: _bindgen_ty_8 = 3;
pub const STAT_FREEZE: _bindgen_ty_8 = 4;
pub const STAT_INIT_FIRST: _bindgen_ty_8 = 5;
pub const STAT_GOAL_INIT: _bindgen_ty_8 = 6;
pub const STAT_GOAL: _bindgen_ty_8 = 7;
pub const STAT_RINGOUT_INIT: _bindgen_ty_8 = 8;
pub const STAT_RINGOUT: _bindgen_ty_8 = 9;
pub const STAT_MINI_MODE_0_INIT: _bindgen_ty_8 = 10;
pub const STAT_MINI_MODE_0: _bindgen_ty_8 = 11;
pub type _bindgen_ty_8 = ::core::ffi::c_uint;
pub type Status = undefined1;
pub type PGSomeBgStruct = *mut GSomeBgStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GSomeBgStruct {
    pub some_flag: u32_,
    pub bg_model_list: *mut ::core::ffi::c_char,
    pub field2_0x8: u32_,
    pub some_ptr_2: *mut u32_,
    pub field4_0x10: u32_,
    pub some_ptr_3: *mut u32_,
    pub field6_0x18: u32_,
    pub some_ptr_4: *mut u32_,
    pub field8_0x20: u32_,
    pub some_ptr_5: *mut u32_,
    pub some_counter: u32_,
    pub field11_0x2c: u32_,
}
impl Default for GSomeBgStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const SMD_ADV_TOP: _bindgen_ty_9 = 0;
pub const SMD_ADV_MOVIE_INIT: _bindgen_ty_9 = 1;
pub const SMD_ADV_MOVIE_RETURN: _bindgen_ty_9 = 2;
pub const SMD_ADV_LOGO_INIT: _bindgen_ty_9 = 3;
pub const SMD_ADV_LOGO_MAIN: _bindgen_ty_9 = 4;
pub const SMD_ADV_WARNING_INIT: _bindgen_ty_9 = 5;
pub const SMD_ADV_WARNING_MAIN: _bindgen_ty_9 = 6;
pub const SMD_ADV_DEMO_INIT: _bindgen_ty_9 = 7;
pub const SMD_ADV_DEMO_MAIN: _bindgen_ty_9 = 8;
pub const SMD_ADV_START_INIT: _bindgen_ty_9 = 9;
pub const SMD_ADV_START_MAIN: _bindgen_ty_9 = 10;
pub const SMD_ADV_RANKING_INIT: _bindgen_ty_9 = 11;
pub const SMD_ADV_RANKING_MAIN: _bindgen_ty_9 = 12;
pub const SMD_ADV_INFO_INIT: _bindgen_ty_9 = 13;
pub const SMD_ADV_INFO_MAIN: _bindgen_ty_9 = 14;
pub const SMD_ADV_GAME_READY_INIT: _bindgen_ty_9 = 15;
pub const SMD_ADV_GAME_READY_MAIN: _bindgen_ty_9 = 16;
pub const SMD_ADV_GAME_PLAY_INIT: _bindgen_ty_9 = 17;
pub const SMD_ADV_GAME_PLAY_MAIN: _bindgen_ty_9 = 18;
pub const SMD_ADV_TITLE_INIT: _bindgen_ty_9 = 19;
pub const SMD_ADV_TITLE_MAIN: _bindgen_ty_9 = 20;
pub const SMD_ADV_TITLE_REINIT: _bindgen_ty_9 = 21;
pub const SMD_ADV_PROG_INIT: _bindgen_ty_9 = 22;
pub const SMD_ADV_PROG_MAIN: _bindgen_ty_9 = 23;
pub const SMD_ADV_FIRST_LOGO_INIT: _bindgen_ty_9 = 24;
pub const SMD_ADV_FIRST_LOGO_MAIN: _bindgen_ty_9 = 25;
pub const SMD_ADV_DMY8: _bindgen_ty_9 = 26;
pub const SMD_ADV_BOTTOM: _bindgen_ty_9 = 27;
pub const SMD_SEL_TOP: _bindgen_ty_9 = 28;
pub const SMD_SEL_STAGE_INIT: _bindgen_ty_9 = 29;
pub const SMD_SEL_STAGE_MAIN: _bindgen_ty_9 = 30;
pub const SMD_SEL_NGC_INIT: _bindgen_ty_9 = 31;
pub const SMD_SEL_NGC_MAIN: _bindgen_ty_9 = 32;
pub const SMD_SEL_NGC_REINIT: _bindgen_ty_9 = 33;
pub const SMD_SEL_NGC_DEST: _bindgen_ty_9 = 34;
pub const SMD_SEL_DMY1: _bindgen_ty_9 = 35;
pub const SMD_SEL_DMY2: _bindgen_ty_9 = 36;
pub const SMD_SEL_DMY3: _bindgen_ty_9 = 37;
pub const SMD_SEL_DMY4: _bindgen_ty_9 = 38;
pub const SMD_SEL_DMY5: _bindgen_ty_9 = 39;
pub const SMD_SEL_DMY6: _bindgen_ty_9 = 40;
pub const SMD_SEL_DMY7: _bindgen_ty_9 = 41;
pub const SMD_SEL_DMY8: _bindgen_ty_9 = 42;
pub const SMD_SEL_DMY9: _bindgen_ty_9 = 43;
pub const SMD_SEL_DMYa: _bindgen_ty_9 = 44;
pub const SMD_SEL_DMYb: _bindgen_ty_9 = 45;
pub const SMD_SEL_BOTTOM: _bindgen_ty_9 = 46;
pub const SMD_GAME_TOP: _bindgen_ty_9 = 47;
pub const SMD_GAME_READY_INIT: _bindgen_ty_9 = 48;
pub const SMD_GAME_READY_MAIN: _bindgen_ty_9 = 49;
pub const SMD_GAME_PLAY_INIT: _bindgen_ty_9 = 50;
pub const SMD_GAME_PLAY_MAIN: _bindgen_ty_9 = 51;
pub const SMD_GAME_GOAL_INIT: _bindgen_ty_9 = 52;
pub const SMD_GAME_GOAL_MAIN: _bindgen_ty_9 = 53;
pub const SMD_GAME_GOAL_REPLAY_INIT: _bindgen_ty_9 = 54;
pub const SMD_GAME_GOAL_REPLAY_MAIN: _bindgen_ty_9 = 55;
pub const SMD_GAME_TIMEOVER_INIT: _bindgen_ty_9 = 56;
pub const SMD_GAME_TIMEOVER_MAIN: _bindgen_ty_9 = 57;
pub const SMD_GAME_RINGOUT_INIT: _bindgen_ty_9 = 58;
pub const SMD_GAME_RINGOUT_MAIN: _bindgen_ty_9 = 59;
pub const SMD_GAME_FIRST_INIT: _bindgen_ty_9 = 60;
pub const SMD_GAME_OVER_INIT: _bindgen_ty_9 = 61;
pub const SMD_GAME_OVER_MAIN: _bindgen_ty_9 = 62;
pub const SMD_GAME_NAMEENTRY_INIT: _bindgen_ty_9 = 63;
pub const SMD_GAME_NAMEENTRY_MAIN: _bindgen_ty_9 = 64;
pub const SMD_GAME_CONTINUE_INIT: _bindgen_ty_9 = 65;
pub const SMD_GAME_CONTINUE_MAIN: _bindgen_ty_9 = 66;
pub const SMD_GAME_RESTART_INIT: _bindgen_ty_9 = 67;
pub const SMD_GAME_NAMEENTRY_READY_INIT: _bindgen_ty_9 = 68;
pub const SMD_GAME_NAMEENTRY_READY_MAIN: _bindgen_ty_9 = 69;
pub const SMD_GAME_BONUS_CLEAR_INIT: _bindgen_ty_9 = 70;
pub const SMD_GAME_BONUS_CLEAR_MAIN: _bindgen_ty_9 = 71;
pub const SMD_GAME_ENDING_INIT: _bindgen_ty_9 = 72;
pub const SMD_GAME_ENDING_MAIN: _bindgen_ty_9 = 73;
pub const SMD_GAME_EXTRA_INIT: _bindgen_ty_9 = 74;
pub const SMD_GAME_EXTRA_WAIT: _bindgen_ty_9 = 75;
pub const SMD_GAME_RESULT_INIT: _bindgen_ty_9 = 76;
pub const SMD_GAME_RESULT_MAIN: _bindgen_ty_9 = 77;
pub const SMD_GAME_RESULT_MENU: _bindgen_ty_9 = 78;
pub const SMD_GAME_INTR_SEL_INIT: _bindgen_ty_9 = 79;
pub const SMD_GAME_INTR_SEL_MAIN: _bindgen_ty_9 = 80;
pub const SMD_GAME_OVER_SAVE: _bindgen_ty_9 = 81;
pub const SMD_GAME_OVER_DEST: _bindgen_ty_9 = 82;
pub const SMD_GAME_ROLL_INIT: _bindgen_ty_9 = 83;
pub const SMD_GAME_ROLL_MAIN: _bindgen_ty_9 = 84;
pub const SMD_GAME_OVER_POINT_INIT: _bindgen_ty_9 = 85;
pub const SMD_GAME_OVER_POINT_MAIN: _bindgen_ty_9 = 86;
pub const SMD_GAME_SCENARIO_INIT: _bindgen_ty_9 = 87;
pub const SMD_GAME_SCENARIO_MAIN: _bindgen_ty_9 = 88;
pub const SMD_GAME_SCENARIO_RETURN: _bindgen_ty_9 = 89;
pub const SMD_GAME_RETRY_INIT: _bindgen_ty_9 = 90;
pub const SMD_GAME_RETRY_MAIN: _bindgen_ty_9 = 91;
pub const SMD_GAME_FORCE_EXIT_INIT: _bindgen_ty_9 = 92;
pub const SMD_GAME_FORCE_EXIT_MAIN: _bindgen_ty_9 = 93;
pub const SMD_GAME_SCENSCNPLAY_RETURN: _bindgen_ty_9 = 94;
pub const SMD_GAME_FORCE_OVER_INIT: _bindgen_ty_9 = 95;
pub const SMD_GAME_FORCE_OVER_MAIN: _bindgen_ty_9 = 96;
pub const SMD_GAME_SUGG_SAVE_INIT: _bindgen_ty_9 = 97;
pub const SMD_GAME_SUGG_SAVE_MAIN: _bindgen_ty_9 = 98;
pub const SMD_GAME_DMY3: _bindgen_ty_9 = 99;
pub const SMD_GAME_DMY4: _bindgen_ty_9 = 100;
pub const SMD_GAME_DMY5: _bindgen_ty_9 = 101;
pub const SMD_GAME_DMY6: _bindgen_ty_9 = 102;
pub const SMD_GAME_DMY7: _bindgen_ty_9 = 103;
pub const SMD_GAME_DMY8: _bindgen_ty_9 = 104;
pub const SMD_GAME_DMY9: _bindgen_ty_9 = 105;
pub const SMD_GAME_DMYA: _bindgen_ty_9 = 106;
pub const SMD_GAME_DMYB: _bindgen_ty_9 = 107;
pub const SMD_GAME_DMYC: _bindgen_ty_9 = 108;
pub const SMD_GAME_DMYD: _bindgen_ty_9 = 109;
pub const SMD_GAME_DMYE: _bindgen_ty_9 = 110;
pub const SMD_GAME_DMYF: _bindgen_ty_9 = 111;
pub const SMD_GAME_BOTTOM: _bindgen_ty_9 = 112;
pub const SMD_TEST_TOP: _bindgen_ty_9 = 113;
pub const SMD_TEST_SELECT_INIT: _bindgen_ty_9 = 114;
pub const SMD_TEST_SELECT_MAIN: _bindgen_ty_9 = 115;
pub const SMD_TEST_INPUT_INIT: _bindgen_ty_9 = 116;
pub const SMD_TEST_INPUT_MAIN: _bindgen_ty_9 = 117;
pub const SMD_TEST_DIP_INIT: _bindgen_ty_9 = 118;
pub const SMD_TEST_DIP_MAIN: _bindgen_ty_9 = 119;
pub const SMD_TEST_SOUND_INIT: _bindgen_ty_9 = 120;
pub const SMD_TEST_SOUND_MAIN: _bindgen_ty_9 = 121;
pub const SMD_TEST_BLUR_INIT: _bindgen_ty_9 = 122;
pub const SMD_TEST_BLUR_MAIN: _bindgen_ty_9 = 123;
pub const SMD_TEST_SHADOW_INIT: _bindgen_ty_9 = 124;
pub const SMD_TEST_SHADOW_MAIN: _bindgen_ty_9 = 125;
pub const SMD_TEST_FOCUS_INIT: _bindgen_ty_9 = 126;
pub const SMD_TEST_FOCUS_MAIN: _bindgen_ty_9 = 127;
pub const SMD_TEST_INDIRECT_INIT: _bindgen_ty_9 = 128;
pub const SMD_TEST_INDIRECT_MAIN: _bindgen_ty_9 = 129;
pub const SMD_TEST_NLOBJPUT_INIT: _bindgen_ty_9 = 130;
pub const SMD_TEST_NLOBJPUT_MAIN: _bindgen_ty_9 = 131;
pub const SMD_TEST_BITMAP_INIT: _bindgen_ty_9 = 132;
pub const SMD_TEST_BITMAP_MAIN: _bindgen_ty_9 = 133;
pub const SMD_TEST_FONT_INIT: _bindgen_ty_9 = 134;
pub const SMD_TEST_FONT_MAIN: _bindgen_ty_9 = 135;
pub const SMD_TEST_REPLAY_INIT: _bindgen_ty_9 = 136;
pub const SMD_TEST_REPLAY_MAIN: _bindgen_ty_9 = 137;
pub const SMD_TEST_MOTION_INIT: _bindgen_ty_9 = 138;
pub const SMD_TEST_MOTION_MAIN: _bindgen_ty_9 = 139;
pub const SMD_TEST_ADVREPLAY_INIT: _bindgen_ty_9 = 140;
pub const SMD_TEST_MODEL_INIT: _bindgen_ty_9 = 141;
pub const SMD_TEST_MODEL_MAIN: _bindgen_ty_9 = 142;
pub const SMD_TEST_NEWMODEL_INIT: _bindgen_ty_9 = 143;
pub const SMD_TEST_NEWMODEL_MAIN: _bindgen_ty_9 = 144;
pub const SMD_TEST_PATTERN_INIT: _bindgen_ty_9 = 145;
pub const SMD_TEST_PATTERN_MAIN: _bindgen_ty_9 = 146;
pub const SMD_TEST_ROMFONT_INIT: _bindgen_ty_9 = 147;
pub const SMD_TEST_ROMFONT_MAIN: _bindgen_ty_9 = 148;
pub const SMD_TEST_PREREND_INIT: _bindgen_ty_9 = 149;
pub const SMD_TEST_PREREND_MAIN: _bindgen_ty_9 = 150;
pub const SMD_TEST_PREVIEW_INIT: _bindgen_ty_9 = 151;
pub const SMD_TEST_PREVIEW_MAIN: _bindgen_ty_9 = 152;
pub const SMD_TEST_ADX_INIT: _bindgen_ty_9 = 153;
pub const SMD_TEST_ADX_MAIN: _bindgen_ty_9 = 154;
pub const SMD_TEST_NEWMOTION_INIT: _bindgen_ty_9 = 155;
pub const SMD_TEST_NEWMOTION_MAIN: _bindgen_ty_9 = 156;
pub const SMD_TEST_ARAM_FONT_INIT: _bindgen_ty_9 = 157;
pub const SMD_TEST_ARAM_FONT_MAIN: _bindgen_ty_9 = 158;
pub const SMD_TEST_SCENE_PLAY_INIT: _bindgen_ty_9 = 159;
pub const SMD_TEST_SCENE_PLAY_MAIN: _bindgen_ty_9 = 160;
pub const SMD_TEST_DIALOG_INIT: _bindgen_ty_9 = 161;
pub const SMD_TEST_DIALOG_MAIN: _bindgen_ty_9 = 162;
pub const SMD_TEST_DIFFICULTY_INIT: _bindgen_ty_9 = 163;
pub const SMD_TEST_DIFFICULTY_MAIN: _bindgen_ty_9 = 164;
pub const SMD_TEST_CHK_REPSIZE_INIT: _bindgen_ty_9 = 165;
pub const SMD_TEST_CHK_REPSIZE_MAIN: _bindgen_ty_9 = 166;
pub const SMD_TEST_BOTTOM: _bindgen_ty_9 = 167;
pub const SMD_MINI_TOP: _bindgen_ty_9 = 168;
pub const SMD_MINI_SELECT_INIT: _bindgen_ty_9 = 169;
pub const SMD_MINI_SELECT_MAIN: _bindgen_ty_9 = 170;
pub const SMD_MINI_BOWLING_INIT: _bindgen_ty_9 = 171;
pub const SMD_MINI_BOWLING_MAIN: _bindgen_ty_9 = 172;
pub const SMD_MINI_BILLIARDS_INIT: _bindgen_ty_9 = 173;
pub const SMD_MINI_BILLIARDS_MAIN: _bindgen_ty_9 = 174;
pub const SMD_MINI_SHOOTING_INIT: _bindgen_ty_9 = 175;
pub const SMD_MINI_SHOOTING_MAIN: _bindgen_ty_9 = 176;
pub const SMD_MINI_REL_SAMPLE_INIT: _bindgen_ty_9 = 177;
pub const SMD_MINI_REL_SAMPLE_MAIN: _bindgen_ty_9 = 178;
pub const SMD_MINI_COMMEND_INIT: _bindgen_ty_9 = 179;
pub const SMD_MINI_COMMEND_MAIN: _bindgen_ty_9 = 180;
pub const SMD_MINI_RANKING_INIT: _bindgen_ty_9 = 181;
pub const SMD_MINI_RANKING_MAIN: _bindgen_ty_9 = 182;
pub const SMD_MINI_ENDING_INIT: _bindgen_ty_9 = 183;
pub const SMD_MINI_ENDING_MAIN: _bindgen_ty_9 = 184;
pub const SMD_MINI_RACE2_INIT: _bindgen_ty_9 = 185;
pub const SMD_MINI_RACE2_MAIN: _bindgen_ty_9 = 186;
pub const SMD_MINI_GOLF2_INIT: _bindgen_ty_9 = 187;
pub const SMD_MINI_GOLF2_MAIN: _bindgen_ty_9 = 188;
pub const SMD_MINI_FIGHT2_INIT: _bindgen_ty_9 = 189;
pub const SMD_MINI_FIGHT2_MAIN: _bindgen_ty_9 = 190;
pub const SMD_MINI_PILOT2_INIT: _bindgen_ty_9 = 191;
pub const SMD_MINI_PILOT2_MAIN: _bindgen_ty_9 = 192;
pub const SMD_MINI_BOAT_INIT: _bindgen_ty_9 = 193;
pub const SMD_MINI_BOAT_MAIN: _bindgen_ty_9 = 194;
pub const SMD_MINI_S_ROLL_INIT: _bindgen_ty_9 = 195;
pub const SMD_MINI_S_ROLL_MAIN: _bindgen_ty_9 = 196;
pub const SMD_MINI_FUTSAL_INIT: _bindgen_ty_9 = 197;
pub const SMD_MINI_FUTSAL_MAIN: _bindgen_ty_9 = 198;
pub const SMD_MINI_DOGFIGHT_INIT: _bindgen_ty_9 = 199;
pub const SMD_MINI_DOGFIGHT_MAIN: _bindgen_ty_9 = 200;
pub const SMD_MINI_BASEBALL_INIT: _bindgen_ty_9 = 201;
pub const SMD_MINI_BASEBALL_MAIN: _bindgen_ty_9 = 202;
pub const SMD_MINI_TENNIS_INIT: _bindgen_ty_9 = 203;
pub const SMD_MINI_TENNIS_MAIN: _bindgen_ty_9 = 204;
pub const SMD_MINI_DMY9: _bindgen_ty_9 = 205;
pub const SMD_MINI_DMY10: _bindgen_ty_9 = 206;
pub const SMD_MINI_DMY11: _bindgen_ty_9 = 207;
pub const SMD_MINI_DMY12: _bindgen_ty_9 = 208;
pub const SMD_MINI_BOTTOM: _bindgen_ty_9 = 209;
pub const SMD_OPTION_TOP: _bindgen_ty_9 = 210;
pub const SMD_OPTION_SELECT_INIT: _bindgen_ty_9 = 211;
pub const SMD_OPTION_SELECT_MAIN: _bindgen_ty_9 = 212;
pub const SMD_OPTION_SOUND_INIT: _bindgen_ty_9 = 213;
pub const SMD_OPTION_SOUND_MAIN: _bindgen_ty_9 = 214;
pub const SMD_OPTION_PAD_INIT: _bindgen_ty_9 = 215;
pub const SMD_OPTION_PAD_MAIN: _bindgen_ty_9 = 216;
pub const SMD_OPTION_MEMCARD_INIT: _bindgen_ty_9 = 217;
pub const SMD_OPTION_MEMCARD_MAIN: _bindgen_ty_9 = 218;
pub const SMD_OPTION_POINT_INIT: _bindgen_ty_9 = 219;
pub const SMD_OPTION_POINT_MAIN: _bindgen_ty_9 = 220;
pub const SMD_OPTION_RANKING_INIT: _bindgen_ty_9 = 221;
pub const SMD_OPTION_RANKING_MAIN: _bindgen_ty_9 = 222;
pub const SMD_OPTION_AUTOSAVE_INIT: _bindgen_ty_9 = 223;
pub const SMD_OPTION_AUTOSAVE_MAIN: _bindgen_ty_9 = 224;
pub const SMD_OPTION_REPLAY_INIT: _bindgen_ty_9 = 225;
pub const SMD_OPTION_REPLAY_MAIN: _bindgen_ty_9 = 226;
pub const SMD_OPTION_SEPARATE_INIT: _bindgen_ty_9 = 227;
pub const SMD_OPTION_SEPARATE_MAIN: _bindgen_ty_9 = 228;
pub const SMD_OPTION_REPLAY_PLAY_INIT: _bindgen_ty_9 = 229;
pub const SMD_OPTION_REPLAY_PLAY_MAIN: _bindgen_ty_9 = 230;
pub const SMD_OPTION_PAD_MENU_INIT: _bindgen_ty_9 = 231;
pub const SMD_OPTION_PAD_MENU_MAIN: _bindgen_ty_9 = 232;
pub const SMD_OPTION_PAD_VIB_INIT: _bindgen_ty_9 = 233;
pub const SMD_OPTION_PAD_VIB_MAIN: _bindgen_ty_9 = 234;
pub const SMD_OPTION_DMY0: _bindgen_ty_9 = 235;
pub const SMD_OPTION_DMY1: _bindgen_ty_9 = 236;
pub const SMD_OPTION_DMY2: _bindgen_ty_9 = 237;
pub const SMD_OPTION_DMY3: _bindgen_ty_9 = 238;
pub const SMD_OPTION_DMY4: _bindgen_ty_9 = 239;
pub const SMD_OPTION_DMY5: _bindgen_ty_9 = 240;
pub const SMD_OPTION_DMY6: _bindgen_ty_9 = 241;
pub const SMD_OPTION_DMY7: _bindgen_ty_9 = 242;
pub const SMD_OPTION_BOTTOM: _bindgen_ty_9 = 243;
pub const SMD_AUTHOR_TOP: _bindgen_ty_9 = 244;
pub const SMD_AUTHOR_SELECT_INIT: _bindgen_ty_9 = 245;
pub const SMD_AUTHOR_SELECT_MAIN: _bindgen_ty_9 = 246;
pub const SMD_AUTHOR_PLAY_INIT: _bindgen_ty_9 = 247;
pub const SMD_AUTHOR_PLAY_MAIN: _bindgen_ty_9 = 248;
pub const SMD_AUTHOR_PLAY_STORY_INIT: _bindgen_ty_9 = 249;
pub const SMD_AUTHOR_PLAY_FROM_SEL: _bindgen_ty_9 = 250;
pub const SMD_AUTHOR_PLAY_RET_SEL: _bindgen_ty_9 = 251;
pub const SMD_AUTHOR_PLAY_ENDING_INIT: _bindgen_ty_9 = 252;
pub const SMD_AUTHOR_DMY6: _bindgen_ty_9 = 253;
pub const SMD_AUTHOR_DMY7: _bindgen_ty_9 = 254;
pub const SMD_AUTHOR_BOTTOM: _bindgen_ty_9 = 255;
pub const SMD_EXOPT_TOP: _bindgen_ty_9 = 256;
pub const SMD_EXOPT_REPLAY_LOAD_INIT: _bindgen_ty_9 = 257;
pub const SMD_EXOPT_REPLAY_LOAD_MAIN: _bindgen_ty_9 = 258;
pub const SMD_EXOPT_REPLAY_INIT: _bindgen_ty_9 = 259;
pub const SMD_EXOPT_REPLAY_MAIN: _bindgen_ty_9 = 260;
pub const SMD_EXOPT_DMY5: _bindgen_ty_9 = 261;
pub const SMD_EXOPT_DMY6: _bindgen_ty_9 = 262;
pub const SMD_EXOPT_DMY7: _bindgen_ty_9 = 263;
pub const SMD_EXOPT_BOTTOM: _bindgen_ty_9 = 264;
pub const SMD_INVALID: _bindgen_ty_9 = 4294967295;
pub type _bindgen_ty_9 = ::core::ffi::c_uint;
pub type SubMode = undefined4;
pub const MD_ADV: _bindgen_ty_10 = 0;
pub const MD_SEL: _bindgen_ty_10 = 1;
pub const MD_GAME: _bindgen_ty_10 = 2;
pub const MD_TEST: _bindgen_ty_10 = 3;
pub const MD_MINI: _bindgen_ty_10 = 4;
pub const MD_OPTION: _bindgen_ty_10 = 5;
pub const MD_AUTHOR: _bindgen_ty_10 = 6;
pub const MD_EXOPT: _bindgen_ty_10 = 7;
pub const MD_INVALID: _bindgen_ty_10 = 4294967295;
pub type _bindgen_ty_10 = ::core::ffi::c_uint;
pub type MainMode = undefined4;
pub const DIP_NONE: _bindgen_ty_11 = 0;
pub const DIP_DEBUG: _bindgen_ty_11 = 1;
pub const DIP_DISP: _bindgen_ty_11 = 2;
pub const DIP_STCOLI: _bindgen_ty_11 = 4;
pub const DIP_TRIANGLE: _bindgen_ty_11 = 8;
pub const DIP_TAIKEN: _bindgen_ty_11 = 16;
pub const DIP_TIME_STOP: _bindgen_ty_11 = 32;
pub const DIP_NAMEENTRY: _bindgen_ty_11 = 64;
pub const DIP_FIX_WORLD: _bindgen_ty_11 = 128;
pub const DIP_TEST_CAM: _bindgen_ty_11 = 256;
pub const DIP_NO_INTR: _bindgen_ty_11 = 512;
pub const DIP_CAPTURE: _bindgen_ty_11 = 1024;
pub const DIP_PERF_ALWAYS: _bindgen_ty_11 = 2048;
pub const DIP_PLAY_STG_ALL: _bindgen_ty_11 = 4096;
pub const DIP_PLAY_PNT_x10: _bindgen_ty_11 = 8192;
pub const DIP_SARU_0: _bindgen_ty_11 = 16384;
pub const DIP_SWITCH15: _bindgen_ty_11 = 32768;
pub const DIP_ONLY24MB: _bindgen_ty_11 = 65536;
pub const DIP_SHADOW_DISP: _bindgen_ty_11 = 131072;
pub const DIP_SPRITE_OFF: _bindgen_ty_11 = 262144;
pub const DIP_SNDREQ_DISP: _bindgen_ty_11 = 524288;
pub const DIP_SE_VOL_RESET: _bindgen_ty_11 = 1048576;
pub const DIP_APE_FACEDIR: _bindgen_ty_11 = 2097152;
pub const DIP_SEL_ALL_CTRL: _bindgen_ty_11 = 4194304;
pub const DIP_APE_NUMBER: _bindgen_ty_11 = 8388608;
pub const DIP_1P_TEST_CAM: _bindgen_ty_11 = 16777216;
pub const DIP_PREVIEW_SAVE: _bindgen_ty_11 = 33554432;
pub const DIP_AUTHOR_DEBUG: _bindgen_ty_11 = 67108864;
pub const DIP_SWITCH27: _bindgen_ty_11 = 134217728;
pub const DIP_SOA: _bindgen_ty_11 = 268435456;
pub const DIP_TEST_TEAM: _bindgen_ty_11 = 536870912;
pub const DIP_NO_MINIMAP: _bindgen_ty_11 = 1073741824;
pub const DIP_NO_STAGE: _bindgen_ty_11 = 2147483648;
pub type _bindgen_ty_11 = ::core::ffi::c_uint;
pub type DipSwitch = undefined4;
pub type PReplay = *mut Replay;
pub type u8_ = uchar;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Replay {
    pub field_0x0: [undefined; 4usize],
    pub difficulty: u8_,
    pub floorNum: u8_,
    pub monkey: u8_,
    pub field_0x7: [undefined; 9usize],
    pub field16_0x10: u32_,
    pub field_0x14: [undefined; 4usize],
    pub g_stageTimeLimit1: s16,
    pub g_duration: s16,
    pub field_0x1c: [undefined; 2usize],
    pub goalId: s16,
    pub field_0x20: [undefined; 4usize],
    pub g_ballVelAtGoal: Vec,
    pub field_0x30: [undefined; 4usize],
    pub size: u32_,
    pub g_currFrame: s16,
    pub g_stageTimeLimit2: s16,
    pub initBallPos: Vec,
    pub ballDeltaXLo: *mut u8_,
    pub ballDeltaXHi: *mut u8_,
    pub ballDeltaYLo: *mut u8_,
    pub ballDeltaYHi: *mut u8_,
    pub ballDeltaZLo: *mut u8_,
    pub ballDeltaZHi: *mut u8_,
    pub ballRotXLo: *mut u8_,
    pub ballRotXHi: *mut u8_,
    pub ballRotYLo: *mut u8_,
    pub ballRotYHi: *mut u8_,
    pub ballRotZLo: *mut u8_,
    pub ballRotZHi: *mut u8_,
    pub sparkDirX: *mut u8_,
    pub sparkDirY: *mut u8_,
    pub sparkDirZ: *mut u8_,
    pub sparkIntensity: *mut u8_,
    pub coliFlags0: *mut u8_,
    pub coliFlags1: *mut u8_,
    pub coliFlags2: *mut u8_,
    pub coliFlags3: *mut u8_,
    pub stageTiltXLo: *mut u8_,
    pub stageTiltXHi: *mut u8_,
    pub stageTiltZLo: *mut u8_,
    pub stageTiltZHi: *mut u8_,
    pub field63_0xa8: [u8_; 4usize],
    pub playableItemgroupCount: s16,
    pub seesawCount: s16,
    pub playableItemgroupAnimFrames: *mut u8_,
    pub seesawState: *mut u8_,
}
impl Default for Replay {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PApe = *mut Ape;
pub type PSomeApeState = *mut SomeApeState;
pub type PMal = *mut Mal;
pub type PSKLRoot = *mut SKLRoot;
pub type PArcFileInfo = *mut ArcFileInfo;
pub type PSKLFile = *mut SKLFile;
pub type PGApeAnim = *mut GApeAnim;
pub type PGmaBuffer = *mut GmaBuffer;
pub const GAME_COMMON: _bindgen_ty_12 = 0;
pub const GAME_MAIN: _bindgen_ty_12 = 1;
pub const GAME_DUMMY1: _bindgen_ty_12 = 2;
pub const GAME_DUMMY2: _bindgen_ty_12 = 3;
pub const GAME_DUMMY3: _bindgen_ty_12 = 4;
pub const GAME_DUMMY4: _bindgen_ty_12 = 5;
pub const GAME_DUMMY5: _bindgen_ty_12 = 6;
pub const GAME_DUMMY6: _bindgen_ty_12 = 7;
pub const GAME_DUMMY7: _bindgen_ty_12 = 8;
pub const GAME_DUMMY8: _bindgen_ty_12 = 9;
pub const GAME_DUMMY9: _bindgen_ty_12 = 10;
pub const GAME_DUMMY10: _bindgen_ty_12 = 11;
pub const GAME_RACE: _bindgen_ty_12 = 12;
pub const GAME_FGT: _bindgen_ty_12 = 13;
pub const GAME_PILOT: _bindgen_ty_12 = 14;
pub const GAME_GOLF: _bindgen_ty_12 = 15;
pub const GAME_BOWL: _bindgen_ty_12 = 16;
pub const GAME_BILL: _bindgen_ty_12 = 17;
pub const GAME_BOAT: _bindgen_ty_12 = 18;
pub const GAME_DOGF: _bindgen_ty_12 = 19;
pub const GAME_TENNIS: _bindgen_ty_12 = 20;
pub const GAME_BBALL: _bindgen_ty_12 = 21;
pub const GAME_GUNS: _bindgen_ty_12 = 22;
pub const GAME_ADV: _bindgen_ty_12 = 23;
pub const GAME_SEL: _bindgen_ty_12 = 24;
pub const GAME_COMMEND: _bindgen_ty_12 = 25;
pub const GAME_SCENE1A: _bindgen_ty_12 = 26;
pub const GAME_SCENE1B: _bindgen_ty_12 = 27;
pub const GAME_SCENE2: _bindgen_ty_12 = 28;
pub const GAME_SCENE3: _bindgen_ty_12 = 29;
pub const GAME_SCENE4: _bindgen_ty_12 = 30;
pub const GAME_SCENE5: _bindgen_ty_12 = 31;
pub const GAME_SCENE6: _bindgen_ty_12 = 32;
pub const GAME_SCENE7: _bindgen_ty_12 = 33;
pub const GAME_SCENE8: _bindgen_ty_12 = 34;
pub const GAME_SCENE9: _bindgen_ty_12 = 35;
pub const GAME_SCENE10: _bindgen_ty_12 = 36;
pub const GAME_LASTSCENE: _bindgen_ty_12 = 37;
pub const GAME_ENDING1: _bindgen_ty_12 = 38;
pub const GAME_ENDING2: _bindgen_ty_12 = 39;
pub const GAME_ENDING3: _bindgen_ty_12 = 40;
pub const GAME_ENDING4: _bindgen_ty_12 = 41;
pub type _bindgen_ty_12 = ::core::ffi::c_uint;
pub type ApeGame = undefined2;
pub const FACE_BASE: _bindgen_ty_13 = 0;
pub const FACE_CLOSEEYE: _bindgen_ty_13 = 1;
pub const FACE_SMILE: _bindgen_ty_13 = 2;
pub const FACE_PISTOFF: _bindgen_ty_13 = 3;
pub const FACE_SOB: _bindgen_ty_13 = 4;
pub const FACE_SURPRISE: _bindgen_ty_13 = 5;
pub const FACE_TALK: _bindgen_ty_13 = 6;
pub const FACE_SMILETALK: _bindgen_ty_13 = 7;
pub const FACE_PISTOFFTALK: _bindgen_ty_13 = 8;
pub const FACE_SOBTALK: _bindgen_ty_13 = 9;
pub type _bindgen_ty_13 = ::core::ffi::c_uint;
pub type ApeFace = undefined2;
pub type PQuat = *mut Quat;
pub const LOD_HIGH: _bindgen_ty_14 = 0;
pub const LOD_MIDDLE: _bindgen_ty_14 = 1;
pub const LOD_LOW: _bindgen_ty_14 = 2;
pub const LOD_LOWEST: _bindgen_ty_14 = 3;
pub type _bindgen_ty_14 = ::core::ffi::c_uint;
pub type ApeLOD = undefined4;
pub type PSKLInfo = *mut SKLInfo;
pub type PgFloats = *mut gFloats;
pub type PARCHandle = *mut ARCHandle;
pub type PSKLBone = *mut SKLBone;
pub type Pg_thing = *mut g_thing;
pub type PGmaModelEntry = *mut GmaModelEntry;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Quat {
    pub x: f32_,
    pub y: f32_,
    pub z: f32_,
    pub w: f32_,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gFloats {
    pub field0_0x0: ::core::ffi::c_short,
    pub field1_0x2: ::core::ffi::c_short,
    pub field2_0x4: ::core::ffi::c_short,
    pub field3_0x6: ::core::ffi::c_short,
    pub vec3: Vec,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SKLRoot {
    pub bone_count: ushort,
    pub g_flag: ushort,
    pub g_some_float: f32,
    pub bones: *mut SKLInfo,
    pub rotation1: Quat,
    pub rotation2: Quat,
    pub g_bone_name: *mut ::core::ffi::c_char,
    pub translation: Vec,
    pub field_0x3c: [undefined; 4usize],
    pub float_thing1: gFloats,
    pub field_0x54: [undefined; 4usize],
    pub float_thing2: gFloats,
    pub field_0x6c: [undefined; 4usize],
    pub gBoneData: *mut SKLInfo,
    pub field_0x74: [undefined; 256usize],
}
impl Default for SKLRoot {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SomeApeState {
    pub g_chara_idx: u8_,
    pub field_0x1: [undefined; 7usize],
    pub g_buf5: *mut ::core::ffi::c_void,
    pub field_0xc: [undefined; 16usize],
    pub g_arc: *mut ArcFileInfo,
    pub field_0x20: [undefined; 8usize],
    pub g_buf3: *mut ::core::ffi::c_void,
    pub g_buf1: *mut ::core::ffi::c_void,
    pub g_buf2: *mut ::core::ffi::c_void,
    pub g_buf4: *mut ::core::ffi::c_void,
    pub field_0x38: [undefined; 40usize],
}
impl Default for SomeApeState {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SKLBone {
    pub parentNumber: ::core::ffi::c_short,
    pub g_maybe_flag: ::core::ffi::c_short,
    pub Rotation1: Quat,
    pub Rotation2: Quat,
    pub Translation: Vec,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SKLFile {
    pub bone_count: ::core::ffi::c_short,
    pub padding: undefined2,
    pub bone_section: SKLBone,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ArcFileInfo {
    pub Handle: *mut ARCHandle,
    pub startoffset: ::core::ffi::c_int,
    pub length: ::core::ffi::c_int,
}
impl Default for ArcFileInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct g_thing {
    pub field_0x0: [undefined; 8usize],
    pub Name: *mut ::core::ffi::c_char,
    pub field_0xc: [undefined; 28usize],
}
impl Default for g_thing {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GmaBuffer {
    pub model_count: s32,
    pub model_list_ptr: *mut ::core::ffi::c_void,
    pub model_entries: *mut GmaModelEntry,
    pub model_names_ptr: dword,
    pub g_initially_zero: dword,
    pub field_0x14: [undefined; 12usize],
}
impl Default for GmaBuffer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SKLInfo {
    pub bone_name: *mut ::core::ffi::c_char,
    pub g_flag: ::core::ffi::c_short,
    pub parentNumber: ::core::ffi::c_short,
    pub vec3f1: Vec,
    pub vec3f1_len: f32,
    pub vec3f1copy: Vec,
    pub g_float: f32,
    pub g_mtx1: Mtx,
    pub g_mtx2: undefined1,
    pub field_0x59: [undefined; 47usize],
    pub matrix: Mtx,
    pub vec3f3: Vec,
    pub field_0xc4: [undefined; 12usize],
    pub g_float2: f32,
    pub field_0xd4: [undefined; 160usize],
}
impl Default for SKLInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ARCHandle {
    pub arc_data: *mut ::core::ffi::c_void,
    pub g_first_node_offset: *mut ::core::ffi::c_void,
    pub c: s32,
    pub d: s32,
    pub e: s32,
    pub f: s32,
    pub g: s32,
}
impl Default for ARCHandle {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GApeAnim {
    pub field0_0x0: u8_,
    pub field_0x1: [undefined; 3usize],
    pub count: *mut g_thing,
    pub ape: *mut GApeAnim,
    pub field6_0xc: *mut s32,
    pub field_0x10: [undefined; 12usize],
    pub g_either_motion_or_skel2: s32,
    pub field_0x20: [undefined; 8usize],
}
impl Default for GApeAnim {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Ape {
    pub g_some_ape_state: *mut SomeApeState,
    pub common_mal: *mut Mal,
    pub game_mal: *mut ::core::ffi::c_void,
    pub frame_ptr: *mut SKLRoot,
    pub arc_location: *mut ArcFileInfo,
    pub g_some_ptr: f32,
    pub faceSKLStorage: *mut SKLRoot,
    pub faceSKLFile: *mut SKLFile,
    pub faceMTA: *mut ::core::ffi::c_void,
    pub handRSKLStorage: *mut SKLRoot,
    pub handRSKLFile: *mut SKLFile,
    pub handrMTA: *mut ::core::ffi::c_void,
    pub handLSKLStorage: *mut SKLRoot,
    pub handLSKLFile: *mut SKLFile,
    pub handlMTA: *mut ::core::ffi::c_void,
    pub tailSKLStorage: *mut SKLRoot,
    pub tailSKLFile: *mut SKLFile,
    pub animLengthBytes: *mut GApeAnim,
    pub g_some_skl: *mut SKLRoot,
    pub GMABuffer: *mut GmaBuffer,
    pub TPLBuffer: *mut TplBuffer,
    pub field21_0x54: undefined2,
    pub field_0x56: [undefined; 2usize],
    pub field24_0x58: undefined2,
    pub field_0x5a: [undefined; 2usize],
    pub anim_func: *mut ::core::ffi::c_void,
    pub float_0x60: f32,
    pub field_0x64: [undefined; 16usize],
    pub game: ApeGame,
    pub g_ape_variant: ::core::ffi::c_char,
    pub field_0x77: [undefined; 1usize],
    pub g_smth_with_game: ::core::ffi::c_int,
    pub field49_0x7c: undefined4,
    pub field50_0x80: undefined2,
    pub field_0x82: [undefined; 2usize],
    pub field53_0x84: ::core::ffi::c_short,
    pub chara_anim_type: u8_,
    pub g_anim_step: byte,
    pub ape_total_index: ::core::ffi::c_int,
    pub g_handr_short: ushort,
    pub g_handl_short: ushort,
    pub face: ApeFace,
    pub field_0x92: [undefined; 6usize],
    pub g_handl_float: f32,
    pub g_handr_float: f32,
    pub some_flag: ushort,
    pub some_flag_1: ushort,
    pub field_0xa4: [undefined; 4usize],
    pub g_some_length1: ::core::ffi::c_int,
    pub field75_0xac: ::core::ffi::c_int,
    pub field76_0xb0: f32,
    pub field77_0xb4: undefined4,
    pub field78_0xb8: undefined4,
    pub field79_0xbc: undefined4,
    pub field80_0xc0: ::core::ffi::c_int,
    pub g_frames1: [*mut ::core::ffi::c_void; 40usize],
    pub field82_0x164: *mut ::core::ffi::c_void,
    pub field83_0x168: *mut ::core::ffi::c_void,
    pub field84_0x16c: *mut ::core::ffi::c_void,
    pub field85_0x170: *mut ::core::ffi::c_void,
    pub field86_0x174: *mut ::core::ffi::c_void,
    pub field87_0x178: *mut ::core::ffi::c_void,
    pub field88_0x17c: *mut ::core::ffi::c_void,
    pub field89_0x180: *mut ::core::ffi::c_void,
    pub field90_0x184: *mut ::core::ffi::c_void,
    pub field91_0x188: *mut ::core::ffi::c_void,
    pub field92_0x18c: *mut ::core::ffi::c_void,
    pub field93_0x190: *mut ::core::ffi::c_void,
    pub field94_0x194: *mut ::core::ffi::c_void,
    pub field95_0x198: *mut ::core::ffi::c_void,
    pub field96_0x19c: *mut ::core::ffi::c_void,
    pub field97_0x1a0: *mut ::core::ffi::c_void,
    pub field98_0x1a4: *mut ::core::ffi::c_void,
    pub field99_0x1a8: *mut ::core::ffi::c_void,
    pub field100_0x1ac: *mut ::core::ffi::c_void,
    pub field101_0x1b0: *mut ::core::ffi::c_void,
    pub field102_0x1b4: *mut ::core::ffi::c_void,
    pub field103_0x1b8: *mut ::core::ffi::c_void,
    pub field104_0x1bc: *mut ::core::ffi::c_void,
    pub field_0x1c0: [undefined; 28usize],
    pub expression_models: [*mut ::core::ffi::c_void; 9usize],
    pub field_0x200: [undefined; 4usize],
    pub HandL_GHA_model: *mut ::core::ffi::c_void,
    pub HandL_PHA_model: *mut ::core::ffi::c_void,
    pub HandR_GHA_model: *mut ::core::ffi::c_void,
    pub HANDR_PHA_model: *mut ::core::ffi::c_void,
    pub float_0x214: f32,
    pub field143_0x218: ::core::ffi::c_short,
    pub field_0x21a: [undefined; 2usize],
    pub flag2: ::core::ffi::c_char,
    pub field_0x21d: [undefined; 3usize],
    pub flag3: uint,
    pub flag4: uint,
    pub field_0x228: [undefined; 20usize],
    pub field172_0x23c: undefined4,
    pub field173_0x240: undefined4,
    pub character: ::core::ffi::c_int,
    pub flag1: u32_,
    pub field176_0x24c: undefined4,
    pub field177_0x250: undefined4,
    pub field178_0x254: undefined4,
    pub pos: Vec,
    pub some_vec3: Vec,
    pub field181_0x270: undefined4,
    pub field182_0x274: undefined4,
    pub field183_0x278: undefined4,
    pub field184_0x27c: undefined4,
    pub scale: f32,
    pub field_0x284: [undefined; 4usize],
    pub chara_rotation: Quat,
    pub ape_index: ::core::ffi::c_int,
    pub field192_0x29c: undefined4,
    pub lod: ApeLOD,
    pub field194_0x2a4: undefined4,
    pub g_smth_w_velocity1: f32,
    pub g_smth_w_velocity2: f32,
    pub g_smth_w_velocity3: f32,
    pub g_smth_w_velocity4: f32,
    pub field199_0x2b8: undefined4,
    pub color_index: ::core::ffi::c_int,
    pub field_0x2c0: [undefined; 8usize],
    pub ball_idx: ::core::ffi::c_char,
    pub camera_visible_bitmask: byte,
    pub field_0x2ca: [undefined; 2usize],
    pub field213_0x2cc: f32,
    pub field214_0x2d0: f32,
    pub field215_0x2d4: f32,
    pub field216_0x2d8: f32,
    pub field217_0x2dc: f32,
    pub field218_0x2e0: f32,
    pub field219_0x2e4: f32,
    pub field220_0x2e8: f32,
    pub field221_0x2ec: f32,
}
impl Default for Ape {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Mal {
    pub field_0x0: [undefined; 33usize],
    pub g_some_count: u8_,
    pub field_0x22: [undefined; 14usize],
}
impl Default for Mal {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GmaModelEntry {
    pub model: *mut GmaModel,
    pub name: *mut ::core::ffi::c_char,
}
impl Default for GmaModelEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PCamera = *mut Camera;
pub type PVec2d = *mut Vec2d;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Vec2d {
    pub x: f32,
    pub y: f32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Camera {
    pub pos: Vec,
    pub pivot: Vec,
    pub rot: S16Vec,
    pub mode: u8_,
    pub submode: u8_,
    pub g_some_float: f32,
    pub g_some_bitflags: u16_,
    pub g_some_flag: u8_,
    pub g_some_flag2: u8_,
    pub g_some_float2: f32,
    pub g_some_float3: f32,
    pub fov: s16,
    pub next_fov: s16,
    pub aspect: f32,
    pub fov_tangent: f32,
    pub fov_cotangent: f32,
    pub near: f32,
    pub far: f32,
    pub viewport_pos: Vec2d,
    pub viewport_size: Vec2d,
    pub g_some_counter1: u16_,
    pub g_some_short: u16_,
    pub g_initial_pivot: Vec,
    pub g_spinin_value_1: f32,
    pub g_spinin_value_2: f32,
    pub field25_0x70: undefined2,
    pub field26_0x72: undefined2,
    pub field27_0x74: undefined2,
    pub field28_0x76: undefined2,
    pub field_0x78: [undefined; 4usize],
    pub g_final_pivot: Vec,
    pub field_0x88: [undefined; 8usize],
    pub field42_0x90: undefined2,
    pub field43_0x92: undefined2,
    pub field_0x94: [undefined; 8usize],
    pub vel: Vec,
    pub pivot_vel: Vec,
    pub g_pos_desire: Vec,
    pub g_pivot_x_rot: s16,
    pub field_0xc2: [undefined; 82usize],
    pub g_y_rot_vel: s16,
    pub field_0x116: [undefined; 2usize],
    pub g_some_goal_idx: undefined1,
    pub field_0x119: [undefined; 27usize],
    pub g_some_vec5: Vec,
    pub g_some_vec6: Vec,
    pub g_some_mtx1: Mtx,
    pub g_some_mtx2: Mtx,
    pub g_some_mtx3: Mtx,
    pub g_some_mtx4: Mtx,
    pub idx: u32_,
    pub field_0x210: [undefined; 124usize],
}
impl Default for Camera {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PRect = *mut Rect;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Rect {
    pub pos: Vec,
    pub rot: S16Vec,
    pub field_0x12: [undefined; 14usize],
    pub width: f32,
    pub height: f32,
}
pub type POrdTblNode = *mut OrdTblNode;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OrdTblNode {
    pub next: *mut OrdTblNode,
    pub draw_func: *mut ::core::ffi::c_void,
}
impl Default for OrdTblNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const CHALLENGE_MODE: _bindgen_ty_15 = 0;
pub const COMPETITION_MODE: _bindgen_ty_15 = 1;
pub const PRACTICE_MODE: _bindgen_ty_15 = 2;
pub const MONKEY_RACE: _bindgen_ty_15 = 3;
pub const MONKEY_FIGHT: _bindgen_ty_15 = 4;
pub const MONKEY_TARGET: _bindgen_ty_15 = 5;
pub const MONKEY_BILLIARDS: _bindgen_ty_15 = 6;
pub const MONKEY_BOWLING: _bindgen_ty_15 = 7;
pub const MONKEY_GOLF: _bindgen_ty_15 = 8;
pub const MONKEY_SHOT: _bindgen_ty_15 = 9;
pub const MONKEY_BOAT: _bindgen_ty_15 = 10;
pub const G_SPAWN_OPPOSITE_OF_STARTPOS: _bindgen_ty_15 = 11;
pub const MONKEY_SOCCER: _bindgen_ty_15 = 12;
pub const MONKEY_DOGFIGHT: _bindgen_ty_15 = 13;
pub const STORY_MODE: _bindgen_ty_15 = 14;
pub const MONKEY_BASEBALL: _bindgen_ty_15 = 15;
pub const MONKEY_TENNIS: _bindgen_ty_15 = 16;
pub type _bindgen_ty_15 = ::core::ffi::c_uint;
pub type MainGameMode = undefined4;
pub type PSprite = *mut Sprite;
pub const SPRT_TEXT: _bindgen_ty_16 = 0;
pub const SPRT_BMP: _bindgen_ty_16 = 1;
pub const SPRT_TEXTURE: _bindgen_ty_16 = 2;
pub type _bindgen_ty_16 = ::core::ffi::c_uint;
pub type SpriteType = undefined1;
pub const FONT_ASCII: _bindgen_ty_17 = 0;
pub const FONT_ASC_8x16: _bindgen_ty_17 = 1;
pub const FONT_ASC_12x12: _bindgen_ty_17 = 2;
pub const FONT_ASC_24x24: _bindgen_ty_17 = 3;
pub const FONT_ASC_16x16P: _bindgen_ty_17 = 4;
pub const FONT_ASC_16x16: _bindgen_ty_17 = 5;
pub const FONT_DMY03: _bindgen_ty_17 = 6;
pub const FONT_DMY04: _bindgen_ty_17 = 7;
pub const FONT_DMY05: _bindgen_ty_17 = 8;
pub const FONT_ASC_72x64: _bindgen_ty_17 = 9;
pub const FONT_DMY06: _bindgen_ty_17 = 10;
pub const FONT_DMY07: _bindgen_ty_17 = 11;
pub const FONT_DMY08: _bindgen_ty_17 = 12;
pub const FONT_DMY09: _bindgen_ty_17 = 13;
pub const FONT_DMY10: _bindgen_ty_17 = 14;
pub const FONT_DMY11: _bindgen_ty_17 = 15;
pub const FONT_DMY12: _bindgen_ty_17 = 16;
pub const FONT_DMY13: _bindgen_ty_17 = 17;
pub const FONT_DMY14: _bindgen_ty_17 = 18;
pub const FONT_DMY15: _bindgen_ty_17 = 19;
pub const FONT_DMY16: _bindgen_ty_17 = 20;
pub const FONT_ICON_SD: _bindgen_ty_17 = 21;
pub const FONT_ICON_SD2: _bindgen_ty_17 = 22;
pub const FONT_DMY20: _bindgen_ty_17 = 23;
pub const FONT_DMY21: _bindgen_ty_17 = 24;
pub const FONT_DMY22: _bindgen_ty_17 = 25;
pub const FONT_DMY23: _bindgen_ty_17 = 26;
pub const FONT_DMY_RNK00: _bindgen_ty_17 = 27;
pub const FONT_DMY_RNK01: _bindgen_ty_17 = 28;
pub const FONT_DMY_RNK02: _bindgen_ty_17 = 29;
pub const FONT_DMY_RNK03: _bindgen_ty_17 = 30;
pub const FONT_DMY_RNK04: _bindgen_ty_17 = 31;
pub const FONT_RNK_32x32: _bindgen_ty_17 = 32;
pub const FONT_RNK_NUM: _bindgen_ty_17 = 33;
pub const FONT_MINI_RNK: _bindgen_ty_17 = 34;
pub const FONT_SCORE_NUM: _bindgen_ty_17 = 35;
pub const FONT_DMY_RNK0: _bindgen_ty_17 = 36;
pub const FONT_DMY_RNK1: _bindgen_ty_17 = 37;
pub const FONT_DMY_RNK2: _bindgen_ty_17 = 38;
pub const FONT_DMY_RNK3: _bindgen_ty_17 = 39;
pub const FONT_DMY_RNK4: _bindgen_ty_17 = 40;
pub const FONT_DMY_RNK5: _bindgen_ty_17 = 41;
pub const FONT_DMY_RNK6: _bindgen_ty_17 = 42;
pub const FONT_DMY_RNK7: _bindgen_ty_17 = 43;
pub const FONT_DMY_RNK8: _bindgen_ty_17 = 44;
pub const FONT_DMY_RNK9: _bindgen_ty_17 = 45;
pub const FONT_DMY_RNKa: _bindgen_ty_17 = 46;
pub const FONT_DMY_RNKb: _bindgen_ty_17 = 47;
pub const FONT_DMY_RNKc: _bindgen_ty_17 = 48;
pub const FONT_DMY_RNKd: _bindgen_ty_17 = 49;
pub const FONT_DMY_RNKe: _bindgen_ty_17 = 50;
pub const FONT_DMY_RNKf: _bindgen_ty_17 = 51;
pub const FONT_SEL_CTRL_PORT: _bindgen_ty_17 = 52;
pub const FONT_SEL_CTRL_R: _bindgen_ty_17 = 53;
pub const FONT_SEL_CTRL_B: _bindgen_ty_17 = 54;
pub const FONT_SEL_CTRL_Y: _bindgen_ty_17 = 55;
pub const FONT_SEL_CTRL_G: _bindgen_ty_17 = 56;
pub const FONT_SEL_CTRL_SDW: _bindgen_ty_17 = 57;
pub const FONT_DMY42: _bindgen_ty_17 = 58;
pub const FONT_DMY43: _bindgen_ty_17 = 59;
pub const FONT_BWL_SCORE: _bindgen_ty_17 = 60;
pub const FONT_DMY50: _bindgen_ty_17 = 61;
pub const FONT_DMY51: _bindgen_ty_17 = 62;
pub const FONT_DMY52: _bindgen_ty_17 = 63;
pub const FONT_DMY53: _bindgen_ty_17 = 64;
pub const FONT_DMY54: _bindgen_ty_17 = 65;
pub const FONT_DMY55: _bindgen_ty_17 = 66;
pub const FONT_DMY56: _bindgen_ty_17 = 67;
pub const FONT_DMY57: _bindgen_ty_17 = 68;
pub const FONT_RAC_DMY01: _bindgen_ty_17 = 69;
pub const FONT_RAC_PLAYER: _bindgen_ty_17 = 70;
pub const FONT_RAC_RANK: _bindgen_ty_17 = 71;
pub const FONT_RAC_LAP_MARK_NUM: _bindgen_ty_17 = 72;
pub const FONT_RAC_LAP_NUM: _bindgen_ty_17 = 73;
pub const FONT_RAC_TIME_NUM: _bindgen_ty_17 = 74;
pub const FONT_RAC_LAP_MARK_NUM_S: _bindgen_ty_17 = 75;
pub const FONT_RAC_DMY08: _bindgen_ty_17 = 76;
pub const FONT_RAC_DMY09: _bindgen_ty_17 = 77;
pub const FONT_RAC_DMY10: _bindgen_ty_17 = 78;
pub const FONT_RAC_SPD_NUM: _bindgen_ty_17 = 79;
pub const FONT_RAC_DMY12: _bindgen_ty_17 = 80;
pub const FONT_RAC_DMY13: _bindgen_ty_17 = 81;
pub const FONT_TGT_PLAYER: _bindgen_ty_17 = 82;
pub const FONT_TGT_MSCORE: _bindgen_ty_17 = 83;
pub const FONT_TGT_SCORE: _bindgen_ty_17 = 84;
pub const FONT_TGT_SCORE_S: _bindgen_ty_17 = 85;
pub const FONT_TGT_SPEED: _bindgen_ty_17 = 86;
pub const FONT_TGT_ROUND: _bindgen_ty_17 = 87;
pub const FONT_TGT_ALT: _bindgen_ty_17 = 88;
pub const FONT_TGT_WIND: _bindgen_ty_17 = 89;
pub const FONT_DMY71: _bindgen_ty_17 = 90;
pub const FONT_DMY72: _bindgen_ty_17 = 91;
pub const FONT_DMY73: _bindgen_ty_17 = 92;
pub const FONT_NUM_NML_SCORE: _bindgen_ty_17 = 93;
pub const FONT_NUM_NML_TIME: _bindgen_ty_17 = 94;
pub const FONT_NUM_NML_TIME_S: _bindgen_ty_17 = 95;
pub const FONT_NUM_NML_SPEED: _bindgen_ty_17 = 96;
pub const FONT_NUM_NML_SARU: _bindgen_ty_17 = 97;
pub const FONT_ASC_NML_D5: _bindgen_ty_17 = 98;
pub const FONT_ASC_NML_D6: _bindgen_ty_17 = 99;
pub const FONT_ASC_NML_D7: _bindgen_ty_17 = 100;
pub const FONT_ASC_NML_D8: _bindgen_ty_17 = 101;
pub const FONT_ASC_NML_D9: _bindgen_ty_17 = 102;
pub const FONT_DMY79: _bindgen_ty_17 = 103;
pub const FONT_DMY7a: _bindgen_ty_17 = 104;
pub const FONT_DMY7b: _bindgen_ty_17 = 105;
pub const FONT_DMY7c: _bindgen_ty_17 = 106;
pub const FONT_DMY7d: _bindgen_ty_17 = 107;
pub const FONT_DMY7e: _bindgen_ty_17 = 108;
pub const FONT_DMY7f: _bindgen_ty_17 = 109;
pub const FONT_BOA_TIME_NUM: _bindgen_ty_17 = 110;
pub const FONT_BOA_DMY02: _bindgen_ty_17 = 111;
pub const FONT_BOA_RANK: _bindgen_ty_17 = 112;
pub const FONT_BOA_PLAYER: _bindgen_ty_17 = 113;
pub const FONT_BOA_SPD_NUM: _bindgen_ty_17 = 114;
pub const FONT_BOA_LAP_MARK_NUM: _bindgen_ty_17 = 115;
pub const FONT_BOA_LAP_MARK_NUM_S: _bindgen_ty_17 = 116;
pub const FONT_BOA_DMY08: _bindgen_ty_17 = 117;
pub const FONT_BOA_DMY09: _bindgen_ty_17 = 118;
pub const FONT_BOA_DMY10: _bindgen_ty_17 = 119;
pub const FONT_BOA_LAP_NUM: _bindgen_ty_17 = 120;
pub const FONT_BOA_DMY12: _bindgen_ty_17 = 121;
pub const FONT_BOA_DMY13: _bindgen_ty_17 = 122;
pub const FONT_BOA_DMY14: _bindgen_ty_17 = 123;
pub const FONT_BOA_DMY15: _bindgen_ty_17 = 124;
pub const FONT_BOA_DMY16: _bindgen_ty_17 = 125;
pub const FONT_DOG_SPEED: _bindgen_ty_17 = 126;
pub const FONT_DOG_SPEED_S: _bindgen_ty_17 = 127;
pub const FONT_DOG_MSCORE: _bindgen_ty_17 = 128;
pub const FONT_DOG_SCORE: _bindgen_ty_17 = 129;
pub const FONT_DOG_SCORE_M: _bindgen_ty_17 = 130;
pub const FONT_DOG_SCORE_S: _bindgen_ty_17 = 131;
pub const FONT_DOG_ROUND: _bindgen_ty_17 = 132;
pub const FONT_DOG_ALT: _bindgen_ty_17 = 133;
pub const FONT_DOG_RESULT: _bindgen_ty_17 = 134;
pub const FONT_DOG_TIME: _bindgen_ty_17 = 135;
pub const FONT_DOG_DMY02: _bindgen_ty_17 = 136;
pub const FONT_DOG_DMY03: _bindgen_ty_17 = 137;
pub const FONT_DOG_DMY04: _bindgen_ty_17 = 138;
pub const FONT_DOG_DMY05: _bindgen_ty_17 = 139;
pub const FONT_JAP_TAG: _bindgen_ty_17 = 140;
pub const FONT_JAP_DMY: _bindgen_ty_17 = 141;
pub const FONT_JAP_24x24_2: _bindgen_ty_17 = 142;
pub const FONT_JAP_24x24_2P: _bindgen_ty_17 = 143;
pub const FONT_JAP_24x24_I: _bindgen_ty_17 = 144;
pub type _bindgen_ty_17 = ::core::ffi::c_uint;
pub type Font8 = undefined1;
pub const ALIGN_LOWER_RIGHT: _bindgen_ty_18 = 0;
pub const ALIGN_CENTER_RIGHT: _bindgen_ty_18 = 1;
pub const ALIGN_UPPER_RIGHT: _bindgen_ty_18 = 2;
pub const ALIGN_LOWER_CENTER: _bindgen_ty_18 = 3;
pub const ALIGN_CENTER: _bindgen_ty_18 = 4;
pub const ALIGN_UPPER_CENTER: _bindgen_ty_18 = 5;
pub const ALIGN_LOWER_LEFT: _bindgen_ty_18 = 6;
pub const ALIGN_CENTER_LEFT: _bindgen_ty_18 = 7;
pub const ALIGN_UPPER_LEFT: _bindgen_ty_18 = 8;
pub type _bindgen_ty_18 = ::core::ffi::c_uint;
pub type SpriteAlignment = undefined1;
pub type PRgb24 = *mut Rgb24;
pub const SPRITE_PRESS_START: _bindgen_ty_19 = 1;
pub const SPRITE_LOGO: _bindgen_ty_19 = 3;
pub const SPRITE_PAUSE_MENU: _bindgen_ty_19 = 4;
pub const SPRITE_HOW_TO: _bindgen_ty_19 = 10;
pub const SPRITE_SPECIAL_STAGE: _bindgen_ty_19 = 14;
pub const SPRITE_LOADIN_STAGE_NAME: _bindgen_ty_19 = 15;
pub const SPRITE_1UP: _bindgen_ty_19 = 16;
pub const SPRITE_SARU_CONTROL_DESCRIPTION: _bindgen_ty_19 = 17;
pub const SPRITE_BANANA_ICON: _bindgen_ty_19 = 21;
pub const SPRITE_HUD_STAGE_NAME: _bindgen_ty_19 = 34;
pub const SPRITE_HUD_STAGE_NUMBER: _bindgen_ty_19 = 35;
pub const SPRITE_COPYRIGHT_TEXT_1: _bindgen_ty_19 = 37;
pub const SPRITE_COPYRIGHT_TEXT_2: _bindgen_ty_19 = 38;
pub const SPRITE_COPYRIGHT_TEXT_3: _bindgen_ty_19 = 39;
pub const SPRITE_DEMO_MES: _bindgen_ty_19 = 58;
pub const SPRITE_HUD_KIWAKU_WORLD: _bindgen_ty_19 = 112;
pub const SPRITE_TITLE: _bindgen_ty_19 = 113;
pub type _bindgen_ty_19 = ::core::ffi::c_uint;
pub type SpriteUniqueID = undefined1;
pub type PSpriteTex = *mut SpriteTex;
pub type PDVDFileInfo = *mut DVDFileInfo;
pub type PDVDCommandBlock = *mut DVDCommandBlock;
pub type PDVDDiskID = *mut DVDDiskID;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Rgb24 {
    pub red: u8_,
    pub green: u8_,
    pub blue: u8_,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Sprite {
    pub type_: SpriteType,
    pub font: Font8,
    pub index: u8_,
    pub alignment: SpriteAlignment,
    pub pos: Vec2d,
    pub mult_color: Rgb24,
    pub unique_id: SpriteUniqueID,
    pub g_counter: s16,
    pub widescreen_translation_x: s16,
    pub field_0x14: [undefined; 6usize],
    pub horizontal_spacing: u8_,
    pub vertical_spacing: u8_,
    pub field_0x1c: [undefined; 4usize],
    pub field21_0x20: f32,
    pub field22_0x24: undefined4,
    pub field_0x28: [undefined; 4usize],
    pub tex: *mut SpriteTex,
    pub dest_func: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Sprite)>,
    pub tick_func: ::core::option::Option<unsafe extern "C" fn(arg1: *mut u8_, arg2: *mut Sprite)>,
    pub disp_func: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Sprite)>,
    pub bmp: undefined2,
    pub field_0x3e: [undefined; 2usize],
    pub width: f32,
    pub height: f32,
    pub depth: f32,
    pub para1: s32,
    pub para2: s32,
    pub para3: s32,
    pub fpara1: f32_,
    pub fpara2: f32_,
    pub fpara3: f32_,
    pub prev_sprite: *mut Sprite,
    pub next_sprite: *mut Sprite,
    pub g_maybe_pos_x: undefined4,
    pub g_maybe_pos_y: undefined4,
    pub field47_0x74: undefined4,
    pub field48_0x78: undefined4,
    pub field_0x7c: [undefined; 4usize],
    pub alpha: f32,
    pub add_color: Rgb24,
    pub field_0x87: [undefined; 1usize],
    pub g_flags1: u32_,
    pub g_flags2: u32_,
    pub u1: f32_,
    pub v1: f32_,
    pub u2: f32_,
    pub v2: f32_,
    pub text: [::core::ffi::c_char; 48usize],
}
impl Default for Sprite {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DVDCommandBlock {
    pub next: *mut DVDCommandBlock,
    pub prev: *mut DVDCommandBlock,
    pub command: u32_,
    pub state: s32,
    pub offset: u32_,
    pub length: u32_,
    pub addr: *mut ::core::ffi::c_void,
    pub currTransferSize: u32_,
    pub transferredSize: u32_,
    pub id: *mut DVDDiskID,
    pub callback:
        ::core::option::Option<unsafe extern "C" fn(arg1: s32, arg2: *mut DVDCommandBlock)>,
    pub userData: *mut ::core::ffi::c_void,
}
impl Default for DVDCommandBlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DVDFileInfo {
    pub cb: DVDCommandBlock,
    pub startAddr: u32_,
    pub length: u32_,
    pub next: *mut DVDFileInfo,
    pub callback: ::core::option::Option<unsafe extern "C" fn(arg1: s32, arg2: *mut DVDFileInfo)>,
}
impl Default for DVDFileInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DVDDiskID {
    pub gameName: [::core::ffi::c_char; 4usize],
    pub company: [::core::ffi::c_char; 2usize],
    pub diskNumber: u8_,
    pub gameVersion: u8_,
    pub streaming: u8_,
    pub streamingBufSize: u8_,
    pub padding: [u8_; 22usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteTex {
    pub field0_0x0: u8_,
    pub field1_0x1: s8,
    pub field2_0x2: u16_,
    pub tex_index: s32,
    pub texobj: GXTexObj,
    pub tex_data: *mut ::core::ffi::c_void,
    pub tex_data_size: u32_,
    pub width: u16_,
    pub height: u16_,
    pub format: GXTexFmt,
    pub heap: OSHeapHandle,
    pub dvd_file: DVDFileInfo,
}
impl Default for SpriteTex {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PHeapConfig = *mut HeapConfig;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct HeapConfig {
    pub stage_heap_size: u32_,
    pub bg_heap_size: u32_,
    pub chara_heap_size: u32_,
    pub replay_heap_size: u32_,
    pub flags: u32_,
}
pub type PGSomethingWithPadMotorsStruct = *mut GSomethingWithPadMotorsStruct;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GSomethingWithPadMotorsStruct {
    pub a: undefined1,
    pub field_0x1: [undefined; 1usize],
    pub b: undefined2,
}
pub type PSpriteDrawRequest = *mut SpriteDrawRequest;
pub const SDRF_G_SCREENFADE_RELATED: _bindgen_ty_20 = 262144;
pub const SDRF_FLIP_X: _bindgen_ty_20 = 524288;
pub const SDRF_FLIP_Y: _bindgen_ty_20 = 1048576;
pub const SDRF_G_ID_FORMAT_RELATED: _bindgen_ty_20 = 4194304;
pub const SDRF_G_X_SCALE_RELATED: _bindgen_ty_20 = 16777216;
pub type _bindgen_ty_20 = ::core::ffi::c_uint;
pub type SpriteDrawReqFlags = undefined4;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SpriteDrawRequest {
    pub id: s32,
    pub pos: Vec,
    pub scale: Vec2d,
    pub u1: f32,
    pub v1: f32,
    pub u2: f32,
    pub v2: f32,
    pub rot_z: s32,
    pub alpha: f32,
    pub g_unk1: s32,
    pub flags: SpriteDrawReqFlags,
    pub mult_color: u32_,
    pub add_color: u32_,
    pub widescreen_translation_x: s16,
    pub field_0x42: [undefined; 14usize],
}
pub type PCmPlayerProgress = *mut CmPlayerProgress;
pub type PCmStage = *mut CmStage;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CmStage {
    pub stage_course_num: s32,
    pub stage_id: s32,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CmPlayerProgress {
    pub curr_stage: CmStage,
    pub next_stages: [CmStage; 3usize],
    pub field2_0x20: s16,
    pub g_next_stage_idx: s16,
}
pub const PAD_ERR_NONE: _bindgen_ty_21 = 0;
pub const PAD_ERR_TRANSFER: _bindgen_ty_21 = 253;
pub const PAD_ERR_NOT_READY: _bindgen_ty_21 = 254;
pub const PAD_ERR_NO_CONTROLLER: _bindgen_ty_21 = 255;
pub type _bindgen_ty_21 = ::core::ffi::c_uint;
pub type PadError = undefined1;
pub type PGoalBag = *mut GoalBag;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GoalBag {
    pub field_0x0: [undefined; 4usize],
    pub field4_0x4: undefined4,
    pub field5_0x8: undefined4,
    pub stobj: *mut Stobj,
    pub g_pos: Vec,
    pub field_0x1c: [undefined; 8usize],
    pub field16_0x24: undefined4,
}
impl Default for GoalBag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PWorldInfo = *mut WorldInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct WorldInfo {
    pub stage_tilt_x: s16,
    pub stage_tilt_z: s16,
    pub field_0x4: [undefined; 56usize],
}
impl Default for WorldInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const RETURN_WIDTH: _bindgen_ty_22 = 0;
pub const RETURN_CHARACTER_COUNT: _bindgen_ty_22 = 1;
pub const G_RETURN_SOME_BOOL: _bindgen_ty_22 = 2;
pub const RETURN_LINE_COUNT: _bindgen_ty_22 = 3;
pub const G_LOAD_ARAM_FONT: _bindgen_ty_22 = 4;
pub const G_LOAD_ARAM_FONT_2: _bindgen_ty_22 = 5;
pub type _bindgen_ty_22 = ::core::ffi::c_uint;
pub type TextdrawCharaLoadReturnParameter = undefined1;
pub type PSeesawInfo = *mut SeesawInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SeesawInfo {
    pub itemgroup_idx: ::core::ffi::c_short,
    pub g_type: word,
    pub state: *mut SeesawState,
    pub init_func: *mut ::core::ffi::c_void,
    pub dest_func: *mut ::core::ffi::c_void,
    pub tick_func: *mut ::core::ffi::c_void,
    pub coli_func: *mut ::core::ffi::c_void,
    pub g_some_func5: *mut ::core::ffi::c_void,
    pub g_replay_func: *mut ::core::ffi::c_void,
}
impl Default for SeesawInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PGSoundCue = *mut GSoundCue;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GSoundCue {
    pub g_sfx_id: ::core::ffi::c_short,
    pub g_sfx_rid: ::core::ffi::c_short,
    pub field2_0x4: ::core::ffi::c_char,
    pub g_sfx_pan: byte,
    pub g_sfx_span: ::core::ffi::c_char,
    pub g_sfx_grp: ::core::ffi::c_char,
    pub player_id: ::core::ffi::c_int,
}
pub const DATA_SELECT: _bindgen_ty_23 = 0;
pub const STAGE_SELECT_PRE_INTRO_SEQUENCE: _bindgen_ty_23 = 1;
pub const STAGE_SELECT_INTRO_SEQUENCE: _bindgen_ty_23 = 2;
pub const STAGE_SELECT_IDLE: _bindgen_ty_23 = 4;
pub const STAGE_SELECTED: _bindgen_ty_23 = 6;
pub type _bindgen_ty_23 = ::core::ffi::c_uint;
pub type StoryModeStageSelectState = undefined2;
pub type PGCachedFileEntry = *mut GCachedFileEntry;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GCachedFileEntry {
    pub field_0x0: [undefined; 4usize],
    pub dvd_entrynum: ::core::ffi::c_int,
    pub next: *mut DVDCommandBlock,
    pub prev: *mut DVDCommandBlock,
}
impl Default for GCachedFileEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const MF_NONE: _bindgen_ty_24 = 0;
pub const MF_0x1: _bindgen_ty_24 = 1;
pub const MF_0x2: _bindgen_ty_24 = 2;
pub const MF_0x4: _bindgen_ty_24 = 4;
pub const MF_PLAYING_EXTRA_COURSE: _bindgen_ty_24 = 8;
pub const MF_PLAYING_MASTER_NOEX_COURSE: _bindgen_ty_24 = 16;
pub const MF_0x20: _bindgen_ty_24 = 32;
pub const MF_ADDITIONAL_REL_LOADED: _bindgen_ty_24 = 512;
pub const MG_G_NO_BANANAS: _bindgen_ty_24 = 4096;
pub const MF_0x2000: _bindgen_ty_24 = 8192;
pub const MF_OPTION_MODE: _bindgen_ty_24 = 262144;
pub const MF_G_STOP_GAME_LOOP: _bindgen_ty_24 = 2097152;
pub const MF_0x400000: _bindgen_ty_24 = 4194304;
pub const MF_PLAYING_MASTER_EX_COURSE: _bindgen_ty_24 = 8388608;
pub const MF_G_PLAYING_MASTER_COURSE: _bindgen_ty_24 = 33554432;
pub type _bindgen_ty_24 = ::core::ffi::c_uint;
pub type ModeFlag = undefined4;
pub type PGSomeSpriteStruct = *mut GSomeSpriteStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GSomeSpriteStruct {
    pub g_some_sprite: *mut Sprite,
    pub g_prev: *mut GSomeSpriteStruct,
    pub g_next: *mut GSomeSpriteStruct,
}
impl Default for GSomeSpriteStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PItem = *mut Item;
pub const ITEM_COIN: _bindgen_ty_25 = 0;
pub const ITEM_FGT_BANANA: _bindgen_ty_25 = 1;
pub const ITEM_MINI_RACE: _bindgen_ty_25 = 2;
pub const ITEM_FGT_POWER: _bindgen_ty_25 = 3;
pub const ITEM_FGT_PUNCH: _bindgen_ty_25 = 4;
pub const ITEM_PILOT: _bindgen_ty_25 = 5;
pub const ITEM_DOGFIGHT: _bindgen_ty_25 = 6;
pub const ITEM_TMP001: _bindgen_ty_25 = 7;
pub const ITEM_TMP002: _bindgen_ty_25 = 8;
pub const ITEM_TMP003: _bindgen_ty_25 = 9;
pub const ITEM_TMP004: _bindgen_ty_25 = 10;
pub const ITEM_TMP005: _bindgen_ty_25 = 11;
pub const ITEM_TMP006: _bindgen_ty_25 = 12;
pub const ITEM_TMP007: _bindgen_ty_25 = 13;
pub const ITEM_TMP008: _bindgen_ty_25 = 14;
pub const ITEM_TMP009: _bindgen_ty_25 = 15;
pub const ITEM_TMP010: _bindgen_ty_25 = 16;
pub const ITEM_TMP011: _bindgen_ty_25 = 17;
pub const ITEM_TMP012: _bindgen_ty_25 = 18;
pub const ITEM_TMP013: _bindgen_ty_25 = 19;
pub const ITEM_TMP014: _bindgen_ty_25 = 20;
pub const ITEM_TMP015: _bindgen_ty_25 = 21;
pub const ITEM_TMP016: _bindgen_ty_25 = 22;
pub type _bindgen_ty_25 = ::core::ffi::c_uint;
pub type ItemType = undefined2;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Item {
    pub index: word,
    pub id: ::core::ffi::c_short,
    pub type_: ItemType,
    pub coin_type: s16,
    pub g_some_bitfield: u32_,
    pub field5_0xc: undefined2,
    pub g_some_flag: undefined2,
    pub field7_0x10: ::core::ffi::c_short,
    pub g_some_flag2: undefined2,
    pub scale: f32,
    pub field10_0x18: f32,
    pub g_something_with_gma_model: *mut undefined,
    pub position: Vec,
    pub velocity: Vec,
    pub rotation: S16Vec,
    pub angular_velocity: S16Vec,
    pub g_position_copy: Vec,
    pub g_rotation_copy: S16Vec,
    pub field_0x56: [undefined; 2usize],
    pub item_coli_func:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut Item, arg2: *mut PhysicsBall)>,
    pub itemgroup_idx: u8_,
    pub field_0x5d: [undefined; 1usize],
    pub g_some_frame_counter: s16,
    pub g_some_vec3f_ptr: *mut Vec,
    pub field25_0x64: undefined4,
    pub model_ptr: *mut GmaModel,
    pub field27_0x6c: f32,
    pub negative_y_rotation: s16,
    pub field_0x72: [undefined; 2usize],
    pub field31_0x74: f32,
    pub g_something_with_shadow_disp: f32,
    pub shadow_scale: Vec,
    pub shadow_intensity: f32,
    pub g_position_copy_2: Vec,
    pub g_some_flag_2: u32_,
    pub shadow_position: Vec,
    pub g_something_with_shadows: Vec,
}
impl Default for Item {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BGM_SEL_WORLD: _bindgen_ty_26 = 0;
pub const BGM_CAVE: _bindgen_ty_26 = 1;
pub const BGM_SEL_FUTSAL: _bindgen_ty_26 = 2;
pub const BGM_FUTSAL: _bindgen_ty_26 = 3;
pub const BGM_WATER: _bindgen_ty_26 = 4;
pub const BGM_SEL_DEF: _bindgen_ty_26 = 5;
pub const BGM_NABE: _bindgen_ty_26 = 6;
pub const BGM_JUNGLE: _bindgen_ty_26 = 7;
pub const BGM_BOAT: _bindgen_ty_26 = 8;
pub const BGM_BILI: _bindgen_ty_26 = 9;
pub const BGM_SEL_BOWLING: _bindgen_ty_26 = 10;
pub const BGM_SEL_GOLF: _bindgen_ty_26 = 11;
pub const BGM_CONTINUE: _bindgen_ty_26 = 12;
pub const BGM_OVER: _bindgen_ty_26 = 13;
pub const BGM_FIGHT: _bindgen_ty_26 = 14;
pub const BGM_SEL_FIGHT: _bindgen_ty_26 = 15;
pub const BGM_COLONY: _bindgen_ty_26 = 16;
pub const BGM_BILL_FOUL: _bindgen_ty_26 = 17;
pub const BGM_BILL_LOSE: _bindgen_ty_26 = 18;
pub const BGM_BILL_SENKOU: _bindgen_ty_26 = 19;
pub const BGM_BILL_WIN: _bindgen_ty_26 = 20;
pub const BGM_BOWL_MISS: _bindgen_ty_26 = 21;
pub const BGM_BOWL_NORMAL: _bindgen_ty_26 = 22;
pub const BGM_BOWL_PERFECT: _bindgen_ty_26 = 23;
pub const BGM_BOWL_SPARE: _bindgen_ty_26 = 24;
pub const BGM_BOWL_STRIKE: _bindgen_ty_26 = 25;
pub const BGM_BOWL_TURKEY: _bindgen_ty_26 = 26;
pub const BGM_FIGHT_WIN: _bindgen_ty_26 = 27;
pub const BGM_GOLF_BIRDIE: _bindgen_ty_26 = 28;
pub const BGM_GOLF_BOGIE: _bindgen_ty_26 = 29;
pub const BGM_GOLF_GIVEUP1: _bindgen_ty_26 = 30;
pub const BGM_GOLF_HOLEIN1: _bindgen_ty_26 = 31;
pub const BGM_GOLF_OB: _bindgen_ty_26 = 32;
pub const BGM_GOLF_PAR: _bindgen_ty_26 = 33;
pub const BGM_RACE_LOSE: _bindgen_ty_26 = 34;
pub const BGM_RACE_WIN: _bindgen_ty_26 = 35;
pub const BGM_TAG_MISS: _bindgen_ty_26 = 36;
pub const BGM_TAG_SCORE_HI: _bindgen_ty_26 = 37;
pub const BGM_TAG_SCORE_NML: _bindgen_ty_26 = 38;
pub const BGM_TAG_SCORE_SP: _bindgen_ty_26 = 39;
pub const BGM_AVLOGO: _bindgen_ty_26 = 40;
pub const BGM_10MIN1: _bindgen_ty_26 = 41;
pub const BGM_BONUS: _bindgen_ty_26 = 42;
pub const BGM_BOWLING: _bindgen_ty_26 = 43;
pub const BGM_10MIN2: _bindgen_ty_26 = 44;
pub const BGM_SEL_BASEBALL: _bindgen_ty_26 = 45;
pub const BGM_SEL_BOAT: _bindgen_ty_26 = 46;
pub const BGM_SEL_TARGET: _bindgen_ty_26 = 47;
pub const BGM_ENTRY: _bindgen_ty_26 = 48;
pub const BGM_HYOSHO: _bindgen_ty_26 = 49;
pub const BGM_ROLL: _bindgen_ty_26 = 50;
pub const BGM_S1A_SNG1: _bindgen_ty_26 = 51;
pub const BGM_S1A_SNG2: _bindgen_ty_26 = 52;
pub const BGM_S1A_SNG3: _bindgen_ty_26 = 53;
pub const BGM_TITLE: _bindgen_ty_26 = 54;
pub const BGM_S1A_SNG4: _bindgen_ty_26 = 55;
pub const BGM_FIGHT_VIEW: _bindgen_ty_26 = 56;
pub const BGM_GOLF_VIEW: _bindgen_ty_26 = 57;
pub const BGM_SF: _bindgen_ty_26 = 58;
pub const BGM_SEL_TENNIS: _bindgen_ty_26 = 59;
pub const BGM_TARGET: _bindgen_ty_26 = 60;
pub const BGM_YUENCHI: _bindgen_ty_26 = 61;
pub const BGM_SEL_RACE: _bindgen_ty_26 = 62;
pub const BGM_SENTAKU: _bindgen_ty_26 = 63;
pub const BGM_KUJIRA: _bindgen_ty_26 = 64;
pub const BGM_RACE: _bindgen_ty_26 = 65;
pub const BGM_GOLF: _bindgen_ty_26 = 66;
pub const BGM_SEL_BILI: _bindgen_ty_26 = 67;
pub const BGM_GREP: _bindgen_ty_26 = 68;
pub const BGM_RACE_ADVAN: _bindgen_ty_26 = 69;
pub const BGM_CLOCKTOWER: _bindgen_ty_26 = 70;
pub const BGM_BOAT_ADVAN: _bindgen_ty_26 = 71;
pub const BGM_SEL_SHOT: _bindgen_ty_26 = 72;
pub const BGM_RACE_EXPERT: _bindgen_ty_26 = 73;
pub const BGM_SEL_DOG: _bindgen_ty_26 = 74;
pub const BGM_BOAT_EXPERT: _bindgen_ty_26 = 75;
pub const BGM_BOAT_LOSE: _bindgen_ty_26 = 76;
pub const BGM_BOAT_WIN: _bindgen_ty_26 = 77;
pub const BGM_SHOT: _bindgen_ty_26 = 78;
pub const BGM_SHOT_CLEAR: _bindgen_ty_26 = 79;
pub const BGM_SHOT_LOSE: _bindgen_ty_26 = 80;
pub const BGM_DOG: _bindgen_ty_26 = 81;
pub const BGM_SHOT_ADVAN: _bindgen_ty_26 = 82;
pub const BGM_SHOT_BOSS: _bindgen_ty_26 = 83;
pub const BGM_DOG_WIN: _bindgen_ty_26 = 84;
pub const BGM_DOG_LOSE: _bindgen_ty_26 = 85;
pub const BGM_FUTSAL_GOAL: _bindgen_ty_26 = 86;
pub const BGM_POINT: _bindgen_ty_26 = 87;
pub const BGM_SHOT_EXPERT: _bindgen_ty_26 = 88;
pub const BGM_GOLF_EAGLE: _bindgen_ty_26 = 89;
pub const BGM_SEL_CLEAR: _bindgen_ty_26 = 90;
pub const BGM_SCEN_ENDING: _bindgen_ty_26 = 91;
pub const BGM_S3_SNG1: _bindgen_ty_26 = 92;
pub const BGM_S3_SNG2: _bindgen_ty_26 = 93;
pub const BGM_S3_SNG3: _bindgen_ty_26 = 94;
pub const BGM_ADV: _bindgen_ty_26 = 95;
pub const BGM_S3_SNG4: _bindgen_ty_26 = 96;
pub const BGM_S3_SNG5: _bindgen_ty_26 = 97;
pub const BGM_S3_SNG6: _bindgen_ty_26 = 98;
pub const BGM_S3_SNG7: _bindgen_ty_26 = 99;
pub const BGM_S3_SNG8: _bindgen_ty_26 = 100;
pub const BGM_SCEN_ENDING4: _bindgen_ty_26 = 101;
pub const BGM_S1B_SNG1: _bindgen_ty_26 = 102;
pub const BGM_S1B_SNG2: _bindgen_ty_26 = 103;
pub const BGM_S1B_SNG3: _bindgen_ty_26 = 104;
pub const BGM_S2_SNG1: _bindgen_ty_26 = 105;
pub const BGM_S2_SNG2: _bindgen_ty_26 = 106;
pub const BGM_S2_SNG3: _bindgen_ty_26 = 107;
pub const BGM_S2_SNG4: _bindgen_ty_26 = 108;
pub const BGM_S2_SNG5: _bindgen_ty_26 = 109;
pub const BGM_S2_SNG6: _bindgen_ty_26 = 110;
pub const BGM_S2_SNG7: _bindgen_ty_26 = 111;
pub const BGM_S2_SNG8: _bindgen_ty_26 = 112;
pub const BGM_S4_SNG1: _bindgen_ty_26 = 113;
pub const BGM_S4_SNG2: _bindgen_ty_26 = 114;
pub const BGM_S4_SNG3: _bindgen_ty_26 = 115;
pub const BGM_S4_SNG4: _bindgen_ty_26 = 116;
pub const BGM_S4_SNG5: _bindgen_ty_26 = 117;
pub const BGM_S4_SNG6: _bindgen_ty_26 = 118;
pub const BGM_S4_SNG7: _bindgen_ty_26 = 119;
pub const BGM_S6_SNG1: _bindgen_ty_26 = 120;
pub const BGM_S6_SNG2: _bindgen_ty_26 = 121;
pub const BGM_S6_SNG3: _bindgen_ty_26 = 122;
pub const BGM_S5_SNG1: _bindgen_ty_26 = 123;
pub const BGM_S5_SNG2: _bindgen_ty_26 = 124;
pub const BGM_S5_SNG3: _bindgen_ty_26 = 125;
pub const BGM_S5_SNG4: _bindgen_ty_26 = 126;
pub const BGM_S5_SNG5: _bindgen_ty_26 = 127;
pub const BGM_S5_SNG6: _bindgen_ty_26 = 128;
pub const BGM_S5_SNG7: _bindgen_ty_26 = 129;
pub const BGM_S7_SNG1: _bindgen_ty_26 = 130;
pub const BGM_S7_SNG2: _bindgen_ty_26 = 131;
pub const BGM_S7_SNG3: _bindgen_ty_26 = 132;
pub const BGM_S7_SNG4: _bindgen_ty_26 = 133;
pub const BGM_S7_SNG5: _bindgen_ty_26 = 134;
pub const BGM_S7_SNG6: _bindgen_ty_26 = 135;
pub const BGM_SLAST_SNG1: _bindgen_ty_26 = 136;
pub const BGM_SLAST_SNG2: _bindgen_ty_26 = 137;
pub const BGM_S8_SNG1: _bindgen_ty_26 = 138;
pub const BGM_S8_SNG2: _bindgen_ty_26 = 139;
pub const BGM_S9_SNG1: _bindgen_ty_26 = 140;
pub const BGM_S9_SNG2: _bindgen_ty_26 = 141;
pub const BGM_S10_SNG1: _bindgen_ty_26 = 142;
pub const BGM_S10_SNG2: _bindgen_ty_26 = 143;
pub const BGM_S10_SNG3: _bindgen_ty_26 = 144;
pub const BGM_S10_SNG4: _bindgen_ty_26 = 145;
pub const BGM_S10_SNG5: _bindgen_ty_26 = 146;
pub type _bindgen_ty_26 = ::core::ffi::c_uint;
pub type BgmTrack = undefined2;
pub const STYLE_ORIGINAL: _bindgen_ty_27 = 0;
pub const STYLE_REGULAR: _bindgen_ty_27 = 1;
pub const STYLE_BOLD: _bindgen_ty_27 = 2;
pub const STYLE_ITALIC: _bindgen_ty_27 = 3;
pub const STYLE_BOLD_ITALIC: _bindgen_ty_27 = 4;
pub const STYLE_TEGAKI: _bindgen_ty_27 = 5;
pub type _bindgen_ty_27 = ::core::ffi::c_uint;
pub type FontStyle = undefined1;
pub type PCourseCommand = *mut CourseCommand;
pub const COURSE_CMD_IF: _bindgen_ty_28 = 0;
pub const COURSE_CMD_THEN: _bindgen_ty_28 = 1;
pub const COURSE_CMD_INFO: _bindgen_ty_28 = 2;
pub const COURSE_CMD_END: _bindgen_ty_28 = 3;
pub type _bindgen_ty_28 = ::core::ffi::c_uint;
pub type CourseCommandOpcode = undefined1;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CourseCommand {
    pub opcode: CourseCommandOpcode,
    pub type_: u8_,
    pub field2_0x2: [undefined; 2usize],
    pub value: s32,
    pub field4_0x8: [undefined; 20usize],
}
pub type PRelBufferInfo = *mut RelBufferInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct RelBufferInfo {
    pub rel_buffer: *mut ::core::ffi::c_void,
    pub bss_buffer: *mut ::core::ffi::c_void,
}
impl Default for RelBufferInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PUnlockInfo = *mut UnlockInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UnlockInfo {
    pub master_unlocked: byte,
    pub monkeys: byte,
    pub field_0x2: [undefined; 1usize],
    pub staff_credits_game_unlocked: byte,
    pub play_points: dword,
    pub newest_play_point_record: dword,
    pub field_0xc: [undefined; 2usize],
    pub movies: word,
    pub party_games: dword,
    pub g_movies_watched: word,
    pub field_0x16: [undefined; 110usize],
}
impl Default for UnlockInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PBall = *mut Ball;
pub const PHYS_MODE_G_GOALED: _bindgen_ty_29 = 5;
pub const PHYS_MODE_SLOWDOWN_BLASTOFF: _bindgen_ty_29 = 6;
pub const PHYS_MODE_NORMAL: _bindgen_ty_29 = 32;
pub type _bindgen_ty_29 = ::core::ffi::c_uint;
pub type BallMode = undefined1;
pub const PHYS_NONE: _bindgen_ty_30 = 0;
pub const PHYS_ON_GROUND: _bindgen_ty_30 = 1;
pub const PHYS_UNK_0x2: _bindgen_ty_30 = 2;
pub const PHYS_UNK_0x4: _bindgen_ty_30 = 4;
pub const PHYS_UNK_0x8: _bindgen_ty_30 = 8;
pub const PHYS_UNK_0x10: _bindgen_ty_30 = 16;
pub const PHYS_UNK_0x20: _bindgen_ty_30 = 32;
pub const PHYS_UNK_0x40: _bindgen_ty_30 = 64;
pub const PHYS_UNK_0x80: _bindgen_ty_30 = 128;
pub const PHYS_DISABLE_GRAVITY: _bindgen_ty_30 = 256;
pub const PHYS_BLAST_UP: _bindgen_ty_30 = 512;
pub const PHYS_SLOW_DOWN: _bindgen_ty_30 = 1024;
pub const PHYS_G_DISABLE_GOAL_DETECTION: _bindgen_ty_30 = 2048;
pub const PHYS_DISABLE_CONTROLS: _bindgen_ty_30 = 4096;
pub const PHYS_G_SECRET_POSTGOAL_DANCE: _bindgen_ty_30 = 8192;
pub const PHYS_UNK_0x4000: _bindgen_ty_30 = 16384;
pub type _bindgen_ty_30 = ::core::ffi::c_uint;
pub type BallPhysFlags = undefined4;
pub type PRaycastHit = *mut RaycastHit;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RaycastHit {
    pub flags: u32_,
    pub pos: Vec,
    pub normal: Vec,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Ball {
    pub status: Status,
    pub field_0x1: [undefined; 1usize],
    pub monkey_count: u8_,
    pub mode: BallMode,
    pub pos: Vec,
    pub prev_pos: Vec,
    pub vel: Vec,
    pub visual_rot: S16Vec,
    pub idx: u8_,
    pub field_0x2f: [undefined; 1usize],
    pub model_transform: Mtx,
    pub visual_rot_vel: S16Vec,
    pub padding2: ::core::ffi::c_short,
    pub ball_size: f32,
    pub gravity: f32,
    pub restitution: f32,
    pub visual_scale: f32,
    pub banana_count: s32,
    pub score: s32,
    pub frames_since_spawn: s32,
    pub field_0x84: [undefined; 14usize],
    pub g_monkey_angle: s16,
    pub field_0x94: [undefined; 4usize],
    pub g_effect_flags: u32_,
    pub phys_flags: BallPhysFlags,
    pub g_monkey_rotation: Quat,
    pub g_ball_rotation: Quat,
    pub some_vec3: Vec,
    pub some_length: f32,
    pub ball_transform_copy: Mtx,
    pub speed: f32,
    pub ape: *mut Ape,
    pub field48_0x108: ::core::ffi::c_int,
    pub ape_facedir_point: Vec,
    pub something_with_ape_facedir: f32,
    pub g_last_collision_normal: Vec,
    pub field_0x128: [undefined; 4usize],
    pub g_race_flags: dword,
    pub g_other_counter: ::core::ffi::c_short,
    pub field58_0x132: undefined2,
    pub field59_0x134: s16,
    pub g_something_timer: s16,
    pub field_0x138: [undefined; 4usize],
    pub hardest_coli_speed: f32,
    pub g_banana_count_copy: ::core::ffi::c_int,
    pub field_0x144: [undefined; 8usize],
    pub physical_ball_radius: f32,
    pub field_0x150: [undefined; 4usize],
    pub field80_0x154: undefined1,
    pub field81_0x155: undefined1,
    pub g_ball_color_index: u8_,
    pub field83_0x157: undefined1,
    pub field_0x158: [undefined; 2usize],
    pub g_some_counter: ::core::ffi::c_short,
    pub g_some_pos1: Vec,
    pub field_0x168: [undefined; 16usize],
    pub g_some_game_flag: u8_,
    pub g_some_model_flag: u8_,
    pub field_0x17a: [undefined; 2usize],
    pub raycast_down_hit: RaycastHit,
    pub field_0x198: [undefined; 24usize],
}
impl Default for Ball {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PSmWorldInfo = *mut SmWorldInfo;
pub type PSmStageInfo = *mut SmStageInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SmWorldInfo {
    pub stage_count: s16,
    pub field_0x2: [undefined; 2usize],
    pub stages: *mut SmStageInfo,
}
impl Default for SmWorldInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SmStageInfo {
    pub stage_id: s16,
    pub difficulty: s16,
}
pub const DMD_SCEN_1ST_INIT: _bindgen_ty_31 = 0;
pub const DMD_SCEN_RETURN_INIT: _bindgen_ty_31 = 1;
pub const DMD_SCEN_NEWGAME_INIT: _bindgen_ty_31 = 2;
pub const DMD_SCEN_NEWGAME_MAIN: _bindgen_ty_31 = 3;
pub const DMD_SCEN_LOADGAME_INIT: _bindgen_ty_31 = 4;
pub const DMD_SCEN_LOADGAME_MAIN: _bindgen_ty_31 = 5;
pub const DMD_SCEN_SCENEPLAY_INIT: _bindgen_ty_31 = 6;
pub const DMD_SCEN_SCENEPLAY_MAIN: _bindgen_ty_31 = 7;
pub const DMD_SCEN_SEL_WORLD_INIT: _bindgen_ty_31 = 8;
pub const DMD_SCEN_SEL_WORLD_NEXT: _bindgen_ty_31 = 9;
pub const DMD_SCEN_SEL_FLOOR_INIT: _bindgen_ty_31 = 10;
pub const DMD_SCEN_SEL_FLOOR_MAIN: _bindgen_ty_31 = 11;
pub const DMD_SCEN_GAME_INIT: _bindgen_ty_31 = 12;
pub const DMD_SCEN_GAME_MAIN: _bindgen_ty_31 = 13;
pub const DMD_SCEN_GAME_CLEAR_INIT: _bindgen_ty_31 = 14;
pub const DMD_SCEN_GAME_CLEAR_MAIN: _bindgen_ty_31 = 15;
pub const DMD_SCEN_GAME_OVER_INIT: _bindgen_ty_31 = 16;
pub const DMD_SCEN_GAME_OVER_MAIN: _bindgen_ty_31 = 17;
pub const DMD_SCEN_SELECT_INIT: _bindgen_ty_31 = 18;
pub const DMD_SCEN_SELECT_MAIN: _bindgen_ty_31 = 19;
pub const DMD_SCEN_ENTRY_INIT: _bindgen_ty_31 = 20;
pub const DMD_SCEN_ENTRY_MAIN: _bindgen_ty_31 = 21;
pub const DMD_SCEN_SCNPLAY_RETURN: _bindgen_ty_31 = 22;
pub const DMD_SCEN_SCNPLAY_RETURN_LOADING: _bindgen_ty_31 = 23;
pub const DMD_SCEN_LOADGAME_RESTORE: _bindgen_ty_31 = 24;
pub const DMD_SCEN_NAMEENTRY_INIT: _bindgen_ty_31 = 25;
pub const DMD_SCEN_NAMEENTRY_MAIN: _bindgen_ty_31 = 26;
pub type _bindgen_ty_31 = ::core::ffi::c_uint;
pub type ScenMode = undefined2;
pub type PFontDefinition = *mut FontDefinition;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct FontDefinition {
    pub g_aram_flag: ::core::ffi::c_short,
    pub width: byte,
    pub height: byte,
    pub g_start_index: ::core::ffi::c_int,
    pub g_end_index: ::core::ffi::c_int,
    pub field5_0xc: ::core::ffi::c_char,
    pub field_0xd: [undefined; 3usize],
    pub field9_0x10: f32,
    pub field10_0x14: f32,
    pub field11_0x18: f32,
    pub field12_0x1c: f32,
    pub field13_0x20: ::core::ffi::c_char,
    pub field14_0x21: ::core::ffi::c_char,
    pub field15_0x22: ::core::ffi::c_char,
    pub field16_0x23: ::core::ffi::c_char,
    pub name: *mut ::core::ffi::c_char,
    pub g_some_size: ushort,
    pub field_0x2a: [undefined; 2usize],
    pub g_some_avtext_lookup: *mut ushort,
    pub g_aram_char_lookup: *mut ::core::ffi::c_short,
    pub field23_0x34: f32,
}
impl Default for FontDefinition {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PItemgroup = *mut Itemgroup;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Itemgroup {
    pub playback_state: dword,
    pub anim_frame: dword,
    pub position: Vec,
    pub prev_position: Vec,
    pub rotation: S16Vec,
    pub prev_rotation: S16Vec,
    pub transform: Mtx,
    pub prev_transform: Mtx,
    pub field_0x8c: [undefined; 16usize],
    pub seesaw_info: *mut SeesawInfo,
}
impl Default for Itemgroup {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PGSoundGroupEntry = *mut GSoundGroupEntry;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GSoundGroupEntry {
    pub g_flags: undefined2,
    pub field_0x2: [undefined; 2usize],
    pub field3_0x4: undefined2,
    pub field_0x6: [undefined; 2usize],
    pub field6_0x8: undefined2,
    pub field_0xa: [undefined; 2usize],
    pub g_name: *mut ::core::ffi::c_char,
}
impl Default for GSoundGroupEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CharPair = [::core::ffi::c_char; 2usize];
pub type PStoryModeSaveFile = *mut StoryModeSaveFile;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StoryModeSaveFile {
    pub field0_0x0: [undefined; 4usize],
    pub is_valid: BOOL32,
    pub file_name: [::core::ffi::c_char; 13usize],
    pub current_world: u8_,
    pub field4_0x16: u8_,
    pub field_0x17: [undefined; 1usize],
    pub playtime_in_frames: u32_,
    pub score: u32_,
    pub bananas: u32_,
    pub num_beaten_stages_in_current_world: u8_,
    pub beaten_stage_indices: [u8_; 10usize],
    pub field11_0x2f: [undefined; 85usize],
}
impl Default for StoryModeSaveFile {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PGBone = *mut GBone;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GBone {
    pub SKLData: *mut SKLFile,
    pub MTAData: *mut ::core::ffi::c_void,
    pub UnknownPtr: *mut ::core::ffi::c_void,
}
impl Default for GBone {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PRankingEntry = *mut RankingEntry;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct RankingEntry {
    pub name: *mut ::core::ffi::c_char,
    pub field_0x4: [undefined; 4usize],
    pub score: u32_,
    pub g_ape_id: u32_,
    pub field_0x10: [undefined; 4usize],
    pub field11_0x14: undefined4,
    pub field_0x18: [undefined; 4usize],
}
impl Default for RankingEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PGTableEntry = *mut GTableEntry;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GTableEntry {
    pub field_0x0: [undefined; 3usize],
    pub field3_0x3: byte,
    pub field_0x4: [undefined; 8usize],
}
pub type Ptheme_light = *mut theme_light;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct theme_light {
    pub unk_float: f32,
    pub light_group_r: f32,
    pub light_group_g: f32,
    pub light_group_b: f32,
    pub light_group_null: f32,
    pub unk_one_1: f32,
    pub unk_one_2: f32,
    pub unk_one_3: f32,
    pub unk_one_null: f32,
    pub unk_half_1: f32,
    pub unk_half_2: f32,
    pub unk_half_3: f32,
    pub unk_half_null: f32,
    pub light_param_r: f32,
    pub light_param_g: f32,
    pub light_param_b: f32,
    pub xa: i16,
    pub ya: i16,
    pub null: f32,
}
pub type POptiGXChanSettings = *mut OptiGXChanSettings;
pub type GXBool = u8_;
pub const GX_SRC_REG: _bindgen_ty_32 = 0;
pub const GX_SRC_VTX: _bindgen_ty_32 = 1;
pub type _bindgen_ty_32 = ::core::ffi::c_uint;
pub type GXColorSrc = undefined4;
pub const GX_DF_NONE: _bindgen_ty_33 = 0;
pub const GX_DF_SIGN: _bindgen_ty_33 = 1;
pub const GX_DF_CLAMP: _bindgen_ty_33 = 2;
pub type _bindgen_ty_33 = ::core::ffi::c_uint;
pub type GXDiffuseFn = undefined4;
pub const GX_AF_SPEC: _bindgen_ty_34 = 0;
pub const GX_AF_SPOT: _bindgen_ty_34 = 1;
pub const GX_AF_NONE: _bindgen_ty_34 = 2;
pub type _bindgen_ty_34 = ::core::ffi::c_uint;
pub type GXAttnFn = undefined4;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OptiGXChanSettings {
    pub enable: GXBool,
    pub padding_0x1: [undefined; 3usize],
    pub amb_src: GXColorSrc,
    pub mat_src: GXColorSrc,
    pub light_mask: u32_,
    pub diff_fn: GXDiffuseFn,
    pub attn_fn: GXAttnFn,
}
pub type PGSomeLightStruct = *mut GSomeLightStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GSomeLightStruct {
    pub field_0x0: [undefined; 299usize],
}
impl Default for GSomeLightStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PCmListEntry = *mut CmListEntry;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CmListEntry {
    pub field0_0x0: undefined4,
    pub g_stage_id: undefined4,
    pub field_0x8: [undefined; 100usize],
}
impl Default for CmListEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PNlBuffer = *mut NlBuffer;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct NlBuffer {
    pub field0_0x0: ::core::ffi::c_int,
    pub field_0x4: [undefined; 20usize],
    pub field21_0x18: *mut *mut ::core::ffi::c_int,
    pub field_0x1c: [undefined; 4usize],
    pub field26_0x20: *mut *mut ::core::ffi::c_int,
    pub field27_0x24: *mut GXTexObj,
    pub field_0x28: [undefined; 16usize],
    pub field44_0x38: *mut *mut ::core::ffi::c_int,
    pub field_0x3c: [undefined; 40usize],
    pub field85_0x64: *mut *mut ::core::ffi::c_int,
}
impl Default for NlBuffer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PGraphicsInfo = *mut GraphicsInfo;
pub type PGXFifoObj = *mut GXFifoObj;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GraphicsInfo {
    pub active_framebuffer: *mut ::core::ffi::c_void,
    pub framebuffer1: *mut ::core::ffi::c_void,
    pub framebuffer2: *mut ::core::ffi::c_void,
    pub frame_count: u32_,
    pub active_framebuffer_index: u32_,
    pub fifos: [*mut GXFifoObj; 2usize],
}
impl Default for GraphicsInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GXFifoObj {
    pub field_0x0: [undefined; 20usize],
    pub read_ptr: *mut ::core::ffi::c_void,
    pub write_ptr: *mut ::core::ffi::c_void,
    pub field_0x1c: [undefined; 100usize],
}
impl Default for GXFifoObj {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const FONT32_ASCII: _bindgen_ty_35 = 0;
pub const FONT32_ASC_8x16: _bindgen_ty_35 = 1;
pub const FONT32_ASC_12x12: _bindgen_ty_35 = 2;
pub const FONT32_ASC_24x24: _bindgen_ty_35 = 3;
pub const FONT32_ASC_16x16P: _bindgen_ty_35 = 4;
pub const FONT32_ASC_16x16: _bindgen_ty_35 = 5;
pub const FONT32_DMY03: _bindgen_ty_35 = 6;
pub const FONT32_DMY04: _bindgen_ty_35 = 7;
pub const FONT32_DMY05: _bindgen_ty_35 = 8;
pub const FONT32_ASC_72x64: _bindgen_ty_35 = 9;
pub const FONT32_DMY06: _bindgen_ty_35 = 10;
pub const FONT32_DMY07: _bindgen_ty_35 = 11;
pub const FONT32_DMY08: _bindgen_ty_35 = 12;
pub const FONT32_DMY09: _bindgen_ty_35 = 13;
pub const FONT32_DMY10: _bindgen_ty_35 = 14;
pub const FONT32_DMY11: _bindgen_ty_35 = 15;
pub const FONT32_DMY12: _bindgen_ty_35 = 16;
pub const FONT32_DMY13: _bindgen_ty_35 = 17;
pub const FONT32_DMY14: _bindgen_ty_35 = 18;
pub const FONT32_DMY15: _bindgen_ty_35 = 19;
pub const FONT32_DMY16: _bindgen_ty_35 = 20;
pub const FONT32_ICON_SD: _bindgen_ty_35 = 21;
pub const FONT32_ICON_SD2: _bindgen_ty_35 = 22;
pub const FONT32_DMY20: _bindgen_ty_35 = 23;
pub const FONT32_DMY21: _bindgen_ty_35 = 24;
pub const FONT32_DMY22: _bindgen_ty_35 = 25;
pub const FONT32_DMY23: _bindgen_ty_35 = 26;
pub const FONT32_DMY_RNK00: _bindgen_ty_35 = 27;
pub const FONT32_DMY_RNK01: _bindgen_ty_35 = 28;
pub const FONT32_DMY_RNK02: _bindgen_ty_35 = 29;
pub const FONT32_DMY_RNK03: _bindgen_ty_35 = 30;
pub const FONT32_DMY_RNK04: _bindgen_ty_35 = 31;
pub const FONT32_RNK_32x32: _bindgen_ty_35 = 32;
pub const FONT32_RNK_NUM: _bindgen_ty_35 = 33;
pub const FONT32_MINI_RNK: _bindgen_ty_35 = 34;
pub const FONT32_SCORE_NUM: _bindgen_ty_35 = 35;
pub const FONT32_DMY_RNK0: _bindgen_ty_35 = 36;
pub const FONT32_DMY_RNK1: _bindgen_ty_35 = 37;
pub const FONT32_DMY_RNK2: _bindgen_ty_35 = 38;
pub const FONT32_DMY_RNK3: _bindgen_ty_35 = 39;
pub const FONT32_DMY_RNK4: _bindgen_ty_35 = 40;
pub const FONT32_DMY_RNK5: _bindgen_ty_35 = 41;
pub const FONT32_DMY_RNK6: _bindgen_ty_35 = 42;
pub const FONT32_DMY_RNK7: _bindgen_ty_35 = 43;
pub const FONT32_DMY_RNK8: _bindgen_ty_35 = 44;
pub const FONT32_DMY_RNK9: _bindgen_ty_35 = 45;
pub const FONT32_DMY_RNKa: _bindgen_ty_35 = 46;
pub const FONT32_DMY_RNKb: _bindgen_ty_35 = 47;
pub const FONT32_DMY_RNKc: _bindgen_ty_35 = 48;
pub const FONT32_DMY_RNKd: _bindgen_ty_35 = 49;
pub const FONT32_DMY_RNKe: _bindgen_ty_35 = 50;
pub const FONT32_DMY_RNKf: _bindgen_ty_35 = 51;
pub const FONT32_SEL_CTRL_PORT: _bindgen_ty_35 = 52;
pub const FONT32_SEL_CTRL_R: _bindgen_ty_35 = 53;
pub const FONT32_SEL_CTRL_B: _bindgen_ty_35 = 54;
pub const FONT32_SEL_CTRL_Y: _bindgen_ty_35 = 55;
pub const FONT32_SEL_CTRL_G: _bindgen_ty_35 = 56;
pub const FONT32_SEL_CTRL_SDW: _bindgen_ty_35 = 57;
pub const FONT32_DMY42: _bindgen_ty_35 = 58;
pub const FONT32_DMY43: _bindgen_ty_35 = 59;
pub const FONT32_BWL_SCORE: _bindgen_ty_35 = 60;
pub const FONT32_DMY50: _bindgen_ty_35 = 61;
pub const FONT32_DMY51: _bindgen_ty_35 = 62;
pub const FONT32_DMY52: _bindgen_ty_35 = 63;
pub const FONT32_DMY53: _bindgen_ty_35 = 64;
pub const FONT32_DMY54: _bindgen_ty_35 = 65;
pub const FONT32_DMY55: _bindgen_ty_35 = 66;
pub const FONT32_DMY56: _bindgen_ty_35 = 67;
pub const FONT32_DMY57: _bindgen_ty_35 = 68;
pub const FONT32_RAC_DMY01: _bindgen_ty_35 = 69;
pub const FONT32_RAC_PLAYER: _bindgen_ty_35 = 70;
pub const FONT32_RAC_RANK: _bindgen_ty_35 = 71;
pub const FONT32_RAC_LAP_MARK_NUM: _bindgen_ty_35 = 72;
pub const FONT32_RAC_LAP_NUM: _bindgen_ty_35 = 73;
pub const FONT32_RAC_TIME_NUM: _bindgen_ty_35 = 74;
pub const FONT32_RAC_LAP_MARK_NUM_S: _bindgen_ty_35 = 75;
pub const FONT32_RAC_DMY08: _bindgen_ty_35 = 76;
pub const FONT32_RAC_DMY09: _bindgen_ty_35 = 77;
pub const FONT32_RAC_DMY10: _bindgen_ty_35 = 78;
pub const FONT32_RAC_SPD_NUM: _bindgen_ty_35 = 79;
pub const FONT32_RAC_DMY12: _bindgen_ty_35 = 80;
pub const FONT32_RAC_DMY13: _bindgen_ty_35 = 81;
pub const FONT32_TGT_PLAYER: _bindgen_ty_35 = 82;
pub const FONT32_TGT_MSCORE: _bindgen_ty_35 = 83;
pub const FONT32_TGT_SCORE: _bindgen_ty_35 = 84;
pub const FONT32_TGT_SCORE_S: _bindgen_ty_35 = 85;
pub const FONT32_TGT_SPEED: _bindgen_ty_35 = 86;
pub const FONT32_TGT_ROUND: _bindgen_ty_35 = 87;
pub const FONT32_TGT_ALT: _bindgen_ty_35 = 88;
pub const FONT32_TGT_WIND: _bindgen_ty_35 = 89;
pub const FONT32_DMY71: _bindgen_ty_35 = 90;
pub const FONT32_DMY72: _bindgen_ty_35 = 91;
pub const FONT32_DMY73: _bindgen_ty_35 = 92;
pub const FONT32_NUM_NML_SCORE: _bindgen_ty_35 = 93;
pub const FONT32_NUM_NML_TIME: _bindgen_ty_35 = 94;
pub const FONT32_NUM_NML_TIME_S: _bindgen_ty_35 = 95;
pub const FONT32_NUM_NML_SPEED: _bindgen_ty_35 = 96;
pub const FONT32_NUM_NML_SARU: _bindgen_ty_35 = 97;
pub const FONT32_ASC_NML_D5: _bindgen_ty_35 = 98;
pub const FONT32_ASC_NML_D6: _bindgen_ty_35 = 99;
pub const FONT32_ASC_NML_D7: _bindgen_ty_35 = 100;
pub const FONT32_ASC_NML_D8: _bindgen_ty_35 = 101;
pub const FONT32_ASC_NML_D9: _bindgen_ty_35 = 102;
pub const FONT32_DMY79: _bindgen_ty_35 = 103;
pub const FONT32_DMY7a: _bindgen_ty_35 = 104;
pub const FONT32_DMY7b: _bindgen_ty_35 = 105;
pub const FONT32_DMY7c: _bindgen_ty_35 = 106;
pub const FONT32_DMY7d: _bindgen_ty_35 = 107;
pub const FONT32_DMY7e: _bindgen_ty_35 = 108;
pub const FONT32_DMY7f: _bindgen_ty_35 = 109;
pub const FONT32_BOA_TIME_NUM: _bindgen_ty_35 = 110;
pub const FONT32_BOA_DMY02: _bindgen_ty_35 = 111;
pub const FONT32_BOA_RANK: _bindgen_ty_35 = 112;
pub const FONT32_BOA_PLAYER: _bindgen_ty_35 = 113;
pub const FONT32_BOA_SPD_NUM: _bindgen_ty_35 = 114;
pub const FONT32_BOA_LAP_MARK_NUM: _bindgen_ty_35 = 115;
pub const FONT32_BOA_LAP_MARK_NUM_S: _bindgen_ty_35 = 116;
pub const FONT32_BOA_DMY08: _bindgen_ty_35 = 117;
pub const FONT32_BOA_DMY09: _bindgen_ty_35 = 118;
pub const FONT32_BOA_DMY10: _bindgen_ty_35 = 119;
pub const FONT32_BOA_LAP_NUM: _bindgen_ty_35 = 120;
pub const FONT32_BOA_DMY12: _bindgen_ty_35 = 121;
pub const FONT32_BOA_DMY13: _bindgen_ty_35 = 122;
pub const FONT32_BOA_DMY14: _bindgen_ty_35 = 123;
pub const FONT32_BOA_DMY15: _bindgen_ty_35 = 124;
pub const FONT32_BOA_DMY16: _bindgen_ty_35 = 125;
pub const FONT32_DOG_SPEED: _bindgen_ty_35 = 126;
pub const FONT32_DOG_SPEED_S: _bindgen_ty_35 = 127;
pub const FONT32_DOG_MSCORE: _bindgen_ty_35 = 128;
pub const FONT32_DOG_SCORE: _bindgen_ty_35 = 129;
pub const FONT32_DOG_SCORE_M: _bindgen_ty_35 = 130;
pub const FONT32_DOG_SCORE_S: _bindgen_ty_35 = 131;
pub const FONT32_DOG_ROUND: _bindgen_ty_35 = 132;
pub const FONT32_DOG_ALT: _bindgen_ty_35 = 133;
pub const FONT32_DOG_RESULT: _bindgen_ty_35 = 134;
pub const FONT32_DOG_TIME: _bindgen_ty_35 = 135;
pub const FONT32_DOG_DMY02: _bindgen_ty_35 = 136;
pub const FONT32_DOG_DMY03: _bindgen_ty_35 = 137;
pub const FONT32_DOG_DMY04: _bindgen_ty_35 = 138;
pub const FONT32_DOG_DMY05: _bindgen_ty_35 = 139;
pub const FONT32_JAP_TAG: _bindgen_ty_35 = 140;
pub const FONT32_JAP_DMY: _bindgen_ty_35 = 141;
pub const FONT32_JAP_24x24_2: _bindgen_ty_35 = 142;
pub const FONT32_JAP_24x24_2P: _bindgen_ty_35 = 143;
pub const FONT32_JAP_24x24_I: _bindgen_ty_35 = 144;
pub type _bindgen_ty_35 = ::core::ffi::c_uint;
pub type Font32 = undefined4;
pub type Pg_someGameInfo = *mut g_someGameInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct g_someGameInfo {
    pub field_0x0: [undefined; 80usize],
}
impl Default for g_someGameInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PGSoundGroup = *mut GSoundGroup;
#[repr(C, packed)]
pub struct GSoundGroup {
    pub field_0x0: [undefined; 4usize],
    pub field4_0x4: *mut ::core::ffi::c_char,
    pub field5_0x8: undefined2,
    pub field_0xa: [undefined; 2usize],
    pub g_name: *mut ::core::ffi::c_char,
    pub field9_0x10: __IncompleteArrayField<GSoundGroupEntry>,
}
impl Default for GSoundGroup {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PScenInfo = *mut ScenInfo;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ScenInfo {
    pub mode: ScenMode,
    pub mode_request: ScenMode,
    pub world: undefined2,
    pub world_stage: s16,
    pub flags: undefined4,
    pub next_world: undefined2,
    pub field_0xe: [undefined; 2usize],
    pub score: undefined4,
    pub bananas: undefined4,
    pub g_some_storymode_func_ptr: undefined4,
    pub field_0x1c: [undefined; 6usize],
    pub save_file_idx: undefined1,
    pub field_0x23: [undefined; 1usize],
    pub field19_0x24: undefined4,
    pub field20_0x28: undefined4,
    pub field21_0x2c: undefined4,
    pub field22_0x30: undefined4,
    pub field23_0x34: undefined4,
}
pub const FONT16_ASCII: _bindgen_ty_36 = 0;
pub const FONT16_ASC_8x16: _bindgen_ty_36 = 1;
pub const FONT16_ASC_12x12: _bindgen_ty_36 = 2;
pub const FONT16_ASC_24x24: _bindgen_ty_36 = 3;
pub const FONT16_ASC_16x16P: _bindgen_ty_36 = 4;
pub const FONT16_ASC_16x16: _bindgen_ty_36 = 5;
pub const FONT16_DMY03: _bindgen_ty_36 = 6;
pub const FONT16_DMY04: _bindgen_ty_36 = 7;
pub const FONT16_DMY05: _bindgen_ty_36 = 8;
pub const FONT16_ASC_72x64: _bindgen_ty_36 = 9;
pub const FONT16_DMY06: _bindgen_ty_36 = 10;
pub const FONT16_DMY07: _bindgen_ty_36 = 11;
pub const FONT16_DMY08: _bindgen_ty_36 = 12;
pub const FONT16_DMY09: _bindgen_ty_36 = 13;
pub const FONT16_DMY10: _bindgen_ty_36 = 14;
pub const FONT16_DMY11: _bindgen_ty_36 = 15;
pub const FONT16_DMY12: _bindgen_ty_36 = 16;
pub const FONT16_DMY13: _bindgen_ty_36 = 17;
pub const FONT16_DMY14: _bindgen_ty_36 = 18;
pub const FONT16_DMY15: _bindgen_ty_36 = 19;
pub const FONT16_DMY16: _bindgen_ty_36 = 20;
pub const FONT16_ICON_SD: _bindgen_ty_36 = 21;
pub const FONT16_ICON_SD2: _bindgen_ty_36 = 22;
pub const FONT16_DMY20: _bindgen_ty_36 = 23;
pub const FONT16_DMY21: _bindgen_ty_36 = 24;
pub const FONT16_DMY22: _bindgen_ty_36 = 25;
pub const FONT16_DMY23: _bindgen_ty_36 = 26;
pub const FONT16_DMY_RNK00: _bindgen_ty_36 = 27;
pub const FONT16_DMY_RNK01: _bindgen_ty_36 = 28;
pub const FONT16_DMY_RNK02: _bindgen_ty_36 = 29;
pub const FONT16_DMY_RNK03: _bindgen_ty_36 = 30;
pub const FONT16_DMY_RNK04: _bindgen_ty_36 = 31;
pub const FONT16_RNK_32x32: _bindgen_ty_36 = 32;
pub const FONT16_RNK_NUM: _bindgen_ty_36 = 33;
pub const FONT16_MINI_RNK: _bindgen_ty_36 = 34;
pub const FONT16_SCORE_NUM: _bindgen_ty_36 = 35;
pub const FONT16_DMY_RNK0: _bindgen_ty_36 = 36;
pub const FONT16_DMY_RNK1: _bindgen_ty_36 = 37;
pub const FONT16_DMY_RNK2: _bindgen_ty_36 = 38;
pub const FONT16_DMY_RNK3: _bindgen_ty_36 = 39;
pub const FONT16_DMY_RNK4: _bindgen_ty_36 = 40;
pub const FONT16_DMY_RNK5: _bindgen_ty_36 = 41;
pub const FONT16_DMY_RNK6: _bindgen_ty_36 = 42;
pub const FONT16_DMY_RNK7: _bindgen_ty_36 = 43;
pub const FONT16_DMY_RNK8: _bindgen_ty_36 = 44;
pub const FONT16_DMY_RNK9: _bindgen_ty_36 = 45;
pub const FONT16_DMY_RNKa: _bindgen_ty_36 = 46;
pub const FONT16_DMY_RNKb: _bindgen_ty_36 = 47;
pub const FONT16_DMY_RNKc: _bindgen_ty_36 = 48;
pub const FONT16_DMY_RNKd: _bindgen_ty_36 = 49;
pub const FONT16_DMY_RNKe: _bindgen_ty_36 = 50;
pub const FONT16_DMY_RNKf: _bindgen_ty_36 = 51;
pub const FONT16_SEL_CTRL_PORT: _bindgen_ty_36 = 52;
pub const FONT16_SEL_CTRL_R: _bindgen_ty_36 = 53;
pub const FONT16_SEL_CTRL_B: _bindgen_ty_36 = 54;
pub const FONT16_SEL_CTRL_Y: _bindgen_ty_36 = 55;
pub const FONT16_SEL_CTRL_G: _bindgen_ty_36 = 56;
pub const FONT16_SEL_CTRL_SDW: _bindgen_ty_36 = 57;
pub const FONT16_DMY42: _bindgen_ty_36 = 58;
pub const FONT16_DMY43: _bindgen_ty_36 = 59;
pub const FONT16_BWL_SCORE: _bindgen_ty_36 = 60;
pub const FONT16_DMY50: _bindgen_ty_36 = 61;
pub const FONT16_DMY51: _bindgen_ty_36 = 62;
pub const FONT16_DMY52: _bindgen_ty_36 = 63;
pub const FONT16_DMY53: _bindgen_ty_36 = 64;
pub const FONT16_DMY54: _bindgen_ty_36 = 65;
pub const FONT16_DMY55: _bindgen_ty_36 = 66;
pub const FONT16_DMY56: _bindgen_ty_36 = 67;
pub const FONT16_DMY57: _bindgen_ty_36 = 68;
pub const FONT16_RAC_DMY01: _bindgen_ty_36 = 69;
pub const FONT16_RAC_PLAYER: _bindgen_ty_36 = 70;
pub const FONT16_RAC_RANK: _bindgen_ty_36 = 71;
pub const FONT16_RAC_LAP_MARK_NUM: _bindgen_ty_36 = 72;
pub const FONT16_RAC_LAP_NUM: _bindgen_ty_36 = 73;
pub const FONT16_RAC_TIME_NUM: _bindgen_ty_36 = 74;
pub const FONT16_RAC_LAP_MARK_NUM_S: _bindgen_ty_36 = 75;
pub const FONT16_RAC_DMY08: _bindgen_ty_36 = 76;
pub const FONT16_RAC_DMY09: _bindgen_ty_36 = 77;
pub const FONT16_RAC_DMY10: _bindgen_ty_36 = 78;
pub const FONT16_RAC_SPD_NUM: _bindgen_ty_36 = 79;
pub const FONT16_RAC_DMY12: _bindgen_ty_36 = 80;
pub const FONT16_RAC_DMY13: _bindgen_ty_36 = 81;
pub const FONT16_TGT_PLAYER: _bindgen_ty_36 = 82;
pub const FONT16_TGT_MSCORE: _bindgen_ty_36 = 83;
pub const FONT16_TGT_SCORE: _bindgen_ty_36 = 84;
pub const FONT16_TGT_SCORE_S: _bindgen_ty_36 = 85;
pub const FONT16_TGT_SPEED: _bindgen_ty_36 = 86;
pub const FONT16_TGT_ROUND: _bindgen_ty_36 = 87;
pub const FONT16_TGT_ALT: _bindgen_ty_36 = 88;
pub const FONT16_TGT_WIND: _bindgen_ty_36 = 89;
pub const FONT16_DMY71: _bindgen_ty_36 = 90;
pub const FONT16_DMY72: _bindgen_ty_36 = 91;
pub const FONT16_DMY73: _bindgen_ty_36 = 92;
pub const FONT16_NUM_NML_SCORE: _bindgen_ty_36 = 93;
pub const FONT16_NUM_NML_TIME: _bindgen_ty_36 = 94;
pub const FONT16_NUM_NML_TIME_S: _bindgen_ty_36 = 95;
pub const FONT16_NUM_NML_SPEED: _bindgen_ty_36 = 96;
pub const FONT16_NUM_NML_SARU: _bindgen_ty_36 = 97;
pub const FONT16_ASC_NML_D5: _bindgen_ty_36 = 98;
pub const FONT16_ASC_NML_D6: _bindgen_ty_36 = 99;
pub const FONT16_ASC_NML_D7: _bindgen_ty_36 = 100;
pub const FONT16_ASC_NML_D8: _bindgen_ty_36 = 101;
pub const FONT16_ASC_NML_D9: _bindgen_ty_36 = 102;
pub const FONT16_DMY79: _bindgen_ty_36 = 103;
pub const FONT16_DMY7a: _bindgen_ty_36 = 104;
pub const FONT16_DMY7b: _bindgen_ty_36 = 105;
pub const FONT16_DMY7c: _bindgen_ty_36 = 106;
pub const FONT16_DMY7d: _bindgen_ty_36 = 107;
pub const FONT16_DMY7e: _bindgen_ty_36 = 108;
pub const FONT16_DMY7f: _bindgen_ty_36 = 109;
pub const FONT16_BOA_TIME_NUM: _bindgen_ty_36 = 110;
pub const FONT16_BOA_DMY02: _bindgen_ty_36 = 111;
pub const FONT16_BOA_RANK: _bindgen_ty_36 = 112;
pub const FONT16_BOA_PLAYER: _bindgen_ty_36 = 113;
pub const FONT16_BOA_SPD_NUM: _bindgen_ty_36 = 114;
pub const FONT16_BOA_LAP_MARK_NUM: _bindgen_ty_36 = 115;
pub const FONT16_BOA_LAP_MARK_NUM_S: _bindgen_ty_36 = 116;
pub const FONT16_BOA_DMY08: _bindgen_ty_36 = 117;
pub const FONT16_BOA_DMY09: _bindgen_ty_36 = 118;
pub const FONT16_BOA_DMY10: _bindgen_ty_36 = 119;
pub const FONT16_BOA_LAP_NUM: _bindgen_ty_36 = 120;
pub const FONT16_BOA_DMY12: _bindgen_ty_36 = 121;
pub const FONT16_BOA_DMY13: _bindgen_ty_36 = 122;
pub const FONT16_BOA_DMY14: _bindgen_ty_36 = 123;
pub const FONT16_BOA_DMY15: _bindgen_ty_36 = 124;
pub const FONT16_BOA_DMY16: _bindgen_ty_36 = 125;
pub const FONT16_DOG_SPEED: _bindgen_ty_36 = 126;
pub const FONT16_DOG_SPEED_S: _bindgen_ty_36 = 127;
pub const FONT16_DOG_MSCORE: _bindgen_ty_36 = 128;
pub const FONT16_DOG_SCORE: _bindgen_ty_36 = 129;
pub const FONT16_DOG_SCORE_M: _bindgen_ty_36 = 130;
pub const FONT16_DOG_SCORE_S: _bindgen_ty_36 = 131;
pub const FONT16_DOG_ROUND: _bindgen_ty_36 = 132;
pub const FONT16_DOG_ALT: _bindgen_ty_36 = 133;
pub const FONT16_DOG_RESULT: _bindgen_ty_36 = 134;
pub const FONT16_DOG_TIME: _bindgen_ty_36 = 135;
pub const FONT16_DOG_DMY02: _bindgen_ty_36 = 136;
pub const FONT16_DOG_DMY03: _bindgen_ty_36 = 137;
pub const FONT16_DOG_DMY04: _bindgen_ty_36 = 138;
pub const FONT16_DOG_DMY05: _bindgen_ty_36 = 139;
pub const FONT16_JAP_TAG: _bindgen_ty_36 = 140;
pub const FONT16_JAP_DMY: _bindgen_ty_36 = 141;
pub const FONT16_JAP_24x24_2: _bindgen_ty_36 = 142;
pub const FONT16_JAP_24x24_2P: _bindgen_ty_36 = 143;
pub const FONT16_JAP_24x24_I: _bindgen_ty_36 = 144;
pub type _bindgen_ty_36 = ::core::ffi::c_uint;
pub type Font16 = undefined2;
pub type PMemCardInfo = *mut MemCardInfo;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MemCardInfo {
    pub chan: byte,
    pub field1_0x1: byte,
    pub field2_0x2: byte,
    pub field_0x3: [undefined; 5usize],
    pub field8_0x8: word,
    pub field9_0xa: word,
    pub field10_0xc: dword,
    pub field_0x10: [undefined; 20usize],
    pub field31_0x24: dword,
    pub field_0x28: [undefined; 8usize],
    pub field40_0x30: dword,
    pub field41_0x34: dword,
    pub field42_0x38: dword,
    pub field43_0x3c: dword,
    pub field44_0x40: dword,
}
pub type PGSomeFileStruct = *mut GSomeFileStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GSomeFileStruct {
    pub dvd_entrynum: BOOL32,
    pub dvdFileInfo: DVDFileInfo,
}
impl Default for GSomeFileStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PPadStatusGroup = *mut PadStatusGroup;
pub type PPADStatus = *mut PADStatus;
pub const PAD_BUTTON_LEFT: _bindgen_ty_37 = 1;
pub const PAD_BUTTON_RIGHT: _bindgen_ty_37 = 2;
pub const PAD_BUTTON_DOWN: _bindgen_ty_37 = 4;
pub const PAD_BUTTON_UP: _bindgen_ty_37 = 8;
pub const PAD_TRIGGER_Z: _bindgen_ty_37 = 16;
pub const PAD_TRIGGER_R: _bindgen_ty_37 = 32;
pub const PAD_TRIGGER_L: _bindgen_ty_37 = 64;
pub const PAD_BUTTON_A: _bindgen_ty_37 = 256;
pub const PAD_BUTTON_B: _bindgen_ty_37 = 512;
pub const PAD_BUTTON_X: _bindgen_ty_37 = 1024;
pub const PAD_BUTTON_Y: _bindgen_ty_37 = 2048;
pub const PAD_BUTTON_START: _bindgen_ty_37 = 4096;
pub type _bindgen_ty_37 = ::core::ffi::c_uint;
pub type PadDigitalInput = undefined2;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PADStatus {
    pub button: PadDigitalInput,
    pub stickX: s8,
    pub stickY: s8,
    pub substickX: s8,
    pub substickY: s8,
    pub triggerLeft: u8_,
    pub triggerRight: u8_,
    pub analogA: u8_,
    pub analogB: u8_,
    pub err: PadError,
    pub field_0xb: [undefined; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PadStatusGroup {
    pub raw: PADStatus,
    pub prev_tick: PADStatus,
    pub pressed: PADStatus,
    pub released: PADStatus,
    pub repeated: PADStatus,
}
pub type PDigitalInputGroup = *mut DigitalInputGroup;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DigitalInputGroup {
    pub raw: PadDigitalInput,
    pub prev_tick: PadDigitalInput,
    pub pressed: PadDigitalInput,
    pub released: PadDigitalInput,
    pub repeated: PadDigitalInput,
}
pub const RENDERFLAG_NONE: _bindgen_ty_38 = 0;
pub const RENDERFLAG_DISP: _bindgen_ty_38 = 8;
pub const RENDERFLAG_MINIMAP: _bindgen_ty_38 = 1024;
pub type _bindgen_ty_38 = ::core::ffi::c_uint;
pub type GRenderringFlags = undefined4;
pub type PAnalogInputGroup = *mut AnalogInputGroup;
pub const PAI_LSTICK_LEFT: _bindgen_ty_39 = 1;
pub const PAI_LSTICK_RIGHT: _bindgen_ty_39 = 2;
pub const PAI_LSTICK_DOWN: _bindgen_ty_39 = 4;
pub const PAI_LSTICK_UP: _bindgen_ty_39 = 8;
pub const PAI_CSTICK_LEFT: _bindgen_ty_39 = 16;
pub const PAI_CSTICK_RIGHT: _bindgen_ty_39 = 32;
pub const PAI_CSTICK_DOWN: _bindgen_ty_39 = 64;
pub const PAI_CSTICK_UP: _bindgen_ty_39 = 128;
pub const PAI_LTRIG: _bindgen_ty_39 = 256;
pub const PAI_RTRIG: _bindgen_ty_39 = 512;
pub type _bindgen_ty_39 = ::core::ffi::c_uint;
pub type PadAnalogInput = undefined2;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AnalogInputGroup {
    pub raw: PadAnalogInput,
    pub prev_tick: PadAnalogInput,
    pub pressed: PadAnalogInput,
    pub released: PadAnalogInput,
    pub repeated: PadAnalogInput,
}
pub type PCARDStat = *mut CARDStat;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CARDStat {
    pub fileName: [::core::ffi::c_char; 32usize],
    pub length: u32_,
    pub time: u32_,
    pub gameName: [u8_; 4usize],
    pub company: [u8_; 2usize],
    pub bannerFormat: u8_,
    pub field6_0x2f: u8_,
    pub iconAddr: u32_,
    pub iconFormat: u16_,
    pub iconSpeed: u16_,
    pub commentAddr: u32_,
    pub offsetBanner: u32_,
    pub offsetBannerTlut: u32_,
    pub offsetIcon: [u32_; 8usize],
    pub offsetIconTlut: u32_,
    pub offsetData: u32_,
}
pub const NORMAL: _bindgen_ty_40 = 0;
pub const WIDESCREEN: _bindgen_ty_40 = 1;
pub const LETTERBOX: _bindgen_ty_40 = 2;
pub type _bindgen_ty_40 = ::core::ffi::c_uint;
pub type WidescreenMode = undefined1;
pub type PMemCardFile = *mut MemCardFile;
pub type PCARDFileInfo = *mut CARDFileInfo;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CARDFileInfo {
    pub chan: s32,
    pub fileNo: s32,
    pub offset: s32,
    pub length: s32,
    pub iBlock: u16_,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct MemCardFile {
    pub exi_channel_number: s32,
    pub field_0x4: [undefined; 12usize],
    pub gc_file_info: CARDFileInfo,
    pub field_0x22: [undefined; 2usize],
    pub file_name: *mut ::core::ffi::c_char,
}
impl Default for MemCardFile {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PModeInfo = *mut ModeInfo;
pub const BALLMODE_NONE: _bindgen_ty_41 = 0;
pub const BALLMODE_GOALED: _bindgen_ty_41 = 1;
pub const BALLMODE_OUT_OF_TIME_RINGOUT: _bindgen_ty_41 = 2;
pub const BALLMODE_FALLEN_OUT: _bindgen_ty_41 = 4;
pub const BALLMODE_FREEZE_TIMER: _bindgen_ty_41 = 8;
pub const BALLMODE_IN_REPLAY: _bindgen_ty_41 = 16;
pub const BALLMODE_IN_GOAL_ANIMATION: _bindgen_ty_41 = 32;
pub const BALLMODE_ON_BONUS_STAGE: _bindgen_ty_41 = 64;
pub const BALLMODE_IN_STAGE_LOADIN: _bindgen_ty_41 = 256;
pub const BALLMODE_CLEARED_BONUS_PERFECT: _bindgen_ty_41 = 512;
pub const BALLMODE_CLEARED_BONUS_BONUSFINISH_UNUSED: _bindgen_ty_41 = 1024;
pub const BALLMODE_IN_TUTORIAL_SEQUENCE: _bindgen_ty_41 = 2048;
pub const BALLMODE_ON_FINAL_STAGE: _bindgen_ty_41 = 4096;
pub const BALLMODE_OUT_OF_TIME_CONTINUE: _bindgen_ty_41 = 8192;
pub type _bindgen_ty_41 = ::core::ffi::c_uint;
pub type G_BallMode = undefined4;
pub const Blue: _bindgen_ty_42 = 0;
pub const Green: _bindgen_ty_42 = 1;
pub const Red: _bindgen_ty_42 = 2;
pub type _bindgen_ty_42 = ::core::ffi::c_uint;
pub type GoalType = undefined1;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ModeInfo {
    pub ball_mode: G_BallMode,
    pub stage_time_frames_remaining: s16,
    pub stage_time_limit: undefined2,
    pub field3_0x8: undefined4,
    pub entered_goal_idx: s16,
    pub entered_goal_itemgroup_idx: undefined2,
    pub g_ballVelAtGoal: Vec,
    pub g_some_timer_frame_remaining_count: undefined2,
    pub attempt_count: s16,
    pub cm_course_stage_num: undefined2,
    pub g_some_stage_jump_distance: undefined2,
    pub bananas_remaining: undefined4,
    pub field12_0x28: undefined2,
    pub field13_0x2a: undefined2,
    pub g_next_stage_id2: undefined2,
    pub cm_stage_id: s16,
    pub field16_0x30: undefined2,
    pub cm_next_stage_id: undefined2,
    pub g_selected_world_idx: s16,
    pub g_selected_world_stage_idx: undefined2,
    pub entered_goal_type: GoalType,
    pub field_0x39: [undefined; 3usize],
}
pub type PEvent = *mut Event;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Event {
    pub status: Status,
    pub padding_0x1: [undefined; 3usize],
    pub name: *mut ::core::ffi::c_char,
    pub init_func: ::core::option::Option<unsafe extern "C" fn()>,
    pub tick_func: ::core::option::Option<unsafe extern "C" fn()>,
    pub dest_func: ::core::option::Option<unsafe extern "C" fn()>,
    pub tick_time: u32_,
}
impl Default for Event {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type wchar16 = ::core::ffi::c_ushort;
pub const EVENT_STAGE: _bindgen_ty_43 = 0;
pub const EVENT_WORLD: _bindgen_ty_43 = 1;
pub const EVENT_BALL: _bindgen_ty_43 = 2;
pub const EVENT_APE: _bindgen_ty_43 = 3;
pub const EVENT_STOBJ: _bindgen_ty_43 = 4;
pub const EVENT_ITEM: _bindgen_ty_43 = 5;
pub const EVENT_RECPLAY: _bindgen_ty_43 = 6;
pub const EVENT_OBJ_COLLISION: _bindgen_ty_43 = 7;
pub const EVENT_NAME_ENTRY: _bindgen_ty_43 = 8;
pub const EVENT_INFO: _bindgen_ty_43 = 9;
pub const EVENT_COURSE: _bindgen_ty_43 = 10;
pub const EVENT_VIBRATION: _bindgen_ty_43 = 11;
pub const EVENT_COMMEND: _bindgen_ty_43 = 12;
pub const EVENT_VIEW: _bindgen_ty_43 = 13;
pub const EVENT_EFFECT: _bindgen_ty_43 = 14;
pub const EVENT_MINIMAP: _bindgen_ty_43 = 15;
pub const EVENT_CAMERA: _bindgen_ty_43 = 16;
pub const EVENT_SPRITE: _bindgen_ty_43 = 17;
pub const EVENT_MOUSE: _bindgen_ty_43 = 18;
pub const EVENT_SOUND: _bindgen_ty_43 = 19;
pub const EVENT_BACKGROUND: _bindgen_ty_43 = 20;
pub const EVENT_REND_EFC: _bindgen_ty_43 = 21;
pub const EVENT_ADX: _bindgen_ty_43 = 22;
pub const EVENT_NONE: _bindgen_ty_43 = 4294967295;
pub type _bindgen_ty_43 = ::core::ffi::c_uint;
pub type EventID = undefined4;
pub const BANANA_SINGLE: _bindgen_ty_44 = 0;
pub const BANANA_BUNCH: _bindgen_ty_44 = 1;
pub type _bindgen_ty_44 = ::core::ffi::c_uint;
pub type BananaType = undefined4;
pub const DATA_SELECT_MENU: _bindgen_ty_45 = 0;
pub const NAME_ENTRY_MENU: _bindgen_ty_45 = 1;
pub const STAGE_SELECT_MENU: _bindgen_ty_45 = 2;
pub const RETURN_TO_MAIN_MENU: _bindgen_ty_45 = 3;
pub type _bindgen_ty_45 = ::core::ffi::c_uint;
pub type StoryModeMenuState = undefined1;
pub type P__OutStrCtrl = *mut __OutStrCtrl;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __OutStrCtrl {
    pub CharStr: *mut ::core::ffi::c_char,
    pub MaxCharCount: usize,
    pub CharsWritten: usize,
}
impl Default for __OutStrCtrl {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type POptiGXSettings = *mut OptiGXSettings;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OptiGXSettings {
    pub field_0x0: [undefined; 3120usize],
    pub chan_color0: OptiGXChanSettings,
    pub chan_color1: OptiGXChanSettings,
    pub chan_alpha0: OptiGXChanSettings,
    pub chan_alpha1: OptiGXChanSettings,
}
impl Default for OptiGXSettings {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PS32Vec = *mut S32Vec;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct S32Vec {
    pub x: s32,
    pub y: s32,
}
pub const OF_G_SMTH_WITH_CAMERA: _bindgen_ty_46 = 2;
pub const OF_GAME_PAUSED: _bindgen_ty_46 = 8;
pub type _bindgen_ty_46 = ::core::ffi::c_uint;
pub type GOtherFlags = undefined4;
pub type PMap = *mut Map;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Map {
    pub size: ::core::ffi::c_int,
    pub field1_0x4: undefined4,
    pub field_0x8: [undefined; 4usize],
}
pub type PgDiscQueueItem = *mut gDiscQueueItem;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gDiscQueueItem {
    pub status: ::core::ffi::c_int,
    pub entrynum: ::core::ffi::c_int,
    pub group: undefined4,
}
pub const MINIMAP_HIDDEN: _bindgen_ty_47 = 0;
pub const MINIMAP_SHRINK: _bindgen_ty_47 = 1;
pub const MINIMAP_SHOWN: _bindgen_ty_47 = 2;
pub const MINIMAP_EXPAND: _bindgen_ty_47 = 3;
pub const MINIMAP_INIT: _bindgen_ty_47 = 4;
pub type _bindgen_ty_47 = ::core::ffi::c_uint;
pub type MinimapMode = undefined4;
pub const LOCALE_ENGLISH: _bindgen_ty_48 = 0;
pub const LOCALE_GERMAN: _bindgen_ty_48 = 1;
pub const LOCALE_FRENCH: _bindgen_ty_48 = 2;
pub const LOCALE_SPANISH: _bindgen_ty_48 = 3;
pub const LOCALE_ITALIAN: _bindgen_ty_48 = 4;
pub const LOCALE_JAPANESE: _bindgen_ty_48 = 5;
pub type _bindgen_ty_48 = ::core::ffi::c_uint;
pub type Locale = undefined4;
pub const EFFECT_PAPERFRAG: _bindgen_ty_49 = 0;
pub const EFFECT_GET_BANANA: _bindgen_ty_49 = 1;
pub const EFFECT_COLI_PARTICLE: _bindgen_ty_49 = 2;
pub const EFFECT_HOLDING_BANANA: _bindgen_ty_49 = 3;
pub const EFFECT_LEVITATE: _bindgen_ty_49 = 4;
pub const EFFECT_COLISTAR_PARTICLE: _bindgen_ty_49 = 5;
pub const EFFECT_BGWAT_BUBBLE_BASE: _bindgen_ty_49 = 6;
pub const EFFECT_BGWAT_BUBBLE: _bindgen_ty_49 = 7;
pub const EFFECT_METEO: _bindgen_ty_49 = 8;
pub const EFFECT_METEO_FIX: _bindgen_ty_49 = 9;
pub const EFFECT_COLIFLASH: _bindgen_ty_49 = 10;
pub const EFFECT_BNS_STG_STAR: _bindgen_ty_49 = 11;
pub const EFFECT_BNS_STG_STAR_TAIL: _bindgen_ty_49 = 12;
pub const EFFECT_BGMST_GEN_CLOUD: _bindgen_ty_49 = 13;
pub const EFFECT_BGSTM_RAINRIPPLE: _bindgen_ty_49 = 14;
pub const EFFECT_NAMEENT_CODE: _bindgen_ty_49 = 15;
pub const EFFECT_GET_NAMEENT_CODE: _bindgen_ty_49 = 16;
pub const EFFECT_BGMST_WATER: _bindgen_ty_49 = 17;
pub const EFFECT_COMMENDFRAG: _bindgen_ty_49 = 18;
pub const EFFECT_ENDING_BALLFRAG: _bindgen_ty_49 = 19;
pub const EFFECT_BANANA_DROP: _bindgen_ty_49 = 20;
pub const EFFECT_BGEND_WATER: _bindgen_ty_49 = 21;
pub const EFFECT_BGBTMFIRE_PTCL: _bindgen_ty_49 = 22;
pub const EFFECT_PIYO: _bindgen_ty_49 = 23;
pub const EFFECT_DUMMY1: _bindgen_ty_49 = 24;
pub const EFFECT_DUMMY2: _bindgen_ty_49 = 25;
pub const EFFECT_DUMMY3: _bindgen_ty_49 = 26;
pub const EFFECT_DUMMY4: _bindgen_ty_49 = 27;
pub const EFFECT_DUMMY5: _bindgen_ty_49 = 28;
pub const EFFECT_DUMMY6: _bindgen_ty_49 = 29;
pub const EFFECT_DUMMY7: _bindgen_ty_49 = 30;
pub const EFFECT_DUMMY8: _bindgen_ty_49 = 31;
pub const EFFECT_DUMMY9: _bindgen_ty_49 = 32;
pub const EFFECT_DUMMYA: _bindgen_ty_49 = 33;
pub const EFFECT_DUMMYB: _bindgen_ty_49 = 34;
pub const EFFECT_DUMMYC: _bindgen_ty_49 = 35;
pub const EFFECT_DUMMYD: _bindgen_ty_49 = 36;
pub const EFFECT_DUMMYE: _bindgen_ty_49 = 37;
pub const EFFECT_DUMMYF: _bindgen_ty_49 = 38;
pub const EFFECT_TMP001: _bindgen_ty_49 = 39;
pub const EFFECT_TMP002: _bindgen_ty_49 = 40;
pub const EFFECT_TMP003: _bindgen_ty_49 = 41;
pub const EFFECT_TMP004: _bindgen_ty_49 = 42;
pub const EFFECT_TMP005: _bindgen_ty_49 = 43;
pub const EFFECT_TMP006: _bindgen_ty_49 = 44;
pub const EFFECT_TMP007: _bindgen_ty_49 = 45;
pub const EFFECT_TMP008: _bindgen_ty_49 = 46;
pub const EFFECT_TMP009: _bindgen_ty_49 = 47;
pub const EFFECT_TMP010: _bindgen_ty_49 = 48;
pub const EFFECT_TMP011: _bindgen_ty_49 = 49;
pub const EFFECT_TMP012: _bindgen_ty_49 = 50;
pub const EFFECT_TMP013: _bindgen_ty_49 = 51;
pub const EFFECT_TMP014: _bindgen_ty_49 = 52;
pub const EFFECT_TMP015: _bindgen_ty_49 = 53;
pub const EFFECT_TMP016: _bindgen_ty_49 = 54;
pub const EFFECT_TMP017: _bindgen_ty_49 = 55;
pub const EFFECT_TMP018: _bindgen_ty_49 = 56;
pub const EFFECT_TMP019: _bindgen_ty_49 = 57;
pub const EFFECT_TMP020: _bindgen_ty_49 = 58;
pub const EFFECT_TMP021: _bindgen_ty_49 = 59;
pub const EFFECT_TMP022: _bindgen_ty_49 = 60;
pub const EFFECT_TMP023: _bindgen_ty_49 = 61;
pub const EFFECT_TMP024: _bindgen_ty_49 = 62;
pub const EFFECT_TMP025: _bindgen_ty_49 = 63;
pub const EFFECT_TMP026: _bindgen_ty_49 = 64;
pub const EFFECT_TMP027: _bindgen_ty_49 = 65;
pub const EFFECT_TMP028: _bindgen_ty_49 = 66;
pub const EFFECT_TMP029: _bindgen_ty_49 = 67;
pub const EFFECT_TMP030: _bindgen_ty_49 = 68;
pub const EFFECT_TMP031: _bindgen_ty_49 = 69;
pub const EFFECT_TMP032: _bindgen_ty_49 = 70;
pub type _bindgen_ty_49 = ::core::ffi::c_uint;
pub type EffectType = undefined2;
pub const GX_USAGE_NONE: _bindgen_ty_50 = 0;
pub const GX_USAGE_LOCKED_CACHE_ENABLED: _bindgen_ty_50 = 2;
pub const GX_USAGE_HAS_SECOND_FIFO: _bindgen_ty_50 = 4;
pub type _bindgen_ty_50 = ::core::ffi::c_uint;
pub type GxUsageState = undefined4;
pub const DSMS_DEFAULT: _bindgen_ty_51 = 0;
pub const DSMS_CHOOSE_DATA_TO_COPY: _bindgen_ty_51 = 1;
pub const DSMS_CHOOSE_WHERE_TO_COPY_TO: _bindgen_ty_51 = 2;
pub const DSMS_CONFIRM_COPY: _bindgen_ty_51 = 3;
pub const DSMS_CANCELLED_COPY: _bindgen_ty_51 = 4;
pub const DSMS_COPY_DATA: _bindgen_ty_51 = 5;
pub const DSMS_CHOOSE_DATA_TO_DELETE: _bindgen_ty_51 = 6;
pub const DSMS_CONFIRM_DELETE: _bindgen_ty_51 = 7;
pub const DSMS_CANCELLED_DELETE: _bindgen_ty_51 = 8;
pub const DSMS_DELETE_DATA: _bindgen_ty_51 = 9;
pub const DSMS_OPEN_DATA: _bindgen_ty_51 = 10;
pub const DSMS_RETURN_SELECTED: _bindgen_ty_51 = 11;
pub const DSMS_RETURN_TO_MAIN_GAME_SELECT: _bindgen_ty_51 = 12;
pub type _bindgen_ty_51 = ::core::ffi::c_uint;
pub type DataSelectMenuState = undefined1;
pub const EFFECT_NULL: _bindgen_ty_52 = 0;
pub const EFFECT_CAST_SHADOW: _bindgen_ty_52 = 1;
pub const EFFECT_RECEIVE_SHADOW: _bindgen_ty_52 = 2;
pub const EFFECT_UNKNOWN_3: _bindgen_ty_52 = 4;
pub const EFFECT_TRANSPARENCY_A: _bindgen_ty_52 = 8;
pub const EFFECT_TRANSPARENCY_B: _bindgen_ty_52 = 16;
pub const EFFECT_UNKNOWN_6: _bindgen_ty_52 = 32;
pub const EFFECT_UNKNOWN_7: _bindgen_ty_52 = 64;
pub const EFFECT_UNKNOWN_8: _bindgen_ty_52 = 128;
pub type _bindgen_ty_52 = ::core::ffi::c_uint;
pub type StageModelEffectBitfield = undefined4;
pub type PEffect = *mut Effect;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Effect {
    pub g_idx: word,
    pub id: ::core::ffi::c_short,
    pub field_0x4: [undefined; 4usize],
    pub type_: EffectType,
    pub field_0xa: [undefined; 2usize],
    pub field9_0xc: s32,
    pub field_0x10: [undefined; 4usize],
    pub g_ball_idx: undefined2,
    pub field15_0x16: s16,
    pub field_0x18: [undefined; 12usize],
    pub g_scale: Vec,
    pub g_pointer_to_some_struct: s32,
    pub g_pos: Vec,
    pub g_some_vec: Vec,
    pub g_some_rot: S16Vec,
    pub field_0x52: [undefined; 6usize],
    pub g_prev_pos: Vec,
    pub field_0x64: [undefined; 40usize],
    pub g_some_vec2: Vec,
    pub g_some_vec3: Vec,
    pub field_0xa4: [undefined; 12usize],
}
impl Default for Effect {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const PMT_UNKNOWN0: _bindgen_ty_53 = 0;
pub const PMT_CHALLENGE: _bindgen_ty_53 = 1;
pub const PMT_PRACTICE: _bindgen_ty_53 = 2;
pub const PMT_UNKNOWN3: _bindgen_ty_53 = 3;
pub const PMT_UNKNOWN4: _bindgen_ty_53 = 4;
pub const PMT_STORY_STAGE_SELECT: _bindgen_ty_53 = 5;
pub const PMT_STORY_PLAY: _bindgen_ty_53 = 6;
pub const PMT_UNKNOWN7: _bindgen_ty_53 = 7;
pub type _bindgen_ty_53 = ::core::ffi::c_uint;
pub type PauseMenuType = undefined4;
pub type Pytgut = *mut ytgut;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ytgut {
    pub field_0x0: [undefined; 4usize],
}
pub type PGDialogStruct = *mut GDialogStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GDialogStruct {
    pub g_test_dialog_ptr: undefined4,
    pub field_0x4: [undefined; 312usize],
}
impl Default for GDialogStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PPoolInfo = *mut PoolInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct PoolInfo {
    pub len: dword,
    pub low_free_idx: dword,
    pub upper_bound: dword,
    pub status_list: *mut u8_,
}
impl Default for PoolInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PSelMenuInfo = *mut SelMenuInfo;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SelMenuInfo {
    pub menu_stack_ptr: u8_,
    pub menu_stack: [u8_; 10usize],
    pub field_0xb: [undefined; 3usize],
    pub field5_0xe: undefined2,
}
pub const PIID_LEFT: _bindgen_ty_54 = 0;
pub const PIID_RIGHT: _bindgen_ty_54 = 1;
pub const PIID_UP: _bindgen_ty_54 = 2;
pub const PIID_DOWN: _bindgen_ty_54 = 3;
pub const PIID_L: _bindgen_ty_54 = 4;
pub const PIID_R: _bindgen_ty_54 = 5;
pub const PIID_A: _bindgen_ty_54 = 6;
pub const PIID_B: _bindgen_ty_54 = 7;
pub const PIID_X: _bindgen_ty_54 = 8;
pub type _bindgen_ty_54 = ::core::ffi::c_uint;
pub type PadInputID = undefined4;
pub const PLAYBACK_FORWARD: _bindgen_ty_55 = 0;
pub const PLAYBACK_PAUSE: _bindgen_ty_55 = 1;
pub const PLAYBACK_BACKWARD: _bindgen_ty_55 = 2;
pub const PLAYBACK_FAST_FORWARD: _bindgen_ty_55 = 3;
pub const PLAYBACK_FAST_BACKWARD: _bindgen_ty_55 = 4;
pub type _bindgen_ty_55 = ::core::ffi::c_uint;
pub type PlaybackState = undefined2;
pub const TEXTDRAW_FLAG_BORDER: _bindgen_ty_56 = 536870912;
pub const TEXTDRAW_FLAG_DROP_SHADOW: _bindgen_ty_56 = 1073741824;
pub const TEXTDRAW_FLAG_PROPORTIONAL: _bindgen_ty_56 = 2147483648;
pub type _bindgen_ty_56 = ::core::ffi::c_uint;
pub type TextDrawFlags = undefined4;
pub type _IO_lock_t = ::core::ffi::c_void;
pub type P_IO_marker = *mut _IO_marker;
pub type P_IO_FILE = *mut _IO_FILE;
pub type __off_t = ::core::ffi::c_long;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::core::ffi::c_int,
}
impl Default for _IO_marker {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::core::ffi::c_int,
    pub _IO_read_ptr: *mut ::core::ffi::c_char,
    pub _IO_read_end: *mut ::core::ffi::c_char,
    pub _IO_read_base: *mut ::core::ffi::c_char,
    pub _IO_write_base: *mut ::core::ffi::c_char,
    pub _IO_write_ptr: *mut ::core::ffi::c_char,
    pub _IO_write_end: *mut ::core::ffi::c_char,
    pub _IO_buf_base: *mut ::core::ffi::c_char,
    pub _IO_buf_end: *mut ::core::ffi::c_char,
    pub _IO_save_base: *mut ::core::ffi::c_char,
    pub _IO_backup_base: *mut ::core::ffi::c_char,
    pub _IO_save_end: *mut ::core::ffi::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::core::ffi::c_int,
    pub _flags2: ::core::ffi::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ushort,
    pub _vtable_offset: ::core::ffi::c_char,
    pub _shortbuf: [::core::ffi::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub __pad1: *mut ::core::ffi::c_void,
    pub __pad2: *mut ::core::ffi::c_void,
    pub __pad3: *mut ::core::ffi::c_void,
    pub __pad4: *mut ::core::ffi::c_void,
    pub __pad5: usize,
    pub _mode: ::core::ffi::c_int,
    pub _unused2: [::core::ffi::c_char; 15usize],
    pub padding_0x73: [undefined; 1usize],
}
impl Default for _IO_FILE {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type f64_ = f64;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
pub type bool_t = ::core::ffi::c_int;
pub type PgSceneData = *mut gSceneData;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct gSceneData {
    pub world_theme: ::core::ffi::c_char,
    pub g_anim_flag: ::core::ffi::c_char,
    pub ape_count: ::core::ffi::c_char,
    pub field_0x3: [undefined; 5usize],
    pub LOD: ::core::ffi::c_char,
    pub unknown: ::core::ffi::c_char,
    pub scene_item_count: ::core::ffi::c_char,
    pub field_0xb: [undefined; 1usize],
    pub field12_0xc: *mut *mut ::core::ffi::c_char,
}
impl Default for gSceneData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PStagedefBackgroundAnimHeader = *mut StagedefBackgroundAnimHeader;
pub type PStagedefAnimKeyframe = *mut StagedefAnimKeyframe;
pub const EASING_CONSTANT: _bindgen_ty_57 = 0;
pub const EASING_LINEAR: _bindgen_ty_57 = 1;
pub const EASING_SMOOTH: _bindgen_ty_57 = 2;
pub type _bindgen_ty_57 = ::core::ffi::c_uint;
pub type Easing = undefined4;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefBackgroundAnimHeader {
    pub field_0x0: [undefined; 4usize],
    pub loop_point_seconds: f32,
    pub field_0x8: [undefined; 8usize],
    pub rot_x_keyframe_count: u32_,
    pub rot_x_keyframe_list: *mut StagedefAnimKeyframe,
    pub rot_y_keyframe_count: u32_,
    pub rot_y_keyframe_list: *mut StagedefAnimKeyframe,
    pub rot_z_keyframe_count: u32_,
    pub rot_z_keyframe_list: *mut StagedefAnimKeyframe,
    pub pos_x_keyframe_count: u32_,
    pub pos_x_keyframe_list: *mut StagedefAnimKeyframe,
    pub pos_y_keyframe_count: u32_,
    pub pos_y_keyframe_list: *mut StagedefAnimKeyframe,
    pub pos_z_keyframe_count: u32_,
    pub pos_z_keyframe_list: *mut StagedefAnimKeyframe,
    pub field_0x40: [undefined; 16usize],
}
impl Default for StagedefBackgroundAnimHeader {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefAnimKeyframe {
    pub easing: Easing,
    pub time: f32,
    pub value: f32,
    pub tangent_in: f32,
    pub tangent_out: f32,
}
pub type PStagedefEffectHeader = *mut StagedefEffectHeader;
pub type PStagedefEffect1 = *mut StagedefEffect1;
pub type PStagedefEffect2 = *mut StagedefEffect2;
pub type PStagedefTextureScroll = *mut StagedefTextureScroll;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefEffectHeader {
    pub fx1_keyframe_count: u32_,
    pub fx1_keyframe_list: *mut StagedefEffect1,
    pub fx2_keyframe_count: u32_,
    pub fx2_keyframe_list: *mut StagedefEffect2,
    pub texture_scroll: *mut StagedefTextureScroll,
    pub field_0x14: [undefined; 28usize],
}
impl Default for StagedefEffectHeader {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefEffect1 {
    pub field0_0x0: dword,
    pub field1_0x4: dword,
    pub field2_0x8: dword,
    pub field3_0xc: word,
    pub field4_0xe: word,
    pub field5_0x10: word,
    pub field_0x12: [undefined; 2usize],
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefEffect2 {
    pub field0_0x0: f32,
    pub field1_0x4: f32,
    pub field2_0x8: f32,
    pub field_0xc: [undefined; 4usize],
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefTextureScroll {
    pub speed: Vec2d,
}
pub type PStagedefFogAnimHeader = *mut StagedefFogAnimHeader;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefFogAnimHeader {
    pub start_distance_keyframe_count: u32_,
    pub start_distance_keyframe_list: *mut StagedefAnimKeyframe,
    pub end_distance_keyframe_count: u32_,
    pub end_distance_keyframe_list: *mut StagedefAnimKeyframe,
    pub red_keyframe_count: u32_,
    pub red_keyframe_list: *mut StagedefAnimKeyframe,
    pub green_keyframe_count: u32_,
    pub green_keyframe_list: *mut StagedefAnimKeyframe,
    pub blue_keyframe_count: u32_,
    pub blue_keyframe_list: *mut StagedefAnimKeyframe,
    pub unk_keyframe_count: u32_,
    pub unk_keyframe_list: *mut StagedefAnimKeyframe,
}
impl Default for StagedefFogAnimHeader {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PStagedefAnimHeader = *mut StagedefAnimHeader;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefAnimHeader {
    pub rot_x_keyframe_count: u32_,
    pub rot_x_keyframe_list: *mut StagedefAnimKeyframe,
    pub rot_y_keyframe_count: u32_,
    pub rot_y_keyframe_list: *mut StagedefAnimKeyframe,
    pub rot_z_keyframe_count: u32_,
    pub rot_z_keyframe_list: *mut StagedefAnimKeyframe,
    pub pos_x_keyframe_count: u32_,
    pub pos_x_keyframe_list: *mut StagedefAnimKeyframe,
    pub pos_y_keyframe_count: u32_,
    pub pos_y_keyframe_list: *mut StagedefAnimKeyframe,
    pub pos_z_keyframe_count: u32_,
    pub pos_z_keyframe_list: *mut StagedefAnimKeyframe,
    pub field_0x30: [undefined; 16usize],
}
impl Default for StagedefAnimHeader {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PStagedefFileHeader = *mut StagedefFileHeader;
pub type PStagedefColiHeader = *mut StagedefColiHeader;
pub type PStagedefStart = *mut StagedefStart;
pub type PStagedefFallout = *mut StagedefFallout;
pub type PStagedefGoal = *mut StagedefGoal;
pub type PStagedefBumper = *mut StagedefBumper;
pub type PStagedefJamabar = *mut StagedefJamabar;
pub type PStagedefBanana = *mut StagedefBanana;
pub type PStagedefColiCone = *mut StagedefColiCone;
pub type PStagedefColiSphere = *mut StagedefColiSphere;
pub type PStagedefColiCylinder = *mut StagedefColiCylinder;
pub type PStagedefFalloutVolume = *mut StagedefFalloutVolume;
pub type PStagedefBackgroundModel = *mut StagedefBackgroundModel;
pub type PStagedefForegroundModel = *mut StagedefForegroundModel;
pub type PStagedefReflectiveStageModel = *mut StagedefReflectiveStageModel;
pub type PStagedefStageModelInstance = *mut StagedefStageModelInstance;
pub type PStagedefStageModelPtrA = *mut StagedefStageModelPtrA;
pub type PStagedefStageModelPtrB = *mut StagedefStageModelPtrB;
pub type PStagedefButton = *mut StagedefButton;
pub type PStagedefWormhole = *mut StagedefWormhole;
pub type PStagedefFog = *mut StagedefFog;
pub type PStagedefDynamicReflectionPlane = *mut StagedefDynamicReflectionPlane;
pub type PStagedefMystery3 = *mut StagedefMystery3;
pub const ANIM_LOOP: _bindgen_ty_58 = 0;
pub const ANIM_PLAY_ONCE: _bindgen_ty_58 = 1;
pub const ANIM_SEESAW: _bindgen_ty_58 = 2;
pub type _bindgen_ty_58 = ::core::ffi::c_uint;
pub type StagedefAnimType = undefined2;
pub type PStagedefColiTri = *mut StagedefColiTri;
pub type PStagedefMystery5 = *mut StagedefMystery5;
pub type PStagedefBackgroundAnim2Header = *mut StagedefBackgroundAnim2Header;
pub type PStagedefStageModel = *mut StagedefStageModel;
pub const GX_FOG_NONE: _bindgen_ty_59 = 0;
pub const GX_FOG_LIN: _bindgen_ty_59 = 2;
pub const GX_FOX_EXP: _bindgen_ty_59 = 4;
pub const GX_FOG_EXP2: _bindgen_ty_59 = 5;
pub const GX_FOG_REVEXP: _bindgen_ty_59 = 6;
pub const GX_FOG_REVEXP2: _bindgen_ty_59 = 7;
pub type _bindgen_ty_59 = ::core::ffi::c_uint;
pub type GXFogType = undefined1;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefStageModelInstance {
    pub stage_model_a: *mut StagedefStageModelPtrA,
    pub position: Vec,
    pub rotation: S16Vec,
    pub g_not_padding: undefined2,
    pub scale: Vec,
}
impl Default for StagedefStageModelInstance {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefBumper {
    pub position: Vec,
    pub rotation: S16Vec,
    pub padding: undefined2,
    pub scale: Vec,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefReflectiveStageModel {
    pub model_name: *mut ::core::ffi::c_char,
    pub g_model_header_ptr: *mut GmaModel,
    pub field_0x8: [undefined; 4usize],
}
impl Default for StagedefReflectiveStageModel {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefFallout {
    pub y: f32,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefButton {
    pub position: Vec,
    pub rotation: S16Vec,
    pub playback_state: PlaybackState,
    pub anim_group_id: u16_,
    pub padding: undefined2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefDynamicReflectionPlane {
    pub model_name_ptr: *mut ::core::ffi::c_char,
    pub pos: Vec,
    pub rot: S16Vec,
}
impl Default for StagedefDynamicReflectionPlane {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefStageModel {
    pub field_0x0: [undefined; 4usize],
    pub model_name: *mut ::core::ffi::c_char,
    pub some_flag: uint,
    pub field_0xc: [undefined; 4usize],
}
impl Default for StagedefStageModel {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefColiSphere {
    pub position: Vec,
    pub radius: f32,
    pub g_not_padding: undefined4,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefColiCylinder {
    pub position: Vec,
    pub radius: f32,
    pub height: f32,
    pub rotation: S16Vec,
    pub g_not_padding: undefined2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefBackgroundModel {
    pub g_model_flag: uint,
    pub model_name: *mut ::core::ffi::c_char,
    pub gma_model: *mut GmaModel,
    pub position: Vec,
    pub rotation: S16Vec,
    pub padding: undefined2,
    pub scale: Vec,
    pub background_anim_header: *mut StagedefBackgroundAnimHeader,
    pub background_anim2_header: *mut StagedefBackgroundAnim2Header,
    pub effect_header: *mut StagedefEffectHeader,
}
impl Default for StagedefBackgroundModel {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefStageModelPtrA {
    pub some_effect_bitflag: StageModelEffectBitfield,
    pub some_counter: uint,
    pub stage_model: *mut StagedefStageModel,
}
impl Default for StagedefStageModelPtrA {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefStageModelPtrB {
    pub stage_model_a: *mut StagedefStageModelPtrA,
}
impl Default for StagedefStageModelPtrB {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefBanana {
    pub position: Vec,
    pub type_: BananaType,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefMystery5 {
    pub field_0x0: [undefined; 4usize],
    pub field4_0x4: f32,
    pub field5_0x8: f32,
    pub field6_0xc: f32,
    pub field7_0x10: f32,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefColiCone {
    pub position: Vec,
    pub rotation: S16Vec,
    pub g_not_padding: undefined2,
    pub scale: Vec,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefJamabar {
    pub position: Vec,
    pub rotation: S16Vec,
    pub padding: undefined2,
    pub scale: Vec,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefMystery3 {
    pub field0_0x0: f32,
    pub field1_0x4: f32,
    pub field2_0x8: f32,
    pub field3_0xc: undefined2,
    pub field4_0xe: undefined2,
    pub field_0x10: [undefined; 20usize],
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefFalloutVolume {
    pub position: Vec,
    pub size: Vec,
    pub rotation: S16Vec,
    pub padding: undefined2,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefColiTri {
    pub vert1: Vec,
    pub normal: Vec,
    pub rot_from_xy: S16Vec,
    pub flags: undefined2,
    pub vert2_delta: Vec2d,
    pub vert3_delta: Vec2d,
    pub tangent: Vec2d,
    pub bitangent: Vec2d,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefGoal {
    pub position: Vec,
    pub rotation: S16Vec,
    pub type_: GoalType,
    pub field_0x13: [undefined; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefWormhole {
    pub field_0x0: [undefined; 4usize],
    pub positon: Vec,
    pub rotation: S16Vec,
    pub padding: undefined2,
    pub destination: *mut StagedefWormhole,
}
impl Default for StagedefWormhole {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefBackgroundAnim2Header {
    pub field_0x0: [undefined; 4usize],
    pub loop_point_seconds: f32,
    pub unk1_keyframe_count: u32_,
    pub unk1_keyframe_list: *mut StagedefAnimKeyframe,
    pub unk2_keyframe_count: u32_,
    pub unk2_keyframe_list: *mut StagedefAnimKeyframe,
    pub rot_x_keyframe_count: u32_,
    pub rot_x_keyframe_list: *mut StagedefAnimKeyframe,
    pub rot_y_keyframe_count: u32_,
    pub rot_y_keyframe_list: *mut StagedefAnimKeyframe,
    pub rot_z_keyframe_count: u32_,
    pub rot_z_keyframe_list: *mut StagedefAnimKeyframe,
    pub pos_x_keyframe_count: u32_,
    pub pos_x_keyframe_list: *mut StagedefAnimKeyframe,
    pub pos_y_keyframe_count: u32_,
    pub pos_y_keyframe_list: *mut StagedefAnimKeyframe,
    pub pos_z_keyframe_count: u32_,
    pub pos_z_keyframe_list: *mut StagedefAnimKeyframe,
    pub unk9_keyframe_count: u32_,
    pub unk9_keyframe_list: *mut StagedefAnimKeyframe,
    pub unk10_keyframe_count: u32_,
    pub unk10_keyframe_list: *mut StagedefAnimKeyframe,
    pub unk11_keyframe_count: u32_,
    pub unk11_keyframe_list: *mut StagedefAnimKeyframe,
}
impl Default for StagedefBackgroundAnim2Header {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefStart {
    pub position: Vec,
    pub rotation: S16Vec,
    pub padding: undefined2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefFileHeader {
    pub magic_number_a: u32_,
    pub magic_number_b: u32_,
    pub coli_header_count: u32_,
    pub coli_header_list: *mut StagedefColiHeader,
    pub start: *mut StagedefStart,
    pub fallout: *mut StagedefFallout,
    pub goal_count: u32_,
    pub goal_list: *mut StagedefGoal,
    pub bumper_count: u32_,
    pub bumper_list: *mut StagedefBumper,
    pub jamabar_count: u32_,
    pub jamabar_list: *mut StagedefJamabar,
    pub banana_count: u32_,
    pub banana_list: *mut StagedefBanana,
    pub coli_cone_count: u32_,
    pub coli_cone_list: *mut StagedefColiCone,
    pub coli_sphere_count: u32_,
    pub coli_sphere_list: *mut StagedefColiSphere,
    pub coli_cylinder_count: u32_,
    pub coli_cylinder_list: *mut StagedefColiCylinder,
    pub fallout_volume_count: u32_,
    pub fallout_volume_list: *mut StagedefFalloutVolume,
    pub background_model_count: u32_,
    pub background_model_list: *mut StagedefBackgroundModel,
    pub foreground_model_count: u32_,
    pub foreground_model_list: *mut StagedefForegroundModel,
    pub field26_0x68: dword,
    pub field27_0x6c: dword,
    pub reflective_stage_model_count: u32_,
    pub reflective_stage_model_list: *mut StagedefReflectiveStageModel,
    pub field_0x78: [undefined; 12usize],
    pub stage_model_instance_count: u32_,
    pub stage_model_instance_list: *mut StagedefStageModelInstance,
    pub stage_model_a_count: u32_,
    pub stage_model_a_list: *mut StagedefStageModelPtrA,
    pub stage_model_b_count: u32_,
    pub stage_model_b_list: *mut StagedefStageModelPtrB,
    pub field_0x9c: [undefined; 12usize],
    pub button_count: u32_,
    pub button_list: *mut StagedefButton,
    pub fog_animation: *mut StagedefFogAnimHeader,
    pub wormhole_count: u32_,
    pub wormhole_list: *mut StagedefWormhole,
    pub fog: *mut StagedefFog,
    pub field_0xc0: [undefined; 8usize],
    pub dynamic_reflection_plane: *mut StagedefDynamicReflectionPlane,
    pub field_0xcc: [undefined; 8usize],
    pub mystery3: *mut StagedefMystery3,
    pub field_0xd8: [undefined; 1988usize],
}
impl Default for StagedefFileHeader {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StagedefFog {
    pub type_: GXFogType,
    pub field_0x1: [undefined; 3usize],
    pub fog_start_distance: f32,
    pub fog_end_distance: f32,
    pub color: Vec,
    pub field_0x18: [undefined; 12usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefForegroundModel {
    pub field0_0x0: undefined4,
    pub model_name: *mut ::core::ffi::c_char,
    pub gma_model: *mut GmaModel,
    pub position: Vec,
    pub rotation: S16Vec,
    pub padding: undefined2,
    pub scale: Vec,
    pub field7_0x2c: undefined4,
    pub background_anim2_header: *mut ::core::ffi::c_void,
    pub field9_0x34: *mut ::core::ffi::c_void,
}
impl Default for StagedefForegroundModel {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct StagedefColiHeader {
    pub origin: Vec,
    pub initial_rotation: S16Vec,
    pub anim_loop_type_and_seesaw: StagedefAnimType,
    pub animation_header: *mut StagedefAnimHeader,
    pub conveyor_speed: Vec,
    pub coli_tri_list: *mut StagedefColiTri,
    pub coli_tri_idxs: *mut *mut s16,
    pub coli_grid_start_x: f32_,
    pub coli_grid_start_z: f32_,
    pub coli_grid_step_x: f32_,
    pub coli_grid_step_z: f32_,
    pub coli_grid_cells_x: u32_,
    pub coli_grid_cells_z: u32_,
    pub goal_count: u32_,
    pub goal_list: *mut StagedefGoal,
    pub bumper_count: u32_,
    pub bumper_list: *mut StagedefBumper,
    pub jamabar_count: u32_,
    pub jamabar_list: *mut StagedefJamabar,
    pub banana_count: u32_,
    pub banana_list: *mut StagedefBanana,
    pub cone_collision_object_count: u32_,
    pub cone_collision_object_list: *mut StagedefColiCone,
    pub sphere_collision_object_count: u32_,
    pub sphere_collision_object_list: *mut StagedefColiSphere,
    pub cylinder_collision_object_count: u32_,
    pub cylinder_collision_object_list: *mut StagedefColiCylinder,
    pub fallout_volume_count: u32_,
    pub fallout_volume_list: *mut StagedefFalloutVolume,
    pub reflective_stage_model_count: u32_,
    pub reflective_stage_model_list: *mut StagedefReflectiveStageModel,
    pub stage_model_instance_count: u32_,
    pub stage_model_instance_list: *mut StagedefStageModelInstance,
    pub stage_model_b_count: u32_,
    pub stage_model_b_list: *mut StagedefStageModelPtrB,
    pub field_0x9c: [undefined; 8usize],
    pub anim_group_id: u16_,
    pub g_not_padding: undefined2,
    pub button_count: u32_,
    pub button_list: *mut StagedefButton,
    pub field_0xb0: [undefined; 4usize],
    pub mystery5: *mut StagedefMystery5,
    pub seesaw_sensitivity: f32,
    pub seesaw_friction: f32,
    pub seesaw_spring: f32,
    pub wormhole_count: u32_,
    pub wormhole_list: *mut StagedefWormhole,
    pub initial_playback_state: u32_,
    pub field_0xd0: [undefined; 4usize],
    pub anim_loop_point_seconds: f32,
    pub texture_scroll: *mut StagedefTextureScroll,
    pub field_0xdc: [undefined; 960usize],
}
impl Default for StagedefColiHeader {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __gnuc_va_list = *mut ::core::ffi::c_void;
pub type va_list = __gnuc_va_list;
pub type PGmaShape = *mut GmaShape;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GmaShape {
    pub g_some_bitflag: uint,
    pub g_some_short: ::core::ffi::c_short,
    pub g_some_short2: ::core::ffi::c_short,
    pub g_some_short3: ::core::ffi::c_short,
    pub g_some_short4: ::core::ffi::c_short,
    pub g_some_flag: byte,
    pub g_some_flag2: byte,
    pub g_some_flag3: byte,
    pub field_0xf: [undefined; 2usize],
    pub g_some_flag4: byte,
    pub g_some_flag5: byte,
    pub g_some_flag6: byte,
    pub field_0x14: [undefined; 2usize],
    pub g_some_ushort: ushort,
    pub field_0x18: [undefined; 4usize],
    pub g_some_uint4: uint,
    pub field_0x20: [undefined; 8usize],
    pub g_some_int: ::core::ffi::c_int,
    pub g_some_int2: ::core::ffi::c_int,
    pub field_0x30: [undefined; 12usize],
    pub g_some_float: f32,
    pub g_some_uint5: uint,
    pub field_0x44: [undefined; 28usize],
}
pub type PGmaTevLayer = *mut GmaTevLayer;
pub const TEXFLAG_UNK_BIT0: _bindgen_ty_60 = 1;
pub const TEXFLAG_UNK_BIT1: _bindgen_ty_60 = 2;
pub const TEXFLAG_REPEAT_U: _bindgen_ty_60 = 4;
pub const TEXFLAG_MIRROR_U: _bindgen_ty_60 = 8;
pub const TEXFLAG_REPEAT_V: _bindgen_ty_60 = 16;
pub const TEXFLAG_MIRROR_V: _bindgen_ty_60 = 32;
pub const TEXFLAG_UNK_BIT6: _bindgen_ty_60 = 64;
pub const TEXFLAG_UNK_BIT7: _bindgen_ty_60 = 128;
pub const TEXFLAG_ENABLE_MIPMAPS: _bindgen_ty_60 = 256;
pub const TEXFLAG_UNK_BIT9: _bindgen_ty_60 = 512;
pub const TEXFLAG_UNK_BIT10: _bindgen_ty_60 = 1024;
pub const TEXFLAG_G_NEAR: _bindgen_ty_60 = 2048;
pub const TEXFLAG_G_HEIGHTMAP_BLEND_GRAYSCALE: _bindgen_ty_60 = 4096;
pub const TEXFLAG_G_ALPHA_MASK: _bindgen_ty_60 = 8192;
pub const TEXFLAG_UNK_BIT14: _bindgen_ty_60 = 16384;
pub const TEXFLAG_UNK_BIT15: _bindgen_ty_60 = 32768;
pub const TEXFLAG_UNK_BIT16: _bindgen_ty_60 = 65536;
pub const TEXFLAG_ENABLE_UV_SCROLL: _bindgen_ty_60 = 131072;
pub const TEXFLAG_UNK_BIT18: _bindgen_ty_60 = 262144;
pub const TEXFLAG_UNK_BIT19: _bindgen_ty_60 = 524288;
pub const TEXFLAG_UNK_BIT20: _bindgen_ty_60 = 1048576;
pub const TEXFLAG_UNK_BIT21: _bindgen_ty_60 = 2097152;
pub const TEXFLAG_UNK_BIT22: _bindgen_ty_60 = 4194304;
pub const TEXFLAG_UNK_BIT23: _bindgen_ty_60 = 8388608;
pub type _bindgen_ty_60 = ::core::ffi::c_uint;
pub type GmaTevLayerFlags = undefined4;
pub const GX_ANISO_1: _bindgen_ty_61 = 0;
pub const GX_ANISO_2: _bindgen_ty_61 = 1;
pub const GX_ANISO_4: _bindgen_ty_61 = 2;
pub const GX_MAX_ANISOTROPY: _bindgen_ty_61 = 3;
pub type _bindgen_ty_61 = ::core::ffi::c_uint;
pub type GXAnisotropy = undefined1;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct GmaTevLayer {
    pub flags: GmaTevLayerFlags,
    pub tpl_texture_idx: u16_,
    pub field_0x6: [undefined; 1usize],
    pub anisotropy: GXAnisotropy,
    pub texobj: *mut GXTexObj,
    pub unk_0xC: byte,
    pub g_is_swappable_texture: byte,
    pub tex_descriptor_idx: s16,
    pub field_0x10: [undefined; 16usize],
}
impl Default for GmaTevLayer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PGmaVertexControlHeader = *mut GmaVertexControlHeader;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GmaVertexControlHeader {
    pub vertex_count: s32,
    pub vertex_control_type1_array_offset: s32,
    pub vertex_control_type2_array_offset: s32,
    pub vertex_control_type3_offset: s32,
    pub vertex_control_type4_offset: s32,
    pub field5_0x14: dword,
    pub field_0x18: [undefined; 8usize],
}
pub type PGma = *mut Gma;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Gma {
    pub model_count: s32,
    pub header_size: s32,
}
pub type POSSectionInfo = *mut OSSectionInfo;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OSSectionInfo {
    pub offset: u32_,
    pub size: u32_,
}
pub type POSThreadLink = *mut OSThreadLink;
pub type POSThread = *mut OSThread;
pub type POSContext = *mut OSContext;
pub type OSPriority = s32;
pub type POSThreadQueue = *mut OSThreadQueue;
pub type POSMutex = *mut OSMutex;
pub type POSMutexQueue = *mut OSMutexQueue;
pub type POSMutexLink = *mut OSMutexLink;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OSThreadLink {
    pub next: *mut OSThread,
    pub prev: *mut OSThread,
}
impl Default for OSThreadLink {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OSMutexLink {
    pub next: *mut OSMutex,
    pub prev: *mut OSMutex,
}
impl Default for OSMutexLink {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OSThreadQueue {
    pub head: *mut OSThread,
    pub tail: *mut OSThread,
}
impl Default for OSThreadQueue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OSMutex {
    pub queue: OSThreadQueue,
    pub thread: *mut OSThread,
    pub count: s32,
    pub link: OSMutexLink,
}
impl Default for OSMutex {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OSContext {
    pub gpr: [u32_; 32usize],
    pub cr: u32_,
    pub lr: u32_,
    pub ctr: u32_,
    pub xer: u32_,
    pub fpr: [f64_; 32usize],
    pub fpscr_pad: u32_,
    pub fpscr: u32_,
    pub ssr0: u32_,
    pub ssr1: u32_,
    pub mode: u16_,
    pub state: u16_,
    pub gqr: [u32_; 8usize],
    pub psf: [f64_; 32usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OSMutexQueue {
    pub head: *mut OSMutex,
    pub tail: *mut OSMutex,
}
impl Default for OSMutexQueue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OSThread {
    pub context: OSContext,
    pub state: u16_,
    pub attr: u16_,
    pub suspend: s32,
    pub priority: OSPriority,
    pub base: OSPriority,
    pub val: *mut ::core::ffi::c_void,
    pub queue: *mut OSThreadQueue,
    pub link: OSThreadLink,
    pub queueJoin: *mut OSThreadQueue,
    pub mutex: *mut OSMutex,
    pub queueMutex: OSMutexQueue,
    pub linkActive: OSThreadLink,
    pub stackBase: *mut u8_,
    pub stackEnd: *mut u32_,
}
impl Default for OSThread {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GX_NONE: _bindgen_ty_62 = 0;
pub const GX_DIRECT: _bindgen_ty_62 = 1;
pub const GX_INDEX8: _bindgen_ty_62 = 2;
pub const GX_INDEX16: _bindgen_ty_62 = 3;
pub type _bindgen_ty_62 = ::core::ffi::c_uint;
pub type GXAttrType = undefined4;
pub const GX_VCACHE_MISS_ALL: _bindgen_ty_63 = 0;
pub const GX_VCACHE_MISS_POS: _bindgen_ty_63 = 1;
pub const GX_VCACHE_MISS_NRM: _bindgen_ty_63 = 2;
pub type _bindgen_ty_63 = ::core::ffi::c_uint;
pub type GXEvent = undefined4;
pub const GX_BM_NONE: _bindgen_ty_64 = 0;
pub const GX_BM_BLEND: _bindgen_ty_64 = 1;
pub const GX_BM_LOGIC: _bindgen_ty_64 = 2;
pub const GX_BM_SUBTRACT: _bindgen_ty_64 = 3;
pub const GX_MAX_BLENDMODE: _bindgen_ty_64 = 4;
pub type _bindgen_ty_64 = ::core::ffi::c_uint;
pub type GXBlendMode = undefined4;
pub const GX_READ_00: _bindgen_ty_65 = 0;
pub const GX_READ_FF: _bindgen_ty_65 = 1;
pub const GX_READ_NONE: _bindgen_ty_65 = 2;
pub type _bindgen_ty_65 = ::core::ffi::c_uint;
pub type GXAlphaReadMode = undefined4;
pub type PPPCWGPipe = *mut PPCWGPipe;
#[repr(C)]
#[derive(Copy, Clone)]
pub union PPCWGPipe {
    pub v_u8: u8_,
    pub v_u16: u16_,
    pub v_u32: u32_,
    pub v_s8: s8,
    pub v_s16: s16,
    pub v_s32: s32,
    pub v_f32: f32_,
    pub v_f64: f64_,
}
impl Default for PPCWGPipe {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type OSTick = u32_;
pub type PGXVtxAttrFmtList = *mut GXVtxAttrFmtList;
pub const GX_VA_PNMTXIDX: _bindgen_ty_66 = 0;
pub const GX_VA_TEX0MTXIDX: _bindgen_ty_66 = 1;
pub const GX_VA_TEX1MTXIDX: _bindgen_ty_66 = 2;
pub const GX_VA_TEX2MTXIDX: _bindgen_ty_66 = 3;
pub const GX_VA_TEX3MTXIDX: _bindgen_ty_66 = 4;
pub const GX_VA_TEX4MTXIDX: _bindgen_ty_66 = 5;
pub const GX_VA_TEX5MTXIDX: _bindgen_ty_66 = 6;
pub const GX_VA_TEX6MTXIDX: _bindgen_ty_66 = 7;
pub const GX_VA_TEX7MTXIDX: _bindgen_ty_66 = 8;
pub const GX_VA_POS: _bindgen_ty_66 = 9;
pub const GX_VA_NRM: _bindgen_ty_66 = 10;
pub const GX_VA_CLR0: _bindgen_ty_66 = 11;
pub const GX_VA_CLR1: _bindgen_ty_66 = 12;
pub const GX_VA_TEX0: _bindgen_ty_66 = 13;
pub const GX_VA_TEX1: _bindgen_ty_66 = 14;
pub const GX_VA_TEX2: _bindgen_ty_66 = 15;
pub const GX_VA_TEX3: _bindgen_ty_66 = 16;
pub const GX_VA_TEX4: _bindgen_ty_66 = 17;
pub const GX_VA_TEX5: _bindgen_ty_66 = 18;
pub const GX_VA_TEX6: _bindgen_ty_66 = 19;
pub const GX_VA_TEX7: _bindgen_ty_66 = 20;
pub const GX_POS_MTX_ARRAY: _bindgen_ty_66 = 21;
pub const GX_NRM_MTX_ARRAY: _bindgen_ty_66 = 22;
pub const GX_TEX_MTX_ARRAY: _bindgen_ty_66 = 23;
pub const GX_LIGHT_ARRAY: _bindgen_ty_66 = 24;
pub const GX_VA_NBT: _bindgen_ty_66 = 25;
pub const GX_VA_MAX_ATTR: _bindgen_ty_66 = 26;
pub const GX_VA_NULL: _bindgen_ty_66 = 255;
pub type _bindgen_ty_66 = ::core::ffi::c_uint;
pub type GXAttr = undefined4;
pub const GX_CLR_RGB: _bindgen_ty_67 = 0;
pub const GX_CLR_RGBA: _bindgen_ty_67 = 1;
pub const GX_NRM_NBT3: _bindgen_ty_67 = 2;
pub type _bindgen_ty_67 = ::core::ffi::c_uint;
pub type GXCompCnt = undefined4;
pub const GX_RGB565: _bindgen_ty_68 = 0;
pub const GX_RGB8: _bindgen_ty_68 = 1;
pub const GX_RGBX8: _bindgen_ty_68 = 2;
pub const GX_RGBA4: _bindgen_ty_68 = 3;
pub const GX_F32: _bindgen_ty_68 = 4;
pub const GX_RGBA8: _bindgen_ty_68 = 5;
pub type _bindgen_ty_68 = ::core::ffi::c_uint;
pub type GXCompType = undefined4;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXVtxAttrFmtList {
    pub attr: GXAttr,
    pub cnt: GXCompCnt,
    pub type_: GXCompType,
    pub frac: u8_,
}
pub const GX_QUADS: _bindgen_ty_69 = 128;
pub const GX_TRIANGLES: _bindgen_ty_69 = 144;
pub const GX_TRIANGLESTRIP: _bindgen_ty_69 = 152;
pub const GX_TRIANGLEFAN: _bindgen_ty_69 = 160;
pub const GX_LINES: _bindgen_ty_69 = 168;
pub const GX_LINESTRIP: _bindgen_ty_69 = 176;
pub const GX_POINTS: _bindgen_ty_69 = 184;
pub type _bindgen_ty_69 = ::core::ffi::c_uint;
pub type GXPrimitive = undefined4;
pub const GX_TEV_KCSEL_1: _bindgen_ty_70 = 0;
pub const GX_TEV_KCSEL_7_8: _bindgen_ty_70 = 1;
pub const GX_TEV_KCSEL_3_4: _bindgen_ty_70 = 2;
pub const GX_TEV_KCSEL_5_8: _bindgen_ty_70 = 3;
pub const GX_TEV_KCSEL_1_2: _bindgen_ty_70 = 4;
pub const GX_TEV_KCSEL_3_8: _bindgen_ty_70 = 5;
pub const GX_TEV_KCSEL_1_4: _bindgen_ty_70 = 6;
pub const GX_TEV_KCSEL_1_8: _bindgen_ty_70 = 7;
pub const GX_TEV_KCSEL_K0: _bindgen_ty_70 = 12;
pub const GX_TEV_KCSEL_K1: _bindgen_ty_70 = 13;
pub const GX_TEV_KCSEL_K2: _bindgen_ty_70 = 14;
pub const GX_TEV_KCSEL_K3: _bindgen_ty_70 = 15;
pub const GX_TEV_KCSEL_K0_R: _bindgen_ty_70 = 16;
pub const GX_TEV_KCSEL_K1_R: _bindgen_ty_70 = 17;
pub const GX_TEV_KCSEL_K2_R: _bindgen_ty_70 = 18;
pub const GX_TEV_KCSEL_K3_R: _bindgen_ty_70 = 19;
pub const GX_TEV_KCSEL_K0_G: _bindgen_ty_70 = 20;
pub const GX_TEV_KCSEL_K1_G: _bindgen_ty_70 = 21;
pub const GX_TEV_KCSEL_K2_G: _bindgen_ty_70 = 22;
pub const GX_TEV_KCSEL_K3_G: _bindgen_ty_70 = 23;
pub const GX_TEV_KCSEL_K0_B: _bindgen_ty_70 = 24;
pub const GX_TEV_KCSEL_K1_B: _bindgen_ty_70 = 25;
pub const GX_TEV_KCSEL_K2_B: _bindgen_ty_70 = 26;
pub const GX_TEV_KCSEL_K3_B: _bindgen_ty_70 = 27;
pub const GX_TEV_KCSEL_K0_A: _bindgen_ty_70 = 28;
pub const GX_TEV_KCSEL_K1_A: _bindgen_ty_70 = 29;
pub const GX_TEV_KCSEL_K2_A: _bindgen_ty_70 = 30;
pub const GX_TEV_KCSEL_K3_A: _bindgen_ty_70 = 31;
pub type _bindgen_ty_70 = ::core::ffi::c_uint;
pub type GXTevKColorSel = undefined4;
pub type OSModuleID = u32_;
pub const VI_TVMODE_NTSC_INT: _bindgen_ty_71 = 0;
pub const VI_TVMODE_NTSC_DS: _bindgen_ty_71 = 1;
pub const VI_TVMODE_NTSC_PROG: _bindgen_ty_71 = 2;
pub const VI_TVMODE_PAL_INT: _bindgen_ty_71 = 4;
pub const VI_TVMODE_PAL_DS: _bindgen_ty_71 = 5;
pub const VI_TVMODE_MPAL_INT: _bindgen_ty_71 = 8;
pub const VI_TVMODE_MPAL_DS: _bindgen_ty_71 = 9;
pub const VI_TVMODE_DEBUG_INT: _bindgen_ty_71 = 12;
pub const VI_TVMODE_DEBUG_PAL_INT: _bindgen_ty_71 = 16;
pub const VI_TVMODE_DEBUG_PAL_DS: _bindgen_ty_71 = 17;
pub const VI_TVMODE_EURGB60_INT: _bindgen_ty_71 = 20;
pub const VI_TVMODE_EURGB60_DS: _bindgen_ty_71 = 21;
pub type _bindgen_ty_71 = ::core::ffi::c_uint;
pub type VITVMode = undefined4;
pub type POSModuleInfo = *mut OSModuleInfo;
pub type POSModuleLink = *mut OSModuleLink;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OSModuleLink {
    pub next: *mut OSModuleInfo,
    pub prev: *mut OSModuleInfo,
}
impl Default for OSModuleLink {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OSModuleInfo {
    pub id: OSModuleID,
    pub link: OSModuleLink,
    pub numSections: u32_,
    pub sectionInfoOffset: u32_,
    pub nameOffset: u32_,
    pub nameSize: u32_,
    pub version: u32_,
}
impl Default for OSModuleInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GX_TF_C4: _bindgen_ty_72 = 8;
pub const GX_TF_C8: _bindgen_ty_72 = 9;
pub const GX_TF_C14X2: _bindgen_ty_72 = 10;
pub type _bindgen_ty_72 = ::core::ffi::c_uint;
pub type GXCITexFmt = undefined4;
pub const GX_TG_POS: _bindgen_ty_73 = 0;
pub const GX_TG_NRM: _bindgen_ty_73 = 1;
pub const GX_TG_BINRM: _bindgen_ty_73 = 2;
pub const GX_TG_TANGENT: _bindgen_ty_73 = 3;
pub const GX_TG_TEX0: _bindgen_ty_73 = 4;
pub const GX_TG_TEX1: _bindgen_ty_73 = 5;
pub const GX_TG_TEX2: _bindgen_ty_73 = 6;
pub const GX_TG_TEX3: _bindgen_ty_73 = 7;
pub const GX_TG_TEX4: _bindgen_ty_73 = 8;
pub const GX_TG_TEX5: _bindgen_ty_73 = 9;
pub const GX_TG_TEX6: _bindgen_ty_73 = 10;
pub const GX_TG_TEX7: _bindgen_ty_73 = 11;
pub const GX_TG_TEXCOORD0: _bindgen_ty_73 = 12;
pub const GX_TG_TEXCOORD1: _bindgen_ty_73 = 13;
pub const GX_TG_TEXCOORD2: _bindgen_ty_73 = 14;
pub const GX_TG_TEXCOORD3: _bindgen_ty_73 = 15;
pub const GX_TG_TEXCOORD4: _bindgen_ty_73 = 16;
pub const GX_TG_TEXCOORD5: _bindgen_ty_73 = 17;
pub const GX_TG_TEXCOORD6: _bindgen_ty_73 = 18;
pub const GX_TG_COLOR0: _bindgen_ty_73 = 19;
pub const GX_TG_COLOR1: _bindgen_ty_73 = 20;
pub type _bindgen_ty_73 = ::core::ffi::c_uint;
pub type GXTexGenSrc = undefined4;
pub type PGXColor = *mut GXColor;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXColor {
    pub r: u8_,
    pub g: u8_,
    pub b: u8_,
    pub a: u8_,
}
pub const GX_COLOR0: _bindgen_ty_74 = 0;
pub const GX_COLOR1: _bindgen_ty_74 = 1;
pub const GX_ALPHA0: _bindgen_ty_74 = 2;
pub const GX_ALPHA1: _bindgen_ty_74 = 3;
pub const GX_COLOR0A0: _bindgen_ty_74 = 4;
pub const GX_COLOR1A1: _bindgen_ty_74 = 5;
pub const GX_COLOR_ZERO: _bindgen_ty_74 = 6;
pub const GX_ALPHA_BUMP: _bindgen_ty_74 = 7;
pub const GX_ALPHA_BUMPN: _bindgen_ty_74 = 8;
pub const GX_COLOR_NULL: _bindgen_ty_74 = 255;
pub type _bindgen_ty_74 = ::core::ffi::c_uint;
pub type GXChannelID = undefined4;
pub const VI_XFBMODE_SF: _bindgen_ty_75 = 0;
pub const VI_XFBMODE_DF: _bindgen_ty_75 = 1;
pub type _bindgen_ty_75 = ::core::ffi::c_uint;
pub type VIXFBMode = undefined4;
pub type PGXTlutRegion = *mut GXTlutRegion;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXTlutRegion {
    pub dummy: [u32_; 4usize],
}
pub const GX_CLAMP: _bindgen_ty_76 = 0;
pub const GX_REPEAT: _bindgen_ty_76 = 1;
pub const GX_MIRROR: _bindgen_ty_76 = 2;
pub const GX_MAX_TEXWRAPMODE: _bindgen_ty_76 = 3;
pub type _bindgen_ty_76 = ::core::ffi::c_uint;
pub type GXTexWrapMode = undefined4;
pub const GX_ITBA_OFF: _bindgen_ty_77 = 0;
pub const GX_ITBA_S: _bindgen_ty_77 = 1;
pub const GX_ITBA_T: _bindgen_ty_77 = 2;
pub const GX_ITBA_U: _bindgen_ty_77 = 3;
pub const GX_MAX_ITBALPHA: _bindgen_ty_77 = 4;
pub type _bindgen_ty_77 = ::core::ffi::c_uint;
pub type GXIndTexAlphaSel = undefined4;
pub const GX_TEXMAP0: _bindgen_ty_78 = 0;
pub const GX_TEXMAP1: _bindgen_ty_78 = 1;
pub const GX_TEXMAP2: _bindgen_ty_78 = 2;
pub const GX_TEXMAP3: _bindgen_ty_78 = 3;
pub const GX_TEXMAP4: _bindgen_ty_78 = 4;
pub const GX_TEXMAP5: _bindgen_ty_78 = 5;
pub const GX_TEXMAP6: _bindgen_ty_78 = 6;
pub const GX_TEXMAP7: _bindgen_ty_78 = 7;
pub const GX_MAX_TEXMAP: _bindgen_ty_78 = 8;
pub const GX_TEXMAP_NULL: _bindgen_ty_78 = 255;
pub const GX_TEX_DISABLE: _bindgen_ty_78 = 256;
pub type _bindgen_ty_78 = ::core::ffi::c_uint;
pub type GXTexMapID = undefined4;
pub const GX_VC_POS: _bindgen_ty_79 = 0;
pub const GX_VC_NRM: _bindgen_ty_79 = 1;
pub const GX_VC_CLR0: _bindgen_ty_79 = 2;
pub const GX_VC_CLR1: _bindgen_ty_79 = 3;
pub const GX_VC_TEX0: _bindgen_ty_79 = 4;
pub const GX_VC_TEX1: _bindgen_ty_79 = 5;
pub const GX_VC_TEX2: _bindgen_ty_79 = 6;
pub const GX_VC_TEX3: _bindgen_ty_79 = 7;
pub const GX_VC_TEX4: _bindgen_ty_79 = 8;
pub const GX_VC_TEX5: _bindgen_ty_79 = 9;
pub const GX_VC_TEX6: _bindgen_ty_79 = 10;
pub const GX_VC_TEX7: _bindgen_ty_79 = 11;
pub const GX_VC_ALL: _bindgen_ty_79 = 15;
pub type _bindgen_ty_79 = ::core::ffi::c_uint;
pub type GXVCachePerf = undefined4;
pub type Mtx44 = [[f32_; 4usize]; 4usize];
pub const GX_CS_SCALE_1: _bindgen_ty_80 = 0;
pub const GX_CS_SCALE_2: _bindgen_ty_80 = 1;
pub const GX_CS_SCALE_4: _bindgen_ty_80 = 2;
pub const GX_CS_DIVIDE_2: _bindgen_ty_80 = 3;
pub const GX_MAX_TEVSCALE: _bindgen_ty_80 = 4;
pub type _bindgen_ty_80 = ::core::ffi::c_uint;
pub type GXTevScale = undefined4;
pub type POSRel = *mut OSRel;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OSRel {
    pub offset: u16_,
    pub type_: u8_,
    pub section: u8_,
    pub addend: u32_,
}
pub const GX_CLAMP_NONE: _bindgen_ty_81 = 0;
pub const GX_CLAMP_TOP: _bindgen_ty_81 = 1;
pub const GX_CLAMP_BOTTOM: _bindgen_ty_81 = 2;
pub type _bindgen_ty_81 = ::core::ffi::c_uint;
pub type GXFBClamp = undefined4;
pub type PGXTexRegion = *mut GXTexRegion;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXTexRegion {
    pub dummy: [u32_; 4usize],
}
pub const GX_TEV_ADD: _bindgen_ty_82 = 0;
pub const GX_TEV_SUB: _bindgen_ty_82 = 1;
pub const GX_TEV_COMP_R8_GT: _bindgen_ty_82 = 8;
pub const GX_TEV_COMP_R8_EQ: _bindgen_ty_82 = 9;
pub const GX_TEV_COMP_GR16_GT: _bindgen_ty_82 = 10;
pub const GX_TEV_COMP_GR16_EQ: _bindgen_ty_82 = 11;
pub const GX_TEV_COMP_BGR24_GT: _bindgen_ty_82 = 12;
pub const GX_TEV_COMP_BGR24_EQ: _bindgen_ty_82 = 13;
pub const GX_TEV_COMP_RGB8_GT: _bindgen_ty_82 = 14;
pub const GX_TEV_COMP_RGB8_EQ: _bindgen_ty_82 = 15;
pub const GX_TEV_COMP_A8_GT: _bindgen_ty_82 = 16;
pub const GX_TEV_COMP_A8_EQ: _bindgen_ty_82 = 17;
pub type _bindgen_ty_82 = ::core::ffi::c_uint;
pub type GXTevOp = undefined4;
pub type PGXFogAdjTable = *mut GXFogAdjTable;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXFogAdjTable {
    pub dummy: [u16_; 10usize],
}
pub const GX_ZT_DISABLE: _bindgen_ty_83 = 0;
pub const GX_ZT_ADD: _bindgen_ty_83 = 1;
pub const GX_ZT_REPLACE: _bindgen_ty_83 = 2;
pub const GX_MAX_ZTEXOP: _bindgen_ty_83 = 3;
pub type _bindgen_ty_83 = ::core::ffi::c_uint;
pub type GXZTexOp = undefined4;
pub type PGXVtxDescList = *mut GXVtxDescList;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXVtxDescList {
    pub attr: GXAttr,
    pub type_: GXAttrType,
}
pub const GX_TB_ZERO: _bindgen_ty_84 = 0;
pub const GX_TB_ADDHALF: _bindgen_ty_84 = 1;
pub const GX_TB_SUBHALF: _bindgen_ty_84 = 2;
pub const GX_MAX_TEVBIAS: _bindgen_ty_84 = 3;
pub type _bindgen_ty_84 = ::core::ffi::c_uint;
pub type GXTevBias = undefined4;
pub const GX_TEV_SWAP0: _bindgen_ty_85 = 0;
pub const GX_TEV_SWAP1: _bindgen_ty_85 = 1;
pub const GX_TEV_SWAP2: _bindgen_ty_85 = 2;
pub const GX_TEV_SWAP3: _bindgen_ty_85 = 3;
pub const GX_MAX_TEVSWAP: _bindgen_ty_85 = 4;
pub type _bindgen_ty_85 = ::core::ffi::c_uint;
pub type GXTevSwapSel = undefined4;
pub type PChunkInfo = *mut ChunkInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ChunkInfo {
    pub prev: *mut ChunkInfo,
    pub next: *mut ChunkInfo,
    pub size: u32_,
    pub padding: [u8_; 20usize],
}
impl Default for ChunkInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PGXLightObj = *mut GXLightObj;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXLightObj {
    pub dummy: [u32_; 16usize],
}
pub const GX_TLUT_16: _bindgen_ty_86 = 1;
pub const GX_TLUT_32: _bindgen_ty_86 = 2;
pub const GX_TLUT_64: _bindgen_ty_86 = 4;
pub const GX_TLUT_128: _bindgen_ty_86 = 8;
pub const GX_TLUT_256: _bindgen_ty_86 = 16;
pub const GX_TLUT_512: _bindgen_ty_86 = 32;
pub const GX_TLUT_1K: _bindgen_ty_86 = 64;
pub const GX_TLUT_2K: _bindgen_ty_86 = 128;
pub const GX_TLUT_4K: _bindgen_ty_86 = 256;
pub const GX_TLUT_8K: _bindgen_ty_86 = 512;
pub const GX_TLUT_16K: _bindgen_ty_86 = 1024;
pub type _bindgen_ty_86 = ::core::ffi::c_uint;
pub type GXTlutSize = undefined4;
pub const GX_CC_CPREV: _bindgen_ty_87 = 0;
pub const GX_CC_APREV: _bindgen_ty_87 = 1;
pub const GX_CC_C0: _bindgen_ty_87 = 2;
pub const GX_CC_A0: _bindgen_ty_87 = 3;
pub const GX_CC_C1: _bindgen_ty_87 = 4;
pub const GX_CC_A1: _bindgen_ty_87 = 5;
pub const GX_CC_C2: _bindgen_ty_87 = 6;
pub const GX_CC_A2: _bindgen_ty_87 = 7;
pub const GX_CC_TEXC: _bindgen_ty_87 = 8;
pub const GX_CC_TEXA: _bindgen_ty_87 = 9;
pub const GX_CC_RASC: _bindgen_ty_87 = 10;
pub const GX_CC_RASA: _bindgen_ty_87 = 11;
pub const GX_CC_ONE: _bindgen_ty_87 = 12;
pub const GX_CC_HALF: _bindgen_ty_87 = 13;
pub const GX_CC_KONST: _bindgen_ty_87 = 14;
pub const GX_CC_ZERO: _bindgen_ty_87 = 15;
pub const GX_CC_TEXRRR: _bindgen_ty_87 = 16;
pub const GX_CC_TEXGGG: _bindgen_ty_87 = 17;
pub const GX_CC_TEXBBB: _bindgen_ty_87 = 18;
pub const GX_CC_QUARTER: _bindgen_ty_87 = 19;
pub type _bindgen_ty_87 = ::core::ffi::c_uint;
pub type GXTevColorArg = undefined4;
pub const GX_AOP_AND: _bindgen_ty_88 = 0;
pub const GX_AOP_OR: _bindgen_ty_88 = 1;
pub const GX_AOP_XOR: _bindgen_ty_88 = 2;
pub const GX_AOP_XNOR: _bindgen_ty_88 = 3;
pub const GX_MAX_ALPHAOP: _bindgen_ty_88 = 4;
pub type _bindgen_ty_88 = ::core::ffi::c_uint;
pub type GXAlphaOp = undefined4;
pub const GX_TO_ZERO: _bindgen_ty_89 = 0;
pub const GX_TO_SIXTEENTH: _bindgen_ty_89 = 1;
pub const GX_TO_EIGHTH: _bindgen_ty_89 = 2;
pub const GX_TO_FOURTH: _bindgen_ty_89 = 3;
pub const GX_TO_HALF: _bindgen_ty_89 = 4;
pub const GX_TO_ONE: _bindgen_ty_89 = 5;
pub const GX_MAX_TEXOFFSET: _bindgen_ty_89 = 6;
pub type _bindgen_ty_89 = ::core::ffi::c_uint;
pub type GXTexOffset = undefined4;
pub const GX_TEV_KASEL_1: _bindgen_ty_90 = 0;
pub const GX_TEV_KASEL_7_8: _bindgen_ty_90 = 1;
pub const GX_TEV_KASEL_3_4: _bindgen_ty_90 = 2;
pub const GX_TEV_KASEL_5_8: _bindgen_ty_90 = 3;
pub const GX_TEV_KASEL_1_2: _bindgen_ty_90 = 4;
pub const GX_TEV_KASEL_3_8: _bindgen_ty_90 = 5;
pub const GX_TEV_KASEL_1_4: _bindgen_ty_90 = 6;
pub const GX_TEV_KASEL_1_8: _bindgen_ty_90 = 7;
pub const GX_TEV_KASEL_K0_R: _bindgen_ty_90 = 16;
pub const GX_TEV_KASEL_K1_R: _bindgen_ty_90 = 17;
pub const GX_TEV_KASEL_K2_R: _bindgen_ty_90 = 18;
pub const GX_TEV_KASEL_K3_R: _bindgen_ty_90 = 19;
pub const GX_TEV_KASEL_K0_G: _bindgen_ty_90 = 20;
pub const GX_TEV_KASEL_K1_G: _bindgen_ty_90 = 21;
pub const GX_TEV_KASEL_K2_G: _bindgen_ty_90 = 22;
pub const GX_TEV_KASEL_K3_G: _bindgen_ty_90 = 23;
pub const GX_TEV_KASEL_K0_B: _bindgen_ty_90 = 24;
pub const GX_TEV_KASEL_K1_B: _bindgen_ty_90 = 25;
pub const GX_TEV_KASEL_K2_B: _bindgen_ty_90 = 26;
pub const GX_TEV_KASEL_K3_B: _bindgen_ty_90 = 27;
pub const GX_TEV_KASEL_K0_A: _bindgen_ty_90 = 28;
pub const GX_TEV_KASEL_K1_A: _bindgen_ty_90 = 29;
pub const GX_TEV_KASEL_K2_A: _bindgen_ty_90 = 30;
pub const GX_TEV_KASEL_K3_A: _bindgen_ty_90 = 31;
pub type _bindgen_ty_90 = ::core::ffi::c_uint;
pub type GXTevKAlphaSel = undefined4;
pub const GX_DA_OFF: _bindgen_ty_91 = 0;
pub const GX_DA_GENTLE: _bindgen_ty_91 = 1;
pub const GX_DA_MEDIUM: _bindgen_ty_91 = 2;
pub const GX_DA_STEEP: _bindgen_ty_91 = 3;
pub type _bindgen_ty_91 = ::core::ffi::c_uint;
pub type GXDistAttnFn = undefined4;
pub const GX_NEAR: _bindgen_ty_92 = 0;
pub const GX_LINEAR: _bindgen_ty_92 = 1;
pub const GX_NEAR_MIP_NEAR: _bindgen_ty_92 = 2;
pub const GX_LIN_MIP_NEAR: _bindgen_ty_92 = 3;
pub const GX_NEAR_MIP_LIN: _bindgen_ty_92 = 4;
pub const GX_LIN_MIP_LIN: _bindgen_ty_92 = 5;
pub type _bindgen_ty_92 = ::core::ffi::c_uint;
pub type GXTexFilter = undefined4;
pub const GX_CA_APREV: _bindgen_ty_93 = 0;
pub const GX_CA_A0: _bindgen_ty_93 = 1;
pub const GX_CA_A1: _bindgen_ty_93 = 2;
pub const GX_CA_A2: _bindgen_ty_93 = 3;
pub const GX_CA_TEXA: _bindgen_ty_93 = 4;
pub const GX_CA_RASA: _bindgen_ty_93 = 5;
pub const GX_CA_KONST: _bindgen_ty_93 = 6;
pub const GX_CA_ZERO: _bindgen_ty_93 = 7;
pub type _bindgen_ty_93 = ::core::ffi::c_uint;
pub type GXTevAlphaArg = undefined4;
pub type PGXTlutObj = *mut GXTlutObj;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXTlutObj {
    pub dummy: [u32_; 3usize],
}
pub const GX_VTXFMT0: _bindgen_ty_94 = 0;
pub const GX_VTXFMT1: _bindgen_ty_94 = 1;
pub const GX_VTXFMT2: _bindgen_ty_94 = 2;
pub const GX_VTXFMT3: _bindgen_ty_94 = 3;
pub const GX_VTXFMT4: _bindgen_ty_94 = 4;
pub const GX_VTXFMT5: _bindgen_ty_94 = 5;
pub const GX_VTXFMT6: _bindgen_ty_94 = 6;
pub const GX_VTXFMT7: _bindgen_ty_94 = 7;
pub const GX_MAX_VTXFMT: _bindgen_ty_94 = 8;
pub type _bindgen_ty_94 = ::core::ffi::c_uint;
pub type GXVtxFmt = undefined4;
pub const GX_NEVER: _bindgen_ty_95 = 0;
pub const GX_LESS: _bindgen_ty_95 = 1;
pub const GX_EQUAL: _bindgen_ty_95 = 2;
pub const GX_LEQUAL: _bindgen_ty_95 = 3;
pub const GX_GREATER: _bindgen_ty_95 = 4;
pub const GX_NEQUAL: _bindgen_ty_95 = 5;
pub const GX_GEQUAL: _bindgen_ty_95 = 6;
pub const GX_ALWAYS: _bindgen_ty_95 = 7;
pub type _bindgen_ty_95 = ::core::ffi::c_uint;
pub type GXCompare = undefined4;
pub const GX_PNMTX0: _bindgen_ty_96 = 0;
pub const GX_PNMTX1: _bindgen_ty_96 = 3;
pub const GX_PNMTX2: _bindgen_ty_96 = 6;
pub const GX_PNMTX3: _bindgen_ty_96 = 9;
pub const GX_PNMTX4: _bindgen_ty_96 = 12;
pub const GX_PNMTX5: _bindgen_ty_96 = 15;
pub const GX_PNMTX6: _bindgen_ty_96 = 18;
pub const GX_PNMTX7: _bindgen_ty_96 = 21;
pub const GX_PNMTX8: _bindgen_ty_96 = 24;
pub const GX_PNMTX9: _bindgen_ty_96 = 27;
pub type _bindgen_ty_96 = ::core::ffi::c_uint;
pub type GXPosNrmMtx = undefined4;
pub const GX_PF_RGB8_Z24: _bindgen_ty_97 = 0;
pub const GX_PF_RGBA6_Z24: _bindgen_ty_97 = 1;
pub const GX_PF_RGB565_Z16: _bindgen_ty_97 = 2;
pub const GX_PF_Z24: _bindgen_ty_97 = 3;
pub const GX_PF_Y8: _bindgen_ty_97 = 4;
pub const GX_PF_U8: _bindgen_ty_97 = 5;
pub const GX_PF_V8: _bindgen_ty_97 = 6;
pub const GX_PF_YUV420: _bindgen_ty_97 = 7;
pub type _bindgen_ty_97 = ::core::ffi::c_uint;
pub type GXPixelFmt = undefined4;
pub type POSModuleHeader = *mut OSModuleHeader;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct OSModuleHeader {
    pub info: OSModuleInfo,
    pub bssSize: u32_,
    pub relOffset: u32_,
    pub impOffset: u32_,
    pub impSize: u32_,
    pub prologSection: u8_,
    pub epilogSection: u8_,
    pub unresolvedSection: u8_,
    pub padding0: u8_,
    pub prolog: u32_,
    pub epilog: u32_,
    pub unresolved: u32_,
    pub align: u32_,
    pub bssAlign: u32_,
}
impl Default for OSModuleHeader {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GX_TL_IA8: _bindgen_ty_98 = 0;
pub const GX_TL_RGB565: _bindgen_ty_98 = 1;
pub const GX_TL_RGB5A3: _bindgen_ty_98 = 2;
pub const GX_MAX_TLUTFMT: _bindgen_ty_98 = 3;
pub type _bindgen_ty_98 = ::core::ffi::c_uint;
pub type GXTlutFmt = undefined4;
pub type PARQRequest = *mut ARQRequest;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ARQRequest {
    pub next: *mut ARQRequest,
    pub owner: u32_,
    pub type_: u32_,
    pub priority: u32_,
    pub source: u32_,
    pub dest: u32_,
    pub length: u32_,
    pub callback: ::core::option::Option<unsafe extern "C" fn(arg1: u32_)>,
}
impl Default for ARQRequest {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GX_SP_OFF: _bindgen_ty_99 = 0;
pub const GX_SP_FLAT: _bindgen_ty_99 = 1;
pub const GX_SP_COS: _bindgen_ty_99 = 2;
pub const GX_SP_COS2: _bindgen_ty_99 = 3;
pub const GX_SP_SHARP: _bindgen_ty_99 = 4;
pub const GX_SP_RING1: _bindgen_ty_99 = 5;
pub const GX_SP_RING2: _bindgen_ty_99 = 6;
pub type _bindgen_ty_99 = ::core::ffi::c_uint;
pub type GXSpotFn = undefined4;
pub type PHeapInfo = *mut HeapInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct HeapInfo {
    pub capacity: u32_,
    pub first_free: *mut ChunkInfo,
    pub first_used: *mut ChunkInfo,
}
impl Default for HeapInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GX_CULL_NONE: _bindgen_ty_100 = 0;
pub const GX_CULL_FRONT: _bindgen_ty_100 = 1;
pub const GX_CULL_BACK: _bindgen_ty_100 = 2;
pub const GX_CULL_ALL: _bindgen_ty_100 = 3;
pub type _bindgen_ty_100 = ::core::ffi::c_uint;
pub type GXCullMode = undefined4;
pub const GX_CH_RED: _bindgen_ty_101 = 0;
pub const GX_CH_GREEN: _bindgen_ty_101 = 1;
pub const GX_CH_BLUE: _bindgen_ty_101 = 2;
pub const GX_CH_ALPHA: _bindgen_ty_101 = 3;
pub type _bindgen_ty_101 = ::core::ffi::c_uint;
pub type GXTevColorChan = undefined4;
pub const GX_ITM_OFF: _bindgen_ty_102 = 0;
pub const GX_ITM_0: _bindgen_ty_102 = 1;
pub const GX_ITM_1: _bindgen_ty_102 = 2;
pub const GX_ITM_2: _bindgen_ty_102 = 3;
pub const GX_ITM_S0: _bindgen_ty_102 = 5;
pub const GX_ITM_S1: _bindgen_ty_102 = 6;
pub const GX_ITM_S2: _bindgen_ty_102 = 7;
pub const GX_ITM_T0: _bindgen_ty_102 = 9;
pub const GX_ITM_T1: _bindgen_ty_102 = 10;
pub const GX_ITM_T2: _bindgen_ty_102 = 11;
pub type _bindgen_ty_102 = ::core::ffi::c_uint;
pub type GXIndTexMtxID = undefined4;
pub const GX_GM_1_0: _bindgen_ty_103 = 0;
pub const GX_GM_1_7: _bindgen_ty_103 = 1;
pub const GX_GM_2_2: _bindgen_ty_103 = 2;
pub type _bindgen_ty_103 = ::core::ffi::c_uint;
pub type GXGamma = undefined4;
pub type PDVDDirEntry = *mut DVDDirEntry;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DVDDirEntry {
    pub entryNum: u32_,
    pub isDir: BOOL32,
    pub name: *mut ::core::ffi::c_char,
}
impl Default for DVDDirEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GX_TEVPREV: _bindgen_ty_104 = 0;
pub const GX_TEVREG0: _bindgen_ty_104 = 1;
pub const GX_TEVREG1: _bindgen_ty_104 = 2;
pub const GX_TEVREG2: _bindgen_ty_104 = 3;
pub const GX_MAX_TEVREG: _bindgen_ty_104 = 4;
pub type _bindgen_ty_104 = ::core::ffi::c_uint;
pub type GXTevRegID = undefined4;
pub const GX_TEXCACHE_32K: _bindgen_ty_105 = 0;
pub const GX_TEXCACHE_128K: _bindgen_ty_105 = 1;
pub const GX_TEXCACHE_512K: _bindgen_ty_105 = 2;
pub const GX_TEXCACHE_NONE: _bindgen_ty_105 = 3;
pub type _bindgen_ty_105 = ::core::ffi::c_uint;
pub type GXTexCacheSize = undefined4;
pub const GX_LIGHT_NULL: _bindgen_ty_106 = 0;
pub const GX_LIGHT0: _bindgen_ty_106 = 1;
pub const GX_LIGHT1: _bindgen_ty_106 = 2;
pub const GX_LIGHT2: _bindgen_ty_106 = 4;
pub const GX_LIGHT3: _bindgen_ty_106 = 8;
pub const GX_LIGHT4: _bindgen_ty_106 = 16;
pub const GX_LIGHT5: _bindgen_ty_106 = 32;
pub const GX_LIGHT6: _bindgen_ty_106 = 64;
pub const GX_LIGHT7: _bindgen_ty_106 = 128;
pub const GX_MAX_LIGHT: _bindgen_ty_106 = 256;
pub type _bindgen_ty_106 = ::core::ffi::c_uint;
pub type GXLightID = undefined4;
pub const GX_MTX3x4: _bindgen_ty_107 = 0;
pub const GX_MTX2x4: _bindgen_ty_107 = 1;
pub type _bindgen_ty_107 = ::core::ffi::c_uint;
pub type GXTexMtxType = undefined4;
pub const GX_BL_ZERO: _bindgen_ty_108 = 0;
pub const GX_BL_ONE: _bindgen_ty_108 = 1;
pub const GX_BL_SRCCLR: _bindgen_ty_108 = 2;
pub const GX_BL_INVSRCCLR: _bindgen_ty_108 = 3;
pub const GX_BL_SRCALPHA: _bindgen_ty_108 = 4;
pub const GX_BL_INVSRCALPHA: _bindgen_ty_108 = 5;
pub const GX_BL_DSTALPHA: _bindgen_ty_108 = 6;
pub const GX_BL_INVDSTALPHA: _bindgen_ty_108 = 7;
pub const GX_BL_DSTCLR: _bindgen_ty_108 = 8;
pub const GX_BL_INVDSTCLR: _bindgen_ty_108 = 9;
pub type _bindgen_ty_108 = ::core::ffi::c_uint;
pub type GXBlendFactor = undefined4;
pub const GX_ZC_LINEAR: _bindgen_ty_109 = 0;
pub const GX_ZC_NEAR: _bindgen_ty_109 = 1;
pub const GX_ZC_MID: _bindgen_ty_109 = 2;
pub const GX_ZC_FAR: _bindgen_ty_109 = 3;
pub type _bindgen_ty_109 = ::core::ffi::c_uint;
pub type GXZFmt16 = undefined4;
pub const GX_ITB_NONE: _bindgen_ty_110 = 0;
pub const GX_ITB_S: _bindgen_ty_110 = 1;
pub const GX_ITB_T: _bindgen_ty_110 = 2;
pub const GX_ITB_ST: _bindgen_ty_110 = 3;
pub const GX_ITB_U: _bindgen_ty_110 = 4;
pub const GX_ITB_SU: _bindgen_ty_110 = 5;
pub const GX_ITB_TU: _bindgen_ty_110 = 6;
pub const GX_ITB_STU: _bindgen_ty_110 = 7;
pub const GX_MAX_ITBIAS: _bindgen_ty_110 = 8;
pub type _bindgen_ty_110 = ::core::ffi::c_uint;
pub type GXIndTexBiasSel = undefined4;
pub const GX_CLIP_ENABLE: _bindgen_ty_111 = 0;
pub const GX_CLIP_DISABLE: _bindgen_ty_111 = 1;
pub type _bindgen_ty_111 = ::core::ffi::c_uint;
pub type GXClipMode = undefined4;
pub const GX_ITF_8: _bindgen_ty_112 = 0;
pub const GX_ITF_5: _bindgen_ty_112 = 1;
pub const GX_ITF_4: _bindgen_ty_112 = 2;
pub const GX_ITF_3: _bindgen_ty_112 = 3;
pub const GX_MAX_ITFORMAT: _bindgen_ty_112 = 4;
pub type _bindgen_ty_112 = ::core::ffi::c_uint;
pub type GXIndTexFormat = undefined4;
pub const GX_COPY_PROGRESSIVE: _bindgen_ty_113 = 0;
pub const GX_COPY_INTLC_EVEN: _bindgen_ty_113 = 2;
pub const GX_COPY_INTLC_ODD: _bindgen_ty_113 = 3;
pub type _bindgen_ty_113 = ::core::ffi::c_uint;
pub type GXCopyMode = undefined4;
pub const GX_TEVSTAGE0: _bindgen_ty_114 = 0;
pub const GX_TEVSTAGE1: _bindgen_ty_114 = 1;
pub const GX_TEVSTAGE2: _bindgen_ty_114 = 2;
pub const GX_TEVSTAGE3: _bindgen_ty_114 = 3;
pub const GX_TEVSTAGE4: _bindgen_ty_114 = 4;
pub const GX_TEVSTAGE5: _bindgen_ty_114 = 5;
pub const GX_TEVSTAGE6: _bindgen_ty_114 = 6;
pub const GX_TEVSTAGE7: _bindgen_ty_114 = 7;
pub const GX_TEVSTAGE8: _bindgen_ty_114 = 8;
pub const GX_TEVSTAGE9: _bindgen_ty_114 = 9;
pub const GX_TEVSTAGE10: _bindgen_ty_114 = 10;
pub const GX_TEVSTAGE11: _bindgen_ty_114 = 11;
pub const GX_TEVSTAGE12: _bindgen_ty_114 = 12;
pub const GX_TEVSTAGE13: _bindgen_ty_114 = 13;
pub const GX_TEVSTAGE14: _bindgen_ty_114 = 14;
pub const GX_TEVSTAGE15: _bindgen_ty_114 = 15;
pub const GX_MAX_TEVSTAGE: _bindgen_ty_114 = 16;
pub type _bindgen_ty_114 = ::core::ffi::c_uint;
pub type GXTevStageID = undefined4;
pub const GX_PERF1_TEXELS: _bindgen_ty_115 = 0;
pub const GX_PERF1_TX_IDLE: _bindgen_ty_115 = 1;
pub const GX_PERF1_TX_REGS: _bindgen_ty_115 = 2;
pub const GX_PERF1_TX_MEMSTALL: _bindgen_ty_115 = 3;
pub const GX_PERF1_TC_CHECK1_2: _bindgen_ty_115 = 4;
pub const GX_PERF1_TC_CHECK3_4: _bindgen_ty_115 = 5;
pub const GX_PERF1_TC_CHECK5_6: _bindgen_ty_115 = 6;
pub const GX_PERF1_TC_CHECK7_8: _bindgen_ty_115 = 7;
pub const GX_PERF1_TC_MISS: _bindgen_ty_115 = 8;
pub const GX_PERF1_VC_ELEMQ_FULL: _bindgen_ty_115 = 9;
pub const GX_PERF1_VC_MISSQ_FULL: _bindgen_ty_115 = 10;
pub const GX_PERF1_VC_MEMREQ_FULL: _bindgen_ty_115 = 11;
pub const GX_PERF1_VC_STATUS7: _bindgen_ty_115 = 12;
pub const GX_PERF1_VC_MISSREP_FULL: _bindgen_ty_115 = 13;
pub const GX_PERF1_VC_STREAMBUF_LOW: _bindgen_ty_115 = 14;
pub const GX_PERF1_VC_ALL_STALLS: _bindgen_ty_115 = 15;
pub const GX_PERF1_VERTICES: _bindgen_ty_115 = 16;
pub const GX_PERF1_FIFO_REQ: _bindgen_ty_115 = 17;
pub const GX_PERF1_CALL_REQ: _bindgen_ty_115 = 18;
pub const GX_PERF1_VC_MISS_REQ: _bindgen_ty_115 = 19;
pub const GX_PERF1_CP_ALL_REQ: _bindgen_ty_115 = 20;
pub const GX_PERF1_CLOCKS: _bindgen_ty_115 = 21;
pub const GX_PERF1_NONE: _bindgen_ty_115 = 22;
pub type _bindgen_ty_115 = ::core::ffi::c_uint;
pub type GXPerf1 = undefined4;
pub const GX_PERF0_VERTICES: _bindgen_ty_116 = 0;
pub const GX_PERF0_CLIP_VTX: _bindgen_ty_116 = 1;
pub const GX_PERF0_CLIP_CLKS: _bindgen_ty_116 = 2;
pub const GX_PERF0_XF_WAIT_IN: _bindgen_ty_116 = 3;
pub const GX_PERF0_XF_WAIT_OUT: _bindgen_ty_116 = 4;
pub const GX_PERF0_XF_XFRM_CLKS: _bindgen_ty_116 = 5;
pub const GX_PERF0_XF_LIT_CLKS: _bindgen_ty_116 = 6;
pub const GX_PERF0_XF_BOT_CLKS: _bindgen_ty_116 = 7;
pub const GX_PERF0_XF_REGLD_CLKS: _bindgen_ty_116 = 8;
pub const GX_PERF0_XF_REGRD_CLKS: _bindgen_ty_116 = 9;
pub const GX_PERF0_CLIP_RATIO: _bindgen_ty_116 = 10;
pub const GX_PERF0_TRIANGLES: _bindgen_ty_116 = 11;
pub const GX_PERF0_TRIANGLES_CULLED: _bindgen_ty_116 = 12;
pub const GX_PERF0_TRIANGLES_PASSED: _bindgen_ty_116 = 13;
pub const GX_PERF0_TRIANGLES_SCISSORED: _bindgen_ty_116 = 14;
pub const GX_PERF0_TRIANGLES_0TEX: _bindgen_ty_116 = 15;
pub const GX_PERF0_TRIANGLES_1TEX: _bindgen_ty_116 = 16;
pub const GX_PERF0_TRIANGLES_2TEX: _bindgen_ty_116 = 17;
pub const GX_PERF0_TRIANGLES_3TEX: _bindgen_ty_116 = 18;
pub const GX_PERF0_TRIANGLES_4TEX: _bindgen_ty_116 = 19;
pub const GX_PERF0_TRIANGLES_5TEX: _bindgen_ty_116 = 20;
pub const GX_PERF0_TRIANGLES_6TEX: _bindgen_ty_116 = 21;
pub const GX_PERF0_TRIANGLES_7TEX: _bindgen_ty_116 = 22;
pub const GX_PERF0_TRIANGLES_8TEX: _bindgen_ty_116 = 23;
pub const GX_PERF0_TRIANGLES_0CLR: _bindgen_ty_116 = 24;
pub const GX_PERF0_TRIANGLES_1CLR: _bindgen_ty_116 = 25;
pub const GX_PERF0_TRIANGLES_2CLR: _bindgen_ty_116 = 26;
pub const GX_PERF0_QUAD_0CVG: _bindgen_ty_116 = 27;
pub const GX_PERF0_QUAD_NON0CVG: _bindgen_ty_116 = 28;
pub const GX_PERF0_QUAD_1CVG: _bindgen_ty_116 = 29;
pub const GX_PERF0_QUAD_2CVG: _bindgen_ty_116 = 30;
pub const GX_PERF0_QUAD_3CVG: _bindgen_ty_116 = 31;
pub const GX_PERF0_QUAD_4CVG: _bindgen_ty_116 = 32;
pub const GX_PERF0_AVG_QUAD_CNT: _bindgen_ty_116 = 33;
pub const GX_PERF0_CLOCKS: _bindgen_ty_116 = 34;
pub const GX_PERF0_NONE: _bindgen_ty_116 = 35;
pub type _bindgen_ty_116 = ::core::ffi::c_uint;
pub type GXPerf0 = undefined4;
pub type POSImportInfo = *mut OSImportInfo;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OSImportInfo {
    pub id: OSModuleID,
    pub offset: u32_,
}
pub type PGXRenderModeObj = *mut GXRenderModeObj;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXRenderModeObj {
    pub viTVmode: VITVMode,
    pub fbWidth: u16_,
    pub efbHeight: u16_,
    pub xfbHeight: u16_,
    pub viXOrigin: u16_,
    pub viYOrigin: u16_,
    pub viWidth: u16_,
    pub viHeight: u16_,
    pub xFBmode: VIXFBMode,
    pub field_rendering: u8_,
    pub aa: u8_,
    pub sample_pattern: [[u8_; 2usize]; 12usize],
    pub vfilter: [u8_; 7usize],
}
pub const GX_XF_FLUSH_NONE: _bindgen_ty_117 = 0;
pub const GX_XF_FLUSH_SAFE: _bindgen_ty_117 = 8;
pub type _bindgen_ty_117 = ::core::ffi::c_uint;
pub type GXXFFlushVal = undefined4;
pub const GX_TLUT0: _bindgen_ty_118 = 0;
pub const GX_TLUT1: _bindgen_ty_118 = 1;
pub const GX_TLUT2: _bindgen_ty_118 = 2;
pub const GX_TLUT3: _bindgen_ty_118 = 3;
pub const GX_TLUT4: _bindgen_ty_118 = 4;
pub const GX_TLUT5: _bindgen_ty_118 = 5;
pub const GX_TLUT6: _bindgen_ty_118 = 6;
pub const GX_TLUT7: _bindgen_ty_118 = 7;
pub const GX_TLUT8: _bindgen_ty_118 = 8;
pub const GX_TLUT9: _bindgen_ty_118 = 9;
pub const GX_TLUT10: _bindgen_ty_118 = 10;
pub const GX_TLUT11: _bindgen_ty_118 = 11;
pub const GX_TLUT12: _bindgen_ty_118 = 12;
pub const GX_TLUT13: _bindgen_ty_118 = 13;
pub const GX_TLUT14: _bindgen_ty_118 = 14;
pub const GX_TLUT15: _bindgen_ty_118 = 15;
pub const GX_BIGTLUT0: _bindgen_ty_118 = 16;
pub const GX_BIGTLUT1: _bindgen_ty_118 = 17;
pub const GX_BIGTLUT2: _bindgen_ty_118 = 18;
pub const GX_BIGTLUT3: _bindgen_ty_118 = 19;
pub type _bindgen_ty_118 = ::core::ffi::c_uint;
pub type GXTlut = undefined4;
pub type PERFId = u8_;
pub const GX_ITS_1: _bindgen_ty_119 = 0;
pub const GX_ITS_2: _bindgen_ty_119 = 1;
pub const GX_ITS_4: _bindgen_ty_119 = 2;
pub const GX_ITS_8: _bindgen_ty_119 = 3;
pub const GX_ITS_16: _bindgen_ty_119 = 4;
pub const GX_ITS_32: _bindgen_ty_119 = 5;
pub const GX_ITS_64: _bindgen_ty_119 = 6;
pub const GX_ITS_128: _bindgen_ty_119 = 7;
pub const GX_ITS_256: _bindgen_ty_119 = 8;
pub const GX_MAX_ITSCALE: _bindgen_ty_119 = 9;
pub type _bindgen_ty_119 = ::core::ffi::c_uint;
pub type GXIndTexScale = undefined4;
pub type POSCalendarTime = *mut OSCalendarTime;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OSCalendarTime {
    pub sec: ::core::ffi::c_int,
    pub min: ::core::ffi::c_int,
    pub hour: ::core::ffi::c_int,
    pub mday: ::core::ffi::c_int,
    pub mon: ::core::ffi::c_int,
    pub year: ::core::ffi::c_int,
    pub wday: ::core::ffi::c_int,
    pub yday: ::core::ffi::c_int,
    pub msec: ::core::ffi::c_int,
    pub usec: ::core::ffi::c_int,
}
pub type __OSInterrupt = s16;
pub const GX_INDTEXSTAGE0: _bindgen_ty_120 = 0;
pub const GX_INDTEXSTAGE1: _bindgen_ty_120 = 1;
pub const GX_INDTEXSTAGE2: _bindgen_ty_120 = 2;
pub const GX_INDTEXSTAGE3: _bindgen_ty_120 = 3;
pub const GX_MAX_INDTEXSTAGE: _bindgen_ty_120 = 4;
pub type _bindgen_ty_120 = ::core::ffi::c_uint;
pub type GXIndTexStageID = undefined4;
pub type PDVDDir = *mut DVDDir;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DVDDir {
    pub entryNum: u32_,
    pub location: u32_,
    pub next: u32_,
}
pub const GX_TG_MTX3x4: _bindgen_ty_121 = 0;
pub const GX_TG_MTX2x4: _bindgen_ty_121 = 1;
pub const GX_TG_BUMP0: _bindgen_ty_121 = 2;
pub const GX_TG_BUMP1: _bindgen_ty_121 = 3;
pub const GX_TG_BUMP2: _bindgen_ty_121 = 4;
pub const GX_TG_BUMP3: _bindgen_ty_121 = 5;
pub const GX_TG_BUMP4: _bindgen_ty_121 = 6;
pub const GX_TG_BUMP5: _bindgen_ty_121 = 7;
pub const GX_TG_BUMP6: _bindgen_ty_121 = 8;
pub const GX_TG_BUMP7: _bindgen_ty_121 = 9;
pub const GX_TG_SRTG: _bindgen_ty_121 = 10;
pub type _bindgen_ty_121 = ::core::ffi::c_uint;
pub type GXTexGenType = undefined4;
pub const GX_KCOLOR0: _bindgen_ty_122 = 0;
pub const GX_KCOLOR1: _bindgen_ty_122 = 1;
pub const GX_KCOLOR2: _bindgen_ty_122 = 2;
pub const GX_KCOLOR3: _bindgen_ty_122 = 3;
pub const GX_MAX_KCOLOR: _bindgen_ty_122 = 4;
pub type _bindgen_ty_122 = ::core::ffi::c_uint;
pub type GXTevKColorID = undefined1;
pub const GX_LO_CLEAR: _bindgen_ty_123 = 0;
pub const GX_LO_AND: _bindgen_ty_123 = 1;
pub const GX_LO_REVAND: _bindgen_ty_123 = 2;
pub const GX_LO_COPY: _bindgen_ty_123 = 3;
pub const GX_LO_INVAND: _bindgen_ty_123 = 4;
pub const GX_LO_NOOP: _bindgen_ty_123 = 5;
pub const GX_LO_XOR: _bindgen_ty_123 = 6;
pub const GX_LO_OR: _bindgen_ty_123 = 7;
pub const GX_LO_NOR: _bindgen_ty_123 = 8;
pub const GX_LO_EQUIV: _bindgen_ty_123 = 9;
pub const GX_LO_INV: _bindgen_ty_123 = 10;
pub const GX_LO_REVOR: _bindgen_ty_123 = 11;
pub const GX_LO_INVCOPY: _bindgen_ty_123 = 12;
pub const GX_LO_INVOR: _bindgen_ty_123 = 13;
pub const GX_LO_NAND: _bindgen_ty_123 = 14;
pub const GX_LO_SET: _bindgen_ty_123 = 15;
pub type _bindgen_ty_123 = ::core::ffi::c_uint;
pub type GXLogicOp = undefined4;
pub const GX_MT_NULL: _bindgen_ty_124 = 0;
pub const GX_MT_XF_FLUSH: _bindgen_ty_124 = 1;
pub const GX_MT_DL_SAVE_CONTEXT: _bindgen_ty_124 = 2;
pub type _bindgen_ty_124 = ::core::ffi::c_uint;
pub type GXMiscToken = undefined4;
pub const GX_PERSPECTIVE: _bindgen_ty_125 = 0;
pub const GX_ORTHOGRAPHIC: _bindgen_ty_125 = 1;
pub type _bindgen_ty_125 = ::core::ffi::c_uint;
pub type GXProjectionType = undefined4;
pub const GX_TC_LINEAR: _bindgen_ty_126 = 0;
pub const GX_TC_GE: _bindgen_ty_126 = 1;
pub const GX_TC_EQ: _bindgen_ty_126 = 2;
pub const GX_TC_LE: _bindgen_ty_126 = 3;
pub const GX_MAX_TEVCLAMPMODE: _bindgen_ty_126 = 4;
pub type _bindgen_ty_126 = ::core::ffi::c_uint;
pub type GXTevClampMode = undefined4;
pub type PGXColorS10 = *mut GXColorS10;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXColorS10 {
    pub r: s16,
    pub g: s16,
    pub b: s16,
    pub a: s16,
}
pub const GX_ITW_OFF: _bindgen_ty_127 = 0;
pub const GX_ITW_256: _bindgen_ty_127 = 1;
pub const GX_ITW_128: _bindgen_ty_127 = 2;
pub const GX_ITW_64: _bindgen_ty_127 = 3;
pub const GX_ITW_32: _bindgen_ty_127 = 4;
pub const GX_ITW_16: _bindgen_ty_127 = 5;
pub const GX_ITW_0: _bindgen_ty_127 = 6;
pub const GX_MAX_ITWRAP: _bindgen_ty_127 = 7;
pub type _bindgen_ty_127 = ::core::ffi::c_uint;
pub type GXIndTexWrap = undefined4;
pub const GX_MODULATE: _bindgen_ty_128 = 0;
pub const GX_DECAL: _bindgen_ty_128 = 1;
pub const GX_BLEND: _bindgen_ty_128 = 2;
pub const GX_REPLACE: _bindgen_ty_128 = 3;
pub const GX_PASSCLR: _bindgen_ty_128 = 4;
pub type _bindgen_ty_128 = ::core::ffi::c_uint;
pub type GXTevMode = undefined4;
pub type OSInterruptMask = u32_;
pub const GX_TEXMTX0: _bindgen_ty_129 = 30;
pub const GX_TEXMTX1: _bindgen_ty_129 = 33;
pub const GX_TEXMTX2: _bindgen_ty_129 = 36;
pub const GX_TEXMTX3: _bindgen_ty_129 = 39;
pub const GX_TEXMTX4: _bindgen_ty_129 = 42;
pub const GX_TEXMTX5: _bindgen_ty_129 = 45;
pub const GX_TEXMTX6: _bindgen_ty_129 = 48;
pub const GX_TEXMTX7: _bindgen_ty_129 = 51;
pub const GX_TEXMTX8: _bindgen_ty_129 = 54;
pub const GX_TEXMTX9: _bindgen_ty_129 = 57;
pub const GX_IDENTITY: _bindgen_ty_129 = 60;
pub type _bindgen_ty_129 = ::core::ffi::c_uint;
pub type GXTexMtx = undefined4;
pub const GX_PTTEXMTX0: _bindgen_ty_130 = 64;
pub const GX_PTTEXMTX1: _bindgen_ty_130 = 67;
pub const GX_PTTEXMTX2: _bindgen_ty_130 = 70;
pub const GX_PTTEXMTX3: _bindgen_ty_130 = 73;
pub const GX_PTTEXMTX4: _bindgen_ty_130 = 76;
pub const GX_PTTEXMTX5: _bindgen_ty_130 = 79;
pub const GX_PTTEXMTX6: _bindgen_ty_130 = 82;
pub const GX_PTTEXMTX7: _bindgen_ty_130 = 85;
pub const GX_PTTEXMTX8: _bindgen_ty_130 = 88;
pub const GX_PTTEXMTX9: _bindgen_ty_130 = 91;
pub const GX_PTTEXMTX10: _bindgen_ty_130 = 94;
pub const GX_PTTEXMTX11: _bindgen_ty_130 = 97;
pub const GX_PTTEXMTX12: _bindgen_ty_130 = 100;
pub const GX_PTTEXMTX13: _bindgen_ty_130 = 103;
pub const GX_PTTEXMTX14: _bindgen_ty_130 = 106;
pub const GX_PTTEXMTX15: _bindgen_ty_130 = 109;
pub const GX_PTTEXMTX16: _bindgen_ty_130 = 112;
pub const GX_PTTEXMTX17: _bindgen_ty_130 = 115;
pub const GX_PTTEXMTX18: _bindgen_ty_130 = 118;
pub const GX_PTTEXMTX19: _bindgen_ty_130 = 121;
pub const GX_PTIDENTITY: _bindgen_ty_130 = 125;
pub type _bindgen_ty_130 = ::core::ffi::c_uint;
pub type GXPTTexMtx = undefined4;
pub const GX_TEXCOORD0: _bindgen_ty_131 = 0;
pub const GX_TEXCOORD1: _bindgen_ty_131 = 1;
pub const GX_TEXCOORD2: _bindgen_ty_131 = 2;
pub const GX_TEXCOORD3: _bindgen_ty_131 = 3;
pub const GX_TEXCOORD4: _bindgen_ty_131 = 4;
pub const GX_TEXCOORD5: _bindgen_ty_131 = 5;
pub const GX_TEXCOORD6: _bindgen_ty_131 = 6;
pub const GX_TEXCOORD7: _bindgen_ty_131 = 7;
pub const GX_MAX_TEXCOORD: _bindgen_ty_131 = 8;
pub const GX_TEXCOORD_NULL: _bindgen_ty_131 = 255;
pub type _bindgen_ty_131 = ::core::ffi::c_uint;
pub type GXTexCoordID = undefined4;
pub type __compar_fn_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::core::ffi::c_void,
        arg2: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int,
>;
pub type pointer = *mut ::core::ffi::c_void;
extern "C" {
    pub static mut DVD_GAME_NAME: [::core::ffi::c_char; 4usize];
    pub static mut DVD_COMPANY: [::core::ffi::c_char; 2usize];
    pub static mut DVD_DISK_NUMBER: u8_;
    pub static mut DVD_GAME_VERSION: u8_;
    pub static mut DVD_STREAMING: u8_;
    pub static mut DVD_STREAMING_BUF_SIZE: u8_;
    pub static mut DVD_MAGIC_WORD: u32_;
    pub static mut MAGIC_WORD: u32_;
    pub static mut VERSION: u32_;
    pub static mut PHYSICAL_MEMORY_SIZE: usize;
    pub static mut CONSOLE_TYPE: u32_;
    pub static mut ARENA_LO: *mut ::core::ffi::c_void;
    pub static mut ARENA_HI: *mut ::core::ffi::c_void;
    pub static mut FST_LOCATION: undefined4;
    pub static mut FST_MAX_LENGTH: undefined4;
    pub static mut IS_DEBUGGER_PRESENT: u32_;
    pub static mut DEBUGGER_EXCEPTION_MASK: undefined4;
    pub static mut DEBUGGER_EXCEPTION_HOOK_DESTINATION: undefined4;
    pub static mut DEBUGGER_LR_TEMP: undefined4;
    pub static mut current_os_context_physical: undefined4;
    pub static mut previous_os_interrupt_mask: undefined4;
    pub static mut current_os_interrupt_mask: undefined4;
    pub static mut TV_MODE: u32_;
    pub static mut ARAM_SIZE: usize;
    pub static mut current_os_context_logical: undefined4;
    pub static mut currentOsContextLogical: undefined4;
    pub static mut default_os_thread: undefined4;
    pub static mut active_thread_queue_head: undefined4;
    pub static mut active_thread_queue_tail: undefined4;
    pub static mut current_os_thread: undefined4;
    pub static mut DEBUG_MONITOR_SIZE: undefined4;
    pub static mut DEBUG_MONITOR_LOCATION: undefined4;
    pub static mut MEMORY_SIZE: usize;
    pub static mut DVD_BI2_LOCATION: undefined4;
    pub static mut BUS_CLOCK_SPEED: undefined4;
    pub static mut CPU_CLOCK_SPEED: undefined4;
    pub static mut system_reset_exception_handler: undefined;
    pub static mut machine_check_exception_handler: undefined;
    pub static mut dsi_exception_handler: undefined;
    pub static mut isi_exception_handler: undefined;
    pub static mut external_interrupt_exception_handler: undefined;
    pub static mut alignment_exception_handler: undefined;
    pub static mut program_exception_handler: undefined;
    pub static mut floating_point_unavailable_exception_handler: undefined;
    pub static mut decrementer_exception_handler: undefined;
    pub static mut system_call_exception_handler: undefined;
    pub static mut trace_exception_handler: undefined;
    pub static mut performance_monitor_interrupt_handler: undefined;
    pub static mut instruction_address_breakpoint_exception_handler: undefined;
    pub static mut system_management_interrupt_handler: undefined;
    pub static mut thermal_management_interrupt_exception_handler: undefined;
    pub static mut osStringTablePtr: undefined4;
    pub static mut switchdataD_80081a8c: pointer;
    pub static mut FONT_DEFINITIONS: [FontDefinition; 64usize];
    pub static mut fullscreen_texture_buf: undefined;
    pub static mut switchdataD_80110c1c: pointer;
    pub static mut switchdataD_80111e20: *mut undefined;
    pub static mut switchdataD_80111e3c: pointer;
    pub static mut switchdataD_80111e7c: *mut undefined;
    pub static mut switchdataD_80111eb0: *mut undefined;
    pub static mut switchdataD_80112104: *mut undefined;
    pub static mut switchdataD_801125a0: *mut undefined;
    pub static mut switchdataD_80112608: *mut undefined;
    pub static mut switchdataD_80112670: *mut undefined;
    pub static mut switchdataD_801126d8: *mut undefined;
    pub static mut switchdataD_8011271c: *mut undefined;
    pub static mut switchdataD_80112760: *mut undefined;
    pub static mut switchdataD_801127a4: *mut undefined;
    pub static mut switchdataD_801127c0: *mut undefined;
    pub static mut ntsc_interlaced_render_mode: GXRenderModeObj;
    pub static mut ntsc_progressive_render_mode: GXRenderModeObj;
    pub static mut mpal_interlaced_render_mode: GXRenderModeObj;
    pub static mut pal_interlaced_render_mode: GXRenderModeObj;
    pub static mut switchdataD_80112948: *mut undefined;
    pub static mut switchdataD_80112968: *mut undefined;
    pub static mut switchdataD_80112a5c: *mut undefined;
    pub static mut switchdataD_80112b50: *mut undefined;
    pub static mut switchdataD_80112bd8: *mut undefined;
    pub static mut switchdataD_80112c34: *mut undefined;
    pub static mut switchdataD_80112e90: *mut undefined;
    pub static mut switchdataD_00014130: *mut undefined;
    pub static mut switchdataD_80113160: *mut undefined;
    pub static mut toneup_tab: undefined;
    pub static mut tonedown_tab: undefined;
    pub static mut dspAttenuationTab: undefined2;
    pub static mut dspScale2IndexTab: undefined;
    pub static mut dspDLSVolTab: undefined;
    pub static mut musyx_vol_tab: undefined;
    pub static mut pan_tab: undefined;
    pub static mut pan_tab_dpl2: undefined;
    pub static mut switchdataD_80114110: *mut undefined;
    pub static mut switchdataD_00012220: *mut undefined;
    pub static mut sndSintab: undefined;
    pub static mut rsmpTab12khz: undefined;
    pub static mut g_some_new_thread_priority_1: undefined4;
    pub static mut safe_thread_priority: undefined4;
    pub static mut vsync_thread_priority: undefined4;
    pub static mut mwidle_thread_priority: undefined4;
    pub static mut switchdataD_801444c0: *mut undefined;
    pub static mut ASCII_LOWERCASE: [::core::ffi::c_char; 256usize];
    pub static mut ASCII_UPPERCASE: [::core::ffi::c_char; 256usize];
    pub static mut switchdataD_80144920: pointer;
    pub static mut switchdataD_801449a4: pointer;
    pub static mut switchdataD_80144a28: *mut undefined;
    pub static mut switchdataD_80144b08: *mut undefined;
    pub static mut switchdataD_80144b50: pointer;
    pub static mut switchdataD_80144c20: *mut undefined;
    pub static mut switchdataD_80144c3c: *mut undefined;
    pub static mut pad_status_groups: [PadStatusGroup; 4usize];
    pub static mut merged_analog_inputs: AnalogInputGroup;
    pub static mut merged_digital_inputs: DigitalInputGroup;
    pub static mut analog_inputs: [AnalogInputGroup; 4usize];
    pub static mut frames_since_last_input_change: dword;
    pub static mut g_some_arq_request_src: undefined4;
    pub static mut g_aram_font_file_buffer: undefined;
    pub static mut g_aram_font_source_location: undefined;
    pub static mut arq_task_struct: ARQRequest;
    pub static mut sega_splash_tex: GXTexObj;
    pub static mut synthGlobalVariable: undefined;
    pub static mut shdwRegs: undefined;
    pub static mut default_GXFifoObj: GXFifoObj;
    pub static mut seqNote: undefined4;
    pub static mut seqInstance: undefined4;
    pub static mut seqMIDIPriority: undefined2;
    pub static mut synthTicksPerSecond: undefined4;
    pub static mut synthJobTable: undefined4;
    pub static mut synthInfo: undefined4;
    pub static mut synthMasterFader: undefined4;
    pub static mut g_synthTrackVolume_or_synthVolume: undefined1;
    pub static mut synthAuxACallback: undefined4;
    pub static mut synthAuxBCallback: undefined4;
    pub static mut synthITDDefault: undefined1;
    pub static mut inpAuxB: undefined;
    pub static mut vidList: undefined4;
    pub static mut synth_last_started: undefined1;
    pub static mut synth_last_fxstarted: undefined1;
    pub static mut voicePrioSortVoices: undefined;
    pub static mut voicePrioSortVoicesRoot: undefined1;
    pub static mut voicePrioSortRootList: undefined;
    pub static mut voiceList: undefined1;
    pub static mut vs: undefined1;
    pub static mut gs: undefined4;
    pub static mut dspStudio: undefined4;
    pub static mut dspHRTFOn: undefined4;
    pub static mut startGroup: undefined4;
    pub static mut startListNum: undefined;
    pub static mut runList: undefined;
    pub static mut fx_lastNote: undefined;
    pub static mut inpFXChannelDefaults: undefined;
    pub static mut safe_thread_stack_base: undefined;
    pub static mut vsync_thread_stack_base: undefined;
    pub static mut mwidle_thread_OSThread: undefined;
    pub static mut vsync_thread_OSThread: undefined;
    pub static mut safe_thread_OSThread: undefined;
    pub static mut overscan_adjusted_render_mode: GXRenderModeObj;
    pub static mut additional_GXFifoObj: GXFifoObj;
    pub static mut projection_near_clip: f32_;
    pub static mut projection_far_clip: f32_;
    pub static mut g_some_projection_matrix: Mtx44;
    pub static mut g_some_gmaflag_1: undefined4;
    pub static mut INIT_REL_PATHS: [pointer; 2usize];
    pub static mut currentHeap: OSHeapHandle;
    pub static mut arena_lo: undefined4;
    pub static mut g_some_internal_gx_struct: pointer;
    pub static mut SHOULD_ALLOCATE_MEM_FROM_ARENA_HI: BOOL32;
    pub static mut rand_next_value: undefined4;
    pub static mut g_something_with_progressive_mode: bool_;
    pub static mut init_rel_index: u32_;
    pub static mut mainloop_rel_buffer_info: RelBufferInfo;
    pub static mut locale: Locale;
    pub static mut init_common_gma: *mut GmaBuffer;
    pub static mut init_common_tpl: *mut TplBuffer;
    pub static mut current_gx_settings: *mut OptiGXSettings;
    pub static mut dvd_cancel_async_complete_callback_flag: undefined1;
    pub static mut waiting_async_dvdread_callback_flag: bool_;
    pub static mut g_some_func_ptr3: undefined4;
    pub static mut g_some_card_func_ptr: undefined4;
    pub static mut g_some_func_ptr1: undefined4;
    pub static mut g_some_OSTime: undefined4;
    pub static mut console_reset_callback: ::core::option::Option<unsafe extern "C" fn() -> u32_>;
    pub static mut aram_ptr: undefined4;
    pub static mut aram_font_to_mram_font_spinlock: undefined4;
    pub static mut g_some_arq_req_spinlock: undefined4;
    pub static mut BootInfo: undefined4;
    pub static mut BI2DebugFlag: undefined4;
    pub static mut AreWeInitialized: undefined4;
    pub static mut alloc_arena_start: undefined4;
    pub static mut alloc_max_heaps: undefined4;
    pub static mut post_OSInitAlloc_arena_start: undefined4;
    pub static mut post_OSInitAlloc_arena_end_rounddown32: undefined4;
    pub static mut arena_hi: undefined4;
    pub static mut g_OSDispatchInterrupt_OSTime: undefined4;
    pub static mut is_debugger_present_ptr: undefined4;
    pub static mut retraceCount: undefined4;
    pub static mut flushFlag: undefined4;
    pub static mut PreCB: undefined4;
    pub static mut PostCB: undefined4;
    pub static mut encoderType: undefined4;
    pub static mut displayOffsetH: undefined2;
    pub static mut displayOffsetV: undefined2;
    pub static mut showChangeMode: undefined4;
    pub static mut shdwChanged: undefined4;
    pub static mut g_arq_chunk_size: undefined4;
    pub static mut CPUFifo: undefined4;
    pub static mut GPFifo: undefined4;
    pub static mut TokenCB: undefined4;
    pub static mut DrawDoneCB: undefined4;
    pub static mut g_has_finished_gx_work: undefined1;
    pub static mut gx_thread_queue: OSThreadQueue;
    pub static mut g_something_with_perf: undefined4;
    pub static mut nextPublicID: undefined4;
    pub static mut g_some_sound_alloc_memory_func_ptr: undefined4;
    pub static mut g_OSTick_after_AIInitDMA: undefined4;
    pub static mut g_are_threads_initialized: undefined4;
    pub static mut g_some_safe_thread_counter: undefined4;
    pub static mut g_safe_thread_loop_counter: undefined4;
    pub static mut mwidle_thread_loop_counter: undefined4;
    pub static mut g_some_new_thread_priority_2: undefined4;
    pub static mut g_vsync_thread_finished: undefined4;
    pub static mut g_vsync_thread_enabled: undefined4;
    pub static mut g_mwidle_thread_finished: undefined4;
    pub static mut g_mwidle_thread_enabled: undefined4;
    pub static mut g_safe_thread_finished: undefined4;
    pub static mut g_safe_thread_enabled: undefined4;
    pub static mut g_something_that_resumes_safe_thread_funcptr: undefined4;
    pub static mut g_something_that_suspends_safe_thread_funcptr: undefined4;
    pub static mut current_render_mode: *mut GXRenderModeObj;
    pub static mut gx_draw_is_done: bool_;
    pub static mut OSTick_after_gx_start_new_frame: undefined4;
    pub static mut gx_start_new_frame_retrace_count: undefined4;
    pub static mut retraces_per_frame: undefined4;
    pub static mut gx_fifo_use_size2: u32_;
    pub static mut g_some_gx_fifo_write_ptr: undefined4;
    pub static mut gx_usage: GxUsageState;
    pub static mut gx_fifo_size: u32_;
    pub static mut locked_cache_region: *mut ::core::ffi::c_void;
    pub static mut old_arena_hi: undefined4;
    pub static mut new_arena_hi: undefined4;
    pub static mut mtxa: *mut Mtx;
    pub static mut os_free_to_heap_func_ptr:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>;
    pub static mut os_alloc_from_heap_func_ptr:
        ::core::option::Option<unsafe extern "C" fn(arg1: u32_) -> *mut ::core::ffi::c_void>;
    pub static mut g_some_empty_function_func_ptr: undefined4;
    pub static mut g_some_dvd_close_func_ptr: undefined4;
    pub static mut g_read_file_with_dvd_prio2_func_ptr: undefined4;
    pub static mut g_get_dvd_file_size_func_ptr: undefined4;
    pub static mut g_some_dvd_open_func_ptr: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_char, arg2: *mut DVDFileInfo) -> BOOL32,
    >;
    pub static mut g_get_some_dvd_info_func_ptr:
        ::core::option::Option<unsafe extern "C" fn() -> *mut DVDFileInfo>;
    pub static mut graphics_info: *mut GraphicsInfo;
    pub static mut avdisp_post_add_color: GXColor;
    pub static mut avdisp_post_mult_color: GXColor;
    pub static mut avdisp_use_post_add_color: undefined4;
    pub static mut avdisp_use_post_mult_color: undefined4;
    pub static mut data_buffer: undefined4;
    pub static mut i2fMagic: undefined8;
    pub static mut value0_6: undefined4;
    pub static mut value0_3: undefined4;
    pub static mut FLOAT_ZERO: f32;
    pub static mut FLOAT0: f32;
    pub static mut FLOAT1: f32;
    pub static mut FLOAT400: f32;
    pub static mut g_something_with_camera: undefined4;
    pub static mut g_related_to_camera_turn_rate_and_stage_tilt: f64;
    pub static mut camera_near_clip_z: f32;
    pub static mut camera_far_clip_z: f32;
    pub static mut g_camera_fov: undefined4;
    pub static mut g_camera_turn_rate_scale: f64;
    pub static mut camera_height: f64;
    pub static mut camera_pivot_height: f64;
    pub static mut camera_distance: f32;
    pub static mut g_some_array_related_to_lights_2: undefined4;
    pub static mut g_some_light_color: undefined4;
    pub static mut FLOAT20000: f32;
    pub static mut FLOAT0_2: f32;
    pub static mut FLOAT480: f32;
    pub static mut FLOAT640: f32;
    pub static mut g_bgm_id_lookup_table: [BgmTrack; 43usize];
    pub static mut g_sound_group_GRPse04: GSoundGroup;
    pub static mut g_sound_group_GRPse04_items: [GSoundGroupEntry; 1463usize];
    pub static mut debugtext_bg_color: GXColor;
    pub static mut MAX_GX_FIFO_BUF_SIZE: f32;
    pub static mut visual_ball_size: f32;
    pub static mut ball_friction: f32;
    pub static mut epsilon: f32;
    pub static mut g_goal_post_vertical_offset: f32;
    pub static mut stage_tilt_multiplier: f32;
    pub static mut g_itemgroup_anim_rate_post_dropin: undefined8;
    pub static mut g_bg_animation_timescale: f32;
    pub static mut bonus_stage_id_list: undefined4;
    pub static mut jamabar_sensitivity: f64;
    pub static mut jamabar_friction: f64;
    pub static mut jamabar_lower_bound: f64;
    pub static mut jamabar_lower_bound_2: f32;
    pub static mut g_some_font_value_lookup_table: undefined;
    pub static mut g_some_avtext_array: [[::core::ffi::c_char; 2usize]; 344usize];
    pub static mut BTM_SetDefaultLinkSuperTout: undefined;
    pub static mut THPSimpleGetCurrentFrame: undefined;
    pub static mut ICE_FOG_THEME_ID: undefined1;
    pub static mut ICE_FOG_TYPE: undefined1;
    pub static mut ICE_FOG_START: f32;
    pub static mut ICE_FOG_END: f32;
    pub static mut ICE_FOG_RED: undefined1;
    pub static mut ICE_FOG_GREEN: undefined1;
    pub static mut ICE_FOG_BLUE: undefined1;
    pub static mut divisor: undefined8;
    pub static mut base: undefined8;
    pub static mut heap_configs: [HeapConfig; 19usize];
    pub static mut main_heap: OSHeapHandle;
    pub static mut stage_heap: OSHeapHandle;
    pub static mut bg_heap: OSHeapHandle;
    pub static mut chara_heap: OSHeapHandle;
    pub static mut replay_heap: OSHeapHandle;
    pub static mut empty_string: [::core::ffi::c_char; 1usize];
    pub static mut G_MAIN_MODE_ADDITIONAL_REL_PATHS: [*mut undefined; 8usize];
    pub static mut main_mode_funcs: [::core::option::Option<unsafe extern "C" fn()>; 8usize];
    pub static mut sub_mode_funcs: [::core::option::Option<unsafe extern "C" fn()>; 265usize];
    pub static mut MAIN_MODE_NAMES: [*mut undefined; 8usize];
    pub static mut SUB_MODE_NAMES: [*mut undefined; 265usize];
    pub static mut additional_rel_buffer_info: RelBufferInfo;
    pub static mut DEBUG_MENU_OPTION_NAMES: [*mut undefined; 7usize];
    pub static mut switchdataD_80370704: *mut undefined;
    pub static mut switchdataD_80370758: *mut undefined;
    pub static mut switchdataD_80370794: *mut undefined;
    pub static mut switchdataD_803707c8: *mut undefined;
    pub static mut switchdataD_80370848: *mut undefined;
    pub static mut events: [Event; 23usize];
    pub static mut switchdataD_80370d6c: *mut undefined;
    pub static mut switchdataD_80370ddc: *mut undefined;
    pub static mut switchdataD_80370dfc: pointer;
    pub static mut switchdataD_80370e5c: *mut undefined;
    pub static mut switchdataD_803727e4: *mut undefined;
    pub static mut switchdataD_80372878: *mut undefined;
    pub static mut switchdataD_80374aac: pointer;
    pub static mut g_some_submode_file_name_list: pointer;
    pub static mut g_active_players: [u8_; 4usize];
    pub static mut camera_funcs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Camera, arg2: *mut Ball)>; 93usize];
    pub static mut switchdataD_80374e54: *mut undefined;
    pub static mut switchdataD_80375030: pointer;
    pub static mut switchdataD_8037ed0c: pointer;
    pub static mut switchdataD_8037ed30: *mut undefined;
    pub static mut switchdataD_8037ed54: *mut undefined;
    pub static mut switchdataD_8037ed78: pointer;
    pub static mut switchdataD_8037edf8: *mut undefined;
    pub static mut theme_lights: [theme_light; 41usize];
    pub static mut init_common_p_lz: [::core::ffi::c_char; 17usize];
    pub static mut init_common_lz: [::core::ffi::c_char; 15usize];
    pub static mut bmp_infos: [BmpInfo; 25usize];
    pub static mut bmp_tex_names: *mut undefined;
    pub static mut switchdataD_803809d0: pointer;
    pub static mut ui_sprite_draw_req: SpriteDrawRequest;
    pub static mut monkey_flags: undefined4;
    pub static mut SEL_WORLD_PTR: pointer;
    pub static mut g_some_music_status_array: undefined;
    pub static mut switchdataD_80391aa0: *mut undefined;
    pub static mut switchdataD_80391ad8: *mut undefined;
    pub static mut switchdataD_80391be8: *mut undefined;
    pub static mut switchdataD_80391e70: *mut undefined;
    pub static mut g_debug_textdraw_color: undefined1;
    pub static mut switchdataD_8039b19c: *mut undefined;
    pub static mut switchdataD_8039b280: *mut undefined;
    pub static mut g_debug_text_buffers: pointer;
    pub static mut g_debug_color_bufers: pointer;
    pub static mut s_RateIntp: [::core::ffi::c_char; 12usize];
    pub static mut s_CalcIntp: [::core::ffi::c_char; 12usize];
    pub static mut s_Face_Dir: [::core::ffi::c_char; 12usize];
    pub static mut s_No_loop: [::core::ffi::c_char; 12usize];
    pub static mut EVENT_STATUS_NAMES: [*mut ::core::ffi::c_char; 12usize];
    pub static mut physical_ball_size: f32;
    pub static mut ball_accel: f32;
    pub static mut ball_restitution: f32;
    pub static mut ball_mode_funcs: *mut undefined;
    pub static mut switchdataD_8039c560: *mut undefined;
    pub static mut switchdataD_8039c5a4: *mut undefined;
    pub static mut switchdataD_8039c5dc: pointer;
    pub static mut switchdataD_8039c838: *mut undefined;
    pub static mut switchdataD_8039ccf8: pointer;
    pub static mut g_fog_type: undefined1;
    pub static mut g_current_stage_id: s32;
    pub static mut g_stage_id_to_load: s32;
    pub static mut g_smb1_stage_list: undefined1;
    pub static mut s_stage: [::core::ffi::c_char; 6usize];
    pub static mut LOCALE_STRINGS: *mut undefined;
    pub static mut g_loaded_gmas_list: [*mut *mut GmaBuffer; 5usize];
    pub static mut goal_gma_model_names: pointer;
    pub static mut g_cached_button_itemgroup_count_stage: undefined2;
    pub static mut cached_button_itemgroup_count: undefined4;
    pub static mut effect_init_funcs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>; 71usize];
    pub static mut effect_tick_funcs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>; 71usize];
    pub static mut effect_disp_funcs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>; 71usize];
    pub static mut effect_dest_funcs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>; 71usize];
    pub static mut world_theme: WorldTheme;
    pub static mut g_bg_related_timer: f32;
    pub static mut g_some_theme_color: GXColor;
    pub static mut g_something_with_world_theme_2: undefined4;
    pub static mut g_something_with_world_theme_3: undefined4;
    pub static mut g_smth_for_drawing: s32;
    pub static mut g_maybe_some_bg_effect_func_ptr: undefined4;
    pub static mut g_some_bg_struct_ptr: *mut *mut ::core::ffi::c_void;
    pub static mut g_something_with_world_theme_4: undefined2;
    pub static mut g_something_with_world_theme_5: undefined2;
    pub static mut BGApeTable: *mut *mut Ape;
    pub static mut g_smth_with_bg_models: undefined4;
    pub static mut bg_init_funcs: undefined;
    pub static mut bg_tick_funcs: undefined;
    pub static mut bg_dest_funcs: undefined;
    pub static mut bg_disp_funcs: pointer;
    pub static mut bg_item_coin_coli_funcs: undefined;
    pub static mut g_bg_filename_list: [*mut ::core::ffi::c_char; 43usize];
    pub static mut STAGE_WORLD_THEMES: [WorldTheme; 428usize];
    pub static mut switchdataD_8039f024: *mut undefined;
    pub static mut switchdataD_8039f3f8: *mut undefined;
    pub static mut switchdataD_8039f590: *mut undefined;
    pub static mut switchdataD_8039f61c: *mut undefined;
    pub static mut switchdataD_8039ff54: *mut undefined;
    pub static mut switchdataD_803a0864: *mut undefined;
    pub static mut cm_entry_if_funcs: pointer;
    pub static mut cm_entry_then_funcs: pointer;
    pub static mut beginner_noex_cm_entries: [CourseCommand; 31usize];
    pub static mut advanced_noex_cm_entries: [CourseCommand; 120usize];
    pub static mut expert_noex_cm_entries: [CourseCommand; 208usize];
    pub static mut beginner_ex_cm_entries: [CourseCommand; 35usize];
    pub static mut advanced_ex_cm_entries: [CourseCommand; 32usize];
    pub static mut expert_ex_cm_entries: [CourseCommand; 42usize];
    pub static mut master_noex_cm_entries: [CourseCommand; 35usize];
    pub static mut master_ex_cm_entries: [CourseCommand; 50usize];
    pub static mut g_cm_entry_list9: [CourseCommand; 16usize];
    pub static mut cm_courses: [*mut CourseCommand; 12usize];
    pub static mut sm_stage_infos_world1: [SmStageInfo; 10usize];
    pub static mut sm_stage_infos_world2: [SmStageInfo; 10usize];
    pub static mut sm_stage_infos_world3: [SmStageInfo; 10usize];
    pub static mut sm_stage_infos_world4: [SmStageInfo; 10usize];
    pub static mut sm_stage_infos_world5: [SmStageInfo; 10usize];
    pub static mut sm_stage_infos_world6: [SmStageInfo; 10usize];
    pub static mut sm_stage_infos_world7: [SmStageInfo; 10usize];
    pub static mut sm_stage_infos_world8: [SmStageInfo; 10usize];
    pub static mut sm_stage_infos_world9: [SmStageInfo; 10usize];
    pub static mut sm_stage_infos_world10: [SmStageInfo; 10usize];
    pub static mut sm_world_info: [SmWorldInfo; 10usize];
    pub static mut item_init_funcs: *mut undefined;
    pub static mut item_tick_funcs: *mut undefined;
    pub static mut item_disp_funcs: *mut undefined;
    pub static mut item_coli_funcs: *mut undefined;
    pub static mut item_dest_funcs: *mut undefined;
    pub static mut item_replay_init_funcs: *mut undefined;
    pub static mut item_debug_funcs: *mut undefined;
    pub static mut coin_types: [CoinType; 5usize];
    pub static mut stobj_init_funcs: *mut undefined;
    pub static mut stobj_tick_funcs: *mut undefined;
    pub static mut stobj_disp_funcs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>; 14usize];
    pub static mut stobj_coli_funcs: *mut undefined;
    pub static mut stobj_dest_funcs: *mut undefined;
    pub static mut stobj_cb_f_funcs: *mut undefined;
    pub static mut button_type_strs: *mut undefined;
    pub static mut goal_LCD_small_common_gmatpl_idxes: [::core::ffi::c_short; 10usize];
    pub static mut goal_LCD_large_common_gmatpl_idxes: [::core::ffi::c_short; 10usize];
    pub static mut switchdataD_803a7210: pointer;
    pub static mut switchdataD_803a7234: pointer;
    pub static mut switchdataD_803a7258: *mut undefined;
    pub static mut FONT_NAME_LIST: *mut undefined;
    pub static mut FONT_STYLE_NAME_LIST: *mut undefined;
    pub static mut switchdataD_803a8264: *mut undefined;
    pub static mut switchdataD_803a83dc: pointer;
    pub static mut switchdataD_803a84b8: pointer;
    pub static mut switchdataD_803a86e8: *mut undefined;
    pub static mut switchdataD_803a8770: *mut undefined;
    pub static mut switchdataD_803a8794: *mut undefined;
    pub static mut switchdataD_803a87b8: *mut undefined;
    pub static mut switchdataD_803a87dc: *mut undefined;
    pub static mut switchdataD_803a8800: pointer;
    pub static mut switchdataD_803a8894: pointer;
    pub static mut switchdataD_803a88cc: *mut undefined;
    pub static mut LOADIN_TEXT_ROUND: [::core::ffi::c_char; 9usize];
    pub static mut LOADIN_TEXT_WORLD: [::core::ffi::c_char; 12usize];
    pub static mut LOADIN_TEXT_MASTER_EX: [::core::ffi::c_char; 12usize];
    pub static mut LOADIN_TEXT_MASTER: [::core::ffi::c_char; 10usize];
    pub static mut LOADIN_TEXT_EXTRA: [::core::ffi::c_char; 9usize];
    pub static mut LOADIN_TEXT_STAGE: [::core::ffi::c_char; 9usize];
    pub static mut LOADIN_TEXT_BONUS_STAGE: [::core::ffi::c_char; 12usize];
    pub static mut LOADIN_TEXT_FINAL_ROUND: [::core::ffi::c_char; 12usize];
    pub static mut LOADIN_TEXT_FINAL_STAGE: [::core::ffi::c_char; 12usize];
    pub static mut stage_name_tilde_fmt_string: undefined;
    pub static mut switchdataD_803a96f8: *mut undefined;
    pub static mut switchdataD_803a9e6c: *mut undefined;
    pub static mut switchdataD_803a9ea4: pointer;
    pub static mut switchdataD_803a9ee8: *mut undefined;
    pub static mut switchdataD_803aa0d4: *mut undefined;
    pub static mut switchdataD_803bdd6c: pointer;
    pub static mut switchdataD_803bdda0: pointer;
    pub static mut HUD_TEXT_EX: [::core::ffi::c_char; 3usize];
    pub static mut HUD_TEXT_WORLD_STAGE_NO: [::core::ffi::c_char; 6usize];
    pub static mut HUD_TEXT_STAGE_NO: [::core::ffi::c_char; 3usize];
    pub static mut HUD_TEXT_STAGE_NAME: [::core::ffi::c_char; 3usize];
    pub static mut sprite_banana_count_fmt_string: [::core::ffi::c_char; 5usize];
    pub static mut g_minimap_mode: MinimapMode;
    pub static mut minimap_zoom_level: undefined4;
    pub static mut minimap_scale: undefined2;
    pub static mut minimap_rotation: undefined2;
    pub static mut switchdataD_803c0bc4: pointer;
    pub static mut s_cannot_read_file: [::core::ffi::c_char; 18usize];
    pub static mut switchdataD_803c12c8: pointer;
    pub static mut switchdataD_803c14b8: *mut undefined;
    pub static mut g_some_card_funcs: pointer;
    pub static mut g_some_card_funcs2: pointer;
    pub static mut switchdataD_803ce82c: *mut undefined;
    pub static mut switchdataD_803ce880: *mut undefined;
    pub static mut switchdataD_803ce908: *mut undefined;
    pub static mut switchdataD_803ce978: *mut undefined;
    pub static mut switchdataD_803ce9f4: *mut undefined;
    pub static mut GXInitTexObjUserData: undefined;
    pub static mut dGeomDisable: undefined;
    pub static mut switchdataD_803d1240: pointer;
    pub static mut RANKING_SMB1_MAIN_GAME_DEFAULT_NAMES: [[*mut undefined; 5usize]; 3usize];
    pub static mut rumble_enabled_bitflag: undefined1;
    pub static mut switchdataD_803d1624: pointer;
    pub static mut switchdataD_803d1c2c: pointer;
    pub static mut switchdataD_803d35f0: *mut undefined;
    pub static mut postfix_table: *mut undefined;
    pub static mut postfix_table_s: *mut undefined;
    pub static mut ape_name_enum: *mut undefined;
    pub static mut storymode_ape_enum: *mut undefined;
    pub static mut ape_lod_enum: *mut undefined;
    pub static mut eye_string_table: *mut undefined;
    pub static mut eye_name_table: [*mut *mut ::core::ffi::c_char; 17usize];
    pub static mut game_name_enum: *mut undefined;
    pub static mut enum_face_types: [*mut ::core::ffi::c_char; 9usize];
    pub static mut ape_face_enum_alt: *mut undefined;
    pub static mut ape_face_enum_monkey: *mut undefined;
    pub static mut s_ape: [::core::ffi::c_char; 4usize];
    pub static mut switchdataD_803d9220: *mut undefined;
    pub static mut DIP_APENUM_FORMAT: [::core::ffi::c_char; 5usize];
    pub static mut s_null: [::core::ffi::c_char; 5usize];
    pub static mut s_HANDL_GHA: [::core::ffi::c_char; 10usize];
    pub static mut s_HANDL_PHA: [::core::ffi::c_char; 10usize];
    pub static mut s_HANDR_GHA: [::core::ffi::c_char; 10usize];
    pub static mut s_HANDR_PHA: [::core::ffi::c_char; 10usize];
    pub static mut RANKING_DEFAULT_NAMES: *mut undefined;
    pub static mut RANKING_DEFAULT_SCORES: [u32_; 20usize];
    pub static mut G_RANKING_DEFAULT_APE_IDS: [u32_; 20usize];
    pub static mut switchdataD_803db7a0: *mut undefined;
    pub static mut switchdataD_803db9ec: *mut undefined;
    pub static mut switchdataD_803dca38: pointer;
    pub static mut switchdataD_803dca6c: *mut undefined;
    pub static mut g_some_chara_anim_funcs: *mut undefined;
    pub static mut g_active_scene_category: undefined4;
    pub static mut switchdataD_803dd32c: pointer;
    pub static mut switchdataD_803dd37c: *mut undefined;
    pub static mut switchdataD_803dd3c0: pointer;
    pub static mut CUTSCENE_BIN_FILE_NAMES: [*mut ::core::ffi::c_char; 16usize];
    pub static mut switchdataD_803de11c: *mut undefined;
    pub static mut switchdataD_803de8f8: pointer;
    pub static mut scene_filenames: *mut undefined;
    pub static mut dialog_locale_suffix: *mut undefined;
    pub static mut switchdataD_803ded34: pointer;
    pub static mut switchdataD_803ded7c: *mut undefined;
    pub static mut switchdataD_803dedc4: *mut undefined;
    pub static mut switchdataD_803dee0c: pointer;
    pub static mut switchdataD_803e7604: *mut undefined;
    pub static mut switchdataD_803edb94: pointer;
    pub static mut unlock_info_ptr: *mut UnlockInfo;
    pub static mut g_loaded_rel_count: undefined4;
    pub static mut g_loaded_rel_infos: [*mut RelBufferInfo; 10usize];
    pub static mut frame_counter: undefined4;
    pub static mut g_font_char_var_3: undefined4;
    pub static mut g_some_tpl_buffer: undefined;
    pub static mut g_init_common_tpl_buf: undefined;
    pub static mut g_some_nl_model_buffer_2: undefined;
    pub static mut g_init_common_gma_buf: *mut *mut NlBuffer;
    pub static mut scen_info: ScenInfo;
    pub static mut g_ord_tbl_stuff: *mut Mtx;
    pub static mut is_more_than_24_mib: undefined4;
    pub static mut g_some_buffer_ptr: undefined4;
    pub static mut g_some_other_heap_lo: undefined4;
    pub static mut g_some_other_heap_hi: undefined4;
    pub static mut g_some_dead_heap_mem_lo: undefined4;
    pub static mut g_some_dead_heap_mem_hi: undefined4;
    pub static mut g_curr_heap_config_idx: undefined4;
    pub static mut main_heap_size: undefined4;
    pub static mut stage_heap_size: undefined4;
    pub static mut bg_heap_size: undefined4;
    pub static mut chara_heap_size: undefined4;
    pub static mut replay_heap_size: undefined4;
    pub static mut main_mode: MainMode;
    pub static mut sub_mode: SubMode;
    pub static mut main_mode_request: MainMode;
    pub static mut sub_mode_request: SubMode;
    pub static mut sub_mode_frame_counter: s32;
    pub static mut curr_difficulty: Difficulty;
    pub static mut mode_flags: ModeFlag;
    pub static mut num_players: undefined4;
    pub static mut main_game_mode: MainGameMode;
    pub static mut curr_player_idx: undefined4;
    pub static mut mode_number_of_players: undefined4;
    pub static mut g_has_started_a_game: undefined2;
    pub static mut g_3player_camera_setting: undefined1;
    pub static mut stage_complete: bool_;
    pub static mut widescreen_mode: WidescreenMode;
    pub static mut g_curr_main_mode_name: *mut ::core::ffi::c_char;
    pub static mut g_curr_sub_mode_name: *mut ::core::ffi::c_char;
    pub static mut g_some_func_ptr_related_to_sub_mode2: undefined4;
    pub static mut sub_mode_destination: *mut ::core::ffi::c_void;
    pub static mut test_draw_func_ptr: undefined4;
    pub static mut g_repause_cooldown_counter: undefined1;
    pub static mut g_some_status_bitflag: undefined4;
    pub static mut g_current_focused_pause_menu_entry: undefined4;
    pub static mut g_current_pause_menu_entry_count: undefined4;
    pub static mut pausemenu_type: PauseMenuType;
    pub static mut g_pause_status: Status;
    pub static mut g_some_render_flag: GRenderringFlags;
    pub static mut g_mirror_pos1: Vec;
    pub static mut g_some_scale_vec3: Vec;
    pub static mut g_mirror_pos2: Vec;
    pub static mut g_mirror_pos3: undefined4;
    pub static mut g_pausemenu_screenshot_requested: undefined4;
    pub static mut g_image_buffer_ptr: *mut ::core::ffi::c_void;
    pub static mut g_pausemenu_screenshot_left_px: undefined2;
    pub static mut g_pausemenu_screenshot_top_px: undefined2;
    pub static mut g_pausemenu_screenshot_width_px: undefined2;
    pub static mut g_pausemenu_screenshot_height_px: undefined2;
    pub static mut pausemenu_scrot_texfmt: undefined4;
    pub static mut g_sub_mode3: SubMode;
    pub static mut adv_demo_frame_counter: undefined4;
    pub static mut g_focused_root_menu: undefined1;
    pub static mut g_focused_partygame_menu: undefined1;
    pub static mut g_focused_options_menu: undefined1;
    pub static mut g_focused_maingame_menu: undefined1;
    pub static mut selected_cm_difficulty2: undefined1;
    pub static mut selected_cm_difficulty: undefined1;
    pub static mut selected_characters: [u8_; 4usize];
    pub static mut sel_menu_info: SelMenuInfo;
    pub static mut number_of_starting_monkeys: s8;
    pub static mut stageselect_is_storymode: bool_;
    pub static mut stageselect_course_idx: [s8; 2usize];
    pub static mut stageselect_course_stage_idx: [[s8; 10usize]; 2usize];
    pub static mut g_last_selected_bowling_difficulty: undefined1;
    pub static mut menu_tick_func: undefined4;
    pub static mut menu_draw_func: undefined4;
    pub static mut g_some_sel_ngc_rel_buffer: RelBufferInfo;
    pub static mut g_something_with_camera3: undefined4;
    pub static mut g_current_camera: *mut Camera;
    pub static mut cameras: [Camera; 5usize];
    pub static mut g_camera_aspect_ratio: f32;
    pub static mut g_related_to_fov2: undefined1;
    pub static mut g_minigame_camera_func: undefined4;
    pub static mut g_camera_standstill_counters: [s16; 5usize];
    pub static mut g_active_light_group: undefined4;
    pub static mut g_some_array_related_to_lights_1: undefined2;
    pub static mut g_light_group_stack: undefined4;
    pub static mut num_light_groups: u8_;
    pub static mut next_fifo_use_array_idx: undefined4;
    pub static mut last_60_gx_fifo_use_sizes: [u32_; 60usize];
    pub static mut tick_at_gx_finish_frame: undefined4;
    pub static mut gx_fifo_use_size: u32_;
    pub static mut g_video_mode_change_requested: BOOL32;
    pub static mut mode_info: ModeInfo;
    pub static mut g_bg_gma: *mut GmaBuffer;
    pub static mut g_bg_tpl: *mut TplBuffer;
    pub static mut active_sprite_draw_req_count: undefined4;
    pub static mut g_smth_with_sprite_draw_reqs_widescreen: undefined4;
    pub static mut g_smth_with_widescreen: undefined4;
    pub static mut g_global_widescreen_translation_x: undefined2;
    pub static mut sprite_draw_req_buffer: [SpriteDrawRequest; 640usize];
    pub static mut g_profile_timer_start_times: [u32_; 9usize];
    pub static mut g_something_with_perf_profiling: undefined4;
    pub static mut g_enable_perf: BOOL32;
    pub static mut g_some_draw_perf_var: s32;
    pub static mut g_some_perf_time_elapsed: undefined4;
    pub static mut some_time: undefined4;
    pub static mut g_some_perf_timer_total_elapsed: undefined4;
    pub static mut g_some_perf_timer1: undefined4;
    pub static mut g_some_perf_timer2: undefined4;
    pub static mut g_some_perf_timer3: undefined4;
    pub static mut g_some_perf_timer4: undefined4;
    pub static mut g_some_perf_timer5: undefined4;
    pub static mut g_some_perf_timer6: undefined4;
    pub static mut g_some_perf_timer7: undefined4;
    pub static mut g_some_perf_timer8: undefined4;
    pub static mut g_some_perf_timer9: undefined4;
    pub static mut g_some_perf_timer10: undefined4;
    pub static mut g_some_perf_timer11: undefined4;
    pub static mut g_some_perf_timer12: undefined4;
    pub static mut g_some_perf_timer14: undefined4;
    pub static mut g_some_perf_timer13: undefined4;
    pub static mut g_some_perf_timer15: undefined4;
    pub static mut g_some_perf_timer17: undefined4;
    pub static mut g_some_perf_timer18: undefined4;
    pub static mut g_some_perf_timer16: undefined4;
    pub static mut g_debug_sound_ram_usage: undefined4;
    pub static mut g_debug_sound_aram_usage: undefined4;
    pub static mut g_active_music_tracks: [s16; 10usize];
    pub static mut g_something_related_to_bgm_track_id: undefined1;
    pub static mut g_some_music_related_counter: undefined1;
    pub static mut current_bgm_volume: undefined4;
    pub static mut g_something_with_sound5: undefined4;
    pub static mut g_smth_with_sound: undefined4;
    pub static mut g_player_id_for_sound: undefined4;
    pub static mut g_debug_textdraw_pos_x_2: undefined4;
    pub static mut g_debug_textdraw_pos_x_1: undefined4;
    pub static mut g_debug_textdraw_pos_y: undefined4;
    pub static mut g_debug_text_buffer_0: [::core::ffi::c_char; 1961usize];
    pub static mut g_debug_text_buffer_1: [::core::ffi::c_char; 1961usize];
    pub static mut g_debug_text_color_buffer_0: [::core::ffi::c_char; 1961usize];
    pub static mut g_debug_text_color_buffer_1: [::core::ffi::c_char; 1961usize];
    pub static mut g_debugtext_unknown7: undefined2;
    pub static mut g_debugtext_unknown8: undefined2;
    pub static mut g_debugtext_unknown9: undefined2;
    pub static mut g_debugtext_unknown10: undefined2;
    pub static mut g_debug_text_buffer_2: [::core::ffi::c_char; 1961usize];
    pub static mut g_debug_text_color_buffer_2: [::core::ffi::c_char; 1961usize];
    pub static mut os_font_encoding: u16_;
    pub static mut dip_switches: DipSwitch;
    pub static mut g_some_other_flags: GOtherFlags;
    pub static mut g_some_pad_idx: undefined2;
    pub static mut ball_pool_info: PoolInfo;
    pub static mut item_pool_info: PoolInfo;
    pub static mut stobj_pool_info: PoolInfo;
    pub static mut sprite_pool_info: PoolInfo;
    pub static mut effect_pool_info: PoolInfo;
    pub static mut g_some_pool_info2: PoolInfo;
    pub static mut g_some_pool_info3: PoolInfo;
    pub static mut camera_pool_info: PoolInfo;
    pub static mut ball_status_list: [u8_; 4usize];
    pub static mut item_status_list: [u8_; 256usize];
    pub static mut stobj_status_list: [u8_; 144usize];
    pub static mut sprite_status_list: [u8_; 80usize];
    pub static mut effect_status_list: [u8_; 512usize];
    pub static mut g_some_pool2_status_list: [u8_; 16usize];
    pub static mut g_some_pool3_status_list: [u8_; 16usize];
    pub static mut camera_status_list: [u8_; 5usize];
    pub static mut g_effect_flag_ptr: *mut ::core::ffi::c_short;
    pub static mut balls: [Ball; 8usize];
    pub static mut current_ball: *mut Ball;
    pub static mut active_monkey_id: [uint; 4usize];
    pub static mut g_some_menu_func_1: undefined4;
    pub static mut player_pad_map: [u32_; 4usize];
    pub static mut world_infos: [WorldInfo; 4usize];
    pub static mut g_gravity_dir: Vec;
    pub static mut current_world_info: undefined4;
    pub static mut g_some_frame_counter: ::core::ffi::c_int;
    pub static mut g_some_frame_counter_float: f32;
    pub static mut g_some_gameplay_flags: undefined4;
    pub static mut itemgroups: *mut Itemgroup;
    pub static mut stagedef: *mut StagedefFileHeader;
    pub static mut seesaw_count: undefined2;
    pub static mut g_something_with_wl: undefined1;
    pub static mut stage_tpl: undefined4;
    pub static mut stage_gma: *mut GmaBuffer;
    pub static mut current_stage_id: undefined2;
    pub static mut current_stage_name: [::core::ffi::c_char; 128usize];
    pub static mut worm_surface_gma_model: undefined4;
    pub static mut wormhole_gma_model: *mut GmaModel;
    pub static mut continue_gma_model: *mut GmaModel;
    pub static mut goal_gma_models: [*mut GmaModel; 3usize];
    pub static mut itemgroups_copy: *mut Itemgroup;
    pub static mut g_some_stage_id: undefined2;
    pub static mut g_another_stage_id: undefined2;
    pub static mut LOCALE_STGNAME_DVD_ENTRYNUMS: [s32; 6usize];
    pub static mut g_current_stagename_dvd_entry_number: undefined4;
    pub static mut stage_name_list_file_size: undefined4;
    pub static mut stage_name_offsets: [::core::ffi::c_int; 422usize];
    pub static mut g_some_32byte_lz_buffer: [u8_; 32usize];
    pub static mut g_some_replay_data4: undefined4;
    pub static mut replay_frames_remaining: undefined4;
    pub static mut replay_curr_ball_pos: Vec;
    pub static mut replay: *mut Replay;
    pub static mut g_loaded_player_score: undefined4;
    pub static mut next_effect_id: undefined2;
    pub static mut effects: [Effect; 512usize];
    pub static mut g_some_bg_mtx: undefined;
    pub static mut g_related_to_texture_UV_map: Mtx;
    pub static mut cm_unlock_entries: [u8_; 18usize];
    pub static mut current_cm_entry: *mut CourseCommand;
    pub static mut stage_jump_distance: ::core::ffi::c_int;
    pub static mut in_practice_mode: BOOL32;
    pub static mut g_stage_id_in_practice_mode: undefined2;
    pub static mut g_mode_flags2: ModeFlag;
    pub static mut g_some_course_length: undefined4;
    pub static mut cm_player_progress: [CmPlayerProgress; 12usize];
    pub static mut storymode_unlock_entries: [u8_; 13usize];
    pub static mut g_next_item_id: undefined2;
    pub static mut items: [Item; 256usize];
    pub static mut next_stobj_id: undefined2;
    pub static mut stobjs: [Stobj; 144usize];
    pub static mut bumper_lods: undefined4;
    pub static mut goaltapes: [GoalTape; 16usize];
    pub static mut goalbags: [GoalBag; 16usize];
    pub static mut goal_LCD_small_numbers: [*mut GmaModel; 10usize];
    pub static mut goal_LCD_large_numbers: [*mut GmaModel; 10usize];
    pub static mut sprites: [Sprite; 80usize];
    pub static mut g_some_sprite_structs: [GSomeSpriteStruct; 82usize];
    pub static mut g_some_sprite_width: undefined4;
    pub static mut g_some_sprite_height: undefined4;
    pub static mut g_screenfade_flags: undefined4;
    pub static mut g_screenfade_color: u32_;
    pub static mut g_screenfading1: undefined4;
    pub static mut g_screenfading2: undefined4;
    pub static mut g_some_font_ptr_array: [*mut ::core::ffi::c_void; 512usize];
    pub static mut g_related_to_aram_font_pages: [s32; 145usize];
    pub static mut textdraw_pos_x: f32;
    pub static mut textdraw_pos: Vec2d;
    pub static mut textdraw_font: Font16;
    pub static mut textdraw_mul_color: undefined4;
    pub static mut textdraw_add_color: undefined4;
    pub static mut textdraw_rot_z: undefined2;
    pub static mut textdraw_depth: f32;
    pub static mut textdraw_width: f32;
    pub static mut textdraw_height: f32;
    pub static mut textdraw_alpha: undefined4;
    pub static mut textdraw_flags: TextDrawFlags;
    pub static mut textdraw_alignment: undefined1;
    pub static mut g_textdraw_smth_with_letter_spacing_and_alignment: undefined2;
    pub static mut textdraw_drop_shadow_offset_x: undefined2;
    pub static mut textdraw_drop_shadow_offset_y: undefined2;
    pub static mut textdraw_shadow_alpha: f32;
    pub static mut g_textdraw_unk5: undefined4;
    pub static mut g_textdraw_unk6: undefined4;
    pub static mut g_textdraw_unk7: undefined4;
    pub static mut textdraw_style: undefined1;
    pub static mut textdraw_spacing: Vec2d;
    pub static mut g_textdraw_counter: undefined2;
    pub static mut g_textdraw_unk8: undefined4;
    pub static mut g_font_char_var_1: undefined4;
    pub static mut g_font_char_var_2: undefined4;
    pub static mut g_how_to_bg_scale_x: undefined4;
    pub static mut g_how_to_bg_scale_y: undefined4;
    pub static mut g_banana_disp_efc_req_count: u8_;
    pub static mut g_banana_disp_efc_stack: [undefined; 10usize];
    pub static mut global_ape_lod: undefined4;
    pub static mut g_is_waiting_on_some_arq_request: undefined4;
    pub static mut discQueue: [gDiscQueueItem; 128usize];
    pub static mut disc_queue_start: undefined4;
    pub static mut disc_queue_end: undefined4;
    pub static mut discQueueGroup: undefined4;
    pub static mut g_cached_file_entries: [GCachedFileEntry; 128usize];
    pub static mut g_last_filename_attempted_to_open: undefined4;
    pub static mut g_minigame_tick_func: undefined4;
    pub static mut g_mini_draw_func_ptr: undefined4;
    pub static mut g_haze_type: undefined1;
    pub static mut g_override_clear_r: undefined1;
    pub static mut g_override_clear_g: undefined1;
    pub static mut g_override_clear_b: undefined1;
    pub static mut g_maybe_smth_related_to_pausing: undefined4;
    pub static mut memcard_infos: [MemCardInfo; 2usize];
    pub static mut storymode_save_files: [StoryModeSaveFile; 3usize];
    pub static mut g_storymode_unlock_entries_copy: undefined1;
    pub static mut g_cm_unlock_entries_copy: undefined1;
    pub static mut g_some_string: undefined;
    pub static mut g_some_pad_motor_array1: [GSomethingWithPadMotorsStruct; 4usize];
    pub static mut g_some_pad_motor_array2: [GSomethingWithPadMotorsStruct; 4usize];
    pub static mut g_some_heap_handle: OSHeapHandle;
    pub static mut g_avdisp_bound_sphere_scale: f32;
    pub static mut g_avdisp_material_alpha: f32;
    pub static mut avdisp_tex_mtx: Mtx;
    pub static mut main_mta_storage: undefined;
    pub static mut face_bones: [GBone; 16usize];
    pub static mut handR_bones: [GBone; 16usize];
    pub static mut tailBone: GBone;
    pub static mut handLbones: [GBone; 16usize];
    pub static mut common_anim_storage: [*mut ::core::ffi::c_void; 17usize];
    pub static mut game_mal_storage: [*mut ::core::ffi::c_void; 17usize];
    pub static mut arc_location: *mut ArcFileInfo;
    pub static mut common_mal_sizes: [*mut ::core::ffi::c_void; 17usize];
    pub static mut game_mal_sizes: [::core::ffi::c_int; 17usize];
    pub static mut ape_tpls: [*mut ::core::ffi::c_void; 68usize];
    pub static mut rep_tpl_table: [*mut ::core::ffi::c_void; 17usize];
    pub static mut ape_gma_table: [*mut ::core::ffi::c_void; 68usize];
    pub static mut ape_skl_arc_handle: ARCHandle;
    pub static mut ape_skl_arc_data: *mut ::core::ffi::c_void;
    pub static mut g_common_mtx: Mtx;
    pub static mut g_some_floats: [f32; 64usize];
    pub static mut ape_ref_count_table: undefined;
    pub static mut registered_apes: [*mut Ape; 64usize];
    pub static mut total_apes_registered: undefined4;
    pub static mut g_ptr_to_something: undefined4;
    pub static mut g_some_gift_menu_flags: undefined1;
    pub static mut scene_data: undefined4;
    pub static mut dialog_tbl: undefined4;
    pub static mut g_author_frame: undefined2;
    pub static mut scene_length: undefined2;
    pub static mut g_some_author_related_data: undefined4;
    pub static mut g_author_scene: undefined4;
    pub static mut g_new_main_mode_req: undefined4;
    pub static mut g_new_sub_mode_req: undefined4;
    pub static mut g_some_author_tick_func: undefined4;
    pub static mut g_some_author_cutscene_timer: undefined4;
    pub static mut g_some_author_cutscene_flag: undefined4;
    pub static mut g_playpoint_msg_counter: undefined4;
    pub static mut unlock_info: UnlockInfo;
    pub static mut sprite_decoration_bar_tick: [byte; 1usize];
    pub static mut view_stage_aspect_ratio: f32;
    pub static mut switchdataD_804ee064: pointer;
    pub static mut story_mode_funcs: *mut undefined;
    pub static mut switchdataD_804eee68: pointer;
    pub static mut switchdataD_804eee88: pointer;
    pub static mut switchdataD_804eef70: pointer;
    pub static mut switchdataD_804ef084: pointer;
    pub static mut switchdataD_804ef11c: pointer;
    pub static mut CHAR_SPACE_3: undefined;
    pub static mut CHAR_SPACE_2: undefined;
    pub static mut CHAR_A: undefined4;
    pub static mut CHAR_B: undefined4;
    pub static mut CHAR_C: undefined4;
    pub static mut CHAR_D: undefined4;
    pub static mut CHAR_E: undefined4;
    pub static mut CHAR_F: undefined4;
    pub static mut CHAR_G: undefined4;
    pub static mut CHAR_H: undefined4;
    pub static mut CHAR_I: undefined4;
    pub static mut CHAR_J: undefined4;
    pub static mut CHAR_K: undefined4;
    pub static mut CHAR_L: undefined4;
    pub static mut CHAR_M: undefined4;
    pub static mut CHAR_N: undefined4;
    pub static mut CHAR_O: undefined4;
    pub static mut CHAR_P: undefined4;
    pub static mut CHAR_Q: undefined4;
    pub static mut CHAR_R: undefined4;
    pub static mut CHAR_S: undefined4;
    pub static mut CHAR_T: undefined4;
    pub static mut CHAR_U: undefined4;
    pub static mut CHAR_V: undefined4;
    pub static mut CHAR_W: undefined4;
    pub static mut CHAR_X: undefined4;
    pub static mut CHAR_Y: undefined4;
    pub static mut CHAR_Z: undefined4;
    pub static mut CHAR_SPACE: undefined4;
    pub static mut CHAR_a: undefined4;
    pub static mut CHAR_b: undefined4;
    pub static mut CHAR_c: undefined4;
    pub static mut CHAR_d: undefined4;
    pub static mut CHAR_e: undefined4;
    pub static mut CHAR_f: undefined4;
    pub static mut CHAR_g: undefined4;
    pub static mut CHAR_h: undefined4;
    pub static mut CHAR_i: undefined4;
    pub static mut CHAR_j: undefined4;
    pub static mut CHAR_k: undefined4;
    pub static mut CHAR_l: undefined4;
    pub static mut CHAR_m: undefined4;
    pub static mut CHAR_n: undefined4;
    pub static mut CHAR_o: undefined4;
    pub static mut CHAR_p: undefined4;
    pub static mut CHAR_q: undefined4;
    pub static mut CHAR_r: undefined4;
    pub static mut CHAR_s: undefined4;
    pub static mut CHAR_t: undefined4;
    pub static mut CHAR_u: undefined4;
    pub static mut CHAR_v: undefined4;
    pub static mut CHAR_x: undefined4;
    pub static mut CHAR_y: undefined4;
    pub static mut CHAR_z: undefined4;
    pub static mut nameentry_character_ptr_list: *mut *mut *mut undefined4;
    pub static mut DEFAULT_FILENAME: *mut undefined;
    pub static mut DEFAULT_FILENAME_LOCALE_LIST: pointer;
    pub static mut continue_saved_game_text: [::core::ffi::c_char; 40usize];
    pub static mut start_game_from_beginning_text: [::core::ffi::c_char; 35usize];
    pub static mut switchdataD_804f0588: *mut undefined;
    pub static mut switchdataD_804f0734: *mut undefined;
    pub static mut switchdataD_805435f0: *mut undefined;
    pub static mut switchdataD_80543614: pointer;
    pub static mut switchdataD_80543648: pointer;
    pub static mut switchdataD_80543690: *mut undefined;
    pub static mut switchdataD_805437a4: *mut undefined;
    pub static mut switchdataD_805437cc: *mut undefined;
    pub static mut switchdataD_80543840: *mut undefined;
    pub static mut switchdataD_80543868: *mut undefined;
    pub static mut scen_stgname_buffer: undefined4;
    pub static mut g_scen_stage_names_loaded: undefined4;
    pub static mut g_are_story_select_sprites_visible: undefined4;
    pub static mut g_amount_of_stages_per_world: undefined2;
    pub static mut g_amount_of_beaten_stages_in_world: undefined2;
    pub static mut some_ape_float: f32;
    pub static mut some_ape_float2: f32;
    pub static mut some_ape_float3: f32;
    pub static mut g_storymode_preview_textures: SpriteTex;
    pub static mut g_storymode_stageselect_state: StoryModeStageSelectState;
    pub static mut g_storymode_stageselect_framecounter: undefined2;
    pub static mut g_some_storymode_stageid1: undefined4;
    pub static mut g_some_storymode_stageid2: undefined4;
    pub static mut g_some_storymode_stageid3: undefined4;
    pub static mut story_file_name: [*mut ::core::ffi::c_char; 6usize];
    pub static mut g_some_nameentry_length: undefined1;
    pub static mut g_some_nameentry_flag: undefined1;
    pub static mut g_storymode_are_you_sure_answer: bool_;
    pub static mut data_select_menu_state: DataSelectMenuState;
    pub static mut story_file_select_state: undefined1;
    pub static mut selected_story_file_idx: undefined1;
    pub static mut g_dataselect_menu_framecounter: undefined1;
    pub static mut storymode_menu_state: StoryModeMenuState;
    pub static mut g_some_ape: *mut Ape;
    pub static mut view_stage_camera_x: undefined4;
    pub static mut view_stage_camera_y: undefined4;
    pub static mut view_stage_camera_z: undefined4;
    pub static mut view_stage_camera_rot_x: undefined2;
    pub static mut view_stage_camera_rot_y: undefined2;
    pub static mut view_stage_camera_rot_z: undefined2;
    pub static mut view_stage_timer: s16;
    pub static mut view_stage_camera_zoom: undefined4;
    pub static mut view_stage_camera_horizontal_rotation: u16_;
    pub static mut view_stage_camera_vertical_pan: undefined2;
    pub static mut view_stage_camera_horizontal_pan: undefined2;
    pub static mut switchdataD_80574504: *mut undefined;
    pub static mut switchdataD_80574614: *mut undefined;
    pub static mut switchdataD_805747cc: pointer;
    pub static mut switchdataD_805748e8: pointer;
    pub static mut switchdataD_805749f8: pointer;
    pub static mut switchdataD_80574bb0: pointer;
    pub static mut menu_mode_select_entries: MenuEntry;
    pub static mut CAN_PLAY_NUM_PARTY_GAMES_STRING: [::core::ffi::c_char; 49usize];
    pub static mut menu_party_game_select_entries: undefined;
    pub static mut CAN_PURCHASE_PARTY_GAME_STRING: [::core::ffi::c_char; 93usize];
    pub static mut CANNOT_SELECT_PARTY_GAME_STRING: [::core::ffi::c_char; 84usize];
    pub static mut menu_option_entries: undefined;
    pub static mut menu_number_of_players_entries: MenuEntry;
    pub static mut menu_character_select_1_entries: [MenuEntry; 4usize];
    pub static mut menu_character_select_2_entries: [MenuEntry; 4usize];
    pub static mut menu_main_game_select_entries: [MenuEntry; 3usize];
    pub static mut menu_level_select_1_entries: undefined;
    pub static mut menu_level_select_2_entries: undefined;
    pub static mut menu_stage_select_entries: undefined;
    pub static mut menu_gameplay_settings_entries: undefined;
    pub static mut menu_race_mode_select_entries: undefined;
    pub static mut menu_race_course_select_one_course_race_entries: undefined;
    pub static mut menu_race_course_select_time_trial_entries: [MenuEntry; 6usize];
    pub static mut menu_race_gameplay_settings_one_course_race_entries: undefined;
    pub static mut menu_race_gameplay_settings_grand_prix_entries: undefined;
    pub static mut menu_fight_mode_select_entries: undefined;
    pub static mut menu_fight_no_of_wins_entries: undefined;
    pub static mut menu_fight_stage_select_entries: undefined;
    pub static mut menu_fight_gameplay_settings_normal_entries: undefined;
    pub static mut menu_fight_gameplay_settings_survival_entries: undefined;
    pub static mut menu_target_empty_entries: undefined;
    pub static mut menu_target_gameplay_settings_entries: undefined;
    pub static mut menu_billiards_mode_select_entries: undefined;
    pub static mut menu_billiards_rule_select_entries: undefined;
    pub static mut menu_billiards_game_settings_multiplayer_entries: undefined;
    pub static mut menu_billiards_game_settings_1p_entries: undefined;
    pub static mut menu_bowling_mode_select_entries: undefined;
    pub static mut menu_bowling_rule_select_entries: undefined;
    pub static mut menu_bowling_level_select_entries: undefined;
    pub static mut menu_golf_mode_select_entries: undefined;
    pub static mut menu_golf_gameplay_settings_entries: undefined;
    pub static mut menu_boat_mode_select_entries: undefined;
    pub static mut menu_boat_course_select_one_course_race_entries: undefined;
    pub static mut menu_boat_course_select_time_attack_entries: undefined;
    pub static mut menu_boat_game_settings_one_course_race_entries: undefined;
    pub static mut menu_boat_game_settings_grand_prix_entries: undefined;
    pub static mut menu_shot_empty_entries: undefined;
    pub static mut menu_shot_stage_select_entries: undefined;
    pub static mut menu_shot_gameplay_settings_1p_entries: undefined;
    pub static mut menu_shot_gameplay_settings_2p_entries: undefined;
    pub static mut menu_shot_gameplay_settings_3p_entries: undefined;
    pub static mut menu_shot_gameplay_settings_4p_entries: undefined;
    pub static mut menu_dogfight_mode_select_entries: undefined;
    pub static mut menu_dogfight_stage_select_entries: undefined;
    pub static mut menu_dogfight_game_settings_normal_entries: undefined;
    pub static mut menu_dogfight_game_settings_survival_entries: undefined;
    pub static mut menu_soccer_mode_select_entries: undefined;
    pub static mut menu_soccer_team_select_entries: undefined;
    pub static mut menu_soccer_game_settings_no_com_entries: undefined;
    pub static mut menu_soccer_game_settings_com_entries: undefined;
    pub static mut menu_baseball_mode_select_entries: undefined;
    pub static mut menu_baseball_character_select_entries: undefined;
    pub static mut menu_baseball_stadium_select_entries: undefined;
    pub static mut menu_baseball_game_settings_com_entries: undefined;
    pub static mut menu_baseball_game_settings_no_com_entries: undefined;
    pub static mut menu_tennis_mode_select_entries: undefined;
    pub static mut menu_tennis_pair_select_2p_entries: undefined;
    pub static mut menu_tennis_pair_select_3p_entries: undefined;
    pub static mut menu_tennis_pair_select_4p_entries: undefined;
    pub static mut menu_tennis_court_select_entries: undefined;
    pub static mut menu_tennis_game_settings_com_entries: undefined;
    pub static mut menu_tennis_game_settings_no_com_entries: undefined;
    pub static mut menu_option_replay_entries: undefined;
    pub static mut menu_option_play_points_entries: undefined;
    pub static mut menu_option_gift_entries: undefined;
    pub static mut menu_option_ranking_entries: undefined;
    pub static mut menu_option_game_data_entries: undefined;
    pub static mut menu_option_controller_entries: undefined;
    pub static mut menu_option_screen_entries: undefined;
    pub static mut menu_screen_list: [MenuScreen; 87usize];
    pub static mut switchdataD_80580b70: pointer;
    pub static mut switchdataD_805837fc: *mut undefined;
    pub static mut switchdataD_80584584: pointer;
    pub static mut switchdataD_805846ac: *mut undefined;
    pub static mut g_currently_visible_menu_screen: MenuScreenID;
    pub static mut g_next_menu_screen: MenuScreenID;
    pub static mut g_menu_transition_frametimer: undefined1;
    pub static mut g_character_selected: byte;
    pub static mut g_menu_description_text: *mut ::core::ffi::c_char;
    pub static mut g_active_pads_bitfield: undefined4;
    pub static mut g_language_id: undefined1;
    pub static mut locked_menu_items: undefined4;
    pub static mut menu_apes: [*mut Ape; 4usize];
    pub static mut g_menu_color_overlay_timer: undefined4;
    pub static mut g_something_with_preview_textures: undefined;
    pub static mut g_replay_stage_id_to_load: undefined4;
    pub static mut g_gift_menu_cursor_pos: undefined1;
    pub static mut switchdataD_80590050: *mut undefined;
    pub static mut switchdataD_805b1fc6: pointer;
    pub static mut s_bmp: undefined;
    pub static mut s_ape_: undefined;
    pub static mut switchdataD_805b20d2: pointer;
    pub static mut switchdataD_805b22ae: pointer;
    pub static mut switchdataD_805b22ea: pointer;
    pub static mut switchdataD_8060470c: *mut undefined;
    pub static mut switchdataD_80604780: pointer;
    pub static mut switchdataD_806047a0: pointer;
    pub static mut switchdataD_806047cc: pointer;
    pub static mut switchdataD_806047ec: *mut undefined;
    pub static mut switchdataD_8060480c: *mut undefined;
    pub static mut switchdataD_80604854: *mut undefined;
    pub static mut switchdataD_80604b5c: *mut undefined;
    pub static mut switchdataD_80605210: pointer;
    pub static mut test_mode_sub_mode_funcs: *mut undefined;
    pub static mut switchdataD_80638fc4: pointer;
    pub static mut switchdataD_8063d714: *mut undefined;
    pub static mut switchdataD_8063d738: pointer;
    pub static mut switchdataD_8063ec08: *mut undefined;
    pub static mut switchdataD_80642514: pointer;
    pub static mut switchdataD_80642534: *mut undefined;
    pub static mut g_debug_sound_fx_id: undefined4;
    pub static mut g_debug_sound_fx_pan: undefined1;
    pub static mut g_debug_sound_fx_pitch: undefined2;
    pub static mut g_debug_sound_fx_doppler: undefined2;
    pub static mut g_debug_sound_fx_mod: undefined2;
    pub static mut g_debug_sound_fx_reverb: undefined1;
    pub static mut g_debug_sound_fx_chorus: undefined1;
    pub static mut g_debug_sound_ics: undefined1;
    pub static mut g_debug_stream_se_id: undefined2;
    pub static mut g_debug_sound_ics_volume: undefined1;
    pub static mut g_debug_sound_ics_pan_L: undefined1;
    pub static mut g_debug_sound_ics_pan_R: undefined1;
    pub static mut g_debug_stream_bgm_id: undefined2;
    pub static mut g_debug_sound_efc: undefined1;
    pub static mut test_aram_font_type: Font16;
    pub static mut test_aram_font_proportional: undefined1;
    pub static mut test_aram_font_style: undefined1;
    pub static mut test_aram_font_page: undefined1;
    pub static mut test_aram_font_char: undefined4;
    pub static mut g_something_with_test_cutscenes: u16_;
    pub static mut test_scene_number: u16_;
    pub static mut g_test_dialog_category_idx: undefined2;
    pub static mut g_test_dialog_data_idx: undefined2;
    pub static mut g_test_dialog_ptr: GDialogStruct;
    pub static mut g_test_ape_ptr: *mut Ape;
    pub static mut switchdataD_8065c7a0: *mut undefined;
    pub static mut switchdataD_80685ba0: pointer;
    pub static mut switchdataD_80686b64: pointer;
    pub static mut switchdataD_80686c20: pointer;
    pub static mut player_count: undefined2;
    pub static mut race_frames_remaining: undefined4;
    pub static mut switchdataD_806c6ec4: *mut undefined;
    pub static mut switchdataD_806c6ef8: *mut undefined;
    pub static mut switchdataD_806c6fe0: *mut undefined;
    pub static mut switchdataD_806c7010: *mut undefined;
    pub static mut switchdataD_806c7058: *mut undefined;
    pub static mut switchdataD_806c7418: *mut undefined;
    pub static mut switchdataD_806c7434: *mut undefined;
    pub static mut switchdataD_806c777c: *mut undefined;
    pub static mut switchdataD_806cb4ac: *mut undefined;
    pub static mut switchdataD_806cb6b8: *mut undefined;
    pub static mut switchdataD_806cb6fc: pointer;
    pub static mut switchdataD_806cb784: pointer;
    pub static mut switchdataD_806fd0d8: pointer;
    pub static mut switchdataD_806fd190: pointer;
    pub static mut switchdataD_80706bac: pointer;
    pub static mut switchdataD_8073c160: *mut undefined;
    pub static mut switchdataD_8073c244: *mut undefined;
    pub static mut switchdataD_8073c6dc: *mut undefined;
    pub static mut switchdataD_8073c920: *mut undefined;
    pub static mut switchdataD_807b8b94: pointer;
    pub static mut switchdataD_807b8bbc: pointer;
    pub static mut switchdataD_807b9ca8: *mut undefined;
    pub static mut switchdataD_80801518: pointer;
    pub static mut switchdataD_80801724: *mut undefined;
    pub static mut switchdataD_80804710: *mut undefined;
    pub static mut switchdataD_808063ec: *mut undefined;
    pub static mut switchdataD_8080640c: *mut undefined;
    pub static mut switchdataD_8080642c: *mut undefined;
    pub static mut switchdataD_8080644c: *mut undefined;
    pub static mut switchdataD_808064ac: *mut undefined;
    pub static mut switchdataD_8080667c: *mut undefined;
    pub static mut switchdataD_80806734: pointer;
    pub static mut switchdataD_80806970: *mut undefined;
    pub static mut switchdataD_808069a0: *mut undefined;
    pub static mut switchdataD_808609e4: *mut undefined;
    pub static mut switchdataD_80860a20: *mut undefined;
    pub static mut switchdataD_80860a90: *mut undefined;
    pub static mut switchdataD_80860ac0: *mut undefined;
    pub static mut switchdataD_80860ae0: *mut undefined;
    pub static mut switchdataD_80860c8c: *mut undefined;
    pub static mut switchdataD_80860ca8: *mut undefined;
    pub static mut switchdataD_80860cd8: *mut undefined;
    pub static mut switchdataD_808ddd64: *mut undefined;
    pub static mut switchdataD_808ddfa8: pointer;
    pub static mut switchdataD_808ddfc8: *mut undefined;
    pub static mut switchdataD_809958d8: pointer;
    pub static mut switchdataD_80995924: *mut undefined;
    pub static mut switchdataD_8099ca88: pointer;
    pub static mut switchdataD_8099cb74: *mut undefined;
    pub static mut switchdataD_8099f914: *mut undefined;
    pub static mut switchdataD_809e535c: *mut undefined;
    pub static mut switchdataD_809e8b58: *mut undefined;
    pub static mut switchdataD_809e8b78: *mut undefined;
    pub static mut switchdataD_809eaa04: *mut undefined;
    pub static mut switchdataD_809eaa28: *mut undefined;
    pub static mut switchdataD_809eaa4c: *mut undefined;
    pub static mut switchdataD_809eaa70: *mut undefined;
    pub static mut switchdataD_809eaa8c: *mut undefined;
    pub static mut switchdataD_809eaaac: *mut undefined;
    pub static mut switchdataD_809eaaf4: *mut undefined;
    pub static mut switchdataD_809eab18: *mut undefined;
    pub static mut switchdataD_809eab34: *mut undefined;
    pub static mut switchdataD_809eab50: *mut undefined;
    pub static mut switchdataD_809eab70: *mut undefined;
    pub static mut switchdataD_809eab8c: *mut undefined;
    pub static mut switchdataD_809eabac: *mut undefined;
    pub static mut switchdataD_809eabf4: *mut undefined;
    pub static mut switchdataD_809eac2c: *mut undefined;
    pub static mut switchdataD_809eac48: *mut undefined;
    pub static mut switchdataD_809eadc4: *mut undefined;
    pub static mut switchdataD_809eae20: pointer;
    pub static mut switchdataD_809eae94: pointer;
    pub static mut switchdataD_809f17e8: pointer;
    pub static mut g_some_video_bitflag: undefined2;
    pub static mut GXWGFifo: PPCWGPipe;
    pub fn __check_pad3();
    pub fn dol_entry();
    pub fn __init_registers();
    pub fn __init_data();
    pub fn __init_hardware();
    pub fn __flush_cache(param_1: uint, param_2: ::core::ffi::c_int);
    pub fn memset(
        ptr: *mut ::core::ffi::c_void,
        value: ::core::ffi::c_int,
        num: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
    pub fn __fill_mem(
        ptr: *mut ::core::ffi::c_void,
        value: ::core::ffi::c_int,
        num: usize,
    ) -> *mut ::core::ffi::c_void;
    pub fn memcpy(
        dest: *mut ::core::ffi::c_void,
        src: *mut ::core::ffi::c_void,
        count: usize,
    ) -> *mut ::core::ffi::c_void;
    pub fn TRK_memset(
        param_1: ::core::ffi::c_int,
        param_2: byte,
        param_3: uint,
    ) -> ::core::ffi::c_int;
    pub fn TRK_memcpy(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn g_init_console();
    pub fn g_some_heap_init();
    pub fn load_run_main_loop_parent1();
    pub fn read_and_set_os_string_table() -> uint;
    pub fn load_main_loop_rel_and_run(
        rel_filepath: *mut ::core::ffi::c_char,
        buffer_info: *mut RelBufferInfo,
    );
    pub fn unload_main_loop_rel(mainLoopBufPtrs: *mut *mut OSModuleInfo) -> *mut *mut OSModuleInfo;
    pub fn load_common_gma_tpl();
    pub fn set_init_rel_index(index: u32_);
    pub fn g_clear_prev_GX_settings_something1() -> undefined4;
    pub fn g_clear_prev_GX_settings_something2();
    pub fn GXSetCullMode_cached(mode: GXCullMode);
    pub fn GXSetBlendMode_cached(
        type_: GXBlendMode,
        src_factor: GXBlendFactor,
        dst_factor: GXBlendFactor,
        op: GXLogicOp,
    );
    pub fn GXSetTevSwapModeTable_cached(
        id: GXTevSwapSel,
        red: GXTevColorChan,
        green: GXTevColorChan,
        blue: GXTevColorChan,
        alpha: GXTevColorChan,
    );
    pub fn g_GXSetTevSwapModeTable_wrapper(
        param_1: GXTevSwapSel,
        param_2: GXTevColorChan,
        param_3: GXTevColorChan,
        param_4: GXTevColorChan,
        param_5: GXTevColorChan,
    );
    pub fn GXSetTevSwapMode_cached(
        stage: GXTevStageID,
        ras_sel: GXTevSwapSel,
        tex_sel: GXTevSwapSel,
    );
    pub fn GXSetColorUpdate_cached(update_enable: GXBool);
    pub fn GXSetZCompLoc_cached(before_tex: GXBool);
    pub fn GXSetTevColorIn_cached(
        stage: GXTevStageID,
        a: GXTevColorArg,
        b: GXTevColorArg,
        c: GXTevColorArg,
        d: GXTevColorArg,
    );
    pub fn GXSetTevAlphaIn_cached(
        stage: GXTevStageID,
        a: GXTevAlphaArg,
        b: GXTevAlphaArg,
        c: GXTevAlphaArg,
        d: GXTevAlphaArg,
    );
    pub fn GXSetTevColorOp_cached(
        stage: GXTevStageID,
        op: GXTevOp,
        bias: GXTevBias,
        scale: GXTevScale,
        clamp: GXBool,
        out_reg: GXTevRegID,
    );
    pub fn GXSetTevAlphaOp_cached(
        stage: GXTevStageID,
        op: GXTevOp,
        bias: GXTevBias,
        scale: GXTevScale,
        clamp: GXBool,
        out_reg: GXTevRegID,
    );
    pub fn g_GXSetTevColorIn_GXSetTevAlphaIn_wrapper(
        param_1: GXTevStageID,
        param_2: ::core::ffi::c_int,
    );
    pub fn g_GXSetTevOrder_wrapper(
        param_1: GXTevStageID,
        param_2: GXTexCoordID,
        param_3: GXTexCoordID,
        param_4: GXChannelID,
    );
    pub fn GXSetTevKColorSel_cached(stage: GXTevStageID, sel: GXTevKColorSel);
    pub fn GXSetTevKAlphaSel_cached(stage: GXTevStageID, sel: GXTevKAlphaSel);
    pub fn GXSetNumTevStages_cached(nStages: u8_);
    pub fn GXSetTevKColor_cached(id: GXTevKColorID, color: *mut GXColor);
    pub fn GXLoadTexObj_cached(tex_obj: *mut GXTexObj, tex_map_id: GXTexMapID);
    pub fn g_something_with_GXSetProjectionv(param_1: *mut undefined4, param_2: uint);
    pub fn GXSetNumIndStages_cached(nstages: u8_);
    pub fn GXSetIndTexOrder_cached(
        ind_stage: GXIndTexStageID,
        tex_coord: GXTexCoordID,
        tex_map: GXTexMapID,
    );
    pub fn g_GXSetIndTexMtx_wrapper(
        param_1: GXIndTexMtxID,
        param_2: *mut [f32; 3usize],
        param_3: ::core::ffi::c_char,
    );
    pub fn GXSetTevIndirect_cached(
        tev_stage: GXTevStageID,
        ind_stage: GXIndTexStageID,
        format: GXIndTexFormat,
        bias_sel: GXIndTexBiasSel,
        matrix_sel: GXIndTexMtxID,
        wrap_s: GXIndTexWrap,
        wrap_t: GXIndTexWrap,
        add_prev: GXBool,
        utc_lod: GXBool,
        alpha_sel: GXIndTexAlphaSel,
    );
    pub fn g_GXSetTevIndirect_zero_if_different(param_1: GXTevStageID);
    pub fn GXSetScissor_cached(xOrig: u32_, yOrig: u32_, wd: u32_, ht: u32_);
    pub fn GXSetDispCopySrc_cached(left: u16_, top: u16_, wd: u16_, ht: u16_);
    pub fn GXSetTexCopySrc_cached(left: u16_, top: u16_, wd: u16_, ht: u16_);
    pub fn GXSetDispCopyDst_cached(wd: u16_, ht: u16_);
    pub fn GXSetTexCopyDst_cached(wd: u16_, ht: u16_, fmt: GXTexFmt, mipmap: GXBool);
    pub fn GXSetCopyClear_cached(clear_clr: GXColor, clear_z: u32_);
    pub fn GXSetTexCoordGen2_cached(
        dst_coord: GXTexCoordID,
        func: GXTexGenType,
        src_param: GXTexGenSrc,
        mtx: u32_,
        normalize: GXBool,
        postmtx: u32_,
    );
    pub fn GXSetNumTexGens_cached(nTexGens: u8_);
    pub fn GXSetLineWidth_cached(width: u8_, tex_offsets: GXTexOffset);
    pub fn GXSetNumChans_cached(nChans: u8_);
    pub fn opti_GXSetChanCtrl(
        chan: GXChannelID,
        enable: GXBool,
        amb_src: GXColorSrc,
        mat_src: GXColorSrc,
        light_mask: u32_,
        diff_fn: GXDiffuseFn,
        attn_fn: GXAttnFn,
    );
    pub fn GXSetZMode_cached(compare_enable: GXBool, func: GXCompare, update_enable: GXBool);
    pub fn g_read_something_from_prev_GX_settings(
        param_1: *mut undefined,
        param_2: *mut undefined4,
        param_3: *mut undefined,
    );
    pub fn g_set_some_gx_settings();
    pub fn g_draw_something(param_1: f64, param_2: f64, param_3: f64, param_4: *mut ushort);
    pub fn mark_finished_waiting_for_dvdread(result: s32, file_info: *mut DVDFileInfo);
    pub fn read_entire_file_using_dvdread_prio_async(
        fileInfo: *mut DVDFileInfo,
        addr: *mut ::core::ffi::c_void,
        length: s32,
        offset: s32,
    ) -> u32_;
    pub fn dvd_cancel_async_callback(param_1: ::core::ffi::c_int);
    pub fn call_dvd_cancel_async_and_wait_for_completion(
        block: *mut ::core::ffi::c_void,
    ) -> undefined4;
    pub fn g_something_with_disc_cover();
    pub fn g_idle_function(param_1: ::core::ffi::c_int);
    pub fn g_set_some_func_ptr1(param_1: undefined4);
    pub fn g_set_some_card_func_ptr(param_1: undefined4);
    pub fn g_set_some_func_ptr3(param_1: undefined4);
    pub fn pad_init();
    pub fn g_read_inputs_and_maybe_reset_console();
    pub fn g_PADRead_and_handle_errors(pad_status: *mut PADStatus);
    pub fn g_reset_console(status: *mut PADStatus, param_2: ::core::ffi::c_int);
    pub fn g_reset_console_wrapper(status: *mut PADStatus);
    pub fn g_smth_which_may_reset_console(status: *mut PADStatus);
    pub fn set_console_reset_callback(
        callback: ::core::option::Option<unsafe extern "C" fn() -> u32_>,
    );
    pub fn get_console_reset_callback() -> ::core::option::Option<unsafe extern "C" fn() -> u32_>;
    pub fn OSAlloc(size: u32_) -> *mut ::core::ffi::c_void;
    pub fn OSFree(ptr: *mut ::core::ffi::c_void);
    pub fn g_some_arq_request_callback();
    pub fn aram_font_to_mram_font_callback();
    pub fn g_load_aram_font();
    pub fn gARAMFont_DVDRead(
        param_1: *mut DVDFileInfo,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn g_some_arq_request(source: *mut ::core::ffi::c_void);
    pub fn aram_font_to_mram_font(
        font: Font8,
        g_char_idx: ::core::ffi::c_int,
        dest: *mut ::core::ffi::c_void,
    );
    pub fn memcpy_handler(
        dest: *mut ::core::ffi::c_void,
        src: *mut ::core::ffi::c_void,
        count: usize,
    );
    pub fn g_something_with_video_progressive_mode();
    pub fn bootup_draw_sega_splash();
    pub fn init_sega_splash_tex(tex_obj: *mut GXTexObj);
    pub fn draw_sega_splash(param_1: *mut GXTexObj);
    pub fn draw_sega_splash_wrapper();
    pub fn PPCMfmsr();
    pub fn PPCMtmsr();
    pub fn PPCMfhid0();
    pub fn PPCMthid0();
    pub fn PPCMfl2cr();
    pub fn PPCMtl2cr();
    pub fn PPCMtdec();
    pub fn PPCSync();
    pub fn PPCHalt();
    pub fn PPCMtmmcr0();
    pub fn PPCMtmmcr1();
    pub fn PPCMfpmc1();
    pub fn PPCMtpmc1();
    pub fn PPCMtpmc2();
    pub fn PPCMfpmc3();
    pub fn PPCMtpmc3();
    pub fn PPCMfpmc4();
    pub fn PPCMtpmc4();
    pub fn PPCMfhid2();
    pub fn PPCMthid2();
    pub fn PPCMfwpar();
    pub fn PPCMtwpar();
    pub fn PPCDisableSpeculation();
    pub fn PPCSetFpNonIEEEMode();
    pub fn OSGetConsoleType() -> ::core::ffi::c_int;
    pub fn ClearArena();
    pub fn InquiryCallback(param_1: undefined4, param_2: ::core::ffi::c_int);
    pub fn OSInit();
    pub fn OSExceptionInit();
    pub fn __OSDBINITSTART() -> undefined4;
    pub fn __OSSetExceptionHandler(param_1: uint, param_2: undefined4) -> undefined4;
    pub fn __OSGetExceptionHandler(param_1: uint) -> undefined4;
    pub fn __OSPSInit() -> undefined4;
    pub fn __OSGetDIConfig() -> uint;
    pub fn OSInitAlarm();
    pub fn OSCreateAlarm(param_1: *mut undefined4);
    pub fn InsertAlarm(
        param_1: *mut undefined4,
        param_2: undefined4,
        param_3: uint,
        param_4: uint,
        param_5: undefined4,
    );
    pub fn OSSetAlarm(
        param_1: *mut undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
    );
    pub fn OSSetPeriodicAlarm(
        param_1: *mut undefined4,
        param_2: undefined4,
        param_3: ::core::ffi::c_int,
        param_4: uint,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
    );
    pub fn OSCancelAlarm(param_1: *mut ::core::ffi::c_int);
    pub fn DecrementerExceptionCallback(param_1: undefined4, param_2: *mut OSContext)
        -> undefined8;
    pub fn DLInsert(
        free_chunk_list: *mut ChunkInfo,
        new_free_chunk: *mut ChunkInfo,
    ) -> *mut ChunkInfo;
    pub fn OSAllocFromHeap(heap: OSHeapHandle, size: u32_) -> *mut ::core::ffi::c_void;
    pub fn OSFreeToHeap(heap: OSHeapHandle, ptr: *mut ::core::ffi::c_void);
    pub fn OSSetCurrentHeap(heap: OSHeapHandle) -> OSHeapHandle;
    pub fn OSInitAlloc(
        arena_start: *mut ::core::ffi::c_void,
        arena_end: *mut ::core::ffi::c_void,
        max_heaps: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_void;
    pub fn OSCreateHeap(
        start: *mut ::core::ffi::c_void,
        end: *mut ::core::ffi::c_void,
    ) -> OSHeapHandle;
    pub fn OSDestroyHeap(heap: OSHeapHandle);
    pub fn OSCheckHeap(heap: OSHeapHandle) -> ::core::ffi::c_long;
    pub fn OSGetArenaHi() -> *mut ::core::ffi::c_void;
    pub fn OSGetArenaLo() -> *mut ::core::ffi::c_void;
    pub fn OSSetArenaHi(newHi: *mut ::core::ffi::c_void);
    pub fn OSSetArenaLo(newLo: *mut ::core::ffi::c_void);
    pub fn OSAllocFromArenaLo(size: u32_, align: u32_) -> *mut ::core::ffi::c_void;
    pub fn OSAllocFromArenaHi(size: u32_, align: u32_) -> *mut ::core::ffi::c_void;
    pub fn __OSInitAudioSystem();
    pub fn __OSStopAudioSystem();
    pub fn DCEnable() -> uint;
    pub fn DCInvalidateRange(startAddr: *mut ::core::ffi::c_void, nBytes: u32_);
    pub fn DCFlushRange(startAddr: *mut ::core::ffi::c_void, nBytes: u32_);
    pub fn DCStoreRange(param_1: uint, param_2: ::core::ffi::c_int) -> uint;
    pub fn DCFlushRangeNoSync(param_1: uint, param_2: ::core::ffi::c_int) -> uint;
    pub fn DCStoreRangeNoSync(param_1: uint, param_2: ::core::ffi::c_int) -> uint;
    pub fn ICInvalidateRange(startAddr: *mut ::core::ffi::c_void, nBytes: u32_);
    pub fn ICFlashInvalidate() -> uint;
    pub fn ICEnable() -> uint;
    pub fn __LCEnable() -> ulonglong;
    pub fn LCEnable();
    pub fn LCDisable() -> ulonglong;
    pub fn LCLoadBlocks();
    pub fn LCStoreBlocks(param_1: uint) -> uint;
    pub fn LCQueueWait(param_1: ::core::ffi::c_int);
    pub fn L2GlobalInvalidate();
    pub fn DMAErrorHandler(param_1: undefined4, param_2: *mut undefined4);
    pub fn __OSCacheInit();
    pub fn __OSLoadFPUContext(
        param_1: undefined8,
        param_2: undefined4,
        param_3: ::core::ffi::c_int,
    ) -> undefined8;
    pub fn __OSSaveFPUContext(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: f64,
        param_5: f64,
        param_6: f64,
        param_7: f64,
        param_8: f64,
        param_9: undefined4,
        param_10: undefined4,
        param_11: ::core::ffi::c_int,
    );
    pub fn OSSetCurrentContext(context: *mut OSContext);
    pub fn OSGetCurrentContext() -> *mut OSContext;
    pub fn OSSaveContext(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn OSLoadContext(param_1: ::core::ffi::c_int) -> undefined8;
    pub fn OSGetStackPointer() -> u32_;
    pub fn OSClearContext(context: *mut OSContext);
    pub fn OSInitContext(param_1: *mut OSContext, param_2: u32_, param_3: u32_);
    pub fn OSDumpContext(param_1: *mut undefined4);
    pub fn __OSContextInit();
    pub fn OSReport(msg: *mut ::core::ffi::c_char, ...);
    pub fn OSPanic(
        file: *mut ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        msg: *mut ::core::ffi::c_char,
        ...
    );
    pub fn OSSetErrorHandler(param_1: uint, param_2: undefined4) -> undefined4;
    pub fn Decode(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn OSGetFontEncode() -> u16_;
    pub fn ReadROM(param_1: *mut ::core::ffi::c_void, param_2: u32_, param_3: ::core::ffi::c_int);
    pub fn ExpandFontSheet(param_1: ::core::ffi::c_int, param_2: uint);
    pub fn OSInitFont(param_1: ::core::ffi::c_int) -> bool_;
    pub fn OSDisableInterrupts() -> BOOL32;
    pub fn OSEnableInterrupts() -> BOOL32;
    pub fn OSRestoreInterrupts(enable: BOOL32) -> BOOL32;
    pub fn __OSSetInterruptHandler(
        param_1: ::core::ffi::c_short,
        param_2: undefined4,
    ) -> undefined4;
    pub fn __OSGetInterruptHandler(
        interrupt: __OSInterrupt,
    ) -> ::core::option::Option<unsafe extern "C" fn(interrupt: __OSInterrupt, arg1: *mut OSContext)>;
    pub fn __OSInterruptInit();
    pub fn SetInterruptMask(mask: OSInterruptMask) -> OSInterruptMask;
    pub fn __OSMaskInterrupts(param_1: uint) -> uint;
    pub fn __OSUnmaskInterrupts(mask: OSInterruptMask) -> OSInterruptMask;
    pub fn __OSDispatchInterrupt(param_1: undefined4, param_2: ::core::ffi::c_int) -> undefined8;
    pub fn ExternalInterruptHandler(
        param_1: undefined4,
        param_2: *mut undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    ) -> undefined8;
    pub fn empty_function();
    pub fn OSSetStringTable(stringTable: *mut ::core::ffi::c_void);
    pub fn Relocate(module1: *mut OSModuleHeader, module2: *mut OSModuleHeader) -> undefined4;
    pub fn OSLink(newModule: *mut OSModuleHeader, bss: *mut ::core::ffi::c_void) -> bool_;
    pub fn Undo(param_1: *mut ::core::ffi::c_int, param_2: ::core::ffi::c_int) -> undefined4;
    pub fn OSUnlink(oldModule: *mut OSModuleInfo) -> bool_;
    pub fn __OSModuleInit();
    pub fn OSGetConsoleSimulatedMemSize() -> u32_;
    pub fn OnReset(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn MEMIntrruptHandler(param_1: undefined4, param_2: *mut undefined4);
    pub fn RealMode() -> uint;
    pub fn __OSInitMemoryProtection();
    pub fn __OSUnlockAllMutex(param_1: ::core::ffi::c_int);
    pub fn Run();
    pub fn __OSReboot();
    pub fn OSRegisterResetFunction(param_1: ::core::ffi::c_int);
    pub fn Reset(param_1: undefined4);
    pub fn __OSDoHotReset(param_1: ::core::ffi::c_int);
    pub fn OSResetSystem(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> bool_;
    pub fn OSGetResetCode() -> uint;
    pub fn __OSResetSWInterruptHandler();
    pub fn OSGetResetButtonState() -> uint;
    pub fn OSGetResetSwitchState();
    pub fn WriteSramCallback();
    pub fn WriteSram(
        param_1: *mut byte,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> uint;
    pub fn __OSInitSram();
    pub fn __OSLockSram() -> *mut undefined2;
    pub fn __OSLockSramEx() -> *mut undefined2;
    pub fn UnlockSram(param_1: ::core::ffi::c_int, param_2: uint) -> uint;
    pub fn __OSUnlockSram(param_1: ::core::ffi::c_int);
    pub fn __OSUnlockSramEx(param_1: ::core::ffi::c_int);
    pub fn __OSSyncSram() -> undefined4;
    pub fn __OSReadROM(
        param_1: *mut ::core::ffi::c_void,
        param_2: u32_,
        param_3: ::core::ffi::c_int,
    ) -> uint;
    pub fn OSGetSoundMode() -> u32_;
    pub fn OSSetSoundMode(param_1: uint);
    pub fn OSGetProgressiveMode() -> u32_;
    pub fn OSSetProgressiveMode(param_1: uint);
    pub fn OSGetWirelessID(param_1: ::core::ffi::c_int) -> undefined2;
    pub fn OSSetWirelessID(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_short);
    pub fn __OSInitSystemCall();
    pub fn __OSThreadInit();
    pub fn OSInitThreadQueue(queue: *mut OSThreadQueue);
    pub fn OSGetCurrentThread() -> undefined4;
    pub fn OSDisableScheduler() -> ::core::ffi::c_int;
    pub fn OSEnableScheduler() -> ::core::ffi::c_int;
    pub fn UnsetRun(param_1: ::core::ffi::c_int);
    pub fn __OSGetEffectivePriority(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn SetEffectivePriority(param_1: ::core::ffi::c_int, param_2: undefined4) -> undefined4;
    pub fn SelectThread(param_1: ::core::ffi::c_int) -> *mut OSContext;
    pub fn __OSReschedule();
    pub fn OSCreateThread(
        thread: *mut OSThread,
        func: *mut ::core::ffi::c_void,
        param: *mut ::core::ffi::c_void,
        stackBase: *mut ::core::ffi::c_void,
        stackSize: u32_,
        priority: OSPriority,
        attribute: u16_,
    ) -> undefined4;
    pub fn OSExitThread(param_1: u32_);
    pub fn OSCancelThread(param_1: *mut OSContext);
    pub fn OSResumeThread(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn OSSuspendThread(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn OSSleepThread(param_1: *mut ::core::ffi::c_int);
    pub fn OSWakeupThread(param_1: *mut ::core::ffi::c_int);
    pub fn OSSetThreadPriority(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn OSGetThreadPriority(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn OSGetTime();
    pub fn OSGetTick() -> OSTick;
    pub fn __OSGetSystemTime() -> ulonglong;
    pub fn __OSTimeToSystemTime(param_1: ::core::ffi::c_int, param_2: uint) -> undefined8;
    pub fn GetDates(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn OSTicksToCalendarTime(param_1: uint, param_2: uint, param_3: *mut ::core::ffi::c_int);
    pub fn init_cpp_wrapper();
    pub fn __init_cpp();
    pub fn ppc_halt_wrapper();
    pub fn SIBusy() -> undefined4;
    pub fn SIIsChanBusy(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn CompleteTransfer() -> uint;
    pub fn SIInterruptHandler(param_1: undefined4, param_2: undefined4);
    pub fn SIEnablePollingInterrupt(param_1: ::core::ffi::c_int) -> bool_;
    pub fn SIRegisterPollingHandler(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn SIUnregisterPollingHandler(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn SIInit();
    pub fn __SITransfer(
        param_1: uint,
        param_2: *mut undefined4,
        param_3: ::core::ffi::c_int,
        param_4: undefined4,
        param_5: ::core::ffi::c_int,
        param_6: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn SIGetStatus(param_1: ::core::ffi::c_int) -> uint;
    pub fn SISetCommand(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn SITransferCommands();
    pub fn SISetXY(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int) -> uint;
    pub fn SIEnablePolling(param_1: uint) -> uint;
    pub fn SIDisablePolling(param_1: uint) -> uint;
    pub fn SIGetResponseRaw(param_1: ::core::ffi::c_int) -> bool_;
    pub fn SIGetResponse(
        param_1: ::core::ffi::c_int,
        param_2: *mut undefined4,
    ) -> ::core::ffi::c_int;
    pub fn SITransfer(
        param_1: uint,
        param_2: *mut undefined4,
        param_3: ::core::ffi::c_int,
        param_4: undefined4,
        param_5: ::core::ffi::c_int,
        param_6: ::core::ffi::c_int,
        param_7: uint,
        param_8: uint,
    ) -> undefined4;
    pub fn GetTypeCallback(param_1: uint, param_2: uint);
    pub fn SIGetType(param_1: uint) -> ::core::ffi::c_int;
    pub fn SIGetTypeAsync(param_1: uint, param_2: *mut undefined) -> ::core::ffi::c_int;
    pub fn SISetSamplingRate(param_1: uint);
    pub fn SIRefreshSamplingRate();
    pub fn SetExiInterruptMask(param_1: ::core::ffi::c_int, param_2: *mut ::core::ffi::c_int);
    pub fn EXIImm(
        param_1: ::core::ffi::c_int,
        param_2: *mut byte,
        param_3: ::core::ffi::c_int,
        param_4: ::core::ffi::c_int,
        param_5: undefined4,
    ) -> undefined4;
    pub fn EXIImmEx(
        param_1: ::core::ffi::c_int,
        param_2: *mut byte,
        param_3: ::core::ffi::c_int,
        param_4: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn EXIDma(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: undefined4,
        param_4: ::core::ffi::c_int,
        param_5: undefined4,
    ) -> undefined4;
    pub fn EXISync(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn EXIClearInterrupts(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
        param_4: ::core::ffi::c_int,
    ) -> uint;
    pub fn EXISetExiCallback(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn __EXIProbe(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn EXIProbe(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn EXIProbeEx(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn EXIAttach(param_1: ::core::ffi::c_int, param_2: undefined4) -> undefined4;
    pub fn EXIDetach(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn EXISelect(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn EXIDeselect(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn TCIntrruptHandler(param_1: ::core::ffi::c_short, param_2: *mut OSContext);
    pub fn EXIInit();
    pub fn EXILock(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn EXIUnlock(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn sndReadFlag(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn EXIGetID(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: *mut undefined4,
    ) -> undefined4;
    pub fn InitializeUART() -> undefined4;
    pub fn WriteUARTN(param_1: *mut byte, param_2: uint) -> undefined4;
    pub fn DBInit();
    pub fn __DBExceptionDestinationAux();
    pub fn __DBExceptionDestination();
    pub fn __DBIsExceptionMarked(param_1: uint) -> uint;
    pub fn DBPrintf();
    pub fn PSMTXIdentity(param_1: *mut undefined4) -> undefined8;
    pub fn PSMTXCopy(param_1: *mut f32, param_2: *mut f32) -> undefined8;
    pub fn PSMTXConcat(param_1: *mut f32, param_2: *mut f32, param_3: *mut f32) -> undefined8;
    pub fn PSMTXInverse(param_1: *mut f32, param_2: *mut f32) -> undefined4;
    pub fn PSMTXScale(param_1: f64, param_2: f64, param_3: f64, param_4: *mut f32);
    pub fn C_MTXLookAt(mtx: *mut Mtx, cam_pos: *mut Vec, cam_up: *mut Vec, target: *mut Vec);
    pub fn C_MTXFrustum(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: f64,
        param_5: f64,
        param_6: f64,
        param_7: *mut f32,
    );
    pub fn C_MTXPerspective(m: *mut Mtx44, fovy: f64, aspect: f64, n: f64, f: f64);
    pub fn C_MTXOrtho(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: f64,
        param_5: f64,
        param_6: f64,
        m: *mut f32,
    );
    pub fn PSVECAdd(param_1: *mut f32, param_2: *mut f32, param_3: *mut f32);
    pub fn PSVECSubtract(param_1: *mut f32, param_2: *mut f32, param_3: *mut f32);
    pub fn PSVECScale(param_1: f64, param_2: *mut f32, param_3: *mut f32);
    pub fn PSVECNormalize(param_1: *mut f32, param_2: *mut f32) -> undefined8;
    pub fn PSVECCrossProduct(param_1: *mut f32, param_2: *mut f32, param_3: *mut f32)
        -> undefined8;
    pub fn __DVDInitWA();
    pub fn AlarmHandlerForTimeout(param_1: undefined4, param_2: *mut OSContext);
    pub fn Read(param_1: undefined4, param_2: uint, param_3: uint, param_4: undefined4);
    pub fn SeekTwiceBeforeRead(
        param_1: undefined4,
        param_2: undefined4,
        param_3: uint,
        param_4: undefined4,
    );
    pub fn DVDLowRead(
        param_1: undefined4,
        param_2: uint,
        param_3: uint,
        param_4: undefined4,
    ) -> undefined4;
    pub fn DVDLowSeek(param_1: uint, param_2: undefined4) -> undefined4;
    pub fn DVDLowWaitCoverClose(param_1: undefined4) -> undefined4;
    pub fn DVDLowReadDiskID(param_1: undefined4, param_2: undefined4) -> undefined4;
    pub fn DVDLowStopMotor(param_1: undefined4) -> undefined4;
    pub fn DVDLowRequestError(param_1: undefined4) -> undefined4;
    pub fn DVDLowInquiry(param_1: undefined4, param_2: undefined4) -> undefined4;
    pub fn DVDLowAudioStream(
        param_1: uint,
        param_2: undefined4,
        param_3: uint,
        param_4: undefined4,
    ) -> undefined4;
    pub fn DVDLowRequestAudioStatus(param_1: uint, param_2: undefined4) -> undefined4;
    pub fn DVDLowAudioBufferConfig(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: undefined4,
    ) -> undefined4;
    pub fn DVDLowReset();
    pub fn DVDLowBreak() -> undefined4;
    pub fn DVDLowClearCallback() -> undefined4;
    pub fn __DVDLowSetWAType(param_1: undefined4, param_2: undefined4);
    pub fn __DVDFSInit();
    pub fn DVDConvertPathToEntrynum(fileName: *mut ::core::ffi::c_char) -> s32;
    pub fn DVDFastOpen(entrynum: s32, fileInfo: *mut DVDFileInfo) -> BOOL32;
    pub fn DVDOpen(fileName: *mut ::core::ffi::c_char, fileInfo: *mut DVDFileInfo) -> BOOL32;
    pub fn DVDClose(fileInfo: *mut DVDFileInfo) -> BOOL32;
    pub fn entryToPath(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn DVDConvertEntrynumToPath(
        entry_num: s32,
        out_path: *mut ::core::ffi::c_char,
        max_path_size: usize,
    ) -> bool_;
    pub fn DVDGetCurrentDir(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int)
        -> undefined4;
    pub fn DVDChangeDir(dirName: *mut ::core::ffi::c_char);
    pub fn DVDReadAsyncPrio(
        fileInfo: *mut DVDFileInfo,
        addr: *mut ::core::ffi::c_void,
        length: s32,
        offset: s32,
        callback: ::core::option::Option<unsafe extern "C" fn(arg1: s32, arg2: *mut DVDFileInfo)>,
        prio: s32,
    ) -> BOOL32;
    pub fn cbForReadAsync(param_1: undefined4, param_2: ::core::ffi::c_int);
    pub fn DVDReadPrio(
        fileInfo: *mut DVDFileInfo,
        addr: *mut ::core::ffi::c_void,
        length: s32,
        offset: s32,
        prio: s32,
    ) -> s32;
    pub fn cbForCancelSync();
    pub fn DVDOpenDir(dirName: *mut ::core::ffi::c_char, dir: *mut DVDDir) -> BOOL32;
    pub fn DVDReadDir(dir: *mut DVDDir, dirent: *mut DVDDirEntry) -> BOOL32;
    pub fn DVDPrepareStreamAsync(
        param_1: *mut undefined4,
        param_2: uint,
        param_3: uint,
        param_4: undefined4,
    );
    pub fn DVDInit();
    pub fn cbForStateError(param_1: ::core::ffi::c_int);
    pub fn stateTimeout();
    pub fn stateGettingError();
    pub fn CategorizeError(param_1: uint) -> undefined4;
    pub fn cbForStateGettingError(param_1: uint);
    pub fn cbForUnrecoveredError(param_1: uint);
    pub fn cbForUnrecoveredErrorRetry(param_1: uint);
    pub fn cbForStateGoToRetry(param_1: uint);
    pub fn stateCheckID();
    pub fn stateCheckID3();
    pub fn stateCheckID2();
    pub fn cbForStateCheckID1(param_1: uint);
    pub fn cbForStateCheckID3(param_1: uint);
    pub fn stateCoverClosed();
    pub fn cbForStateCoverClosed(param_1: uint);
    pub fn cbForStateMotorStopped();
    pub fn stateReady();
    pub fn stateBusy(param_1: ::core::ffi::c_int);
    pub fn DVDReadAbsAsyncPrio(
        param_1: *mut undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn DVDReadAbsAsyncForBS(
        param_1: *mut undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
    ) -> undefined4;
    pub fn DVDReadDiskID(
        param_1: *mut undefined4,
        param_2: undefined4,
        param_3: undefined4,
    ) -> undefined4;
    pub fn DVDPrepareStreamAbsAsync(
        param_1: *mut undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
    ) -> undefined4;
    pub fn DVDCancelStreamAsync(param_1: *mut undefined4, param_2: undefined4) -> undefined4;
    pub fn DVDStopStreamAtEndAsync(param_1: *mut undefined4, param_2: undefined4) -> undefined4;
    pub fn DVDGetStreamErrorStatusAsync(
        param_1: *mut undefined4,
        param_2: undefined4,
    ) -> undefined4;
    pub fn DVDGetStreamPlayAddrAsync(param_1: *mut undefined4, param_2: undefined4) -> undefined4;
    pub fn DVDInquiryAsync(
        param_1: *mut undefined4,
        param_2: undefined4,
        param_3: undefined4,
    ) -> undefined4;
    pub fn DVDReset();
    pub fn DVDGetCommandBlockStatus(commandBlock: *mut DVDCommandBlock) -> s32;
    pub fn DVDGetDriveStatus() -> s32;
    pub fn DVDCancelAsync(param_1: *mut ::core::ffi::c_int, param_2: *mut undefined) -> undefined4;
    pub fn DVDCancel(block: *mut DVDCommandBlock) -> s32;
    pub fn DVDGetCurrentDiskID() -> *mut DVDDiskID;
    pub fn DVDCheckDisk() -> undefined4;
    pub fn __DVDPrepareResetAsync(param_1: *mut undefined);
    pub fn __DVDClearWaitingQueue();
    pub fn __DVDPushWaitingQueue(
        param_1: ::core::ffi::c_int,
        param_2: *mut undefined4,
    ) -> undefined4;
    pub fn __DVDPopWaitingQueue() -> *mut *mut ::core::ffi::c_int;
    pub fn __DVDCheckWaitingQueue() -> undefined4;
    pub fn __DVDDequeueWaitingQueue(param_1: *mut ::core::ffi::c_int) -> undefined4;
    pub fn ErrorCode2Num(param_1: uint) -> ::core::ffi::c_char;
    pub fn __DVDStoreErrorCode(param_1: uint);
    pub fn cb(param_1: ::core::ffi::c_int, param_2: *mut undefined4);
    pub fn __fstLoad();
    pub fn __VIRetraceHandler(param_1: undefined4, param_2: *mut OSContext);
    pub fn getTiming(param_1: undefined4) -> *mut undefined;
    pub fn __VIInit(param_1: uint);
    pub fn VIInit();
    pub fn VIWaitForRetrace();
    pub fn setFbbRegs(
        param_1: ::core::ffi::c_int,
        param_2: *mut uint,
        param_3: *mut uint,
        param_4: *mut uint,
        param_5: *mut uint,
    );
    pub fn setVerticalRegs(
        param_1: ushort,
        param_2: ushort,
        param_3: byte,
        param_4: ::core::ffi::c_short,
        param_5: ::core::ffi::c_short,
        param_6: ::core::ffi::c_short,
        param_7: ::core::ffi::c_short,
        param_8: ::core::ffi::c_short,
        param_9: ::core::ffi::c_int,
    );
    pub fn VIConfigure(rm: *mut GXRenderModeObj);
    pub fn VIFlush();
    pub fn VISetNextFrameBuffer(fb: *mut ::core::ffi::c_void);
    pub fn VISetBlack(black: bool_);
    pub fn VIGetRetraceCount() -> u32_;
    pub fn getCurrentFieldEvenOdd() -> undefined4;
    pub fn VIGetCurrentLine() -> uint;
    pub fn VIGetTvFormat() -> u32_;
    pub fn VIGetDTVStatus() -> u32_;
    pub fn UpdateOrigin(param_1: uint);
    pub fn PADOriginCallback(param_1: undefined4, param_2: uint);
    pub fn PADProbeCallback(param_1: undefined4, param_2: uint);
    pub fn PADTypeAndStatusCallback(param_1: undefined4, param_2: uint);
    pub fn PADReset(param_1: uint) -> undefined4;
    pub fn PADRecalibrate(param_1: uint) -> undefined4;
    pub fn PADInit() -> undefined4;
    pub fn PADRead(status: *mut PADStatus) -> u32_;
    pub fn PADControlAllMotors(commandArray: *mut u32_);
    pub fn PADControlMotor(param_1: uint, param_2: uint);
    pub fn PADSetSpec(param_1: ::core::ffi::c_int);
    pub fn SPEC0_MakeStatus(param_1: undefined4, param_2: *mut ushort, param_3: *mut uint);
    pub fn SPEC1_MakeStatus(param_1: undefined4, param_2: *mut ushort, param_3: *mut uint);
    pub fn SPEC2_MakeStatus(
        param_1: ::core::ffi::c_int,
        param_2: *mut ushort,
        param_3: *mut undefined4,
    );
    pub fn PADSetAnalogMode(param_1: ::core::ffi::c_int);
    pub fn SamplingHandler(param_1: undefined4, param_2: *mut OSContext);
    pub fn PADSetSamplingCallback(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn __PADDisableRecalibration(param_1: ::core::ffi::c_int) -> bool_;
    pub fn AIRegisterDMACallback(param_1: undefined4) -> undefined4;
    pub fn AIInitDMA(param_1: undefined4, param_2: uint);
    pub fn AIStartDMA();
    pub fn AIStopDMA();
    pub fn AIGetStreamSampleCount() -> undefined4;
    pub fn AIResetStreamSampleCount();
    pub fn AISetStreamTrigger(param_1: undefined4);
    pub fn AISetStreamPlayState(param_1: uint);
    pub fn AIGetStreamPlayState() -> uint;
    pub fn AISetDSPSampleRate(param_1: uint);
    pub fn AIGetDSPSampleRate() -> uint;
    pub fn __AI_set_stream_sample_rate(param_1: uint);
    pub fn AIGetStreamSampleRate() -> uint;
    pub fn AISetStreamVolLeft(param_1: uint);
    pub fn AIGetStreamVolLeft() -> uint;
    pub fn AISetStreamVolRight(param_1: uint);
    pub fn AIGetStreamVolRight() -> uint;
    pub fn AIInit(param_1: undefined4);
    pub fn __AISHandler(param_1: undefined4, param_2: *mut OSContext);
    pub fn __AICallbackStackSwitch(param_1: *mut undefined);
    pub fn __AI_SRC_INIT();
    pub fn ARGetDMAStatus() -> ushort;
    pub fn ARStartDMA(
        param_1: ::core::ffi::c_int,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
    );
    pub fn ARInit(param_1: undefined4, param_2: undefined4) -> undefined4;
    pub fn ARGetBaseAddress() -> undefined4;
    pub fn __ARHandler(param_1: undefined4, param_2: *mut OSContext);
    pub fn __ARChecksize();
    pub fn __ARQServiceQueueLo();
    pub fn __ARQInterruptServiceRoutine();
    pub fn ARQInit();
    pub fn ARQPostRequest(
        request: *mut ARQRequest,
        owner: u32_,
        type_: u32_,
        priority: u32_,
        source: u32_,
        dest: u32_,
        length: u32_,
        callback: ::core::option::Option<unsafe extern "C" fn(arg1: u32_)>,
    );
    pub fn ARQSetChunkSize(param_1: uint);
    pub fn g_get_arq_chunk_size() -> undefined4;
    pub fn hwExit();
    pub fn hwDisableIrq();
    pub fn salExitAi();
    pub fn hwEnableIrq();
    pub fn __AXOutQuit();
    pub fn salExitDspCtrl();
    pub fn salExitDsp();
    pub fn DSPCheckMailToDSP() -> ushort;
    pub fn DSPCheckMailFromDSP() -> ushort;
    pub fn DSPReadMailFromDSP() -> undefined4;
    pub fn DSPSendMailToDSP(param_1: undefined4);
    pub fn DSPInit();
    pub fn DSPReset();
    pub fn DSPHalt();
    pub fn DSPGetDMAStatus() -> ushort;
    pub fn DSPAddTask(param_1: *mut undefined4) -> *mut undefined4;
    pub fn __DSPHandler(param_1: undefined4, param_2: *mut OSContext);
    pub fn __DSP_exec_task(param_1: ::core::ffi::c_int, param_2: *mut ::core::ffi::c_int);
    pub fn __DSP_boot_task(param_1: ::core::ffi::c_int);
    pub fn __DSP_insert_task(param_1: ::core::ffi::c_int);
    pub fn __DSP_remove_task(param_1: *mut undefined4);
    pub fn __DTKCallbackForFlush() -> uint;
    pub fn DTKInit();
    pub fn DTKQueueTrack(
        param_1: *mut ::core::ffi::c_char,
        param_2: *mut undefined4,
        param_3: undefined4,
        param_4: undefined4,
    ) -> undefined4;
    pub fn DTKFlushTracks(param_1: undefined4);
    pub fn g_DTK_set_something(param_1: undefined4);
    pub fn DTKSetState(param_1: ::core::ffi::c_int);
    pub fn DTKNextTrack();
    pub fn DTKPrevTrack();
    pub fn g_DTK_get_something1() -> undefined4;
    pub fn g_GTK_get_something2() -> undefined4;
    pub fn DTKSetVolume(param_1: uint, param_2: uint);
    pub fn __CARDExtHandler(param_1: ::core::ffi::c_int);
    pub fn __CARDExiHandler(param_1: ::core::ffi::c_int);
    pub fn __CARDTxHandler(param_1: ::core::ffi::c_int);
    pub fn __CARDUnlockedHandler(param_1: ::core::ffi::c_int);
    pub fn __CARDEnableInterrupt(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn __CARDReadStatus(param_1: ::core::ffi::c_int, param_2: *mut byte) -> undefined4;
    pub fn __CARDClearStatus(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn TimeoutHandler(param_1: *mut undefined);
    pub fn Retry(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn UnlockedCallback(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn __CARDStart(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn __CARDReadSegment(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn __CARDWritePage(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn __CARDEraseSector(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn CARDInit();
    pub fn __CARDSetDiskID(param_1: *mut undefined);
    pub fn __CARDGetControlBlock(
        param_1: ::core::ffi::c_int,
        param_2: *mut *mut ::core::ffi::c_int,
    ) -> undefined4;
    pub fn __CARDPutControlBlock(
        param_1: *mut ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn CARDGetResultCode(param_1: ::core::ffi::c_int) -> s32;
    pub fn CARDFreeBlocks(
        param_1: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_int,
        param_3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn bitrev(param_1: uint) -> uint;
    pub fn ReadArrayUnlock(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: *mut byte,
        param_4: ::core::ffi::c_int,
        param_5: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn DummyLen() -> uint;
    pub fn __CARDUnlock(param_1: ::core::ffi::c_int, param_2: *mut uint) -> undefined4;
    pub fn InitCallback(param_1: ::core::ffi::c_int);
    pub fn DoneCallback(param_1: ::core::ffi::c_int);
    pub fn BlockReadCallback(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn __CARDRead(
        param_1: ::core::ffi::c_int,
        param_2: undefined4,
        param_3: uint,
        param_4: undefined4,
        param_5: undefined4,
    ) -> ::core::ffi::c_int;
    pub fn BlockWriteCallback(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn __CARDWrite(
        param_1: ::core::ffi::c_int,
        param_2: undefined4,
        param_3: uint,
        param_4: undefined4,
        param_5: undefined4,
    ) -> ::core::ffi::c_int;
    pub fn CARDGetXferredBytes(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn __CARDGetFatBlock(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn WriteCallback(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn EraseCallback(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn __CARDAllocBlock(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: undefined4,
    ) -> undefined4;
    pub fn __CARDFreeBlock(
        param_1: ::core::ffi::c_int,
        param_2: ushort,
        param_3: undefined4,
    ) -> undefined4;
    pub fn __CARDUpdateFatBlock(
        param_1: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_short,
        param_3: undefined4,
    );
    pub fn __CARDGetDirBlock(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn __CARDUpdateDir(param_1: ::core::ffi::c_int, param_2: undefined4) -> ::core::ffi::c_int;
    pub fn __CARDCheckSum(
        param_1: *mut ushort,
        param_2: uint,
        param_3: *mut ::core::ffi::c_short,
        param_4: *mut ::core::ffi::c_short,
    );
    pub fn VerifyID(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn VerifyDir(param_1: ::core::ffi::c_int, param_2: *mut uint) -> ::core::ffi::c_int;
    pub fn VerifyFAT(param_1: ::core::ffi::c_int, param_2: *mut uint) -> ::core::ffi::c_int;
    pub fn __CARDVerify(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn CARDCheckExAsync(
        param_1: ::core::ffi::c_int,
        param_2: *mut undefined4,
        param_3: *mut undefined,
    ) -> ::core::ffi::c_int;
    pub fn CARDCheckAsync(param_1: ::core::ffi::c_int, param_2: *mut undefined);
    pub fn IsCard(param_1: *mut ::core::ffi::c_char) -> undefined4;
    pub fn CARDProbeEx(chan: s32, memSize: *mut s32, sectorSize: *mut s32) -> s32;
    pub fn DoMount(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn __CARDMountCallback(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn CARDMountAsync(
        chan: s32,
        workArea: *mut ::core::ffi::c_void,
        detachCallback: *mut ::core::ffi::c_void,
        attachCallback: *mut ::core::ffi::c_void,
    ) -> s32;
    pub fn DoUnmount(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn CARDUnmount(chan: s32) -> s32;
    pub fn FormatCallback(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn __CARDFormatRegionAsync(
        param_1: ::core::ffi::c_int,
        param_2: ushort,
        param_3: *mut undefined,
    ) -> ::core::ffi::c_int;
    pub fn CARDFormatAsync(param_1: ::core::ffi::c_int, param_2: *mut undefined);
    pub fn __CARDCompareFileName(
        param_1: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_char,
    ) -> undefined4;
    pub fn __CARDAccess(
        param_1: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_char,
    ) -> undefined4;
    pub fn __CARDIsPublic(param_1: *mut ::core::ffi::c_char) -> undefined4;
    pub fn __CARDGetFileNo(
        param_1: *mut ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_char,
        param_3: *mut ::core::ffi::c_int,
    ) -> undefined4;
    pub fn CARDOpen(
        chan: s32,
        fileName: *mut ::core::ffi::c_char,
        fileInfo: *mut CARDFileInfo,
    ) -> s32;
    pub fn return_0() -> undefined4;
    pub fn CreateCallbackFat(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn CARDCreateAsync(
        chan: s32,
        fileName: *mut ::core::ffi::c_char,
        size: u32_,
        fileInfo: *mut CARDFileInfo,
        callback: *mut ::core::ffi::c_void,
    );
    pub fn __CARDSeek(
        param_1: *mut ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: uint,
        param_4: *mut *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn ReadCallback(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn CARDReadAsync(
        fileInfo: *mut CARDFileInfo,
        buf: *mut ::core::ffi::c_void,
        length: s32,
        offset: s32,
        callback: *mut ::core::ffi::c_void,
    ) -> s32;
    pub fn CARDWriteAsync(
        fileInfo: *mut CARDFileInfo,
        buf: *mut ::core::ffi::c_void,
        length: s32,
        offset: s32,
        callback: *mut ::core::ffi::c_void,
    ) -> s32;
    pub fn DeleteCallback(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn CARDFastDeleteAsync(chan: s32, fileNo: s32, callback: *mut ::core::ffi::c_void);
    pub fn CARDDeleteAsync(
        param_1: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_char,
        param_3: *mut undefined,
    ) -> ::core::ffi::c_int;
    pub fn UpdateIconOffsets(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn CARDGetStatus(chan: s32, fileNo: s32, stat: *mut CARDStat) -> s32;
    pub fn CARDSetStatusAsync(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
        param_4: undefined4,
    ) -> ::core::ffi::c_int;
    pub fn CARDRenameAsync(
        param_1: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_char,
        param_3: *mut ::core::ffi::c_char,
        param_4: undefined4,
    ) -> ::core::ffi::c_int;
    pub fn CARDGetSerialNo(param_1: ::core::ffi::c_int, param_2: *mut uint) -> ::core::ffi::c_int;
    pub fn GXInit(base: *mut ::core::ffi::c_void, size: u32_) -> *mut GXFifoObj;
    pub fn __GXInitGX();
    pub fn GXInitFifoBase(fifo: *mut GXFifoObj, base: *mut ::core::ffi::c_void, size: u32_);
    pub fn GXInitFifoPtrs(
        fifo: *mut GXFifoObj,
        read_ptr: *mut ::core::ffi::c_void,
        write_ptr: *mut ::core::ffi::c_void,
    );
    pub fn GXInitFifoLimits(fifo: *mut GXFifoObj, hi_water_mark: u32_, lo_water_mark: u32_);
    pub fn GXSetCPUFifo(fifo: *mut GXFifoObj);
    pub fn GXSetGPFifo(fifo: *mut GXFifoObj);
    pub fn GXSaveCPUFifo(fifo: *mut GXFifoObj);
    pub fn __GXSaveCPUFifoAux(param_1: *mut ::core::ffi::c_int);
    pub fn GXGetGPStatus(
        overhi: *mut GXBool,
        underlow: *mut GXBool,
        readIdle: *mut GXBool,
        cmdIdle: *mut GXBool,
        brkpt: *mut GXBool,
    );
    pub fn GXGetFifoPtrs(
        fifo: *mut GXFifoObj,
        read_ptr: *mut *mut ::core::ffi::c_void,
        write_ptr: *mut *mut ::core::ffi::c_void,
    );
    pub fn __GXFifoInit();
    pub fn __GXFifoReadEnable();
    pub fn __GXFifoReadDisable();
    pub fn __GXFifoLink(param_1: ::core::ffi::c_char);
    pub fn __GXWriteFifoIntEnable(param_1: uint, param_2: uint);
    pub fn __GXWriteFifoIntReset(param_1: uint, param_2: uint);
    pub fn GXGetCPUFifo() -> *mut GXFifoObj;
    pub fn GXGetGPFifo() -> *mut GXFifoObj;
    pub fn __GXXfVtxSpecs();
    pub fn GXSetVtxDesc(attr: GXAttr, type_: GXAttrType);
    pub fn GXSetVtxDescv(param_1: *mut GXVtxDescList);
    pub fn __GXSetVCD();
    pub fn g_GX_internal_unknown1();
    pub fn GXGetVtxDesc(attr: GXAttr, type_: *mut GXAttrType);
    pub fn GXGetVtxDescv(attr_list: *mut GXVtxDescList);
    pub fn GXClearVtxDesc();
    pub fn GXSetVtxAttrFmt(
        vtxfmt: GXVtxFmt,
        attr: GXAttr,
        cnt: GXCompCnt,
        type_: GXCompType,
        frac: u8_,
    );
    pub fn GXSetVtxAttrFmtv(vtxfmt: GXVtxFmt, list: *mut GXVtxAttrFmtList);
    pub fn __GXSetVAT();
    pub fn GXGetVtxAttrFmt(
        vtxfmt: GXVtxFmt,
        attr: GXAttr,
        cnt: *mut GXCompCnt,
        type_: *mut GXCompType,
        frac: *mut u8_,
    );
    pub fn GXGetVtxAttrFmtv(vtxfmt: GXVtxFmt, list: *mut GXVtxAttrFmtList);
    pub fn GXSetArray(attr: GXAttr, base_ptr: *mut ::core::ffi::c_void, stride: u8_);
    pub fn GXInvalidateVtxCache();
    pub fn GXSetTexCoordGen2(
        dst_coord: GXTexCoordID,
        func: GXTexGenType,
        src_param: GXTexGenSrc,
        mtx: u32_,
        normalize: GXBool,
        postmtx: u32_,
    );
    pub fn GXSetNumTexGens(nTexGens: u8_);
    pub fn GXSetMisc(token: GXMiscToken, value: u32_);
    pub fn GXFlush();
    pub fn GXResetWriteGatherPipe();
    pub fn GXSetDrawSync(token: u16_);
    pub fn GXSetDrawDone();
    pub fn GXDrawDone();
    pub fn GXPixModeSync();
    pub fn GXPokeAlphaMode(func: GXCompare, threshold: u8_);
    pub fn GXPokeAlphaRead(mode: GXAlphaReadMode);
    pub fn GXPokeAlphaUpdate(update_enable: GXBool);
    pub fn GXPokeBlendMode(
        type_: GXBlendMode,
        src_factor: GXBlendFactor,
        dst_factor: GXBlendFactor,
        op: GXLogicOp,
    );
    pub fn GXPokeColorUpdate(update_enable: GXBool);
    pub fn GXPokeDstAlpha(enable: GXBool, alpha: u8_);
    pub fn GXPokeDither(dither: GXBool);
    pub fn GXPokeZMode(compare_enable: GXBool, func: GXCompare, update_enable: GXBool);
    pub fn GXPeekZ(x: u16_, y: u16_, z: *mut u32_);
    pub fn GXSetDrawSyncCallback(param_1: undefined4) -> undefined4;
    pub fn GXTokenInterruptHandler(interrupt: __OSInterrupt, context: *mut OSContext);
    pub fn GXSetDrawDoneCallback(param_1: undefined4) -> undefined4;
    pub fn GXFinishInterruptHandler(interrupt: __OSInterrupt, context: *mut OSContext);
    pub fn __GXPEInit();
    pub fn __GXSetDirtyState(param_1: undefined4, param_2: undefined4, param_3: uint);
    pub fn GXBegin(type_: GXPrimitive, vtxfmt: GXVtxFmt, nverts: u16_);
    pub fn __GXSendFlushPrim();
    pub fn GXSetLineWidth(width: u8_, tex_offsets: GXTexOffset);
    pub fn GXSetPointSize(size: u8_, tex_offsets: GXTexOffset);
    pub fn GXEnableTexOffsets(coord: GXTexCoordID, line_enable: GXBool, point_enable: GXBool);
    pub fn GXSetCullMode(mode: GXCullMode);
    pub fn GXSetCoPlanar(enable: GXBool);
    pub fn __GXSetGenMode();
    pub fn GXAdjustForOverscan(
        rmin: *mut GXRenderModeObj,
        rmout: *mut GXRenderModeObj,
        hor: u16_,
        ver: u16_,
    );
    pub fn GXSetDispCopySrc(left: u16_, top: u16_, wd: u16_, ht: u16_);
    pub fn GXSetTexCopySrc(left: u16_, top: u16_, wd: u16_, ht: u16_);
    pub fn GXSetDispCopyDst(wd: u16_, ht: u16_);
    pub fn GXSetTexCopyDst(wd: u16_, ht: u16_, fmt: GXTexFmt, mipmap: GXBool);
    pub fn GXSetDispCopyFrame2Field(mode: GXCopyMode);
    pub fn GXSetCopyClamp(clamp: GXFBClamp);
    pub fn GXSetDispCopyYScale(yscale: undefined) -> u32_;
    pub fn GXSetCopyClear(clear_clr: GXColor, clear_z: u32_);
    pub fn GXSetCopyFilter(aa: GXBool, sample_pattern: undefined, vf: GXBool, vfilter: *mut u8_);
    pub fn GXSetDispCopyGamma(gamma: GXGamma);
    pub fn GXCopyDisp(dest: *mut ::core::ffi::c_void, clear: GXBool);
    pub fn GXCopyTex(dest: *mut ::core::ffi::c_void, clear: GXBool);
    pub fn GXClearBoundingBox();
    pub fn GXInitLightAttnK(lt_obj: *mut GXLightObj, k0: f32, k1: f32, k2: f32);
    pub fn GXInitLightSpot(lt_obj: *mut GXLightObj, cutoff: f32, spot_func: GXSpotFn);
    pub fn GXInitLightDistAttn(
        lt_obj: *mut GXLightObj,
        ref_distance: f32,
        ref_brightness: f32,
        dist_func: GXDistAttnFn,
    );
    pub fn GXInitLightPos(lt_obj: *mut GXLightObj, x: f32, y: f32, z: f32);
    pub fn GXGetLightPos(lt_obj: *mut GXLightObj, x: *mut f32, y: *mut f32, z: *mut f32);
    pub fn GXInitLightDir(lt_obj: *mut GXLightObj, nx: f32, ny: f32, nz: f32);
    pub fn GXInitLightColor(lt_obj: *mut GXLightObj, color: GXColor);
    pub fn GXGetLightColor(lt_obj: *mut GXLightObj, color: *mut GXColor);
    pub fn GXLoadLightObjImm(lt_obj: *mut GXLightObj, light: GXLightID);
    pub fn GXSetChanAmbColor(chan: GXChannelID, amb_color: GXColor);
    pub fn GXSetChanMatColor(chan: GXChannelID, mat_color: GXColor);
    pub fn GXSetNumChans(nChans: u8_);
    pub fn GXSetChanCtrl(
        chan: GXChannelID,
        enable: GXBool,
        amb_src: GXColorSrc,
        mat_src: GXColorSrc,
        light_mask: GXLightID,
        diff_fn: GXDiffuseFn,
        attn_fn: GXAttnFn,
    );
    pub fn GXGetTexBufferSize(
        width: u16_,
        height: u16_,
        format: u32_,
        mipmap: GXBool,
        max_lod: u8_,
    ) -> u32_;
    pub fn __GetImageTileCount(
        param_1: ::core::ffi::c_int,
        param_2: ushort,
        param_3: ushort,
        param_4: *mut ::core::ffi::c_int,
        param_5: *mut ::core::ffi::c_int,
        param_6: *mut undefined4,
    );
    pub fn GXInitTexObj(
        obj: *mut GXTexObj,
        image_ptr: *mut ::core::ffi::c_void,
        width: u16_,
        height: u16_,
        format: GXTexFmt,
        wrap_s: GXTexWrapMode,
        wrap_t: GXTexWrapMode,
        mipmap: GXBool,
    );
    pub fn GXInitTexObjLOD(
        obj: *mut GXTexObj,
        min_filt: GXTexFilter,
        mag_filt: GXTexFilter,
        min_lod: f32,
        max_lod: f32,
        lod_bias: f32,
        bias_clamp: GXBool,
        do_edge_lod: GXBool,
        max_aniso: GXAnisotropy,
    );
    pub fn GXInitTexObjData(obj: *mut GXTexObj, image_ptr: *mut ::core::ffi::c_void);
    pub fn GXInitTexObjWrapMode(obj: *mut GXTexObj, wrap_s: GXTexWrapMode, wrap_t: GXTexWrapMode);
    pub fn GXGetTexObjAll(
        obj: *mut GXTexObj,
        image_ptr: *mut *mut ::core::ffi::c_void,
        width: *mut u16_,
        height: *mut u16_,
        format: *mut GXTexFmt,
        wrap_s: *mut GXTexWrapMode,
        wrap_t: *mut GXTexWrapMode,
        mipmap: *mut GXBool,
    );
    pub fn GXGetTexObjData(obj: *mut GXTexObj) -> *mut ::core::ffi::c_void;
    pub fn GXGetTexObjWidth(obj: *mut GXTexObj) -> u16_;
    pub fn GXGetTexObjHeight(obj: *mut GXTexObj) -> u16_;
    pub fn GXGetTexObjFmt(obj: *mut GXTexObj) -> GXTexFmt;
    pub fn GXGetTexObjWrapS(obj: *mut GXTexObj) -> GXTexWrapMode;
    pub fn GXGetTexObjWrapT(obj: *mut GXTexObj) -> GXTexWrapMode;
    pub fn GXGetTexObjMipMap(obj: *mut GXTexObj) -> GXBool;
    pub fn g_GX_something(
        param_1: *mut uint,
        param_2: *mut uint,
        param_3: *mut uint,
        param_4: *mut f32,
        param_5: *mut f32,
        param_6: *mut f32,
        param_7: *mut byte,
        param_8: *mut undefined,
        param_9: *mut uint,
    );
    pub fn GXLoadTexObjPreLoaded(obj: *mut GXTexObj, region: *mut GXTexRegion, id: GXTexMapID);
    pub fn GXLoadTexObj(obj: *mut GXTexObj, id: GXTexMapID);
    pub fn GXInitTexCacheRegion(
        region: *mut GXTexRegion,
        is_32b_mipmap: GXBool,
        tmem_even: u32_,
        size_even: GXTexCacheSize,
        tmem_odd: u32_,
        size_odd: GXTexCacheSize,
    );
    pub fn GXInitTlutRegion(region: *mut GXTlutRegion, tmem_addr: u32_, tlut_size: GXTlutSize);
    pub fn GXInvalidateTexAll();
    pub fn GXSetTexRegionCallback(
        f: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut GXTexObj, arg2: GXTexMapID) -> *mut GXTexRegion,
        >,
    ) -> ::core::option::Option<
        unsafe extern "C" fn(f: *mut GXTexObj, arg1: GXTexMapID) -> *mut GXTexRegion,
    >;
    pub fn GXSetTlutRegionCallback(
        f: ::core::option::Option<unsafe extern "C" fn(arg1: u32_) -> GXTlutRegion>,
    ) -> ::core::option::Option<unsafe extern "C" fn(f: u32_) -> GXTlutRegion>;
    pub fn __SetSURegs(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn __GXSetSUTexRegs();
    pub fn __GXSetTmemConfig(param_1: ::core::ffi::c_int);
    pub fn GXSetTevIndirect(
        tev_stage: GXTevStageID,
        ind_stage: GXIndTexStageID,
        format: GXIndTexFormat,
        bias_sel: GXIndTexBiasSel,
        matrix_sel: GXIndTexMtxID,
        wrap_s: GXIndTexWrap,
        wrap_t: GXIndTexWrap,
        add_prev: GXBool,
        utc_lod: GXBool,
        alpha_sel: GXIndTexAlphaSel,
    );
    pub fn GXSetIndTexMtx(mtx_sel: GXIndTexMtxID, offset_mtx: *mut [f32; 3usize], scale_exp: s8);
    pub fn GXSetIndTexCoordScale(
        ind_stage: GXIndTexStageID,
        scale_s: GXIndTexScale,
        scale_t: GXIndTexScale,
    );
    pub fn GXSetIndTexOrder(
        ind_stage: GXIndTexStageID,
        tex_coord: GXTexCoordID,
        tex_map: GXTexMapID,
    );
    pub fn GXSetNumIndStages(nstages: u8_);
    pub fn GXSetTevDirect(tev_stage: GXTevStageID);
    pub fn __GXUpdateBPMask(param_1: undefined4, param_2: undefined4, param_3: uint);
    pub fn __GXFlushTextureState();
    pub fn GXSetTevOp(id: GXTevStageID, mode: GXTevMode);
    pub fn GXSetTevColorIn(
        stage: GXTevStageID,
        a: GXTevColorArg,
        b: GXTevColorArg,
        c: GXTevColorArg,
        d: GXTevColorArg,
    );
    pub fn GXSetTevAlphaIn(
        stage: GXTevStageID,
        a: GXTevAlphaArg,
        b: GXTevAlphaArg,
        c: GXTevAlphaArg,
        d: GXTevAlphaArg,
    );
    pub fn GXSetTevColorOp(
        stage: GXTevStageID,
        op: GXTevOp,
        bias: GXTevBias,
        scale: GXTevScale,
        clamp: GXBool,
        out_reg: GXTevRegID,
    );
    pub fn GXSetTevAlphaOp(
        stage: GXTevStageID,
        op: GXTevOp,
        bias: GXTevBias,
        scale: GXTevScale,
        clamp: GXBool,
        out_reg: GXTevRegID,
    );
    pub fn GXSetTevColor(id: GXTevRegID, color: GXColor);
    pub fn GXSetTevKColor(id: GXTevKColorID, color: GXColor);
    pub fn GXSetTevKColorSel(stage: GXTevStageID, sel: GXTevKColorSel);
    pub fn GXSetTevKAlphaSel(stage: GXTevStageID, sel: GXTevKAlphaSel);
    pub fn GXSetTevSwapMode(stage: GXTevStageID, ras_sel: GXTevSwapSel, tex_sel: GXTevSwapSel);
    pub fn GXSetTevSwapModeTable(
        id: GXTevSwapSel,
        red: GXTevColorChan,
        green: GXTevColorChan,
        blue: GXTevColorChan,
        alpha: GXTevColorChan,
    );
    pub fn GXSetAlphaCompare(
        comp0: GXCompare,
        ref0: u8_,
        op: GXAlphaOp,
        comp1: GXCompare,
        ref1: u8_,
    );
    pub fn GXSetZTexture(op: GXZTexOp, fmt: GXTexFmt, bias: u32_);
    pub fn GXSetTevOrder(
        stage: GXTevStageID,
        coord: GXTexCoordID,
        map: GXTexMapID,
        color: GXChannelID,
    );
    pub fn GXSetNumTevStages(nStages: u8_);
    pub fn GXSetFog(
        type_: GXFogType,
        startz: f32,
        endz: f32,
        nearz: f32,
        farz: f32,
        color: GXColor,
    );
    pub fn GXSetFogRangeAdj(enable: GXBool, center: u16_, table: *mut GXFogAdjTable);
    pub fn GXSetBlendMode(
        type_: GXBlendMode,
        src_factor: GXBlendFactor,
        dst_factor: GXBlendFactor,
        op: GXLogicOp,
    );
    pub fn GXSetColorUpdate(update_enable: GXBool);
    pub fn GXSetAlphaUpdate(update_enable: GXBool);
    pub fn GXSetZMode(compare_enable: GXBool, func: GXCompare, update_enable: GXBool);
    pub fn GXSetZCompLoc(before_tex: GXBool);
    pub fn GXSetPixelFmt(pix_fmt: GXPixelFmt, z_fmt: GXZFmt16);
    pub fn GXSetDither(dither: GXBool);
    pub fn GXSetDstAlpha(enable: GXBool, alpha: u8_);
    pub fn GXSetFieldMask(odd_mask: GXBool, even_mask: GXBool);
    pub fn GXSetFieldMode(field_mode: GXBool, half_aspect_ratio: GXBool);
    pub fn GXDrawCylinder(numEdges: u8_);
    pub fn GXDrawSphere(numMajor: u8_, numMinor: u8_);
    pub fn GXDrawCubeFace(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: f64,
        param_5: f64,
        param_6: f64,
        param_7: f64,
        param_8: f64,
        param_4_00: ::core::ffi::c_int,
        param_5_00: ::core::ffi::c_int,
    );
    pub fn GXDrawCube();
    pub fn __GXSetRange();
    pub fn GXBeginDisplayList(list: *mut ::core::ffi::c_void, size: u32_);
    pub fn GXEndDisplayList() -> u32_;
    pub fn GXCallDisplayList(list: *mut ::core::ffi::c_void, nbytes: u32_);
    pub fn GXSetProjection(mtx: *mut [f32_; 4usize], type_: GXProjectionType);
    pub fn GXSetProjectionv(ptr: *mut f32_);
    pub fn GXGetProjectionv(ptr: *mut f32);
    pub fn WriteMTXPS4x3(param_1: *mut f32, param_2: *mut f32) -> undefined8;
    pub fn WriteMTXPS3x3from3x4(param_1: *mut f32, param_2: *mut f32);
    pub fn WriteMTXPS4x2(param_1: *mut f32, param_2: *mut f32) -> undefined8;
    pub fn GXLoadPosMtxImm(mtxPtr: *mut [f32; 4usize], id: u32_);
    pub fn GXLoadNrmMtxImm(mtxPtr: *mut [f32; 4usize], id: u32_);
    pub fn GXSetCurrentMtx(id: u32_);
    pub fn GXLoadTexMtxImm(mtxPtr: *mut f32, id: u32_, type_: GXTexMtxType);
    pub fn GXSetViewportJitter(
        xOrig: f32,
        yOrig: f32,
        wd: f32,
        ht: f32,
        nearZ: f32,
        farZ: f32,
        field: u32_,
    );
    pub fn GXSetViewport(xOrig: f32, yOrig: f32, wd: f32, ht: f32, nearZ: f32, farZ: f32);
    pub fn GXGetViewportv(vp: *mut f32);
    pub fn GXSetScissor(xOrig: u32_, yOrig: u32_, wd: u32_, ht: u32_);
    pub fn GXGetScissor(xOrig: *mut u32_, yOrig: *mut u32_, wd: *mut u32_, ht: *mut u32_);
    pub fn GXSetScissorBoxOffset(xoffset: s32, yoffset: s32);
    pub fn GXSetClipMode(mode: GXClipMode);
    pub fn __GXSetMatrixIndex(param_1: ::core::ffi::c_int);
    pub fn GXSetGPMetric(perf0: GXPerf0, perf1: GXPerf1);
    pub fn GXClearGPMetric();
    pub fn GXInitXfRasMetric();
    pub fn GXReadXfRasMetric(
        param_1: *mut undefined4,
        param_2: *mut undefined4,
        param_3: *mut undefined4,
        param_4: *mut undefined4,
    );
    pub fn ARCInitHandle(
        arc_data: *mut ::core::ffi::c_void,
        out_arc_handle: *mut ARCHandle,
    ) -> undefined4;
    pub fn ARCOpen(
        arc_handle: *mut ARCHandle,
        file: *mut ::core::ffi::c_char,
        arcFileInfo: *mut ArcFileInfo,
    ) -> BOOL32;
    pub fn arc_path_to_entrynum(arcHandle: *mut ARCHandle, file: *mut ::core::ffi::c_char) -> uint;
    pub fn arc_get_dir(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn ARCGetStartAddrInMem(param_1: *mut *mut ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn arcGetLength(fileInfo: *mut ArcFileInfo) -> undefined4;
    pub fn return_1() -> undefined4;
    pub fn g_some_perf_init_func();
    pub fn PERFGetAllMemMetrics(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn PERFInit(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: uint,
        param_4: *mut undefined,
        param_5: undefined4,
        param_6: undefined4,
    ) -> ::core::ffi::c_int;
    pub fn PERFSetEvent(param_1: uint, param_2: undefined4, param_3: undefined4);
    pub fn PERFStartFrame();
    pub fn PERFEndFrame();
    pub fn PERFEventStart(id: PERFId);
    pub fn PERFEventEnd(param_1: uint);
    pub fn PERFStartAutoSample();
    pub fn PERFEndAutoSample();
    pub fn PERFStartAutoSampling(param_1: f64);
    pub fn PERFStopAutoSampling();
    pub fn __PERFDrawInit(param_1: undefined4);
    pub fn PERFPreDraw();
    pub fn DrawBWBar(param_1: ::core::ffi::c_int);
    pub fn DrawKey();
    pub fn PERFDumpScreen();
    pub fn PERFPostDraw();
    pub fn g_set_something_with_perf(value: undefined4);
    pub fn ResetNotes(param_1: ::core::ffi::c_int);
    pub fn AllocateNote(param_1: undefined4, param_2: byte) -> *mut undefined4;
    pub fn HandleNotes() -> undefined4;
    pub fn KeyOffNotes();
    pub fn seqFreeKeyOffNote(param_1: *mut ::core::ffi::c_int);
    pub fn GetPublicId(param_1: ::core::ffi::c_int) -> uint;
    pub fn seqGetPrivateId(param_1: uint) -> uint;
    pub fn seqStartPlay(
        param_1: *mut ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
        param_4: *mut ::core::ffi::c_int,
        param_5: *mut uint,
        param_6: undefined,
        param_7: undefined2,
    ) -> uint;
    pub fn HandleMasterTrack(param_1: uint);
    pub fn StartPause(param_1: *mut ::core::ffi::c_int);
    pub fn seqPause(param_1: uint);
    pub fn seqStop(param_1: uint);
    pub fn seqKillInstancesByGroupID(param_1: ::core::ffi::c_short);
    pub fn seqSpeed(param_1: uint, param_2: undefined2);
    pub fn seqContinue(param_1: uint);
    pub fn seqMute(param_1: uint, param_2: undefined4, param_3: undefined4);
    pub fn seqVolume(param_1: uint, param_2: uint, param_3: uint, param_4: byte);
    pub fn seqCrossFade(param_1: *mut uint, param_2: *mut uint, param_3: ::core::ffi::c_char);
    pub fn GetStreamValue(
        param_1: *mut byte,
        param_2: *mut ushort,
        param_3: *mut ::core::ffi::c_short,
    ) -> *mut byte;
    pub fn GenerateNextTrackEvent(param_1: byte) -> ::core::ffi::c_int;
    pub fn InsertGlobalEvent(param_1: ::core::ffi::c_int, param_2: *mut undefined4);
    pub fn HandleEvent(
        param_1: ::core::ffi::c_int,
        param_2: byte,
        param_3: *mut uint,
    ) -> ::core::ffi::c_int;
    pub fn InitTrackEvents();
    pub fn InitTrackEventsSection(param_1: uint);
    pub fn HandleTrackEvents(param_1: uint, param_2: undefined4) -> undefined4;
    pub fn seqHandle(param_1: ::core::ffi::c_int);
    pub fn seqInit() -> ::core::ffi::c_int;
    pub fn synthSetBpm(param_1: ::core::ffi::c_int, param_2: byte, param_3: uint);
    pub fn synthGetTicksPerSecond(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn synthInitPortamento(param_1: ::core::ffi::c_int);
    pub fn do_voice_portamento(
        param_1: byte,
        param_2: ::core::ffi::c_char,
        param_3: ::core::ffi::c_char,
        param_4: ::core::ffi::c_int,
        param_5: *mut undefined4,
    ) -> *mut ::core::ffi::c_int;
    pub fn StartLayer(
        param_1: undefined2,
        param_2: ::core::ffi::c_int,
        param_3: undefined4,
        param_4: undefined4,
        param_5: uint,
        param_6: byte,
        param_7: uint,
        param_8: uint,
        param_9: byte,
        param_10: undefined,
        param_11: ushort,
        param_12: undefined2,
        param_13: ::core::ffi::c_int,
        param_14: undefined,
        param_15: undefined,
        param_16: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_int;
    pub fn StartKeymap(
        param_1: undefined2,
        param_2: ::core::ffi::c_short,
        param_3: undefined4,
        param_4: undefined4,
        param_5: uint,
        param_6: byte,
        param_7: uint,
        param_8: uint,
        param_9: byte,
        param_10: undefined,
        param_11: ushort,
        param_12: undefined2,
        param_13: uint,
        param_14: undefined,
        param_15: undefined,
        param_16: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_int;
    pub fn synthStartSound(
        param_1: uint,
        param_2: ::core::ffi::c_int,
        param_3: undefined4,
        param_4: uint,
        param_5: byte,
        param_6: uint,
        param_7: uint,
        param_8: uint,
        param_9: undefined,
        param_10: ushort,
        param_11: undefined2,
        param_12: undefined,
        param_13: ::core::ffi::c_short,
        param_14: undefined,
        param_15: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_int;
    pub fn synthAddJob(
        param_1: *mut ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_int,
        param_3: uint,
    );
    pub fn synthStartSynthJobHandling(param_1: *mut ::core::ffi::c_int);
    pub fn synthForceLowPrecisionUpdate(param_1: *mut ::core::ffi::c_int);
    pub fn synthKeyStateUpdate(param_1: *mut ::core::ffi::c_int);
    pub fn HandleJobQueue(param_1: *mut ::core::ffi::c_int, param_2: *mut undefined);
    pub fn HandleFaderTermination(param_1: ::core::ffi::c_int);
    pub fn synthHandle(param_1: uint);
    pub fn synthFXStart(
        param_1: undefined2,
        param_2: byte,
        param_3: uint,
        param_4: undefined,
        param_5: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_int;
    pub fn synthFXSetCtrl(param_1: uint, param_2: byte, param_3: byte) -> undefined4;
    pub fn synthFXSetCtrl14(param_1: uint, param_2: byte, param_3: uint) -> undefined4;
    pub fn synthFXCloneMidiSetup(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn synthSendKeyOff(param_1: uint) -> undefined4;
    pub fn synthVolume(
        param_1: uint,
        param_2: uint,
        param_3: uint,
        param_4: undefined,
        param_5: undefined4,
    );
    pub fn synthIsFadeOutActive(param_1: uint) -> undefined4;
    pub fn synthSetMusicVolumeType(param_1: uint, param_2: undefined);
    pub fn synthInit(param_1: undefined4, param_2: ::core::ffi::c_int);
    pub fn sndSeqSpeed(param_1: uint, param_2: undefined2);
    pub fn sndSeqContinue(param_1: uint);
    pub fn sndSeqMute(param_1: uint, param_2: undefined4, param_3: undefined4);
    pub fn sndSeqVolume(param_1: uint, param_2: uint, param_3: uint, param_4: byte);
    pub fn seqGetMIDIPriority(param_1: uint, param_2: uint) -> undefined2;
    pub fn g_call_synthFXSetCtrl_with_irq_disabled(
        param_1: uint,
        param_2: byte,
        param_3: byte,
    ) -> undefined4;
    pub fn g_call_synthFXSetCtrl14_with_irq_disabled(
        param_1: uint,
        param_2: byte,
        param_3: uint,
    ) -> undefined4;
    pub fn sndFXKeyOff(param_1: uint) -> undefined4;
    pub fn sndFXStartEx(
        param_1: undefined2,
        param_2: byte,
        param_3: uint,
        param_4: byte,
    ) -> *mut ::core::ffi::c_int;
    pub fn sndFXStartParaInfo(
        param_1: undefined2,
        param_2: byte,
        param_3: uint,
        param_4: byte,
        param_5: *mut byte,
    ) -> *mut ::core::ffi::c_int;
    pub fn sndFXCheck(param_1: uint) -> uint;
    pub fn sndVolume(param_1: uint, param_2: uint, param_3: uint);
    pub fn sndMasterVolume(
        param_1: uint,
        param_2: uint,
        param_3: ::core::ffi::c_char,
        param_4: ::core::ffi::c_char,
    );
    pub fn sndSetAuxProcessingCallbacks(
        param_1: uint,
        param_2: ::core::ffi::c_int,
        param_3: undefined4,
        param_4: ::core::ffi::c_char,
        param_5: uint,
        param_6: ::core::ffi::c_int,
        param_7: undefined4,
        param_8: ::core::ffi::c_char,
        param_9: uint,
    );
    pub fn synthActivateStudio(param_1: uint, param_2: undefined, param_3: undefined4);
    pub fn synthDeactivateStudio(param_1: uint);
    pub fn synthAddStudioInput(param_1: uint, param_2: *mut byte);
    pub fn synthRemoveStudioInput(param_1: uint, param_2: ::core::ffi::c_int);
    pub fn streamInit();
    pub fn streamHandle();
    pub fn streamCorrectLoops();
    pub fn streamKill(param_1: ::core::ffi::c_int);
    pub fn GetPrivateIndex(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn sndStreamARAMUpdate(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: uint,
        param_4: uint,
        param_5: uint,
    );
    pub fn CheckOutputMode(param_1: *mut undefined, param_2: *mut undefined);
    pub fn sndStreamAllocEx(
        param_1: undefined,
        param_2: undefined4,
        param_3: ::core::ffi::c_int,
        param_4: undefined4,
        param_5: undefined,
        param_6: undefined,
        param_7: undefined,
        param_8: undefined,
        param_9: undefined,
        param_10: undefined,
        param_11: uint,
        param_12: undefined4,
        param_13: undefined4,
        param_14: *mut undefined2,
    ) -> ::core::ffi::c_int;
    pub fn sndStreamAllocLength(param_1: ::core::ffi::c_int, param_2: uint) -> uint;
    pub fn sndStreamADPCMParameter(param_1: ::core::ffi::c_int, param_2: *mut undefined2);
    pub fn sndStreamFrq(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn sndStreamFree(param_1: ::core::ffi::c_int);
    pub fn sndStreamActivate(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn sndStreamDeactivate(param_1: ::core::ffi::c_int);
    pub fn dataInsertKeymap(param_1: ushort, param_2: undefined4) -> undefined4;
    pub fn dataRemoveKeymap(param_1: ::core::ffi::c_short) -> undefined4;
    pub fn dataInsertLayer(param_1: ushort, param_2: undefined4, param_3: undefined2)
        -> undefined4;
    pub fn dataRemoveLayer(param_1: ::core::ffi::c_short) -> undefined4;
    pub fn dataInsertCurve(param_1: ushort, param_2: undefined4) -> undefined4;
    pub fn dataRemoveCurve(param_1: ::core::ffi::c_short) -> undefined4;
    pub fn dataInsertSDir(param_1: *mut ::core::ffi::c_short, param_2: undefined4) -> undefined4;
    pub fn dataRemoveSDir(param_1: *mut ::core::ffi::c_short) -> undefined4;
    pub fn dataAddSampleReference(param_1: ::core::ffi::c_short) -> undefined4;
    pub fn dataRemoveSampleReference(param_1: ::core::ffi::c_short) -> undefined4;
    pub fn dataInsertFX(
        param_1: ::core::ffi::c_short,
        param_2: ::core::ffi::c_int,
        param_3: uint,
    ) -> undefined4;
    pub fn dataRemoveFX(param_1: ::core::ffi::c_short) -> undefined4;
    pub fn dataInsertMacro(param_1: uint, param_2: undefined4) -> undefined4;
    pub fn dataRemoveMacro(param_1: uint) -> undefined4;
    pub fn dataGetMacro(param_1: uint) -> undefined4;
    pub fn dataGetSample(param_1: undefined2, param_2: *mut undefined4) -> undefined4;
    pub fn dataGetCurve(param_1: undefined2) -> undefined4;
    pub fn dataGetKeymap(param_1: undefined2) -> undefined4;
    pub fn dataGetLayer(param_1: undefined2, param_2: *mut undefined2) -> undefined4;
    pub fn dataGetFX(param_1: undefined2) -> ::core::ffi::c_int;
    pub fn dataInit(param_1: undefined4, param_2: ::core::ffi::c_int);
    pub fn mcmdWait(param_1: ::core::ffi::c_int, param_2: *mut uint) -> undefined4;
    pub fn mcmdLoop(param_1: ::core::ffi::c_int, param_2: *mut uint);
    pub fn mcmdPlayMacro(param_1: ::core::ffi::c_int, param_2: *mut uint);
    pub fn mcmdStartSample(param_1: *mut ::core::ffi::c_int, param_2: *mut uint);
    pub fn mcmdVibrato(param_1: ::core::ffi::c_int, param_2: *mut uint);
    pub fn DoSetPitch(param_1: ::core::ffi::c_int);
    pub fn mcmdSetADSR(param_1: ::core::ffi::c_int, param_2: *mut uint);
    pub fn mcmdSetPitchADSR(param_1: ::core::ffi::c_int, param_2: *mut undefined4);
    pub fn DoPanningSetup(param_1: ::core::ffi::c_int, param_2: *mut uint, param_3: uint);
    pub fn TranslateVolume(param_1: uint, param_2: ::core::ffi::c_short) -> uint;
    pub fn DoEnvelopeCalculation(
        param_1: ::core::ffi::c_int,
        param_2: *mut uint,
        param_3: ::core::ffi::c_int,
    );
    pub fn mcmdRandomKey(param_1: ::core::ffi::c_int, param_2: *mut uint);
    pub fn SelectSource(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: *mut uint,
        param_4: undefined4,
        param_5: uint,
        param_6: uint,
        param_7: uint,
    );
    pub fn mcmdPortamento(param_1: ::core::ffi::c_int, param_2: *mut uint);
    pub fn varGet32(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: uint,
    ) -> uint;
    pub fn varGet(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: uint,
    ) -> ::core::ffi::c_int;
    pub fn varSet32(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: uint,
        param_4: undefined4,
    );
    pub fn mcmdVarCalculation(param_1: ::core::ffi::c_int, param_2: *mut uint, param_3: byte);
    pub fn mcmdSendMessage(param_1: ::core::ffi::c_int, param_2: *mut uint);
    pub fn mcmdSetKeyGroup(param_1: ::core::ffi::c_int, param_2: *mut uint);
    pub fn macHandleActive(param_1: *mut ::core::ffi::c_int);
    pub fn macHandle(param_1: uint);
    pub fn macSampleEndNotify(param_1: *mut ::core::ffi::c_int);
    pub fn macSetExternalKeyoff(param_1: *mut ::core::ffi::c_int) -> uint;
    pub fn macSetPedalState(param_1: *mut ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn TimeQueueAdd(param_1: ::core::ffi::c_int);
    pub fn UnYieldMacro(param_1: *mut ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn macMakeActive(param_1: *mut ::core::ffi::c_int);
    pub fn macMakeInactive(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn macStart(
        param_1: uint,
        param_2: byte,
        param_3: byte,
        param_4: ::core::ffi::c_short,
        param_5: byte,
        param_6: undefined,
        param_7: undefined,
        param_8: uint,
        param_9: byte,
        param_10: undefined,
        param_11: ushort,
        param_12: undefined,
        param_13: byte,
        param_14: undefined,
        param_15: undefined,
        param_16: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_int;
    pub fn macInit();
    pub fn vidInit() -> ::core::ffi::c_int;
    pub fn get_vidlist(param_1: uint) -> *mut undefined4;
    pub fn vidRemoveVoiceReferences(param_1: ::core::ffi::c_int);
    pub fn vidMakeRoot(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn vidMakeNew(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_int;
    pub fn vidGetInternalId(param_1: uint) -> undefined4;
    pub fn voiceRemovePriority(param_1: ::core::ffi::c_int);
    pub fn voiceSetPriority(param_1: ::core::ffi::c_int, param_2: byte);
    pub fn voiceAllocate(
        param_1: byte,
        param_2: byte,
        param_3: ::core::ffi::c_short,
        param_4: ::core::ffi::c_char,
    ) -> uint;
    pub fn voiceFree(param_1: ::core::ffi::c_int);
    pub fn synthInitAllocationAids();
    pub fn voiceBlock(param_1: byte) -> uint;
    pub fn voiceUnblock(param_1: ::core::ffi::c_int);
    pub fn voiceKill(param_1: ::core::ffi::c_int);
    pub fn voiceKillSound(param_1: uint) -> undefined4;
    pub fn synthKillVoicesByMacroReferences(param_1: *mut ushort);
    pub fn voiceIsLastStarted(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn voiceSetLastStarted(param_1: ::core::ffi::c_int);
    pub fn voiceResetLastStarted(param_1: ::core::ffi::c_int);
    pub fn voiceInitLastStarted();
    pub fn sndPitchUpOne(param_1: uint) -> ::core::ffi::c_int;
    pub fn sndGetPitch(param_1: uint, param_2: uint);
    pub fn adsrConvertTimeCents();
    pub fn salChangeADSRState(param_1: *mut ::core::ffi::c_char) -> undefined4;
    pub fn g_mcmdWaitMs_or_adsrSetup(param_1: *mut ::core::ffi::c_char);
    pub fn adsrStartRelease(param_1: *mut ::core::ffi::c_char, param_2: uint) -> undefined4;
    pub fn adsrRelease(param_1: *mut byte) -> undefined4;
    pub fn adsrHandle(
        param_1: *mut ::core::ffi::c_char,
        param_2: *mut undefined2,
        param_3: *mut ::core::ffi::c_short,
    ) -> undefined4;
    pub fn adsrHandleLowPrecision(
        param_1: *mut ::core::ffi::c_char,
        param_2: *mut undefined2,
        param_3: *mut ::core::ffi::c_short,
    ) -> undefined4;
    pub fn vsInit();
    pub fn vsSampleStartNotify(param_1: byte) -> uint;
    pub fn vsSampleEndNotify(param_1: uint);
    pub fn vsUpdateBuffer(param_1: ::core::ffi::c_int, param_2: uint);
    pub fn vsSampleUpdates();
    pub fn dataInitStack();
    pub fn InsertData(
        param_1: uint,
        param_2: *mut ::core::ffi::c_int,
        param_3: byte,
        param_4: ::core::ffi::c_int,
    );
    pub fn ScanIDList(
        param_1: *mut ushort,
        param_2: *mut ::core::ffi::c_int,
        param_3: byte,
        param_4: ::core::ffi::c_int,
    );
    pub fn ScanIDListReverse(
        param_1: *mut ushort,
        param_2: *mut ::core::ffi::c_int,
        param_3: byte,
        param_4: ::core::ffi::c_int,
    );
    pub fn sndPushGroup(
        param_1: *mut ::core::ffi::c_int,
        param_2: ::core::ffi::c_short,
        param_3: undefined4,
        param_4: *mut ::core::ffi::c_int,
        param_5: *mut ::core::ffi::c_int,
    ) -> undefined4;
    pub fn sndPopGroup() -> undefined4;
    pub fn seqPlaySong(
        param_1: ::core::ffi::c_short,
        param_2: ::core::ffi::c_short,
        param_3: *mut ::core::ffi::c_int,
        param_4: *mut uint,
        param_5: ::core::ffi::c_char,
        param_6: undefined,
    ) -> uint;
    pub fn sndSeqPlayEx(
        param_1: ::core::ffi::c_short,
        param_2: ::core::ffi::c_short,
        param_3: *mut ::core::ffi::c_int,
        param_4: *mut uint,
        param_5: undefined,
    );
    pub fn salInitDspCtrl(param_1: byte, param_2: byte, param_3: ::core::ffi::c_int) -> undefined4;
    pub fn salInitHRTFBuffer();
    pub fn salActivateStudio(param_1: uint, param_2: undefined, param_3: undefined4);
    pub fn salDeactivateStudio(param_1: uint);
    pub fn salCheckVolErrorAndResetDelta(
        param_1: *mut undefined2,
        param_2: *mut undefined2,
        param_3: *mut ::core::ffi::c_short,
        param_4: ::core::ffi::c_short,
        param_5: ::core::ffi::c_int,
        param_6: ushort,
    ) -> undefined4;
    pub fn HandleDepopVoice(param_1: ::core::ffi::c_int, param_2: *mut ::core::ffi::c_int);
    pub fn SortVoices(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn salBuildCommandList(param_1: undefined4, param_2: uint);
    pub fn salSynthSendMessage(param_1: ::core::ffi::c_int, param_2: undefined4) -> undefined4;
    pub fn salActivateVoice(param_1: ::core::ffi::c_int, param_2: byte);
    pub fn salDeactivateVoice(param_1: ::core::ffi::c_int);
    pub fn salAddStudioInput(param_1: ::core::ffi::c_int, param_2: *mut byte) -> undefined4;
    pub fn salRemoveStudioInput(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn salHandleAuxProcessing();
    pub fn salCalcVolume(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: ::core::ffi::c_char,
        param_5: *mut f32,
        param_6: uint,
        param_7: uint,
        param_8: ::core::ffi::c_int,
        param_9: ::core::ffi::c_int,
    );
    pub fn UpdateRoomDistances();
    pub fn CheckRoomStatus();
    pub fn CheckDoorStatus();
    pub fn CalcEmitter(
        param_1: ::core::ffi::c_int,
        param_2: *mut f32,
        param_3: *mut f32,
        param_4: *mut f32,
        param_5: *mut f32,
        param_6: *mut f32,
    );
    pub fn SetFXParameters(
        param_1: f64,
        param_2: f64,
        param_3: undefined8,
        param_4: f64,
        param_5: f64,
        param_6: ::core::ffi::c_int,
    );
    pub fn EmitterShutdown(param_1: *mut ::core::ffi::c_int);
    pub fn s3dKillEmitterByFXID(param_1: *mut ::core::ffi::c_short, param_2: ::core::ffi::c_int);
    pub fn AddRunningEmitter(param_1: f64, param_2: ::core::ffi::c_int);
    pub fn AddStartingEmitter(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: f64,
        param_5: f64,
        param_6: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn StartContinousEmitters();
    pub fn s3dHandle();
    pub fn s3dInit(param_1: uint);
    pub fn sndInit(
        param_1: byte,
        param_2: undefined,
        param_3: undefined,
        param_4: byte,
        param_5: uint,
        param_6: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn salApplyMatrix(param_1: *mut f32, param_2: *mut f32, param_3: *mut f32);
    pub fn salNormalizeVector(param_1: *mut f32);
    pub fn inpSetGlobalMIDIDirtyFlag(param_1: uint, param_2: uint, param_3: uint);
    pub fn inpSetMidiCtrl(param_1: byte, param_2: byte, param_3: byte, param_4: byte);
    pub fn inpSetMidiCtrl14(param_1: byte, param_2: byte, param_3: byte, param_4: uint);
    pub fn inpResetMidiCtrl(param_1: uint, param_2: uint, param_3: ::core::ffi::c_int);
    pub fn inpGetMidiCtrl(param_1: uint, param_2: uint, param_3: uint) -> uint;
    pub fn inpGetChannelDefaults(param_1: uint, param_2: uint) -> *mut undefined;
    pub fn inpResetChannelDefaults(param_1: uint, param_2: uint);
    pub fn inpAddCtrl(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: undefined4,
        param_4: byte,
        param_5: ::core::ffi::c_int,
    );
    pub fn inpFXCopyCtrl(param_1: uint, param_2: ::core::ffi::c_int, param_3: ::core::ffi::c_int);
    pub fn inpSetMidiLastNote(param_1: uint, param_2: uint, param_3: undefined);
    pub fn inpGetMidiLastNote(param_1: uint, param_2: uint);
    pub fn _GetInputValue(
        param_1: ::core::ffi::c_int,
        param_2: *mut byte,
        param_3: uint,
        param_4: uint,
    ) -> uint;
    pub fn inpInit(param_1: ::core::ffi::c_int);
    pub fn inpTranslateExCtrl(param_1: uint) -> uint;
    pub fn return_0x82() -> undefined4;
    pub fn return_0xa0() -> undefined4;
    pub fn return_0xa1() -> undefined4;
    pub fn return_0x83() -> undefined4;
    pub fn return_0x84() -> undefined4;
    pub fn return_0xa2() -> undefined4;
    pub fn return_0xa3() -> undefined4;
    pub fn return_0xa4() -> undefined4;
    pub fn inpGetExCtrl(param_1: ::core::ffi::c_int, param_2: uint) -> uint;
    pub fn inpSetExCtrl(param_1: ::core::ffi::c_int, param_2: uint, param_3: ::core::ffi::c_short);
    pub fn sndRand() -> uint;
    pub fn sndSin(param_1: uint) -> ::core::ffi::c_int;
    pub fn sndBSearch(
        param_1: undefined4,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
        param_4: ::core::ffi::c_int,
        param_5: *mut undefined,
    ) -> ::core::ffi::c_int;
    pub fn sndConvertMs(param_1: *mut ::core::ffi::c_int);
    pub fn sndConvertTicks(param_1: *mut uint, param_2: ::core::ffi::c_int);
    pub fn sndConvert2Ms(param_1: uint) -> uint;
    pub fn snd_handle_irq();
    pub fn hwInit(
        param_1: *mut undefined4,
        param_2: byte,
        param_3: byte,
        param_4: uint,
    ) -> undefined4;
    pub fn hwSetTimeOffset(param_1: undefined);
    pub fn WPADGetDpdSensitivity();
    pub fn hwIsActive(param_1: ::core::ffi::c_int) -> bool_;
    pub fn hwSetPriority(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn hwInitSamplePlayback(
        param_1: ::core::ffi::c_int,
        param_2: undefined2,
        param_3: *mut undefined4,
        param_4: ::core::ffi::c_int,
        param_5: undefined4,
        param_6: undefined4,
        param_7: ::core::ffi::c_int,
        param_8: ::core::ffi::c_char,
    );
    pub fn hwBreak(param_1: ::core::ffi::c_int);
    pub fn hwSetADSR(param_1: ::core::ffi::c_int, param_2: *mut uint, param_3: byte);
    pub fn hwSetVirtualSampleLoopBuffer(
        param_1: ::core::ffi::c_int,
        param_2: undefined4,
        param_3: undefined4,
    );
    pub fn hwGetVirtualSampleState(param_1: ::core::ffi::c_int);
    pub fn hwGetSampleID(param_1: ::core::ffi::c_int) -> undefined2;
    pub fn hwSetStreamLoopPS(param_1: ::core::ffi::c_int, param_2: undefined);
    pub fn hwStart(param_1: ::core::ffi::c_int, param_2: byte);
    pub fn hwKeyOff(param_1: ::core::ffi::c_int);
    pub fn hwSetPitch(param_1: ::core::ffi::c_int, param_2: ushort);
    pub fn hwSetSRCType(param_1: ::core::ffi::c_int, param_2: uint);
    pub fn hwSetPolyPhaseFilter(param_1: ::core::ffi::c_int, param_2: uint);
    pub fn hwSetITDMode(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_char);
    pub fn hwSetVolume(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: ::core::ffi::c_int,
        param_5: ::core::ffi::c_char,
        param_6: uint,
        param_7: uint,
    );
    pub fn hwOff(param_1: ::core::ffi::c_int);
    pub fn hwSetAUXProcessingCallbacks(
        param_1: uint,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
    );
    pub fn hwGetPos(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn hwFlushStream(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: ::core::ffi::c_int,
        param_4: uint,
        param_5: undefined4,
        param_6: undefined4,
    );
    pub fn hwInitStream(param_1: ::core::ffi::c_int);
    pub fn hwExitStream(param_1: uint);
    pub fn hwGetStreamPlayBuffer(param_1: uint);
    pub fn hwTransAddr();
    pub fn hwFrq2Pitch(param_1: undefined4);
    pub fn hwInitSampleMem(param_1: undefined4, param_2: ::core::ffi::c_int);
    pub fn hwSaveSample(param_1: *mut ::core::ffi::c_int, param_2: *mut *mut ::core::ffi::c_void);
    pub fn hwRemoveSample(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn hwSyncSampleMem();
    pub fn sndSetHooks(param_1: *mut undefined4);
    pub fn hwGetVirtualSampleID(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn hwVoiceInStartup(param_1: ::core::ffi::c_int) -> uint;
    pub fn aramUploadData(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: ::core::ffi::c_int,
        param_5: undefined4,
        param_6: undefined4,
    );
    pub fn aramSyncTransferQueue();
    pub fn aramInit(param_1: ::core::ffi::c_int);
    pub fn aramGetZeroBuffer();
    pub fn aramStoreData(
        param_1: *mut ::core::ffi::c_void,
        param_2: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn aramRemoveData(param_1: undefined4, param_2: ::core::ffi::c_int);
    pub fn InitStreamBuffers();
    pub fn aramAllocateStreamBuffer(param_1: ::core::ffi::c_int) -> uint;
    pub fn aramGetStreamBufferAddress(param_1: uint, param_2: *mut undefined4) -> undefined4;
    pub fn aramFreeStreamBuffer(param_1: uint);
    pub fn salCallback();
    pub fn Destroy();
    pub fn salInitAi(param_1: undefined4, param_2: undefined4, param_3: *mut undefined4) -> bool_;
    pub fn salStartAi();
    pub fn salAiGetDest() -> ::core::ffi::c_int;
    pub fn salInitDsp() -> undefined4;
    pub fn salCtrlDsp(param_1: undefined4);
    pub fn salGetStartDelay() -> uint;
    pub fn hwInitIrq();
    pub fn hwIRQEnterCritical();
    pub fn hwIRQLeaveCritical();
    pub fn salMalloc();
    pub fn salFree();
    pub fn sndAuxCallbackUpdateSettingsReverbHI(param_1: *mut ::core::ffi::c_void) -> undefined4;
    pub fn sndAuxCallbackPrepareReverbHI(param_1: *mut ::core::ffi::c_void);
    pub fn g_something_with_sound8_wrapper(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn ReverbHICreate(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: f64,
        param_5: f64,
        param_6: f64,
        param_7: *mut ::core::ffi::c_void,
    ) -> undefined4;
    pub fn ReverbHIModify(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: f64,
        param_5: f64,
        param_6: f64,
        param_7: *mut ::core::ffi::c_void,
    ) -> undefined4;
    pub fn DoCrossTalk(param_1: f64, param_2: f64, param_3: *mut uint, param_4: *mut uint);
    pub fn HandleReverb(
        param_1: *mut uint,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn ReverbHICallback(
        param_1: *mut uint,
        param_2: *mut uint,
        param_3: *mut uint,
        param_4: ::core::ffi::c_int,
    );
    pub fn ReverbHIFree(param_1: ::core::ffi::c_int);
    pub fn do_src1(param_1: *mut *mut ::core::ffi::c_int);
    pub fn do_src2(param_1: *mut *mut ::core::ffi::c_int);
    pub fn sndAuxCallbackUpdateSettingsChorus(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn sndAuxCallbackPrepareChorus(param_1: *mut ::core::ffi::c_int) -> undefined4;
    pub fn sndAuxCallbackShutdownChorus() -> undefined4;
    pub fn g_GXGetTexObjUserData_dup1_maybe_not(obj: *mut GXTexObj) -> *mut ::core::ffi::c_void;
    pub fn SEQGetState(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn g_GXGetTexObjTlut_maybe_not(obj: *mut GXTexObj) -> u32_;
    pub fn g_GXGetTexObjUserData_dup2_maybe_not(obj: *mut GXTexObj) -> *mut ::core::ffi::c_void;
    pub fn g_GXGetTexObjFmt_dup2(obj: *mut GXTexObj) -> GXTexFmt;
    pub fn g_GXInitTexObjUserData_dup1(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn g_GXInitTexObjUserData_dup2(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn g_GXInitTexObjUserData_dup3(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn g_GXInitTexObjUserData_dup4(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn g_GXGetTexObjFmt_dup3(obj: *mut GXTexObj) -> GXTexFmt;
    pub fn g_adxt_set_out_pan(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn g_GXInitTexObjUserData_dup5(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn IFFifoAlloc(param_1: ::core::ffi::c_int);
    pub fn g_create_some_threads(g_optional_initial_thread_priorities: *mut undefined4);
    pub fn mwidle_thread_entrypoint(param: *mut ::core::ffi::c_void);
    pub fn vsync_thread_entrypoint(param: *mut ::core::ffi::c_void);
    pub fn safe_thread_entrypoint(param: *mut ::core::ffi::c_void);
    pub fn g_adxm_goto_mwidle_border();
    pub fn g_something_that_suspends_safe_thread();
    pub fn g_something_that_resumes_safe_thread();
    pub fn g_some_printf_function_0(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: *mut ::core::ffi::c_char,
        param_10: undefined4,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn g_cvFsAddDev(param_1: *mut ::core::ffi::c_char, param_2: *mut undefined);
    pub fn math_init() -> undefined4;
    pub fn CHUNK__math_rsqrt(param_1: f32, param_2: f32) -> f32;
    pub fn math_sqrt(param_1: f32) -> f32;
    pub fn math_rsqrt(param_1: f64) -> f32;
    pub fn math_sqrt_rsqrt(param_1: f64, param_2: *mut f32) -> f32;
    pub fn g_math_unknown1(param_1: f64, param_2: f64) -> f64;
    pub fn g_math_unknown2(param_1: f64) -> f64;
    pub fn math_sin(angle: s16) -> f32;
    pub fn math_sin_cos_v(param_1: s16, param_2: *mut f32);
    pub fn g_math_sin_cos_wrapper(angle: s16, out_sin: *mut f32, out_cos: *mut f32);
    pub fn CHUNK__math_sin_cos(angle: s16);
    pub fn math_sin_cos(angle: s16, out_sin: *mut f32, out_cos: *mut f32);
    pub fn math_tan(param_1: s16) -> f32;
    pub fn math_atan2(param_1: f64, param_2: f64) -> s16;
    pub fn math_atan(param_1: f64) -> ::core::ffi::c_int;
    pub fn CHUNK__math_atan() -> ::core::ffi::c_int;
    pub fn g_math_unk3(param_1: f64) -> ::core::ffi::c_int;
    pub fn g_math_unk4(param_1: f64) -> ::core::ffi::c_int;
    pub fn vec_dot_normalized_safe(vec1: *mut Vec, vec2: *mut Vec) -> f32;
    pub fn CHUNK__vec_dot_normalized_safe(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: f64,
        param_5: f64,
        param_6: f64,
    ) -> f64;
    pub fn ray_scale(scale: f32, ray_start: *mut Vec, ray_end: *mut Vec, out_ray_end: *mut Vec);
    pub fn vec_set_len(len: f32, src: *mut Vec, dest: *mut Vec);
    pub fn vec_normalize_len(vec: *mut Vec) -> f32;
    pub fn vec_dot_normalized(vec1: *mut Vec, vec2: *mut Vec) -> f32;
    pub fn mtxa_from_identity() -> undefined8;
    pub fn mtx_from_identity(mtx: *mut Mtx);
    pub fn mtxa_sq_from_identity() -> undefined8;
    pub fn mtxa_from_translate(translate: *mut Vec);
    pub fn mtxa_from_translate_xyz(x: f32, y: f32, z: f32);
    pub fn mtxa_from_rotate_x(angle: ::core::ffi::c_short);
    pub fn mtxa_from_rotate_y(angle: ::core::ffi::c_short);
    pub fn mtxa_from_rotate_z(angle: ::core::ffi::c_short);
    pub fn mtxa_from_mtxb_translate(vec: *mut Vec);
    pub fn mtxa_from_mtxb_translate_xyz(param_1: f64, param_2: f64, param_3: f64) -> f64;
    pub fn mtxa_normalize_basis();
    pub fn mtxa_push() -> undefined8;
    pub fn mtxa_pop();
    pub fn mtxa_to_mtx(mtx: *mut Mtx);
    pub fn mtxa_from_mtx(mtx: *mut Mtx);
    pub fn mtxa_peek() -> undefined8;
    pub fn mtxa_sq_to_mtx(mtx: *mut Mtx);
    pub fn mtxa_sq_from_mtx(mtx: *mut Mtx);
    pub fn mtxa_from_mtxb() -> undefined8;
    pub fn mtxa_to_mtxb() -> undefined8;
    pub fn mtx_copy(src: *mut Mtx, dest: *mut Mtx);
    pub fn mtxa_invert();
    pub fn mtxa_rigid_invert();
    pub fn mtxa_mult_right(mtx: *mut Mtx);
    pub fn mtxa_mult_left(mtx: *mut Mtx);
    pub fn mtxa_from_mtxb_mult_mtx(mtx: *mut Mtx);
    pub fn mtx_mult(mtx1: *mut Mtx, mtx2: *mut Mtx, dest: *mut Mtx);
    pub fn mtxa_translate(vec: *mut Vec);
    pub fn mtxa_translate_xyz(x: f32, y: f32, z: f32);
    pub fn mtxa_translate_neg(vec: *mut Vec);
    pub fn mtxa_translate_neg_xyz(x: f32, y: f32, z: f32);
    pub fn mtxa_scale(vec: *mut Vec);
    pub fn mtxa_scale_s(scale: f32);
    pub fn mtxa_scale_xyz(x: f32, y: f32, z: f32);
    pub fn mtxa_tf_point(src: *mut Vec, dest: *mut Vec);
    pub fn mtxa_tf_vec(src: *mut Vec, dest: *mut Vec);
    pub fn mtxa_tf_point_xyz(x: f32, y: f32, z: f32, dest: *mut Vec);
    pub fn mtxa_tf_vec_xyz(x: f32, y: f32, z: f32, param_4: *mut Vec);
    pub fn mtxa_rigid_inv_tf_point(src: *mut Vec, dst: *mut Vec);
    pub fn mtxa_rigid_inv_tf_point_xyz(x: f32, y: f32, z: f32, dst: *mut Vec);
    pub fn mtxa_rigid_inv_tf_tl(dst: *mut Vec);
    pub fn mtxa_rigid_inv_tf_vec(src: *mut Vec, dst: *mut Vec);
    pub fn mtxa_rigid_inv_tf_vec_xyz(x: f32, y: f32, z: f32, dst: *mut Vec);
    pub fn CHUNK__mtxa_rigid_inv_tf_vec_xyz(
        x: f32,
        y: f32,
        z: f32,
        param_4: undefined4,
        dst: *mut Vec,
        mtxa: *mut ::core::ffi::c_void,
    );
    pub fn mtxa_rotate_x(angle: s16);
    pub fn mtxa_rotate_x_sin_cos(sin_x_angle: f32, cos_x_angle: f32);
    pub fn mtxa_rotate_y(angle: s16);
    pub fn mtxa_rotate_y_sin_cos(sin_y_angle: f32, cos_y_angle: f32);
    pub fn mtxa_rotate_z(angle: s16);
    pub fn mtxa_rotate_z_sin_cos(sin_z_angle: f32, cos_z_angle: f32);
    pub fn mtxa_from_quat(quat: *mut Quat);
    pub fn quat_mult(dest: *mut Quat, quat1: *mut Quat, quat2: *mut Quat);
    pub fn g_math_smth1(param_1: *mut f32) -> undefined8;
    pub fn g_math_unk6(param_1: *mut f32);
    pub fn g_math_unk7(param_1: f64, param_2: *mut Quat, param_3: *mut f32, param_4: *mut f32);
    pub fn g_math_unk8(param_1: f64, param_2: *mut Quat, param_3: *mut f32, param_4: *mut f32);
    pub fn mtxa_to_quat(out_quat: *mut Quat);
    pub fn quat_from_axis_angle(quat: *mut Quat, axis: *mut Vec, angle: ::core::ffi::c_int);
    pub fn g_math_unk9_smth_w_quats(param_1: f64, param_2: *mut Quat, param_3: *mut Vec);
    pub fn quat_to_axis_angle(quat: *mut Quat, out_axis: undefined4);
    pub fn quat_normalize(quat: *mut Quat);
    pub fn quat_from_dirs(out_quat: *mut Quat, start: *mut Vec, end: *mut Vec);
    pub fn quat_slerp(t: f32, dest: *mut Quat, quat1: *mut Quat, quat2: *mut Quat);
    pub fn g_math_quat_smth2(dst: *mut Quat, quat1: *mut Quat, quat2: *mut Quat);
    pub fn g_math_unk10(param_1: *mut Vec, param_2: *mut Vec);
    pub fn g_math_unk11(param_1: *mut Vec, param_2: *mut Vec);
    pub fn ray_to_euler(param_1: *mut Vec, param_2: *mut Vec, param_3: *mut S16Vec);
    pub fn ray_to_euler_xy(
        param_1: *mut f32,
        param_2: *mut f32,
        param_3: *mut s16,
        param_4: *mut s16,
    );
    pub fn vec_to_euler(vec: *mut Vec, rot: *mut S16Vec);
    pub fn vec_to_euler_xy(vec: *mut Vec, out_x_rot: *mut s16, out_y_rot: *mut s16);
    pub fn g_math_unk12(param_1: *mut Vec, param_2: *mut f32);
    pub fn g_math_unk13(param_1: undefined4, param_2: undefined4, param_3: *mut Vec);
    pub fn mtxa_to_euler_yxz(rot_y: *mut s16, rot_x: *mut s16, rot_z: *mut s16);
    pub fn mtxa_to_euler(rot: S16Vec);
    pub fn g_math_unk14(
        param_1: *mut ::core::ffi::c_short,
        param_2: *mut s16,
        param_3: *mut s16,
    ) -> undefined8;
    pub fn g_math_unk15(param_1: f64, param_2: *mut Vec, param_3: *mut Vec);
    pub fn g_math_unk16(param_1: f32, param_2: undefined4, param_3: undefined4);
    pub fn g_math_unk17(param_1: f64, param_2: f64, param_3: *mut Vec, param_4: *mut Vec);
    pub fn g_math_unk18(param_1: f64, param_2: f64, param_3: *mut Vec, param_4: *mut Vec);
    pub fn g_math_unk19(param_1: f64, param_2: f64, param_3: *mut Vec, param_4: *mut Vec);
    pub fn g_init_console_gx();
    pub fn gx_start_new_frame();
    pub fn gp_wait();
    pub fn video_finish_frame();
    pub fn get_gx_fifo_use_size2() -> u32_;
    pub fn g_gx_reset_z_and_alpha_compare_modes();
    pub fn swap_gx_cpu_fifo() -> ::core::ffi::c_int;
    pub fn wait_for_gp_read_idle();
    pub fn gx_draw_done_callback_func();
    pub fn g_set_gx_vtx_formats();
    pub fn init_loched_cache(use_locked_cache: BOOL32);
    pub fn g_something_with_locked_cache(param_1: uint) -> *mut ::core::ffi::c_void;
    pub fn g_make_arena_simulate_24mb_console();
    pub fn auto_set_render_mode(use_progressive_for_ntsc: BOOL32);
    pub fn g_init_gx(
        make_second_fifo: BOOL32,
        fifo_size: u32_,
        g_something_with_alpha: ::core::ffi::c_int,
    );
    pub fn g_init_locked_cache_mtx_stack(
        matrix_stack: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    );
    pub fn allocate_mem_from_arena(size: ::core::ffi::c_int) -> *mut ::core::ffi::c_void;
    pub fn g_set_some_func_ptrs2(
        param_1: *mut ::core::option::Option<unsafe extern "C" fn() -> *mut DVDFileInfo>,
    );
    pub fn g_set_some_dvd_func_ptrs();
    pub fn set_alloc_from_heap_func_ptr(
        new_func: ::core::option::Option<
            unsafe extern "C" fn(arg1: u32_) -> *mut ::core::ffi::c_void,
        >,
    ) -> ::core::option::Option<unsafe extern "C" fn(new_func: u32_) -> *mut ::core::ffi::c_void>;
    pub fn set_free_to_heap_func_ptr(
        new_func: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    ) -> ::core::option::Option<unsafe extern "C" fn(new_func: *mut ::core::ffi::c_void)>;
    pub fn reset_heap_alloc_func_ptrs();
    pub fn g_load_raw_gma(
        gma_file_name: *mut ::core::ffi::c_char,
        tpl: *mut TplBuffer,
    ) -> *mut ::core::ffi::c_int;
    pub fn g_load_gma(file_path: *mut ::core::ffi::c_char, tpl: *mut TplBuffer) -> *mut GmaBuffer;
    pub fn g_something_freeing_heap(param_1: *mut ::core::ffi::c_int);
    pub fn g_load_tpl(tpl_file_path: *mut ::core::ffi::c_char) -> *mut TplBuffer;
    pub fn g_something_freeing_heap_2(param_1: *mut ::core::ffi::c_void);
    pub fn g_panic_in_avload(param_1: *mut ::core::ffi::c_char, param_2: undefined4);
    pub fn alloc_from_set_heap(size: u32_) -> *mut ::core::ffi::c_void;
    pub fn g_free_mem_to_heap_via_func_ptr(mem: *mut ::core::ffi::c_void);
    pub fn g_init_gma_texture(
        tex_desc: *mut GmaTevLayer,
        tpl_texture: *mut TplTextureHeader,
        tpl: *mut TplBuffer,
    );
    pub fn os_alloc_from_heap_wrapper(size: u32_);
    pub fn os_free_to_heap_wrapper(ptr: *mut ::core::ffi::c_void);
    pub fn g_get_some_dvd_file_info() -> *mut DVDFileInfo;
    pub fn dvd_open_wrapper(
        file_name: *mut ::core::ffi::c_char,
        file_info: *mut DVDFileInfo,
    ) -> BOOL32;
    pub fn dvd_read_with_prio2(
        fileInfo: *mut DVDFileInfo,
        addr: *mut ::core::ffi::c_void,
        length: s32,
        offset: s32,
    ) -> s32;
    pub fn dvd_close_wrapper(file_info: *mut DVDFileInfo) -> BOOL32;
    pub fn g_something_with_fog(param_1: f64, param_2: f64, param_3: ::core::ffi::c_int);
    pub fn g_something_with_raster_state(param_1: ::core::ffi::c_int);
    pub fn g_set_some_projection_matrix(fov: f64, aspect_ratio: f64, near_clip: f64, far_clip: f64);
    pub fn g_smth_with_projection_mtx(param_1: *mut f32);
    pub fn gx_begin_display_list_wrapper(list: *mut ::core::ffi::c_void, size: u32_);
    pub fn gx_end_display_list_wrapper() -> u32_;
    pub fn g_zero_something();
    pub fn g_something_with_GX_vtx_desc(param_1: uint);
    pub fn load_gx_pos_nrm_mtx(mtx: *mut Mtx, id: ::core::ffi::c_int);
    pub fn g_smth_with_gpu_and_locked_cache_mtx() -> undefined8;
    pub fn g_something_with_texture_scroll_3(param_1: undefined4, param_2: *mut Mtx);
    pub fn avdisp_set_post_mult_color(red: f64, green: f64, blue: f64, alpha: f64);
    pub fn avdisp_set_post_add_color(red: f64, green: f64, blue: f64, alpha: f64);
    pub fn g_avdisp_set_ambient(g_red: f64, g_green: f64, g_blue: f64);
    pub fn g_some_GmaSomeStruct_func7(gma_struct: *mut GmaShape, param_2: *mut GXTevStageID);
    pub fn g_some_GmaSomeStruct_func(param_1: *mut GmaShape) -> f64;
    pub fn g_avdisp_smth_with_tex_materials(
        gma_header: *mut GmaModel,
        gma_struct: *mut GmaShape,
    ) -> f64;
    pub fn g_some_GmaSomeStruct_func3(shape: *mut GmaShape, g_some_gma_value: ::core::ffi::c_int);
    pub fn g_something_with_GmaSomeStruct_GXBlendFactor(gma_struct: *mut GmaShape);
    pub fn g_some_GmaSomeStruct_func5_GXSetChanCtrl(gma_struct: *mut GmaShape);
    pub fn g_some_GmaSomeStruct_func6(gma_struct: *mut GmaShape, param_2: ::core::ffi::c_int);
    pub fn g_some_GmaSomeStruct_func5(gma_struct: *mut GmaShape) -> undefined8;
    pub fn g_some_GmaSomeStruct_func4(param_1: *mut GmaShape);
    pub fn g_free_some_memory();
    pub fn draw_poly(param_1: ::core::ffi::c_int, param_2: *mut *mut Mtx) -> *mut Mtx;
    pub fn pointer_range_advance(
        g_frame_pointer: *mut byte,
        toset: *mut ::core::ffi::c_int,
    ) -> uint;
    pub fn g_avdisp_draw_model_now1(model: *mut GmaModel);
    pub fn g_avdisp_draw_model_now2(model: *mut GmaModel);
    pub fn g_avdisp_draw_model_now3(model: *mut GmaModel);
    pub fn g_write_to_gfx_fifos(param_1: *mut GmaShape, param_2: undefined4);
    pub fn avdisp_draw_deformable_shape(
        param_1: *mut uint,
        param_2: ::core::ffi::c_int,
        gma_struct: *mut GmaShape,
        param_4: ::core::ffi::c_int,
        gma_header: *mut GmaModel,
    ) -> *mut ::core::ffi::c_int;
    pub fn g_avdisp_smth_with_transforms(vert_control: *mut GmaShape) -> undefined8;
    pub fn avdisp_draw_deformable_model(
        model: *mut GmaModel,
        first_shape: *mut GmaShape,
        param_3: ::core::ffi::c_int,
    );
    pub fn g_avdisp_draw_deformable_model2(
        model: *mut GmaModel,
        shape: *mut GmaShape,
        param_3: ::core::ffi::c_int,
        param_4: ::core::ffi::c_int,
    );
    pub fn avdisp_draw_static_shape_now(
        model: *mut GmaModel,
        shape: *mut GmaShape,
        tev_layers: *mut GmaTevLayer,
    ) -> *mut GmaShape;
    pub fn g_some_GmaSomeStruct_func2(param_1: *mut ::core::ffi::c_void);
    pub fn g_iteratively_multiply_model_matrices(model: *mut GmaModel);
    pub fn g_avdisp_func8(param_1: ::core::ffi::c_int);
    pub fn g_maybe_something_with_normals(param_1: ::core::ffi::c_int);
    pub fn g_init_gma(gma_buffer: *mut GmaBuffer, gma_header: *mut Gma, tpl: *mut TplBuffer);
    pub fn g_init_gma_model_materials(
        model: *mut GmaModel,
        tpl: *mut TplBuffer,
        texobj_array: *mut GXTexObj,
    ) -> ::core::ffi::c_int;
    pub fn g_memcpy_using_locked_cache(
        dest: *mut ::core::ffi::c_void,
        curr_src_1_1_1_1_1_1_1_1_1_1: *mut ::core::ffi::c_void,
        count: usize,
    );
    pub fn g_something_with_locked_cache_2(
        param_1: *mut ::core::ffi::c_void,
        param_2: uint,
        param_3: uint,
    );
    pub fn memcpy2(dest: *mut ::core::ffi::c_void, src: *mut ::core::ffi::c_void, count: usize);
    pub fn __va_arg(
        param_1: *mut ::core::ffi::c_char,
        param_2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_int;
    pub fn __destroy_global_chain();
    pub fn __cvt_fp2unsigned(param_1: f64) -> ::core::ffi::c_int;
    pub fn _savefpr_14();
    pub fn _savefpr_15();
    pub fn _savefpr_16();
    pub fn _savefpr_17();
    pub fn _savefpr_18();
    pub fn _savefpr_19();
    pub fn _savefpr_20();
    pub fn _savefpr_21();
    pub fn _savefpr_22();
    pub fn _savefpr_23();
    pub fn _savefpr_24();
    pub fn _savefpr_25();
    pub fn _savefpr_26();
    pub fn _savefpr_27();
    pub fn _savefpr_28();
    pub fn _savefpr_29();
    pub fn _savefpr_30();
    pub fn _savefpr_31();
    pub fn _restfpr_14();
    pub fn _restfpr_15();
    pub fn _restfpr_16();
    pub fn _restfpr_17();
    pub fn _restfpr_18();
    pub fn _restfpr_19();
    pub fn _restfpr_20();
    pub fn _restfpr_21();
    pub fn _restfpr_22();
    pub fn _restfpr_23();
    pub fn _restfpr_24();
    pub fn _restfpr_25();
    pub fn _restfpr_26();
    pub fn _restfpr_27();
    pub fn _restfpr_28();
    pub fn _restfpr_29();
    pub fn _restfpr_30();
    pub fn _restfpr_31();
    pub fn _savegpr_14();
    pub fn _savegpr_15();
    pub fn _savegpr_16();
    pub fn _savegpr_17();
    pub fn _savegpr_18();
    pub fn _savegpr_19();
    pub fn _savegpr_20();
    pub fn _savegpr_21();
    pub fn _savegpr_22();
    pub fn _savegpr_23();
    pub fn _savegpr_24();
    pub fn _savegpr_25();
    pub fn _savegpr_26();
    pub fn _savegpr_27();
    pub fn _savegpr_28();
    pub fn _savegpr_29();
    pub fn _savegpr_30();
    pub fn _savegpr_31();
    pub fn _restgpr_14();
    pub fn _restgpr_15();
    pub fn _restgpr_16();
    pub fn _restgpr_17();
    pub fn _restgpr_18();
    pub fn _restgpr_19();
    pub fn _restgpr_20();
    pub fn _restgpr_21();
    pub fn _restgpr_22();
    pub fn _restgpr_23();
    pub fn _restgpr_24();
    pub fn _restgpr_25();
    pub fn _restgpr_26();
    pub fn _restgpr_27();
    pub fn _restgpr_28();
    pub fn _restgpr_29();
    pub fn _restgpr_30();
    pub fn _restgpr_31();
    pub fn __div2u(
        param_1: uint,
        param_2: uint,
        param_3: ::core::ffi::c_int,
        param_4: uint,
    ) -> undefined8;
    pub fn __div2i(param_1: uint, param_2: uint, param_3: uint, param_4: uint) -> undefined8;
    pub fn __mod2u(
        param_1: uint,
        param_2: uint,
        param_3: ::core::ffi::c_int,
        param_4: uint,
    ) -> undefined8;
    pub fn __mod2i(
        param_1: uint,
        param_2: uint,
        param_3: ::core::ffi::c_int,
        param_4: uint,
    ) -> undefined8;
    pub fn __shl2i(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: ::core::ffi::c_int,
    ) -> undefined8;
    pub fn __shr2u(param_1: uint, param_2: uint, param_3: ::core::ffi::c_int) -> undefined8;
    pub fn __shr2i(param_1: ::core::ffi::c_int, param_2: uint, param_3: uint) -> undefined8;
    pub fn __cvt_sll_flt(param_1: uint, param_2: uint) -> f64;
    pub fn __cvt_dbl_usll(param_1: ulonglong) -> undefined8;
    pub fn __fini_cpp_exceptions();
    pub fn __init_cpp_exceptions();
    pub fn __unregister_fragment(param_1: ::core::ffi::c_int);
    pub fn __register_fragment(param_1: undefined4, param_2: undefined4) -> undefined4;
    pub fn free(__ptr: *mut *mut ::core::ffi::c_int);
    pub fn deallocate_from_fixed_pools(
        param_1: *mut *mut ::core::ffi::c_int,
        param_2: *mut *mut ::core::ffi::c_int,
        param_3: uint,
    );
    pub fn soft_allocate_from_var_pools(
        param_1: *mut ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: *mut uint,
    ) -> *mut uint;
    pub fn SubBlock_merge_next(param_1: *mut uint, param_2: *mut *mut uint);
    pub fn Block_link(param_1: ::core::ffi::c_int, param_2: *mut uint);
    pub fn __flush_all() -> undefined4;
    pub fn __close_all();
    pub fn __find_unopened_file() -> *mut uint;
    pub fn __num2dec(
        param_1_00: f64,
        param_2: ::core::ffi::c_int,
        param_3: *mut ::core::ffi::c_char,
    );
    pub fn __num2dec_internal(param_1: f64, param_2: *mut ::core::ffi::c_char);
    pub fn __equals_dec(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int) -> uint;
    pub fn __two_exp(param_1: *mut undefined4, param_2: ushort);
    pub fn __timesdec(
        param_1: *mut undefined,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn __ull2dec(param_1: *mut undefined, param_2: undefined4, param_3: uint, param_4: uint);
    pub fn __count_trailing_zerol(param_1: uint) -> ::core::ffi::c_int;
    pub fn __flush_buffer(param_1: *mut undefined4, param_2: *mut undefined4)
        -> ::core::ffi::c_int;
    pub fn __prep_buffer(param_1: ::core::ffi::c_int);
    pub fn g_very_similar_to_puts(str_: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    pub fn __put_char(param_1: uint, param_2: *mut FILE) -> uint;
    pub fn to_lower(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn __fwrite(
        buffer: *mut ::core::ffi::c_void,
        size: usize,
        count: usize,
        stream: *mut FILE,
    ) -> usize;
    pub fn __fwrite2(
        buffer: *mut ::core::ffi::c_void,
        size: usize,
        count: usize,
        stream: *mut FILE,
    ) -> usize;
    pub fn fflush(__stream: *mut FILE) -> ::core::ffi::c_int;
    pub fn fclose(__stream: *mut FILE) -> ::core::ffi::c_int;
    pub fn _fseek(
        __stream: *mut FILE,
        __off: ::core::ffi::c_long,
        __whence: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn ftell(__stream: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn wcstombs(__s: ::core::ffi::c_int, __pwcs: *mut ushort, __n: uint) -> uint;
    pub fn unicode_to_UTF8(param_1: ::core::ffi::c_int, param_2: uint) -> uint;
    pub fn memcmp(
        __s1: *mut ::core::ffi::c_void,
        __s2: *mut ::core::ffi::c_void,
        __n: usize,
    ) -> ::core::ffi::c_int;
    pub fn __memrchr(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_char,
        param_3: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
    pub fn memchr(
        __s: *mut ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: usize,
    ) -> *mut ::core::ffi::c_void;
    pub fn memmove(
        __dest: *mut ::core::ffi::c_void,
        __src: *mut ::core::ffi::c_void,
        __n: usize,
    ) -> *mut ::core::ffi::c_void;
    pub fn __copy_longs_rev_unaligned(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: uint,
    );
    pub fn __copy_longs_unaligned(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: uint,
    );
    pub fn __copy_longs_rev_aligned(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: uint,
    );
    pub fn __copy_longs_aligned(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: uint,
    );
    pub fn __sinit_AILoader_cpp();
    pub fn sprintf(
        buffer: *mut ::core::ffi::c_char,
        format: *mut ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
    pub fn vsprintf(
        out_str: *mut ::core::ffi::c_char,
        format_str: *mut ::core::ffi::c_char,
        args: va_list,
    ) -> s32;
    pub fn vprintf(format: *mut ::core::ffi::c_char, args: va_list) -> ::core::ffi::c_int;
    pub fn printf(format: *mut ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    pub fn __StringWrite(
        osc: *mut __OutStrCtrl,
        Buffer: *mut ::core::ffi::c_char,
        NumChars: usize,
    ) -> *mut ::core::ffi::c_void;
    pub fn __FileWrite(
        File: *mut FILE,
        Buffer: *mut ::core::ffi::c_char,
        NumChars: usize,
    ) -> *mut FILE;
    pub fn __pformatter(
        WriteProc: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::core::ffi::c_void,
                arg2: *mut ::core::ffi::c_char,
                arg3: usize,
            ),
        >,
        WriteProcArg: *mut ::core::ffi::c_void,
        format_str: *mut ::core::ffi::c_char,
        arg: va_list,
        is_secure: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn float2str(
        param_1: f64,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> *mut byte;
    pub fn round_decimal(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn double2hex(
        param_1: f64,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
    pub fn longlong2str(
        param_1: uint,
        param_2: uint,
        param_3: ::core::ffi::c_int,
        param_4: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
    pub fn long2str(
        param_1: uint,
        param_2: ::core::ffi::c_int,
        param_3: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
    pub fn parse_format(
        param_1: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_char,
        param_3: *mut uint,
    ) -> *mut ::core::ffi::c_char;
    pub fn qsort(
        __base: *mut ::core::ffi::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
    pub fn srand(seed: u32_);
    pub fn rand() -> ::core::ffi::c_int;
    pub fn __StringRead(
        param_1: *mut *mut byte,
        param_2: *mut byte,
        param_3: ::core::ffi::c_int,
    ) -> *mut byte;
    pub fn strstr(
        __haystack: *mut ::core::ffi::c_char,
        __needle: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
    pub fn strchr(
        __s: *mut ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
    pub fn strncmp(
        __s1: *mut ::core::ffi::c_char,
        __s2: *mut ::core::ffi::c_char,
        __n: usize,
    ) -> ::core::ffi::c_int;
    pub fn strcmp(
        __s1: *mut ::core::ffi::c_char,
        __s2: *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn strncat(
        __dest: *mut ::core::ffi::c_char,
        __src: *mut ::core::ffi::c_char,
        __n: usize,
    ) -> *mut ::core::ffi::c_char;
    pub fn strcat(dest: *mut ::core::ffi::c_char, src: *mut ::core::ffi::c_char);
    pub fn strncpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *mut ::core::ffi::c_char,
        __n: usize,
    ) -> *mut ::core::ffi::c_char;
    pub fn strcpy(
        __dest: *mut ::core::ffi::c_char,
        __src: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
    pub fn strlen(__s: *mut ::core::ffi::c_char) -> usize;
    pub fn atof(__nptr: *mut ::core::ffi::c_char) -> f64;
    pub fn atoi(__nptr: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    pub fn __strtoul(
        param_1: uint,
        param_2: uint,
        param_3: *mut undefined,
        param_4: undefined4,
        param_5: *mut ::core::ffi::c_int,
        param_6: *mut undefined4,
        param_7: *mut undefined4,
    ) -> uint;
    pub fn __write_console(
        param_1: undefined4,
        param_2: *mut byte,
        param_3: *mut uint,
    ) -> undefined4;
    pub fn fwide(stream: *mut FILE, mode: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn __ieee754_acos(__x: f64) -> f64;
    pub fn pow_internal(x: f64, y: f64) -> f64;
    pub fn __ieee754_rem_pio2(param_1: f64, param_2: *mut f64) -> uint;
    pub fn __kernel_cos(param_1: f64, param_2: f64) -> f64;
    pub fn __kernel_rem_pio2(
        param_1: *mut f64,
        param_2: *mut f64,
        param_3: ::core::ffi::c_int,
        param_4: ::core::ffi::c_int,
        param_5: ::core::ffi::c_int,
        param_6: ::core::ffi::c_int,
    ) -> uint;
    pub fn __kernel_sin(param_1: f64, param_2: f64, param_3: ::core::ffi::c_int) -> f64;
    pub fn __kernel_tan(param_1: f64, param_2: f64, param_3: uint) -> f64;
    pub fn atan(__x: f64) -> f64;
    pub fn copysign(__x: f64, __y: f64) -> f64;
    pub fn cos(__x: f64) -> f64;
    pub fn floor(__x: f64) -> f64;
    pub fn frexp(x: f64, exponent: *mut ::core::ffi::c_int) -> f64;
    pub fn ldexp(__x: f64, __exponent: ::core::ffi::c_int) -> f64;
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
    pub fn sin(__x: f64) -> f64;
    pub fn tan(__x: f64) -> f64;
    pub fn acosf(__x: f32) -> f32;
    pub fn pow(x: f64, y: f64) -> f64;
    pub fn floorf(__x: f32) -> f32;
    pub fn powf(__x: f32) -> f32;
    pub fn tanf(__x: f32) -> f32;
    pub fn sinf(__x: f32) -> f32;
    pub fn cosf(__x: f32) -> f32;
    pub fn TRKNubMainLoop(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn TRKDestructEvent(param_1: ::core::ffi::c_int);
    pub fn TRKConstructEvent(param_1: *mut undefined, param_2: undefined);
    pub fn TRKPostEvent(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn TRKGetNextEvent(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn TRKInitializeEventQueue() -> undefined4;
    pub fn TRKNubWelcome();
    pub fn TRKTerminateNub() -> undefined4;
    pub fn TRKInitializeNub() -> ::core::ffi::c_int;
    pub fn TRKMessageSend(param_1: ::core::ffi::c_int);
    pub fn TRKReadBuffer_ui32(
        param_1: ::core::ffi::c_int,
        param_2: *mut undefined,
        param_3: ::core::ffi::c_int,
    );
    pub fn TRKReadBuffer_ui8(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn TRKReadBuffer1_ui64(
        param_1: ::core::ffi::c_int,
        param_2: *mut undefined,
    ) -> ::core::ffi::c_int;
    pub fn TRKReadBuffer1_ui32(
        param_1: ::core::ffi::c_int,
        param_2: *mut undefined,
    ) -> ::core::ffi::c_int;
    pub fn TRKReadBuffer1_ui16(
        param_1: ::core::ffi::c_int,
        param_2: *mut undefined,
    ) -> ::core::ffi::c_int;
    pub fn TRKReadBuffer1_ui8(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn TRKAppendBuffer_ui32(
        param_1: ::core::ffi::c_int,
        param_2: *mut undefined4,
        param_3: ::core::ffi::c_int,
    );
    pub fn TRKAppendBuffer_ui8(
        param_1: ::core::ffi::c_int,
        param_2: *mut undefined,
        param_3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn TRKAppendBuffer1_ui64(
        param_1: ::core::ffi::c_int,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
    );
    pub fn TRKAppendBuffer1_ui32(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn TRKAppendBuffer1_ui16(param_1: ::core::ffi::c_int, param_2: undefined2);
    pub fn TRKReadBuffer(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: uint,
    ) -> undefined4;
    pub fn TRKAppendBuffer(
        param_1: ::core::ffi::c_int,
        param_2: *mut undefined,
        param_3: uint,
    ) -> undefined4;
    pub fn TRKSetBufferPosition(param_1: ::core::ffi::c_int, param_2: uint) -> undefined4;
    pub fn TRKResetBuffer(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_char);
    pub fn TRKReleaseBuffer(param_1: ::core::ffi::c_int);
    pub fn TRKGetBuffer(param_1: ::core::ffi::c_int) -> *mut undefined;
    pub fn TRKGetFreeBuffer(
        param_1: *mut ::core::ffi::c_int,
        param_2: *mut undefined4,
    ) -> ::core::ffi::c_int;
    pub fn TRKInitializeMessageBuffers() -> undefined4;
    pub fn TRKTerminateSerialHandler() -> undefined4;
    pub fn TRKInitializeSerialHandler() -> undefined4;
    pub fn TRKProcessInput(param_1: undefined4);
    pub fn TRKGetInput();
    pub fn TRKTestForPacket() -> ::core::ffi::c_int;
    pub fn usr_put_initialize();
    pub fn usr_puts_serial(param_1: *mut ::core::ffi::c_char);
    pub fn TRKDispatchMessage(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn TRKTargetStop() -> undefined4;
    pub fn TRKDoSetOption(param_1: ::core::ffi::c_int);
    pub fn TRKDoStop(param_1: ::core::ffi::c_int);
    pub fn TRKDoStep(param_1: ::core::ffi::c_int);
    pub fn TRKDoContinue(
        param_1: ::core::ffi::c_int,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn TRKDoFlushCache(param_1: ::core::ffi::c_int);
    pub fn TRKDoWriteRegisters(param_1: ::core::ffi::c_int);
    pub fn TRKDoReadRegisters(param_1: ::core::ffi::c_int);
    pub fn TRKDoWriteMemory(param_1: ::core::ffi::c_int);
    pub fn TRKDoReadMemory(param_1: ::core::ffi::c_int);
    pub fn TRKDoCPUType(param_1: ::core::ffi::c_int);
    pub fn TRKDoSupportMask(param_1: ::core::ffi::c_int);
    pub fn TRKDoVersions(param_1: ::core::ffi::c_int);
    pub fn TRKDoReset(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn TRKDoDisconnect(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn TRKDoConnect(param_1: ::core::ffi::c_int);
    pub fn TRKDoUnsupported(param_1: ::core::ffi::c_int);
    pub fn TRKStandardACK(param_1: ::core::ffi::c_int, param_2: undefined, param_3: undefined);
    pub fn SetTRKConnected(param_1: undefined4);
    pub fn HandlePositionFileSupportRequest(
        param_1: undefined4,
        param_2: *mut undefined4,
        param_3: undefined,
        param_4: *mut undefined,
    ) -> ::core::ffi::c_int;
    pub fn HandleCloseFileSupportRequest(
        param_1: undefined4,
        param_2: *mut undefined,
    ) -> ::core::ffi::c_int;
    pub fn HandleOpenFileSupportRequest(
        param_1: *mut ::core::ffi::c_char,
        param_2: undefined,
        param_3: *mut undefined4,
        param_4: *mut undefined,
    ) -> ::core::ffi::c_int;
    pub fn TRKRequestSend(
        param_1: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_int,
        param_3: uint,
        param_4: ::core::ffi::c_int,
        param_5: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn TRKSuppAccessFile(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: *mut uint,
        param_4: *mut ::core::ffi::c_char,
        param_5: ::core::ffi::c_int,
        param_6: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn TRKDoNotifyStopped(param_1: ::core::ffi::c_char) -> ::core::ffi::c_int;
    pub fn TRK_flush_cache(param_1: uint, param_2: ::core::ffi::c_int);
    pub fn TRK_fill_mem(param_1: ::core::ffi::c_int, param_2: byte, param_3: uint);
    pub fn __TRK_get_MSR();
    pub fn __TRK_set_MSR();
    pub fn TRK_ppc_memcpy(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn TRKPPCAccessFPRegister(
        param_1: *mut undefined4,
        param_2: uint,
        param_3: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn TRKTargetStopped() -> undefined4;
    pub fn TRKTargetFlushCache(param_1: undefined4, param_2: uint, param_3: uint) -> undefined4;
    pub fn TRKTargetSupportRequest() -> ::core::ffi::c_int;
    pub fn TRKTargetGetPC() -> undefined4;
    pub fn TRKTargetStepOutOfRange(
        param_1: undefined4,
        param_2: undefined4,
        param_3: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn TRKTargetSingleStep(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn TRKTargetAddExceptionInfo(param_1: ::core::ffi::c_int);
    pub fn TRKTargetAddStopInfo(param_1: ::core::ffi::c_int);
    pub fn TRKTargetInterrupt(param_1: *mut byte) -> ::core::ffi::c_int;
    pub fn TRKTargetCPUType(param_1: *mut undefined) -> undefined4;
    pub fn TRKTargetSupportMask(param_1: *mut undefined) -> undefined4;
    pub fn TRKTargetVersions(param_1: *mut undefined) -> undefined4;
    pub fn TRKTargetAccessExtended2(
        param_1: uint,
        param_2: uint,
        param_3: ::core::ffi::c_int,
        param_4: *mut ::core::ffi::c_int,
        param_5: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn TRKTargetAccessExtended1(
        param_1: uint,
        param_2: uint,
        param_3: ::core::ffi::c_int,
        param_4: *mut ::core::ffi::c_int,
        param_5: ::core::ffi::c_int,
    ) -> uint;
    pub fn TRKTargetAccessFP(
        param_1: uint,
        param_2: uint,
        param_3: ::core::ffi::c_int,
        param_4: *mut ::core::ffi::c_int,
        param_5: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn TRKTargetAccessDefault(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: ::core::ffi::c_int,
        param_4: *mut ::core::ffi::c_int,
        param_5: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn TRKTargetAccessMemory(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: *mut ::core::ffi::c_int,
        param_4: undefined4,
        param_5: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn TRKValidMemory32(
        param_1: uint,
        param_2: ::core::ffi::c_int,
        param_3: uint,
    ) -> ::core::ffi::c_int;
    pub fn g_twi_0();
    pub fn InitMetroTRK(
        param_1: undefined4,
        param_2: undefined4,
        param_3: ::core::ffi::c_int,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    ) -> undefined8;
    pub fn TRKInitializeTarget() -> undefined4;
    pub fn TRKTargetTranslate(param_1: uint) -> uint;
    pub fn EnableMetroTRKInterrupts();
    pub fn TRKSaveExtended1Block();
    pub fn TRKRestoreExtended1Block();
    pub fn TRKTargetCPUMinorType() -> undefined4;
    pub fn TRK_main(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn TRKLoadContext(
        param_1: *mut undefined4,
        param_2: ::core::ffi::c_int,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    ) -> undefined4;
    pub fn TRK_board_display(param_1: *mut ::core::ffi::c_char);
    pub fn UnreserveEXI2Port();
    pub fn TRKReadUARTPoll(param_1: *mut undefined) -> ::core::ffi::c_int;
    pub fn WriteUART1(param_1: undefined) -> undefined4;
    pub fn WriteUARTFlush() -> ::core::ffi::c_int;
    pub fn TRKInitializeIntDrivenUART() -> undefined4;
    pub fn InitMetroTRKCommTable(param_1: ::core::ffi::c_int);
    pub fn TRKEXICallBack(
        param_1: undefined4,
        param_2: *mut undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn TRKTargetContinue(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    ) -> undefined4;
    pub fn SetUseSerialIO(param_1: undefined);
    pub fn __position_file() -> undefined4;
    pub fn __close_file() -> undefined4;
    pub fn __write_file(
        param_1: undefined4,
        param_2: undefined4,
        param_3: *mut undefined4,
    ) -> undefined4;
    pub fn __TRK_write_console(
        param_1: undefined4,
        param_2: undefined4,
        param_3: *mut undefined4,
    ) -> undefined4;
    pub fn DBWrite(param_1: *mut undefined4, param_2: uint) -> undefined4;
    pub fn DBRead(param_1: *mut undefined4, param_2: ::core::ffi::c_int) -> undefined4;
    pub fn DBQueryData() -> uint;
    pub fn DBInitInterrupts();
    pub fn DBInitComm(param_1: *mut undefined4, param_2: undefined4);
    pub fn DBGHandler(param_1: ::core::ffi::c_short);
    pub fn MWCallback();
    pub fn DBGReadStatus(param_1: *mut byte) -> uint;
    pub fn DBGWrite(param_1: uint, param_2: *mut undefined4, param_3: ::core::ffi::c_int) -> uint;
    pub fn DBGRead(param_1: uint, param_2: *mut undefined4, param_3: ::core::ffi::c_int) -> uint;
    pub fn DBGEXIImm(
        param_1: *mut byte,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn load_additional_rel(
        rel_filepath: *mut ::core::ffi::c_char,
        rel_buffer_ptrs: *mut RelBufferInfo,
    );
    pub fn g_purge_rel(rel_buffer_info: *mut RelBufferInfo);
    pub fn g_purge_rel2();
    pub fn main_loop_prolog();
    pub fn main_loop_epilog();
    pub fn main_loop_unlinked_func();
    pub fn g_something_with_sound6_and_stop_pad_motors_callback();
    pub fn g_something_with_card_callback();
    pub fn g_something_with_sound11_callback();
    pub fn revert_console_reset_callback();
    pub fn console_reset_callback_impl() -> uint;
    pub fn g_init_some_stuff();
    pub fn cd_to_dvd_root2();
    pub fn cd_to_dvd_root();
    pub fn g_create_initial_main_heap();
    pub fn g_remake_initial_main_heap_somehow();
    pub fn g_setup_and_create_game_heaps();
    pub fn g_something_with_sound7_and_game_heaps(param_1: ::core::ffi::c_int);
    pub fn create_game_heaps(heap_config_idx: ::core::ffi::c_int);
    pub fn destroy_game_heaps();
    pub fn alloc_from_heap_or_panic(
        heap: OSHeapHandle,
        size: u32_,
        file: *mut ::core::ffi::c_char,
        line: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_void;
    pub fn g_set_some_initial_state();
    pub fn mode_tick();
    pub fn g_something_with_title_debug_menu() -> undefined4;
    pub fn handle_start_button_with_debug_mode();
    pub fn handle_start_button_no_debug_mode();
    pub fn smd_null();
    pub fn set_sub_mode_destination(func: *mut ::core::ffi::c_void);
    pub fn call_then_reset_sub_mode_destination();
    pub fn get_next_player_idx() -> uint;
    pub fn g_get_next_stage_id() -> ::core::ffi::c_int;
    pub fn g_construct_pause_menu_sprite(param_1: ::core::ffi::c_int);
    pub fn g_check_input_in_pausemenu(param_1: ::core::ffi::c_int);
    pub fn handle_pausemenu_selection(param_1: ::core::ffi::c_int);
    pub fn g_pause_game();
    pub fn init_events();
    pub fn tick_events();
    pub fn event_init(event_id: EventID);
    pub fn event_dest(event_id: EventID);
    pub fn event_freeze(event_id: EventID);
    pub fn event_restart(event_id: EventID);
    pub fn dest_all_events();
    pub fn polydisp_main();
    pub fn draw_func_handler();
    pub fn adv_draw_func_handler();
    pub fn game_main_draw_func();
    pub fn g_draw_world_child();
    pub fn game_extra_draw_func();
    pub fn game_result_draw_func();
    pub fn handle_test_camera();
    pub fn g_set_clear_color();
    pub fn g_smth_with_bg_color_drawing(param_1: GXColor);
    pub fn g_draw_func_init();
    pub fn g_something_with_view_stage();
    pub fn take_pausemenu_screenshot(
        out_image_buffer: *mut ::core::ffi::c_void,
        src_left_px: undefined4,
        src_top_px: undefined4,
        width_px: ::core::ffi::c_short,
        height_px: ::core::ffi::c_short,
        fmt: GXTexFmt,
    );
    pub fn init_pausemenu_screenshot_texobj(param_1: *mut GXTexObj);
    pub fn g_draw_pausemenu_screenshot(tex: *mut GXTexObj);
    pub fn md_adv_func();
    pub fn smd_adv_logo_init();
    pub fn smd_adv_logo_tick();
    pub fn smd_adv_demo_init();
    pub fn smd_adv_demo_tick();
    pub fn test_mode_sub_mode_handler();
    pub fn smd_adv_movie_return();
    pub fn g_smth_with_adv_sprites_and_stage_loading(param_1: s32);
    pub fn smd_adv_title_init();
    pub fn smd_adv_title_reinit();
    pub fn smd_adv_title_tick();
    pub fn smd_adv_info_init();
    pub fn smd_adv_info_tick();
    pub fn caseD_f3();
    pub fn smd_adv_game_ready_init();
    pub fn smd_adv_game_ready_tick();
    pub fn smd_adv_game_play_init();
    pub fn smd_adv_game_play_tick();
    pub fn smd_adv_ranking_init();
    pub fn smd_adv_ranking_tick();
    pub fn return_0x2c() -> undefined4;
    pub fn smd_adv_start_init();
    pub fn smd_adv_start_tick();
    pub fn g_init_some_globals_for_adv();
    pub fn smd_adv_prog_init();
    pub fn smd_adv_prog_tick();
    pub fn smd_adv_first_logo_init();
    pub fn smd_adv_first_logo_tick();
    pub fn g_maybe_draw_sega_splash();
    pub fn g_something_with_loading_stages_on_gamestart();
    pub fn g_something_w_adv_demo_init();
    pub fn adv_demo_tick_function() -> undefined4;
    pub fn g_camera_func30_child(camera: *mut Camera);
    pub fn create_demo_mes_sprite();
    pub fn sprite_demo_mes_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_demo_mes_disp(param_1: *mut Sprite);
    pub fn create_demo_mask_sprites();
    pub fn sprite_demo_mask_banana_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn g_set_lots_of_initial_state();
    pub fn md_sel_func();
    pub fn smd_sel_ngc_dest();
    pub fn g_return_to_sel_mode(param_1: undefined4);
    pub fn g_load_stage_for_menu_bg(param_1: ::core::ffi::c_char, param_2: ::core::ffi::c_int);
    pub fn g_set_some_sel_ngc_global_func_ptrs(
        func1: *mut ::core::ffi::c_void,
        func2: *mut ::core::ffi::c_void,
        func3: *mut ::core::ffi::c_void,
        func4: *mut ::core::ffi::c_void,
    );
    pub fn smd_sel_ngc_init();
    pub fn smd_sel_ngc_tick();
    pub fn g_sel_draw_func_handler();
    pub fn g_sel_ngc_sub_mode_destination();
    pub fn init_cameras();
    pub fn event_camera_init();
    pub fn event_camera_tick();
    pub fn g_some_camera_parent_func(
        param_1: undefined,
        param_2: undefined,
        param_3: undefined,
        param_4: undefined,
        param_5: undefined,
        param_6: undefined,
        param_7: undefined,
        param_8: undefined,
        param_9: undefined4,
        param_10: undefined4,
        param_11: undefined4,
        param_12: undefined8,
        param_13: undefined8,
        param_14: undefined8,
        param_15: undefined8,
        param_16: undefined4,
        param_17: undefined4,
    );
    pub fn event_camera_dest();
    pub fn enable_camera(camera_idx: ::core::ffi::c_int);
    pub fn disable_all_cameras();
    pub fn g_something_setting_camera_status();
    pub fn set_camera_view_settings(
        viewport_pos_x: f32,
        viewport_pos_y: f32,
        viewport_size_x: f32,
        viewport_size_y: f32,
        camera_idx: undefined4,
    );
    pub fn g_something_with_camera2(player_number: ::core::ffi::c_int);
    pub fn g_some_camera_setup_function();
    pub fn g_smth_with_camera_and_reflective_objects(param_1: ::core::ffi::c_int);
    pub fn g_something_with_cameras();
    pub fn g_set_mode_of_all_cameras_optionally(param_1: u8_);
    pub fn g_set_camera_mode(param_1: uint, mode: byte);
    pub fn g_camera_func27(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func28(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func29(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func30(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func54(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func55(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func43(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func12(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func13(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func52(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func53(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func80(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func81_mainmenu(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func87(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func88(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func10(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func11_spinin(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func38(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func0(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func1(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func2(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func3_setup(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func62(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func4_fallout(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func5(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func6(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func7(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func8(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func9(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func14(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func15_goal(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func16(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func17(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func18(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func19(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func20(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func21(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func22_23_24_timeover(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func25(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func26(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func31(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func32(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func33(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func34(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func35(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func36(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func37(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func39(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func40(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func41(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func42(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func44(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func45(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func46(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func47(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func48(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func49(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func50(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func51(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func56(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func57(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func63(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func66(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func68(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func69(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func70(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func71(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func72(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func73(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_default_func(camera: *mut Camera, ball: *mut Ball);
    pub fn g_main_camera_function_func75(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func76_gameplay(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func82(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func83(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func84(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func85(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func91(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func92(camera: *mut Camera, ball: *mut Ball);
    pub fn g_is_sphere_visible(radius: undefined8, center: *mut Vec) -> bool_;
    pub fn g_is_sphere_visible_scaled(radius: f64, g_scale: f64, center: *mut Vec) -> bool_;
    pub fn g_init_lights();
    pub fn g_something_to_do_with_lights();
    pub fn g_some_stage_init_func(param_1: *mut ::core::ffi::c_void) -> undefined4;
    pub fn g_set_active_light_group(g_smth_with_lights: ::core::ffi::c_int);
    pub fn get_active_light_group() -> undefined4;
    pub fn push_light_group();
    pub fn pop_light_group();
    pub fn g_set_light_color_maybe(
        param_1: f64,
        param_2: f64,
        param_3: f64,
        param_4: ::core::ffi::c_int,
    );
    pub fn g_smth_with_avdisp_globals(param_1: f64, param_2: f64, param_3: f64);
    pub fn g_something_with_gx_modes_and_compare();
    pub fn gx_finish_frame_and_reset_z_and_alpha_compare_modes();
    pub fn g_something_with_graphics_processor2();
    pub fn g_something_with_video_this_also_finishes_a_frame();
    pub fn gp_wait_wrapper();
    pub fn get_gx_fifo_use_size() -> u32_;
    pub fn g_reset_cm_course();
    pub fn event_info_init();
    pub fn event_info_tick();
    pub fn event_info_dest();
    pub fn g_reset_mode_info_stuff();
    pub fn did_ball_enter_goal(
        ball: *mut Ball,
        out_stage_goal_idx: *mut ::core::ffi::c_int,
        out_itemgroup_id: *mut ::core::ffi::c_int,
        out_goal_flags: *mut byte,
    ) -> bool_;
    pub fn did_ball_enter_wormhole(
        ball: *mut Ball,
        out_wormhole_idx: *mut ::core::ffi::c_int,
    ) -> BOOL32;
    pub fn g_set_goaled();
    pub fn sprite_bonus_plus000_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_bonus_banana_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_ranking_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_ranking_disp();
    pub fn create_ranking_sprite(ball: *mut Ball);
    pub fn g_something_with_goals_and_ball(
        ball: *mut Ball,
        goal_idx: ::core::ffi::c_int,
        ig_idx: ::core::ffi::c_int,
        param_4: undefined,
    );
    pub fn did_ball_fallout(ball: *mut Ball) -> BOOL32;
    pub fn g_something_playing_soundeffects(ball: *mut Ball);
    pub fn g_load_init_common();
    pub fn g_load_minigame_gma_tpl(param_1: ::core::ffi::c_int);
    pub fn g_something_with_loading_wl_tpls(world_number: ::core::ffi::c_int);
    pub fn g_load_efcmdl_gmatpl();
    pub fn load_efcmdl_files_from_disc();
    pub fn g_something_freeing_heap_parent();
    pub fn process_inputs();
    pub fn threshold_analog_inputs();
    pub fn g_calc_frames_since_last_input_change();
    pub fn merge_inputs();
    pub fn g_some_bmp_init_func();
    pub fn load_bmp(filepath: *mut ::core::ffi::c_char) -> *mut TplBuffer;
    pub fn load_bmp_by_id_child(g_idx: ::core::ffi::c_int);
    pub fn g_something_with_freeing_memory(param_1: ::core::ffi::c_int);
    pub fn free_nl2ngc_tpl_buf_to_heap(param_1: *mut TplBuffer);
    pub fn g_zero_some_sprite_related_state();
    pub fn g_some_sprite_reset_gx_state_func();
    pub fn draw_ui();
    pub fn g_draw_sprite_requests_from_buffer();
    pub fn g_get_bmp_width(param_1: uint) -> u16_;
    pub fn g_get_bmp_height(param_1: uint) -> u16_;
    pub fn init_ui_element_sprite_with_defaults();
    pub fn set_ui_element_sprite_pos(x: f64, y: f64);
    pub fn set_ui_element_sprite_depth(depth: f64);
    pub fn g_set_ui_element_sprite_flags(param_1: SpriteDrawReqFlags);
    pub fn set_ui_element_sprite_scale(x: f64, y: f64);
    pub fn set_ui_element_sprite_mult_color_from_u32(param_1: u32_);
    pub fn set_ui_element_sprite_mult_color(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: uint,
        param_4: uint,
    );
    pub fn set_ui_element_sprite_add_color_from_u32(param_1: u32_);
    pub fn set_ui_element_sprite_add_color(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: uint,
        param_4: uint,
    );
    pub fn set_ui_element_sprite_alpha(alpha: f64);
    pub fn set_ui_element_sprite_rot_z(param_1: s32);
    pub fn g_set_some_ui_element_sprite_flag(param_1: SpriteDrawReqFlags);
    pub fn draw_ui_element(texture_id: s32);
    pub fn draw_ui_box(g_texture_id: uint);
    pub fn draw_ui_box_only_borders(param_1: uint);
    pub fn perf_init_timer(timer_id: ::core::ffi::c_int);
    pub fn perf_stop_timer(timer_id: ::core::ffi::c_int) -> uint;
    pub fn g_init_perf_profiling();
    pub fn g_perf_finish_frame();
    pub fn g_perf_start_frame();
    pub fn g_reset_draw_perf_counters();
    pub fn g_printf_sound_error(
        is_error: BOOL32,
        origin: *mut ::core::ffi::c_char,
        g_error_format: undefined4,
        ...
    );
    pub fn try_alloc_memory_for_sound(size: u32_) -> *mut ::core::ffi::c_void;
    pub fn g_OSFree_wrapper(param_1: *mut ::core::ffi::c_void);
    pub fn init_sound();
    pub fn g_something_with_music_fading();
    pub fn hwExit_wrapper();
    pub fn ReadMusyXData(param_1: undefined);
    pub fn g_something_calls_sndPopGroup();
    pub fn g_something_calls_sndPopGroup_2();
    pub fn event_sound_init();
    pub fn event_sound_tick();
    pub fn event_sound_dest();
    pub fn g_smth_called_by_event_tick_sound_1(
        param_1: ::core::ffi::c_char,
        param_2: ::core::ffi::c_short,
    ) -> f64;
    pub fn g_smth_called_by_event_tick_sound_2();
    pub fn g_set_smth_with_sound(param_1: undefined);
    pub fn g_smth_calls_sndFXStartParaInfo(cue: *mut GSoundCue);
    pub fn g_something_with_volume(
        param_1: *mut uint,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn g_something_calls_sndFXKeyOff(
        param_1: uint,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn SoundReq(g_some_id: uint) -> ::core::ffi::c_int;
    pub fn SoundReqDirect(sfx_id: uint) -> ::core::ffi::c_int;
    pub fn SoundReqID(g_sfx_id: uint, param_2: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn call_SoundReqID_arg_0(g_sfx_id: u32_);
    pub fn call_SoundReqID_arg_1(g_sfx_id: uint);
    pub fn call_SoundReqID_arg_2(g_sfx_id: uint);
    pub fn call_SoundReqID_arg_1_copy(param_1: uint);
    pub fn SoundOff(param_1: uint);
    pub fn SoundVol(param_1: uint, param_2: byte);
    pub fn SoundPan(param_1: uint, param_2: ::core::ffi::c_char, param_3: ::core::ffi::c_char);
    pub fn SoundPitch(param_1: uint, param_2: uint);
    pub fn SoundDop(param_1: uint, param_2: uint);
    pub fn SoundMod(param_1: uint, param_2: uint);
    pub fn SoundRev(param_1: uint, param_2: byte);
    pub fn SoundCho(param_1: uint, param_2: byte);
    pub fn SoundOffID(param_1: ::core::ffi::c_int) -> bool_;
    pub fn SoundVolID(param_1: ::core::ffi::c_int, param_2: byte);
    pub fn SoundPanID(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_char,
        param_3: ::core::ffi::c_char,
    );
    pub fn SoundRevID(param_1: ::core::ffi::c_int, param_2: byte);
    pub fn SoundChoID(param_1: ::core::ffi::c_int, param_2: byte);
    pub fn SoundCheckStateID(param_1: ::core::ffi::c_int) -> uint;
    pub fn SoundIcsReq(param_1: uint, param_2: byte, param_3: ::core::ffi::c_char);
    pub fn g_fade_track_volume(volume: u32_, param_2: u8_);
    pub fn get_smgr_port(
        param_1: ::core::ffi::c_char,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_char,
        param_4: *mut ::core::ffi::c_short,
    ) -> ::core::ffi::c_int;
    pub fn g_something_with_bgm();
    pub fn g_crossfade_music();
    pub fn SoftStreamSEReq(
        param_1: ::core::ffi::c_char,
        sfx_id: ::core::ffi::c_int,
        sfx_volume: u32_,
        sfx_pan_L: uint,
        sfx_pan_R: uint,
    );
    pub fn call_SoftStreamSEReq_arg_0(
        sfx_id: ::core::ffi::c_int,
        sfx_volume: uint,
        sfx_pan_L: uint,
        sfx_pan_R: uint,
    );
    pub fn g_stop_music_sound_debug(param_1: ::core::ffi::c_int);
    pub fn g_some_dvd_read_async_sound_callback2(
        param_1: undefined4,
        param_2: *mut DVDCommandBlock,
    );
    pub fn SoftStreamStart(g_looping_state: u32_, g_bgm_id: BgmTrack, param_3: u32_) -> s32;
    pub fn g_SoftStreamStart_with_some_defaults(param_1: BgmTrack);
    pub fn g_SoftStreamStart_with_some_defaults_2(param_1: BgmTrack);
    pub fn g_another_SoftStreamStart_wrapper_of_some_sort(param_1: BgmTrack, param_2: u32_);
    pub fn play_track_and_fade_out_other_tracks(
        param_1: undefined4,
        param_2: undefined4,
        volume: byte,
    ) -> undefined4;
    pub fn g_smth_related_to_music(
        param_1_00: s32,
        param_2_00: s32,
        param_3_00: s32,
        param_4: u8_,
        param_5: u8_,
    ) -> s32;
    pub fn g_handle_world_bgm(g_volume: u32_);
    pub fn g_something_with_stopping_music_or_sfx(param_1: BgmTrack);
    pub fn g_maybe_related_to_music_crossfading(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn g_check_current_track(track_id: BgmTrack) -> undefined4;
    pub fn g_maybe_smth_with_music(param_1: s32, param_2: u8_);
    pub fn g_change_music_volume(param_1: s32, param_2: s32, volume: u8_);
    pub fn SoundEffectInit();
    pub fn g_something_with_sound9();
    pub fn g_snd_dbg_call_sndAuxCallbackupdateSettingsReverbHI_1(param_1: *mut undefined4);
    pub fn g_snd_dbg_call_sndAuxCallbackUpdateSettingsChorus_2(param_1: *mut undefined4);
    pub fn g_snd_dbg_call_sndAuxCallbackUpdateSettingsReverbHI_2();
    pub fn g_snd_dbg_call_sndAuxCallbackUpdateSettingsChorus_1();
    pub fn g_set_some_sound_data();
    pub fn g_something_with_sound6();
    pub fn g_something_with_sound11();
    pub fn g_something_with_sound4(
        param_1: *mut undefined,
        param_2: undefined4,
        param_3: undefined,
        param_4: undefined,
        param_5: undefined,
        param_6: undefined,
    ) -> uint;
    pub fn g_smgr_allocate_stereo(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined,
        param_4: undefined,
        param_5: *mut ::core::ffi::c_char,
        param_6: *mut ::core::ffi::c_char,
        param_7: ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn g_some_dvd_read_async_sound_callback(result: s32, file_info: *mut DVDFileInfo);
    pub fn event_adx_init(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: undefined4,
        param_10: undefined4,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn event_adx_tick(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn event_adx_dest();
    pub fn g_adx_error_call_back(param_1: undefined4, param_2: undefined4);
    pub fn g_draw_ingame_debug_menu(param_1: *mut uint, param_2: ::core::ffi::c_int);
    pub fn g_draw_debug_window_boundaries(param_1: *mut uint);
    pub fn draw_debugtext();
    pub fn window_init();
    pub fn g_something_with_replays3();
    pub fn debug_textdraw_set_pos(g_x_pos: uint, g_y_pos: uint);
    pub fn debug_window_printf(param_1: undefined, format: *mut ::core::ffi::c_char, ...);
    pub fn debug_textdraw_set_color(color: u8);
    pub fn debug_textdraw_put(buffer_idx: ::core::ffi::c_int, string: *mut ::core::ffi::c_char);
    pub fn g_set_up_debugtext_buffer();
    pub fn debug_textdraw_vsprintf_buf_0(fmt: *mut ::core::ffi::c_char, ...) -> undefined4;
    pub fn debug_textdraw_vsprintf_buf_1(format: *mut ::core::ffi::c_char, ...);
    pub fn debug_textdraw_put_buf_1(text: *mut ::core::ffi::c_char);
    pub fn g_some_printf_function_2(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: undefined4,
        param_10: *mut ::core::ffi::c_char,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    ) -> undefined4;
    pub fn draw_debugtext_char_en(x: u32_, y: u32_, ch: ::core::ffi::c_char, color_rrggbbaa: u8_);
    pub fn draw_debugtext_char_jp(x: u32_, y: u32_, ch: *mut byte, color_unknown_format: uint);
    pub fn draw_debugtext_window_bg(x1: f64, y1: f64, x2: f64, y2: f64);
    pub fn g_is_sjis_and_more_than_24_mib() -> bool_;
    pub fn g_debug_print_ape(
        param_1: ::core::ffi::c_int,
        param_2: undefined4,
        param_3: ::core::ffi::c_int,
    );
    pub fn debug_overlay_draw_fifo();
    pub fn unset_all_dip_switches();
    pub fn g_check_debug_mode_input();
    pub fn pool_init();
    pub fn pool_tick();
    pub fn pool_update_idxs_of_all_pools();
    pub fn pool_update_idxs(tlm: *mut PoolInfo, event_filter: EventID);
    pub fn g_do_nothing();
    pub fn pool_alloc(tlm: *mut PoolInfo, status: u8_) -> ::core::ffi::c_int;
    pub fn pool_clear(info: *mut PoolInfo);
    pub fn g_set_some_draw_values(param_1: f32, param_2: f32, param_3: f32);
    pub fn nl2ngc(
        out_nl_buffer: *mut *mut NlBuffer,
        out_tpl_buffer: undefined4,
        p_lz_path: *mut ::core::ffi::c_char,
        lz_path: *mut ::core::ffi::c_char,
    );
    pub fn g_nl2ngc_gma_func(nl_buf: *mut NlBuffer) -> undefined4;
    pub fn g_nl2ngc_tpl_func(param_1: *mut NlBuffer, param_2: *mut TplBuffer);
    pub fn g_nl_model_draw_func(param_1: *mut GmaModel);
    pub fn nl2ngc_set_fog_params(param_1: f64, param_2: f64, param_3: undefined4);
    pub fn nl2ngc_set_fog_color(r: u8_, g: u8_, b: u8_);
    pub fn g_ape_upright(ball: *mut Ape);
    pub fn g_move_ape_into_ball(ape: *mut Ape);
    pub fn g_default_ape_draw(
        ape: *mut Ape,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn event_ball_init();
    pub fn g_call_maybe_sets_number_of_starting_monkeys(ball: *mut Ball);
    pub fn create_stage_player(
        player_index: byte,
        physicsmode: BallMode,
        ape_id: byte,
        color_idx: byte,
        LOD: uint,
        draw_func: *mut ::core::ffi::c_void,
        g_variant: ::core::ffi::c_int,
    );
    pub fn g_create_stage_player_wrapper(
        player_index: byte,
        physicsMode: BallMode,
        ape_id: byte,
        param_4: byte,
        LOD: ApeLOD,
        draw_func: *mut ::core::ffi::c_void,
    );
    pub fn challenge_mode_init();
    pub fn event_ball_tick();
    pub fn event_ball_dest();
    pub fn add_bananas(bananas_to_add: ::core::ffi::c_int);
    pub fn g_something_with_translating_items(
        param_1: f64,
        param_2: ::core::ffi::c_int,
        param_position: *mut Vec,
    );
    pub fn g_maybe_sets_number_of_starting_monkeys(ball: *mut Ball);
    pub fn g_reset_ball(in_ball: *mut Ball);
    pub fn ball_physics_g_something_w_postgoal_slowdown(param_1: *mut Ball);
    pub fn ball_physics_g_something_w_postgoal_blast_up(param_1: *mut Ball);
    pub fn g_ball_mode_play_replay(ball: *mut Ball);
    pub fn ball_physics_g_something_w_poastgoal_slowdown_blast_up(param_1: *mut Ball);
    pub fn ball_physics_g_something_w_postgoal_blast_up2(ball: *mut Ball);
    pub fn g_move_and_collide(ball: *mut Ball, physicsBall: *mut PhysicsBall);
    pub fn g_apply_ball_velocity(ball: *mut Ball);
    pub fn collide_with_stage(ball: *mut Ball, physicsball: *mut PhysicsBall);
    pub fn position_ball(ball: *mut Ball, phys_ball: *mut PhysicsBall);
    pub fn set_ball_properties(ball: *mut Ball, constants_idx: ::core::ffi::c_int);
    pub fn ball_collision_stars(ball: *mut Ball);
    pub fn init_physicsball_from_ball(ball: *mut Ball, physicsball: *mut PhysicsBall);
    pub fn g_copy_physicsball_to_ball(ball: *mut Ball, physicsball: *mut PhysicsBall);
    pub fn g_ball_ape_rotation(ball: *mut Ball);
    pub fn spawn_postgoal_ball_sparkle();
    pub fn g_some_ballfunc(param_1: *mut Ball);
    pub fn ball_sounds_gameplay(ball: *mut Ball);
    pub fn ball_movement_sparks(ball: *mut Ball) -> *mut G_BallMode;
    pub fn set_visual_scale(ball: *mut Ball);
    pub fn g_draw_ball_and_ape();
    pub fn g_something_with_view_stage_and_ball();
    pub fn g_some_ball_stage_coli_func(
        physicsball: *mut PhysicsBall,
        stagedef: *mut StagedefFileHeader,
    ) -> *mut undefined4;
    pub fn meshcoli_grid_lookup(x: f32, z: f32, coli_header: *mut StagedefColiHeader)
        -> undefined4;
    pub fn stcoli_sub03(physicsball: *mut PhysicsBall, tri: *mut StagedefColiTri);
    pub fn stcoli_sub04(physball: *mut PhysicsBall, tri: *mut StagedefColiTri);
    pub fn stcoli_sub05(
        param_1: *mut PhysicsBall,
        param_2: *mut Vec,
        param_3: *mut Vec,
        param_4: *mut f32,
    );
    pub fn stcoli_sub06(physball: *mut PhysicsBall, tri: *mut StagedefColiTri);
    pub fn stcoli_sub07(
        param_1: *mut PhysicsBall,
        param_2: *mut f32,
        param_3: *mut f32,
    ) -> undefined8;
    pub fn g_some_jamabar_coli_func(physicsball: *mut PhysicsBall, param_2: *mut f32);
    pub fn g_cylinder_coli_something(
        physball: *mut PhysicsBall,
        cylinder: *mut StagedefColiCylinder,
    );
    pub fn stcoli_sub10(param_1: *mut PhysicsBall, param_2: *mut Vec);
    pub fn g_sphere_coli_something(param_1: *mut PhysicsBall, param_2: *mut StagedefColiSphere);
    pub fn g_cone_coli_something(param_1: *mut PhysicsBall, param_2: *mut StagedefColiCone);
    pub fn g_something_with_physicsball_restitution(
        physicsball: *mut PhysicsBall,
        param_2: *mut Vec,
    );
    pub fn line_intersects_rect(lineStart: *mut Vec, lineEnd: *mut Vec, rect: *mut Rect) -> BOOL32;
    pub fn stobj_jamabar_child_coli(physicsball: *mut PhysicsBall, stobj: *mut Stobj);
    pub fn raycast_stage_down(
        origin: *mut Vec,
        out_hit: *mut RaycastHit,
        out_vel_at_point: *mut Vec,
    );
    pub fn raycast_tri(
        line_origin: *mut Vec,
        line_dir: *mut Vec,
        tri: *mut StagedefColiTri,
    ) -> BOOL32;
    pub fn raycast_cone(
        line_origin: *mut Vec,
        line_dir: undefined4,
        cone: *mut StagedefColiCone,
        out_hit_pos: *mut Vec,
        out_hit_normal: *mut Vec,
    ) -> BOOL32;
    pub fn raycast_sphere(
        line_origin: *mut Vec,
        line_dir: *mut Vec,
        sphere: *mut StagedefColiSphere,
        out_hit_pos: *mut Vec,
        out_hit_normal: *mut Vec,
    ) -> BOOL32;
    pub fn raycast_cylinder(
        line_origin: undefined4,
        line_dir: undefined4,
        cylinder: *mut StagedefColiCylinder,
        out_hit_pos: undefined4,
        out_hit_normal: undefined4,
    ) -> BOOL32;
    pub fn g_goal_coli_something(param_1: *mut PhysicsBall, param_2: *mut StagedefGoal) -> uint;
    pub fn stcoli_sub22(param_1: *mut PhysicsBall, param_2: *mut Vec);
    pub fn stcoli_sub24(param_1: *mut PhysicsBall, param_2: *mut Vec);
    pub fn stcoli_sub25(
        param_1: *mut PhysicsBall,
        param_2: ::core::ffi::c_int,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn g_draw_stage_collision();
    pub fn stcoli_sub27(param_1: ::core::ffi::c_int);
    pub fn stcoli_sub28(param_1: *mut Vec);
    pub fn stcoli_sub29(
        param_1: *mut f32,
        param_2: *mut f32,
        param_3: *mut f32,
        param_4: *mut f32,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn tf_physicsball_by_mtxa(physicsball1: *mut PhysicsBall, physicsball2: *mut PhysicsBall);
    pub fn inv_tf_physicsball_by_mtxa(
        src_physicsball: *mut PhysicsBall,
        dest_physicsball: *mut PhysicsBall,
    );
    pub fn tf_physball_to_itemgroup_space(
        physicsball: *mut PhysicsBall,
        itemgroup_idx: ::core::ffi::c_int,
    );
    pub fn g_something_w_ig_and_coli_headers(
        ig_list: *mut Itemgroup,
        coli_header_list: *mut StagedefColiHeader,
        param_3: undefined4,
        physicsball_x: *mut Vec,
    ) -> uint;
    pub fn g_something_w_ig_and_coli_headers_2(
        ig_list: *mut Itemgroup,
        coli_header_list: *mut StagedefColiHeader,
        physicsball_pos: *mut Vec,
    ) -> undefined4;
    pub fn event_world_init();
    pub fn event_world_tick();
    pub fn event_world_dest();
    pub fn evaluate_stagedef_keyframe(
        g_anim_frame: f64,
        count: ::core::ffi::c_int,
        keyframe: *mut StagedefAnimKeyframe,
    ) -> f64;
    pub fn event_stage_init();
    pub fn event_stage_tick();
    pub fn event_stage_dest();
    pub fn g_advance_itemgroup_anim_frame(
        itemgroup: *mut Itemgroup,
        colis_header: *mut StagedefColiHeader,
    ) -> f64;
    pub fn g_advance_stage_animation();
    pub fn g_transform_some_itemgroup_vec();
    pub fn get_GmaBuffer_entry(
        buffer: *mut GmaBuffer,
        name: *mut ::core::ffi::c_char,
    ) -> *mut GmaModel;
    pub fn g_stgname_init();
    pub fn init_itemgroups();
    pub fn load_stage(stage_id: ::core::ffi::c_int);
    pub fn unload_stage();
    pub fn queue_stage_load(stage_number: uint);
    pub fn g_load_stage_gma_tpl_lz(stage_id: u32_);
    pub fn g_handle_bonus_wave_collision(
        param_1: *mut f32,
        param_2: *mut f32,
        param_3: *mut f32,
    ) -> undefined4;
    pub fn get_stage_world_theme(stage_id: ::core::ffi::c_int) -> WorldTheme;
    pub fn g_smth_with_stage_anim_groups(anim_group_id: ::core::ffi::c_int, param_2: uint);
    pub fn g_smth_with_buttons(anim_group_id: ::core::ffi::c_int, param_2: uint) -> BOOL32;
    pub fn g_init_smth_with_seesaws();
    pub fn get_seesaw_replay_state_size(seesaw_info: *mut SeesawInfo) -> undefined4;
    pub fn g_smth_with_stage_fog(param_1: f64);
    pub fn is_stage_id_not_for_party_game(stage_id: ::core::ffi::c_int) -> bool_;
    pub fn seesaw_init(seesaw_info: *mut SeesawInfo);
    pub fn seesaw_dest();
    pub fn seesaw_tick(seesaw_info: *mut SeesawInfo);
    pub fn seesaw_coli(seesaw_info: *mut SeesawInfo, param_2: ::core::ffi::c_int);
    pub fn g_seesaw_func5(param_1: ::core::ffi::c_int, param_2: *mut undefined4);
    pub fn g_seesaw_replay_smth(
        param_1: f64,
        param_2: *mut ::core::ffi::c_short,
        param_3: ::core::ffi::c_int,
    );
    pub fn g_init_smth_with_stage_models();
    pub fn g_draw_stage_models();
    pub fn g_draw_goalpost_models();
    pub fn g_draw_wormhole_models();
    pub fn g_draw_generator_models();
    pub fn g_draw_start_position_marker();
    pub fn g_draw_stage();
    pub fn g_draw_collision_triangles();
    pub fn is_stage_id_348_revolution() -> bool_;
    pub fn g_special_handler_for_st348_revolution();
    pub fn g_handle_hardcoded_special_case_stages();
    pub fn g_special_load_for_st348();
    pub fn g_smth_hardcoded_for_meltingpot();
    pub fn g_smth_hardcoded_for_totalitarianism_and_meltingpot();
    pub fn g_smth_hardcoded_for_st340();
    pub fn g_smth_hardcoded_for_trainworm_and_nintendo();
    pub fn g_init_shadows();
    pub fn g_smth_with_viewstage_and_whs();
    pub fn g_something_with_shadow_cast() -> ::core::ffi::c_int;
    pub fn g_load_stgname_file(locale_index: ::core::ffi::c_int);
    pub fn g_load_stgname_dvd_entrynum(stgname_dvd_entrynum: s32) -> undefined4;
    pub fn g_get_storymode_stage_name_buf_size() -> ::core::ffi::c_int;
    pub fn g_queue_stage_name_load() -> bool_;
    pub fn g_read_storymode_select_stage_names_from_dvd(
        param_1: *mut ::core::ffi::c_int,
    ) -> undefined4;
    pub fn read_stage_name_from_dvd(
        stage_id: ::core::ffi::c_int,
        out_stage_name: *mut ::core::ffi::c_char,
        out_stage_name_buf_size: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
    pub fn load_stage_models();
    pub fn init_seesaws();
    pub fn load_stagedef(stage_id: u32_);
    pub fn g_free_stage();
    pub fn g_something_with_replays5();
    pub fn event_recplay_init();
    pub fn event_recplay_tick();
    pub fn event_recplay_dest();
    pub fn g_something_with_recplay2();
    pub fn g_something_with_recplay3(param_1: ::core::ffi::c_int);
    pub fn g_smth_with_replay_playback(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn is_itemgroup_playable(itemgroup_idx: u32_) -> bool_;
    pub fn get_playable_itemgroup_count() -> u32_;
    pub fn compute_playable_itemgroup_count() -> u32_;
    pub fn g_smth_with_wormhole_replays(ball_idx: ::core::ffi::c_int);
    pub fn g_get_replay_frame_data(
        replay_frames_remaining: f64,
        param_2: ::core::ffi::c_int,
        position_out: *mut Vec,
    );
    pub fn g_smth_with_seesaws_and_replays(
        param_1: ::core::ffi::c_int,
        param_2: uint,
        param_3: uint,
        param_4: *mut ::core::ffi::c_void,
    );
    pub fn g_something_with_stage_world_themes(param_1: ::core::ffi::c_int);
    pub fn g_something_with_replays4();
    pub fn g_something_with_replays6(param_1: ::core::ffi::c_int) -> f64;
    pub fn g_something_with_replays(param_1: ::core::ffi::c_int, param_2: *mut ::core::ffi::c_void);
    pub fn g_something_with_bundled_replays();
    pub fn g_LoadRecFile(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int) -> undefined4;
    pub fn g_something_with_replays2(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn g_something_with_score();
    pub fn g_advance_replay2(replay_frames_remaining: f64, param_2: *mut f32);
    pub fn rle_encode(
        input: *mut ::core::ffi::c_void,
        output: *mut ::core::ffi::c_void,
        inputSize: uint,
    ) -> uint;
    pub fn get_compressed_replay_size() -> uint;
    pub fn compress_replay(outCompressedReplay: *mut ::core::ffi::c_void) -> uint;
    pub fn g_smth_with_cmp_recplay(param_1: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
    pub fn init_replay(replay: *mut Replay, stage_time_limit: ::core::ffi::c_int) -> *mut Replay;
    pub fn init_replay_playable_ig_and_seesaw_state(
        replay: *mut Replay,
        param_2: *mut ::core::ffi::c_short,
        param_3: ::core::ffi::c_int,
        playableIgAndSeesawSize: u32_,
    ) -> undefined4;
    pub fn create_replay(stage_time_limit: ::core::ffi::c_int) -> *mut Replay;
    pub fn convert_replay_ptrs_to_offsets(replay: *mut Replay, outReplay: *mut Replay);
    pub fn convert_replay_offsets_to_ptrs(replay: *mut Replay);
    pub fn increment_score(g_some_flag: ::core::ffi::c_int, score: ::core::ffi::c_int);
    pub fn get_goal_score(
        g_jump_dist_ptr: *mut uint,
        g_score_ptr: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn event_effect_init();
    pub fn event_effect_tick();
    pub fn event_effect_dest();
    pub fn g_draw_effects();
    pub fn spawn_effect(effect: *mut Effect) -> ::core::ffi::c_int;
    pub fn overwrite_effect_funcs(
        effect_type: EffectType,
        new_effect_funcs: *mut ::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>,
    );
    pub fn effect_default_init();
    pub fn effect_default_tick();
    pub fn effect_default_disp();
    pub fn effect_default_dest(effect: *mut Effect);
    pub fn effect_paperfrag_init(effect: *mut Effect);
    pub fn effect_paperfrag_tick(param_1: *mut ::core::ffi::c_short);
    pub fn effect_paperfrag_disp(param_1: ::core::ffi::c_int);
    pub fn effect_paperfrag_dest(effect: *mut Effect);
    pub fn effect_get_banana_init(effect: *mut Effect);
    pub fn effect_get_banana_tick(effect: *mut Effect);
    pub fn effect_get_banana_disp(param_1: ::core::ffi::c_int);
    pub fn effect_get_banana_dest(effect: *mut Effect);
    pub fn effect_particle_init_coli(param_1: ::core::ffi::c_int);
    pub fn effect_particle_tick_coli(param_1: ::core::ffi::c_int);
    pub fn effect_particle_disp_coli(param_1: ::core::ffi::c_int);
    pub fn effect_particle_dest_coli(effect: *mut Effect);
    pub fn effect_holding_banana_init(effect: *mut Effect);
    pub fn effect_holding_banana_tick(effect: *mut Effect);
    pub fn effect_holding_banana_disp(effect: *mut Effect);
    pub fn effect_holding_banana_dest(effect: *mut Effect);
    pub fn effect_levitate_init(effect: *mut Effect);
    pub fn effect_levitate_tick(param_1: *mut ::core::ffi::c_short);
    pub fn effect_levitate_disp(param_1: ::core::ffi::c_int);
    pub fn effect_levitate_dest(effect: *mut Effect);
    pub fn effect_colistar_particle_init(effect: *mut Effect);
    pub fn effect_colistar_particle_tick(param_1: ::core::ffi::c_int);
    pub fn effect_colistar_particle_disp(param_1: ::core::ffi::c_int);
    pub fn effect_colistar_particle_dest(effect: *mut Effect);
    pub fn effect_bgwat_bubble_base_init(effect: *mut Effect);
    pub fn effect_bgwat_bubble_base_tick(param_1: ::core::ffi::c_int);
    pub fn effect_bgwat_bubble_base_disp();
    pub fn effect_bgwat_bubble_base_dest(effect: *mut Effect);
    pub fn effect_bgwat_bubble_init(effect: *mut Effect);
    pub fn effect_bgwat_bubble_tick(param_1: ::core::ffi::c_int);
    pub fn effect_bgwat_bubble_disp(param_1: ::core::ffi::c_int);
    pub fn effect_bgwat_bubble_dest(effect: *mut Effect);
    pub fn effect_meteo_init(effect: *mut Effect);
    pub fn effect_meteo_tick(param_1: *mut ::core::ffi::c_short);
    pub fn effect_meteo_disp(param_1: ::core::ffi::c_int);
    pub fn effect_meteo_dest(effect: *mut Effect);
    pub fn effect_meteo_fix_init(effect: *mut Effect);
    pub fn effect_meteo_fix_tick(param_1: ::core::ffi::c_int);
    pub fn effect_meteo_fix_disp(param_1: ::core::ffi::c_int);
    pub fn effect_meteo_fix_dest(effect: *mut Effect);
    pub fn effect_coliflash_init(effect: *mut Effect);
    pub fn effect_coliflash_tick(param_1: ::core::ffi::c_int);
    pub fn effect_coliflash_disp(param_1: ::core::ffi::c_int);
    pub fn effect_coliflash_dest(effect: *mut Effect);
    pub fn effect_bns_stg_star_init(effect: *mut Effect);
    pub fn effect_bns_stg_star_tick(param_1: ::core::ffi::c_int);
    pub fn effect_bns_stg_star_disp(param_1: ::core::ffi::c_int);
    pub fn effect_bns_stg_star_dest(effect: *mut Effect);
    pub fn effect_bns_stg_star_tail_init(param_1: ::core::ffi::c_int);
    pub fn effect_bns_stg_star_tail_tick(effect: *mut Effect);
    pub fn effect_bns_stg_star_tail_disp(param_1: ::core::ffi::c_int);
    pub fn effect_bns_stg_star_tail_dest(effect: *mut Effect);
    pub fn effect_bgmst_gen_cloud_init(param_1: ::core::ffi::c_int);
    pub fn effect_bgmst_gen_cloud_tick(param_1: *mut ushort);
    pub fn effect_bgmst_gen_cloud_disp(param_1: ::core::ffi::c_int);
    pub fn effect_bgmst_gen_cloud_dest(effect: *mut Effect);
    pub fn effect_bgstm_rainripple_init(param_1: ::core::ffi::c_int) -> uint;
    pub fn effect_bgstm_rainripple_tick(param_1: ::core::ffi::c_int);
    pub fn effect_bgstm_rainripple_disp(effect: *mut Effect);
    pub fn effect_bgstm_rainripple_dest(effect: *mut Effect);
    pub fn effect_bgmst_water_init();
    pub fn effect_bgmst_water_tick();
    pub fn effect_bgmst_water_disp(param_1: ::core::ffi::c_int);
    pub fn effect_bgmst_water_dest(effect: *mut Effect);
    pub fn effect_commendfrag_init(param_1: ::core::ffi::c_int);
    pub fn effect_commendfrag_tick(param_1: *mut ::core::ffi::c_short);
    pub fn effect_commendfrag_disp(param_1: ::core::ffi::c_int);
    pub fn effect_commendfrag_dest(effect: *mut Effect);
    pub fn effect_banana_drop_init(param_1: ::core::ffi::c_int);
    pub fn effect_banana_drop_tick(param_1: ::core::ffi::c_int);
    pub fn effect_banana_drop_disp(param_1: ::core::ffi::c_int);
    pub fn effect_banana_drop_dest(effect: *mut Effect);
    pub fn effect_bgend_water_init();
    pub fn effect_bgend_water_tick();
    pub fn effect_bgend_water_disp(param_1: ::core::ffi::c_int);
    pub fn effect_bgend_water_dest(effect: *mut Effect);
    pub fn effect_bgbtmfire_ptcl_init(param_1: ::core::ffi::c_int);
    pub fn effect_bgbtmfire_ptcl_tick(param_1: ::core::ffi::c_int);
    pub fn effect_bgbtmfire_ptcl_disp(param_1: ::core::ffi::c_int);
    pub fn effect_bgbtmfire_ptcl_dest(effect: *mut Effect);
    pub fn effect_piyo_init(param_1: ::core::ffi::c_int);
    pub fn effect_piyo_tick(param_1: *mut ::core::ffi::c_short, param_2: ::core::ffi::c_int);
    pub fn effect_piyo_disp(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn effect_piyo_dest(effect: *mut Effect);
    pub fn event_background_init();
    pub fn event_background_tick();
    pub fn event_background_dest();
    pub fn g_maybe_some_bg_effect_handler();
    pub fn g_draw_bg();
    pub fn g_something_with_world_themes();
    pub fn g_something_with_init_or_maybe_leftover_from_smb1(param_1: ::core::ffi::c_int);
    pub fn g_something_with_stage_world_themes2(theme_id: ::core::ffi::c_int);
    pub fn g_something_with_view_stage_and_bg();
    pub fn call_item_coin_coli_func_for_cur_world_theme();
    pub fn bg_init_base();
    pub fn bg_tick_base();
    pub fn bg_dest_base();
    pub fn bg_disp_base();
    pub fn bg_item_coin_coli_base();
    pub fn g_handle_bg_fg_model_anim(
        bg_model_ptr: *mut StagedefBackgroundModel,
        bg_model_count: ::core::ffi::c_int,
    );
    pub fn g_render_foreground_objects(
        g_stage_tilt_mtx: *mut Mtx,
        fg_model: *mut StagedefForegroundModel,
        foreground_model_count: ::core::ffi::c_int,
    );
    pub fn g_something_with_texture_scroll(tex_scroll: *mut StagedefTextureScroll);
    pub fn bg_nig_init();
    pub fn bg_nig_tick();
    pub fn bg_nig_dest();
    pub fn bg_nig_disp();
    pub fn bg_nig_item_coin_coli();
    pub fn bg_ice2_init();
    pub fn bg_ice2_tick();
    pub fn bg_ice2_dest();
    pub fn bg_ice2_disp();
    pub fn bg_ice2_item_coin_coli();
    pub fn bg_bil_init();
    pub fn bg_bil_tick();
    pub fn bg_bil_dest();
    pub fn bg_bil_disp();
    pub fn bg_bil_item_coin_coli();
    pub fn bg_gol_init();
    pub fn bg_gol_tick();
    pub fn bg_gol_dest();
    pub fn bg_gol_disp();
    pub fn bg_gol_item_coin_coli();
    pub fn bg_bow_init();
    pub fn bg_bow_tick();
    pub fn bg_bow_dest();
    pub fn bg_bow_disp();
    pub fn bg_bow_item_coin_coli();
    pub fn bg_futsal_init();
    pub fn bg_futsal_tick(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn bg_futsal_dest();
    pub fn bg_futsal_disp();
    pub fn bg_futsal_item_coin_coli();
    pub fn bg_electric_init();
    pub fn bg_electric_tick();
    pub fn bg_electric_dest();
    pub fn bg_electric_disp();
    pub fn bg_electric_item_coin_coli();
    pub fn bg_boat_init();
    pub fn bg_boat_tick();
    pub fn bg_boat_dest();
    pub fn bg_boat_disp();
    pub fn bg_boat_item_coin_coli();
    pub fn bg_park_init();
    pub fn bg_park_tick();
    pub fn bg_park_dest();
    pub fn bg_park_disp();
    pub fn bg_park_item_coin_coli();
    pub fn g_smth_with_bg_model_names(
        model: *mut GmaModelEntry,
        g_some_func: *mut ::core::ffi::c_void,
    );
    pub fn g_init_stagedef_bg_fg_models(
        model: *mut StagedefBackgroundModel,
        count: ::core::ffi::c_int,
        some_bg_struct: *mut GSomeBgStruct,
        g_effect_func: *mut ::core::ffi::c_void,
    );
    pub fn is_game_paused_and_in_view_stage() -> BOOL32;
    pub fn g_smth_with_challenge_mode_var_and_3p() -> ::core::ffi::c_int;
    pub fn bg_jun_init();
    pub fn bg_jun_tick();
    pub fn bg_jun_dest();
    pub fn bg_jun_disp();
    pub fn bg_jun_item_coin_coli();
    pub fn bg_snd_init();
    pub fn bg_snd_tick();
    pub fn bg_snd_dest();
    pub fn bg_snd_disp();
    pub fn bg_snd_item_coin_coli();
    pub fn bg_wat_init();
    pub fn bg_wat_tick();
    pub fn bg_wat_dest();
    pub fn bg_wat_disp();
    pub fn bg_wat_item_coin_coli();
    pub fn g_set_bgwat_bubble_effect(param_1: ::core::ffi::c_int, param_2: *mut uint)
        -> undefined4;
    pub fn bg_spa_init();
    pub fn bg_spa_tick();
    pub fn bg_spa_dest();
    pub fn bg_spa_disp();
    pub fn bg_spa_item_coin_coli();
    pub fn bg_sun_init();
    pub fn bg_sun_tick();
    pub fn bg_sun_dest();
    pub fn bg_sun_disp();
    pub fn bg_sun_item_coin_coli();
    pub fn bg_bns_init();
    pub fn bg_bns_tick();
    pub fn bg_bns_dest();
    pub fn bg_bns_disp();
    pub fn bg_bns_item_coin_coli(param_1: ::core::ffi::c_int);
    pub fn bg_stm_init();
    pub fn bg_stm_tick();
    pub fn bg_stm_dest();
    pub fn bg_stm_disp();
    pub fn bg_stm_item_coin_coli();
    pub fn bg_mst_init();
    pub fn bg_mst_tick();
    pub fn bg_mst_dest();
    pub fn bg_mst_disp();
    pub fn bg_mst_item_coin_coli();
    pub fn bg_pil_init();
    pub fn bg_pil_tick();
    pub fn bg_pil_dest();
    pub fn bg_pil_disp();
    pub fn bg_pil_item_coin_coli();
    pub fn bg_end_init();
    pub fn bg_end_tick();
    pub fn bg_end_dest();
    pub fn bg_end_disp();
    pub fn bg_end_item_coin_coli();
    pub fn bg_lava_init();
    pub fn bg_lava_tick();
    pub fn bg_lava_dest();
    pub fn bg_lava_disp();
    pub fn bg_lava_item_coin_coli();
    pub fn g_draw_lava_particles(param_1: ::core::ffi::c_int);
    pub fn g_something_with_stage_heap_and_lava_theme(param_1: *mut ::core::ffi::c_int);
    pub fn bg_wat2_init();
    pub fn bg_wat2_tick();
    pub fn bg_wat2_dest();
    pub fn bg_wat2_disp();
    pub fn bg_wat2_item_coin_coli();
    pub fn bg_pil2_init();
    pub fn bg_pil2_tick();
    pub fn bg_pil2_dest();
    pub fn bg_pil2_disp();
    pub fn bg_pil2_item_coin_coli();
    pub fn bg_spa2_init();
    pub fn bg_spa2_tick();
    pub fn bg_spa2_dest();
    pub fn bg_spa2_disp();
    pub fn bg_spa2_item_coin_coli();
    pub fn bg_bil2_init();
    pub fn bg_bil2_tick(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn bg_bil2_dest();
    pub fn bg_bil2_disp();
    pub fn bg_bil2_item_coin_coli();
    pub fn bg_pot_init();
    pub fn bg_pot_tick();
    pub fn bg_pot_dest();
    pub fn bg_pot_disp();
    pub fn bg_pot_item_coin_coli();
    pub fn bg_pot_fgt_init();
    pub fn bg_pot_fgt_tick();
    pub fn bg_pot_fgt_dest();
    pub fn bg_pot_fgt_disp();
    pub fn bg_pot_fgt_item_coin_coli();
    pub fn g_something_with_stage_heap_and_pot_theme(param_1: ::core::ffi::c_int);
    pub fn bg_whale_init();
    pub fn bg_whale_tick();
    pub fn bg_whale_dest();
    pub fn bg_whale_disp();
    pub fn bg_whale_item_coin_coli();
    pub fn g_something_with_stage_heap_and_whale_theme(param_1: ::core::ffi::c_int);
    pub fn g_something_with_stage_heap_and_whale_theme2(
        param_1: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_short;
    pub fn bg_bubble_init();
    pub fn bg_bubble_tick();
    pub fn bg_bubble_dest();
    pub fn bg_bubble_disp();
    pub fn bg_bubble_item_coin_coli();
    pub fn bg_gear_init();
    pub fn bg_gear_author_tick();
    pub fn bg_gear_author_dest();
    pub fn bg_gear_author_disp();
    pub fn bg_gear_item_coin_coli();
    pub fn g_something_with_stage_heap_and_gear_theme(param_1: ::core::ffi::c_int);
    pub fn bg_jun2_init();
    pub fn bg_jun2_tick();
    pub fn bg_jun2_dest();
    pub fn bg_jun2_disp();
    pub fn bg_jun2_item_coin_coli();
    pub fn g_load_ape_bg();
    pub fn bg_bns2_init();
    pub fn bg_bns2_tick();
    pub fn bg_bns2_dest();
    pub fn bg_bns2_disp();
    pub fn bg_bns2_item_coin_coli();
    pub fn bg_bow2_author_init();
    pub fn bg_bow2_author_tick();
    pub fn bg_bow2_author_dest();
    pub fn bg_bow2_author_disp();
    pub fn bg_bow2_author_item_coin_coli();
    pub fn clear_unlocked_cm_stages();
    pub fn init_course();
    pub fn event_course_init();
    pub fn event_course_tick();
    pub fn event_course_dest();
    pub fn is_stage_complete(entry: *mut CourseCommand) -> bool_;
    pub fn entered_goal_has_type(entry: *mut CourseCommand) -> bool_;
    pub fn did_beat_stage_faster_than(entry: *mut CourseCommand) -> bool_;
    pub fn calc_stage_jump_distance(entry: *mut CourseCommand);
    pub fn clear_next_cm_stage_id2(entry: *mut CourseCommand);
    pub fn clear_next_cm_stage_id(entry: *mut CourseCommand);
    pub fn get_current_cm_stage_time_limit() -> s32;
    pub fn g_update_cm_course(
        difficulty: Difficulty,
        course_stage_num: s32,
        mode_flags: ModeFlag,
    ) -> u32_;
    pub fn calc_course_idx(difficulty: Difficulty, mode_flags: ModeFlag) -> ::core::ffi::c_int;
    pub fn g_get_some_difficulty_count_2(
        param_1: ::core::ffi::c_int,
        mode_flags: ModeFlag,
    ) -> ::core::ffi::c_int;
    pub fn g_are_on_final_course_level(
        difficulty_id: ::core::ffi::c_int,
        course_stage: ::core::ffi::c_int,
        difficulty_flags: uint,
    ) -> bool_;
    pub fn is_bonus_stage(stage_id: ::core::ffi::c_int) -> bool_;
    pub fn g_something_with_cm_entries_practice_mode();
    pub fn g_smth_with_cm_entries_in_main_menu(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: uint,
    ) -> undefined4;
    pub fn update_cm_unlocked_levels(
        difficulty: Difficulty,
        param_2: ::core::ffi::c_int,
        mode_flags: ModeFlag,
    );
    pub fn clear_cm_player_progress();
    pub fn update_course_progress();
    pub fn g_something_with_cm_player_progress();
    pub fn sprite_debug_course_display_disp(param_1: ::core::ffi::c_int);
    pub fn g_save_cm_unlock_entries();
    pub fn g_load_cm_unlock_entries();
    pub fn get_world_stage_count(world: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn get_world_unbeaten_stage_count(world: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn get_story_mode_stage_id(
        world_idx: ::core::ffi::c_int,
        world_stage_idx: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn get_story_mode_stage_difficulty(
        world: ::core::ffi::c_int,
        stage: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn is_storymode_stage_beaten(
        world: ::core::ffi::c_int,
        world_stage: ::core::ffi::c_int,
    ) -> uint;
    pub fn clear_unlocked_storymode_stages();
    pub fn g_save_storymode_unlock_entries();
    pub fn g_load_storymode_unlock_entries();
    pub fn get_storymode_stage_time_limit(
        world: ::core::ffi::c_int,
        world_stage: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn event_item_init();
    pub fn event_item_tick();
    pub fn event_item_dest();
    pub fn draw_items();
    pub fn spawn_item(item: *mut Item) -> ::core::ffi::c_int;
    pub fn g_something_with_view_stage_and_item();
    pub fn init_coli_header_items(
        coli_header: *mut StagedefColiHeader,
        coli_header_count: ::core::ffi::c_int,
    );
    pub fn item_default_init();
    pub fn item_default_tick();
    pub fn item_default_disp();
    pub fn item_default_coli();
    pub fn item_default_dest();
    pub fn item_default_replay_init();
    pub fn item_debug_default();
    pub fn item_coin_init(item: *mut Item);
    pub fn item_coin_tick(item: *mut Item);
    pub fn item_coin_disp(item: *mut Item);
    pub fn item_coin_coli(item: *mut Item, phys_ball: *mut PhysicsBall);
    pub fn item_coin_dest();
    pub fn item_coin_replay_init(item: *mut Item);
    pub fn item_debug_coin(item: *mut Item);
    pub fn g_something_with_coins(param_1: *mut *mut ::core::ffi::c_int) -> *mut GmaModel;
    pub fn event_stobj_collision_init();
    pub fn event_stobj_collision_tick();
    pub fn event_stobj_collision_dest();
    pub fn event_stobj_collision_child_tick();
    pub fn g_some_item_collision_check(
        ball_scale: f64,
        item_scale: f64,
        ball_prev_pos: *mut Vec,
        ball_pos: *mut Vec,
        item_pos_copy: *mut Vec,
        item_pos: *mut Vec,
    ) -> uint;
    pub fn g_something_with_item_coli(
        param_1: f64,
        param_2: f64,
        param_3: *mut Vec,
        param_4: *mut Vec,
        param_5: *mut Vec,
    );
    pub fn event_stobj_init();
    pub fn event_stobj_tick();
    pub fn event_stobj_dest();
    pub fn g_draw_stobjs();
    pub fn g_stobj_sound_something();
    pub fn spawn_stobj(stobj: *mut Stobj) -> ::core::ffi::c_int;
    pub fn g_something_with_bumper_LODs();
    pub fn load_bumper_stobjs(
        coli_header_list: *mut StagedefColiHeader,
        coli_header_count: ::core::ffi::c_int,
    );
    pub fn load_jamabar_stobjs(
        coli_header_list: *mut StagedefColiHeader,
        coli_header_count: ::core::ffi::c_int,
    );
    pub fn load_button_stobjs(
        coli_header_list: *mut StagedefColiHeader,
        coli_header_count: ::core::ffi::c_int,
    );
    pub fn stobj_bumper_init(stobj: *mut Stobj);
    pub fn stobj_bumper_tick(stobj: *mut Stobj);
    pub fn stobj_bumper_disp(stobj: *mut Stobj);
    pub fn stobj_bumper_coli(stobj: *mut Stobj, physicsball: *mut PhysicsBall);
    pub fn stobj_bumper_dest(stobj: *mut Stobj);
    pub fn stobj_bumper_cb_f(stobj: *mut Stobj);
    pub fn stobj_bumper_bgspecial_init(stobj: *mut Stobj);
    pub fn stobj_bumper_bgspecial_tick(stobj: *mut Stobj);
    pub fn stobj_bumper_bgspecial_disp(stobj: *mut Stobj);
    pub fn stobj_bumper_bgspecial_coli(stobj: *mut Stobj, physicsball: *mut PhysicsBall);
    pub fn stobj_bumper_bgspecial_dest(stobj: *mut Stobj);
    pub fn stobj_bumper_bgspecial_cb_f(stobj: *mut Stobj);
    pub fn stobj_jamabar_init(stobj: *mut Stobj);
    pub fn stobj_jamabar_tick(stobj: *mut Stobj);
    pub fn stobj_jamabar_disp(stobj: *mut Stobj);
    pub fn stobj_jamabar_coli(stobj: *mut Stobj, physicsball: *mut PhysicsBall);
    pub fn stobj_jamabar_dest(stobj: *mut Stobj);
    pub fn stobj_jamabar_cb_f(stobj: *mut Stobj);
    pub fn stobj_default_init();
    pub fn stobj_default_tick();
    pub fn stobj_default_disp();
    pub fn stobj_default_coli(stobj: *mut Stobj, physicsball: *mut PhysicsBall);
    pub fn stobj_default_dest();
    pub fn stobj_default_cb_f();
    pub fn stobj_button_init(stobj: *mut Stobj);
    pub fn stobj_button_tick(stobj: *mut Stobj);
    pub fn stobj_button_disp(stobj: *mut Stobj);
    pub fn stobj_button_coli(stobj: *mut Stobj, physicsball: *mut PhysicsBall);
    pub fn stobj_button_dest(stobj: *mut Stobj);
    pub fn stobj_button_cb_f(stobj: *mut Stobj);
    pub fn load_goaltape_and_goalbag_stobjs(
        coli_header_list: *mut StagedefColiHeader,
        coli_header_count: ::core::ffi::c_int,
    );
    pub fn stobj_goaltape_init(stobj: *mut Stobj);
    pub fn stobj_goaltape_tick(stobj: *mut Stobj) -> f64;
    pub fn stobj_goaltape_disp(stobj: *mut Stobj);
    pub fn stobj_goaltape_coli(stobj: *mut Stobj, physicsball: *mut PhysicsBall);
    pub fn stobj_goaltape_dest(stobj: *mut Stobj);
    pub fn stobj_goaltape_cb_f();
    pub fn stobj_goalbag_init(stobj: *mut Stobj) -> f64;
    pub fn stobj_goalbag_tick(stobj: *mut Stobj);
    pub fn stobj_goalbag_disp(stobj: *mut Stobj);
    pub fn stobj_goalbag_coli(stobj: *mut Stobj, physicsball: *mut PhysicsBall);
    pub fn stobj_goalbag_dest(stobj: *mut Stobj);
    pub fn stobj_goalbag_cb_f(stobj: *mut Stobj);
    pub fn stobj_goalbag_exmaster_init(stobj: *mut Stobj) -> f64;
    pub fn stobj_goalbag_exmaster_tick(stobj: *mut Stobj);
    pub fn stobj_goalbag_exmaster_disp(stobj: *mut Stobj);
    pub fn stobj_goalbag_exmaster_coli(stobj: *mut Stobj, physicsball: *mut PhysicsBall);
    pub fn stobj_goalbag_exmaster_dest(stobj: *mut Stobj);
    pub fn stobj_goalbag_exmaster_cb_f(stobj: *mut Stobj);
    pub fn g_something_with_goals_and_physicsball(
        goal_idx: ::core::ffi::c_int,
        physicsball: *mut PhysicsBall,
    );
    pub fn g_get_sphere_camera_zdist_clamped(radius: f32, origin: *mut Vec) -> f32;
    pub fn load_returngate_stobjs(
        coli_header_list: *mut StagedefColiHeader,
        coli_header_count: ::core::ffi::c_int,
    );
    pub fn stobj_returngate_init(stobj: *mut Stobj);
    pub fn stobj_returngate_tick(stobj: *mut Stobj);
    pub fn stobj_returngate_disp(stobj: *mut Stobj);
    pub fn stobj_returngate_coli(stobj: *mut Stobj, physicsball: *mut PhysicsBall);
    pub fn stobj_returngate_dest(stobj: *mut Stobj);
    pub fn stobj_returngate_cb_f(stobj: *mut Stobj);
    pub fn event_sprite_init();
    pub fn event_sprite_tick();
    pub fn event_sprite_dest();
    pub fn g_smth_with_drawing_all_sprites(param_1: ::core::ffi::c_int);
    pub fn draw_sprite(sprite: *mut Sprite);
    pub fn load_bmp_by_id(param_1: ::core::ffi::c_int);
    pub fn g_call_smth_with_freeing_memory(param_1: ::core::ffi::c_int);
    pub fn g_something_with_iteratively_freeing_memory();
    pub fn create_sprite() -> *mut Sprite;
    pub fn create_linked_sprite(sprite: *mut Sprite) -> *mut Sprite;
    pub fn destroy_sprite_with_unique_id(unique_id: SpriteUniqueID);
    pub fn dest_all_sprites();
    pub fn get_sprite_with_unique_id(unique_id: SpriteUniqueID) -> *mut Sprite;
    pub fn g_get_font_char_width(
        character: *mut ::core::ffi::c_char,
        font: Font32,
        g_font_struct: *mut FontDefinition,
    );
    pub fn g_get_font_char_width_scaling(character: *mut ::core::ffi::c_char, font: Font32) -> f64;
    pub fn textdraw_reset();
    pub fn textdraw_set_font(font_type: Font32);
    pub fn textdraw_set_mul_color(param_1: uint);
    pub fn textdraw_set_add_color(param_1: undefined4);
    pub fn textdraw_set_rot_z(param_1: undefined2);
    pub fn textdraw_set_depth(param_1: f32);
    pub fn textdraw_set_scale(width: f32, height: f32);
    pub fn textdraw_set_alpha(alpha: f64);
    pub fn textdraw_set_flags(param_1: TextDrawFlags);
    pub fn textdraw_clear_flags(param_1: uint);
    pub fn textdraw_set_alignment(alignment: SpriteAlignment);
    pub fn textdraw_set_drop_shadow_with_params(alpha: f32, offset_x: s16, offset_y: s16);
    pub fn textdraw_set_drop_shadow();
    pub fn textdraw_clear_drop_shadow();
    pub fn textdraw_set_border();
    pub fn textdraw_clear_border();
    pub fn g_textdraw_set_unk6(param_1: f64);
    pub fn g_textdraw_set_unk7(param_1: undefined4);
    pub fn textdraw_set_font_style(style: FontStyle);
    pub fn textdraw_set_spacing(x: f32, y: f32);
    pub fn g_textdraw_set_counter(param_1: undefined2);
    pub fn textdraw_set_pos_for_aram_font_test(x: f64, y: f64);
    pub fn textdraw_set_pos(x: f32, y: f32);
    pub fn textdraw_put_char(ch: ::core::ffi::c_char);
    pub fn textdraw_print(string: *mut ::core::ffi::c_char);
    pub fn textdraw_printf(format: *mut ::core::ffi::c_char, ...);
    pub fn draw_text_sprite(sprite: *mut Sprite);
    pub fn draw_bmp_sprite(sprite: *mut Sprite);
    pub fn draw_texture_sprite(sprite: *mut Sprite);
    pub fn textdraw_print_and_fit_to_width(width: f64, string: *mut ::core::ffi::c_char);
    pub fn textdraw_printf_and_fit_to_width(g_width: f64, format: *mut ::core::ffi::c_char, ...);
    pub fn g_get_font_def_aram_flag(param_1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn g_get_string_sprite_width_2(param_1: *mut ::core::ffi::c_char);
    pub fn g_call_get_string_sprite_width_3_discard_result(param_1: *mut ::core::ffi::c_char);
    pub fn textdraw_get_pixel_width_of_string_as_double(string: *mut ::core::ffi::c_char) -> f64;
    pub fn textdraw_get_pixel_width_of_string(str_: *mut ::core::ffi::c_char) -> f32;
    pub fn textdraw_get_pixel_height_of_string(param_1: *mut ::core::ffi::c_char) -> f64;
    pub fn g_smth_with_fonts_chara_load_wrapper_discard_result(param_1: *mut ::core::ffi::c_char);
    pub fn textdraw_get_line_count_of_string(str_: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    pub fn g_smth_with_screen_fading();
    pub fn fade_screen_to_color(flags: uint, color: u32_, frames: uint);
    pub fn draw_sprite_draw_request(request: *mut SpriteDrawRequest) -> undefined4;
    pub fn g_scale_sprite_for_widescreen(param_1: uint);
    pub fn g_reset_sprite_mtx_for_widescreen();
    pub fn g_something_loading_fonts();
    pub fn g_load_specific_font(font: Font32);
    pub fn g_draw_sprite_draw_request_unbuffered(request: *mut SpriteDrawRequest);
    pub fn g_parse_avtext_non_alphanumeric(next_two_chars_as_uint: u32_) -> uint;
    pub fn g_parse_avtext_other_codes(
        string: *mut ::core::ffi::c_char,
        next_two_chars: *mut ushort,
    ) -> undefined4;
    pub fn parse_avtext_color_codes(
        string: *mut ::core::ffi::c_char,
        sprite_draw_req: *mut SpriteDrawRequest,
    ) -> undefined4;
    pub fn g_some_avtext_array_lookup(
        next_two_chars: ushort,
        some_float: f32,
        float_as_short_ptr: *mut ::core::ffi::c_short,
    ) -> uint;
    pub fn g_get_tex_id(
        param_1: undefined4,
        param_2: ushort,
        param_3: *mut ushort,
        param_4: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn g_some_textdraw_print_internal_func(string: *mut byte);
    pub fn textdraw_chara_load(
        string: *mut ::core::ffi::c_char,
        stop_on_newline: BOOL32,
        return_parameter: TextdrawCharaLoadReturnParameter,
    ) -> f32;
    pub fn g_get_string_sprite_width_3(param_1: *mut ::core::ffi::c_char) -> f64;
    pub fn textdraw_get_pixel_width_of_string_as_double_child(
        string: *mut ::core::ffi::c_char,
    ) -> f64;
    pub fn textdraw_get_pixel_width_of_string_child(string: *mut ::core::ffi::c_char) -> f32;
    pub fn g_smth_with_fonts_chara_load_wrapper(
        param_1: *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn textdraw_get_line_count_of_string_child(
        param_1: *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn g_display_playpoint_or_gift_message_child(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: *mut ::core::ffi::c_int,
    );
    pub fn g_smth_with_playpoint_or_gift_msg(
        param_1: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_char,
    );
    pub fn g_some_printf_function_4(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: ::core::ffi::c_int,
        param_10: *mut ::core::ffi::c_char,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn create_pausemenu_sprite();
    pub fn g_smth_creates_gameover_sprite(param_1: undefined4, sprite: *mut Sprite);
    pub fn sprite_pausemenu_disp(sprite: *mut Sprite);
    pub fn create_titlescreen_press_start_sprites(param_1: ::core::ffi::c_int);
    pub fn sprite_titlescreen_press_start_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn g_sprite_copyright_text_disp(param_1: *mut Sprite);
    pub fn g_create_smd_adv_logo_sprites();
    pub fn sprite_logo_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_copyright_text_sprites(param_1: ::core::ffi::c_int);
    pub fn sprite_copyright_text_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_title_sprite(param_1: s32);
    pub fn sprite_title_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_title_disp(sprite: *mut Sprite);
    pub fn g_create_some_controls_description_sprite();
    pub fn create_stage_loadin_text_sprites();
    pub fn sprite_loadin_stage_name_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_loadin_stage_name_disp(sprite: *mut Sprite);
    pub fn sprite_player_num_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_player_num_and_ready_sprites(param_1: s32);
    pub fn sprite_ready_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_bonus_stage_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_final_stage_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_final_stage_disp(sprite: *mut Sprite);
    pub fn create_go_sprite(param_1: s32);
    pub fn sprite_go_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_go_disp(sprite: *mut Sprite);
    pub fn create_goal_and_jump_to_stage_sprites(g_num_frames: s32);
    pub fn sprite_goal_disp(sprite: *mut Sprite);
    pub fn sprite_jump_to_stage_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_jump_to_stage_duplicate_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_fallout_or_bonus_finish_sprite(param_1: s32);
    pub fn sprite_fallout_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_time_over_sprite(param_1: s32);
    pub fn sprite_time_over_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_bonus_finish_or_perfect_sprite();
    pub fn create_bonus_finish_sprite();
    pub fn sprite_bonus_finish_or_perfect_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_continue_sprites();
    pub fn sprite_continue_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_continues_remaining_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_continue_yes_or_no_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn g_create_some_game_over_and_player_num_sprites(param_1: s32);
    pub fn create_game_over_letter_sprite(
        param_1: s32,
        x: uint,
        y: uint,
        param_4: s32,
        letter: *mut ::core::ffi::c_char,
    );
    pub fn sprite_game_over_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_1up_sprite(param_1: s32);
    pub fn sprite_1up_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_replay_sprite(param_1: ::core::ffi::c_short);
    pub fn sprite_replay_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_go_to_extra_or_master_stages_sprites();
    pub fn g_sprite_extra_all_mask_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn g_sprite_go_to_the_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn g_sprite_go_to_the_disp(sprite: *mut Sprite);
    pub fn create_postgoal_score_sprites(param_1: undefined4, param_2: undefined4, param_3: uint);
    pub fn sprite_clear_score_disp(sprite: *mut Sprite);
    pub fn sprite_warp_bonus_disp(sprite: *mut Sprite);
    pub fn sprite_time_bonus_disp(sprite: *mut Sprite);
    pub fn sprite_stage_score_disp(sprite: *mut Sprite);
    pub fn sprite_goal_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn g_make_some_continue_screen_sprites();
    pub fn create_save_sprite();
    pub fn sprite_save_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_save_disp(sprite: *mut Sprite);
    pub fn sprite_monkey_counter_icon_disp(sprite: *mut Sprite);
    pub fn g_smth_with_get_active_monkey_icon(
        param_1: undefined4,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn g_create_how_to_sprite();
    pub fn g_sprite_how_to_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn g_how_to_sprite_draw_controller_tooltips(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: *mut SpriteDrawRequest,
    );
    pub fn g_how_to_sprite_draw_rules_page(
        param_1: ::core::ffi::c_char,
        sprite: *mut Sprite,
        req: *mut SpriteDrawRequest,
        param_4: ::core::ffi::c_char,
        param_5: ::core::ffi::c_char,
        param_6: ::core::ffi::c_char,
        param_7: ::core::ffi::c_char,
    );
    pub fn g_sprite_how_to_disp(sprite: *mut Sprite);
    pub fn g_sprite_how_to_dest();
    pub fn create_hud_sprites();
    pub fn create_score_sprites(pos_x: f32, pos_y: f32);
    pub fn create_timer_sprites(param_1: f32, param_2: f32);
    pub fn create_speed_sprites(param_1: f32, param_2: f32);
    pub fn create_hud_stage_name_sprites(param_1: f32, param_2: f32);
    pub fn create_banana_counter_sprites(param_1: f64, param_2: f64);
    pub fn create_monkey_counter_sprites(x: f64, y: f64);
    pub fn create_final_stage_sprite();
    pub fn create_debug_course_display_sprites();
    pub fn sprite_score_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_score_disp(sprite: *mut Sprite);
    pub fn sprite_timer_ball_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_current_stage_display_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_current_stage_display_disp(sprite: *mut Sprite);
    pub fn sprite_hud_stage_name_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_banana_icon_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_banana_icon_shadow_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_banana_count_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn g_banana_disp_efc_req(bananas_collected: ::core::ffi::c_char);
    pub fn sprite_monkey_counter_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_hud_player_num_disp(sprite: *mut Sprite);
    pub fn event_minimap_init();
    pub fn event_minimap_tick();
    pub fn event_minimap_dest();
    pub fn set_minimap_mode(minimap_mode: MinimapMode);
    pub fn toggle_minimap_zoom();
    pub fn g_draw_minimap();
    pub fn g_smth_with_rendefc_reflective_height(height: f64);
    pub fn ord_tbl_get_entry_for_pos(pos: *mut Vec) -> *mut OrdTblNode;
    pub fn ord_tbl_draw_nodes();
    pub fn ord_tbl_alloc_node(size: u32_) -> *mut ::core::ffi::c_void;
    pub fn g_replay_screen_stage_name();
    pub fn set_global_ape_LOD_1();
    pub fn load_ape_gameplay_id_only(monkey_id: ::core::ffi::c_int) -> *mut Ape;
    pub fn set_global_LOD(lod: ::core::ffi::c_int);
    pub fn g_ape_anim_head(ape: *mut Ape, ape_facedir_point: *mut Vec, flags: ::core::ffi::c_int);
    pub fn decompress_lz(in_compressed: *mut byte, out_decompressed: *mut byte) -> uint;
    pub fn g_some_arq_callback(pointerToARQRequest: u32_);
    pub fn load_disc_queue();
    pub fn g_something_with_dvd(entry_num: s32, param_2: *mut undefined4) -> BOOL32;
    pub fn dvd_open_file(
        file_path: *mut ::core::ffi::c_char,
        fileStruct: *mut GSomeFileStruct,
    ) -> BOOL32;
    pub fn dvd_close(file: *mut GSomeFileStruct) -> BOOL32;
    pub fn g_some_ARQPostRequest_callback();
    pub fn dvd_read_file_into_buffer(
        dvdEntrynum: *mut ::core::ffi::c_int,
        buffer: *mut ::core::ffi::c_void,
        length: u32_,
        offset: ::core::ffi::c_int,
    ) -> u32_;
    pub fn get_file_size(file_struct: *mut GSomeFileStruct) -> ::core::ffi::c_int;
    pub fn g_some_dvd_callback(result: s32, fileInfo: *mut DVDFileInfo);
    pub fn g_something_with_dvd2(param_1: uint, param_2: ::core::ffi::c_int);
    pub fn add_one_wrap_if_over127(num: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn disc_queue_load(entrynum: ::core::ffi::c_int) -> bool_;
    pub fn queue_disc_read(file_name: *mut ::core::ffi::c_char) -> BOOL32;
    pub fn get_load_group_status();
    pub fn disc_queue_status(identifier: ::core::ffi::c_int);
    pub fn disc_queue_distance(identifier: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn g_get_debug_level_select_loading_left_asterisks() -> ::core::ffi::c_int;
    pub fn g_swapDiscQueueGroup(newValue: undefined4) -> undefined4;
    pub fn g_fill_some_memory_with_0x0_and_0xff(ptr: *mut ::core::ffi::c_void);
    pub fn g_some_shadow_draw_func(param_1: *mut ::core::ffi::c_int);
    pub fn g_check_some_condition(param_1: ushort) -> undefined4;
    pub fn debug_draw_shadow_textures();
    pub fn md_mini_func();
    pub fn g_set_minigame_specific_funcs(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
    );
    pub fn g_smd_mini_generic_init();
    pub fn g_smd_mini_generic_tick();
    pub fn g_mini_draw_func_handler();
    pub fn smd_mini_select_init();
    pub fn smd_mini_select_tick();
    pub fn smd_mini_ending_init();
    pub fn smd_mini_ending_tick();
    pub fn mini_ending_draw_func();
    pub fn smd_mini_s_roll_init();
    pub fn smd_mini_s_roll_tick();
    pub fn mini_nameentry_draw_func();
    pub fn event_mouse_init();
    pub fn event_mouse_tick();
    pub fn event_mouse_dest();
    pub fn g_smth_with_drawing_text_sprites();
    pub fn event_rend_efc_init();
    pub fn event_rend_efc_tick();
    pub fn event_rend_efc_dest();
    pub fn g_something_with_rend_efc(param_1: uint);
    pub fn g_init_rendefc_for_stage();
    pub fn g_smth_with_loading_reflective_stgobjs(param_1: *mut undefined);
    pub fn g_smth_calling_reflective_obj_draw_hdlr(
        g_some_flag: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_int,
    );
    pub fn g_reflective_object_draw_handler(
        g_some_flag: ::core::ffi::c_int,
        g_some_ptr: *mut ::core::ffi::c_int,
    );
    pub fn g_reflective_object_draw_handler_2(param_1: undefined4, param_2: ::core::ffi::c_int);
    pub fn g_some_rendefc_func_1(param_1: *mut undefined);
    pub fn g_smth_with_pil2_ref(param_1: *mut undefined);
    pub fn g_something_with_stage_heap_and_target_theme(param_1: ::core::ffi::c_int);
    pub fn g_some_rendefc_func_2(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn g_smth_with_reflective_models(param_1: undefined4, param_2: ::core::ffi::c_int);
    pub fn g_smth_with_wormhole_surfaces(param_1: *mut undefined);
    pub fn fog_main();
    pub fn g_set_something3(param_1: ::core::ffi::c_char);
    pub fn smd_mini_commend_init();
    pub fn smd_mini_commend_tick();
    pub fn g_mini_commend_draw_func();
    pub fn g_something_with_rotation_not_aiai(ape: *mut Ape);
    pub fn g_something_with_drawing_apes();
    pub fn event_commend_init();
    pub fn event_commend_tick(
        param_1: f64,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
        param_9: undefined4,
    );
    pub fn event_commend_dest();
    pub fn load_commend_stage();
    pub fn g_something_with_card13();
    pub fn g_something_with_card3();
    pub fn print_card_submode_error(param_1: *mut byte);
    pub fn g_memcard_func_1(info: *mut MemCardInfo);
    pub fn g_memcard_func_2(info: *mut MemCardInfo);
    pub fn mount_memory_card(param_1: *mut byte);
    pub fn g_memcard_func_4(info: *mut MemCardInfo);
    pub fn g_something_free_card_blocks(param_1: *mut MemCardFile);
    pub fn g_open_card_file(file: *mut MemCardFile);
    pub fn something_that_calls_CARDCreateAsync(param_1: *mut byte);
    pub fn g_calls_CARDWriteAsync(param_1: *mut byte);
    pub fn g_related_to_memcard_rw(param_1: *mut byte);
    pub fn g_something_with_card12(param_1: *mut byte);
    pub fn g_something_with_card();
    pub fn g_something_with_card10(param_1: *mut ::core::ffi::c_char);
    pub fn g_some_printf_function_5(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: *mut ::core::ffi::c_char,
        param_10: undefined4,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn g_something_with_card11(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
    );
    pub fn g_something_with_card9(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
    );
    pub fn g_something_with_card5(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
    );
    pub fn g_something_with_card4(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
    );
    pub fn g_something_with_card8();
    pub fn g_something_with_card6(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
    );
    pub fn g_something_with_card2(card_chan: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn g_something_with_fonts() -> uint;
    pub fn g_some_printf_function_6(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: ::core::ffi::c_int,
        param_10: ::core::ffi::c_int,
        param_11: ::core::ffi::c_int,
        param_12: *mut ::core::ffi::c_char,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn smd_mini_ranking_init();
    pub fn smd_mini_ranking_tick();
    pub fn g_load_preview_texture(
        sprite_tex: *mut SpriteTex,
        file_path: *mut ::core::ffi::c_char,
        param_3: undefined4,
        width: u16_,
        height: u16_,
        format: GXTexFmt,
    );
    pub fn g_some_dvd_callback2(result: s32, file_info: *mut DVDFileInfo);
    pub fn g_load_sprite_tex_from_dvd(sprite_tex: *mut SpriteTex);
    pub fn g_maybe_save_previews();
    pub fn g_something_with_smb1_ranking_main_game_defaults_wrapper();
    pub fn event_name_entry_init();
    pub fn event_name_entry_tick();
    pub fn event_name_entry_dest();
    pub fn g_something_with_name_entry();
    pub fn g_something_with_smb1_ranking_main_game_defaults();
    pub fn effect_nameent_code_init(param_1: ::core::ffi::c_int);
    pub fn effect_nameent_code_tick(param_1: *mut ::core::ffi::c_short);
    pub fn effect_nameent_code_disp(param_1: ::core::ffi::c_int);
    pub fn effect_nameent_code_dest(effect: *mut Effect);
    pub fn effect_get_nameent_code_init(param_1: ::core::ffi::c_int);
    pub fn effect_get_nameent_code_tick(param_1: *mut ::core::ffi::c_short);
    pub fn effect_get_nameent_code_disp(param_1: ::core::ffi::c_int);
    pub fn effect_get_nameent_code_dest(effect: *mut Effect);
    pub fn stobj_nameent_btn_init(stobj: *mut Stobj);
    pub fn stobj_nameent_btn_tick(stobj: *mut Stobj);
    pub fn stobj_nameent_btn_disp(stobj: *mut Stobj);
    pub fn stobj_nameent_btn_coli(stobj: *mut Stobj, physicsball: *mut PhysicsBall);
    pub fn stobj_nameent_btn_dest(stobj: *mut Stobj);
    pub fn stobj_nameent_btn_cb_f(stobj: *mut Stobj);
    pub fn event_vibration_init();
    pub fn event_vibration_tick();
    pub fn event_vibration_dest();
    pub fn g_rumble_controller(
        controller_idx: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn g_alloc_memory_for_ending();
    pub fn g_set_effect_ending_ballfrag();
    pub fn g_clear_effect_ending_ballfrag();
    pub fn effect_ending_ballfrag_init(param_1: ::core::ffi::c_int);
    pub fn effect_ending_ballfrag_tick(param_1: ::core::ffi::c_int);
    pub fn effect_ending_ballfrag_disp(param_1: ::core::ffi::c_int);
    pub fn effect_ending_ballfrag_dest(effect: *mut Effect);
    pub fn g_init_something_with_heaps();
    pub fn g_free_some_memory2();
    pub fn avdisp_draw_model_unculled_sort_auto(model: *mut GmaModel);
    pub fn avdisp_draw_model_culled_sort_auto(model: *mut GmaModel);
    pub fn avdisp_draw_model_unculled_sort_never(gma_model: *mut GmaModel);
    pub fn avdisp_draw_model_culled_sort_never(model: *mut GmaModel);
    pub fn avdisp_draw_model_unculled_sort_always(model: *mut GmaModel);
    pub fn avdisp_draw_model_culled_sort_always(gma_model: *mut GmaModel);
    pub fn g_some_ord_node_func1(param_1: ::core::ffi::c_int);
    pub fn g_some_ord_node_func2(param_1: ::core::ffi::c_int);
    pub fn call_g_avdisp_set_ambient(param_1: f64, param_2: f64, param_3: f64);
    pub fn avdisp_set_alpha(param_1: f32);
    pub fn g_something_with_texture_scroll_2(param_1: ::core::ffi::c_int) -> undefined4;
    pub fn g_stores_doubles(param_1: f64, param_2: f64, param_3: f64, param_4: f64);
    pub fn g_stores_doubles2(param_1: f64, param_2: f64, param_3: f64, param_4: f64);
    pub fn avdisp_set_fog_params(param_1: f64, param_2: f64, param_3: undefined);
    pub fn avdisp_set_fog_color(r: u8_, g: u8_, b: u8_);
    pub fn g_yet_another_unk_draw_func(param_1: undefined4);
    pub fn g_avdisp_reset_alpha_and_bound_sphere_scale();
    pub fn g_get_some_dvd_file_info2() -> *mut DVDFileInfo;
    pub fn alloc_from_current_heap(size: u32_) -> *mut ::core::ffi::c_void;
    pub fn free_from_current_heap(ptr: *mut ::core::ffi::c_void);
    pub fn teleport_through_wormhole(
        ball_idx: ::core::ffi::c_int,
        wormhole_idx: ::core::ffi::c_int,
    ) -> undefined8;
    pub fn g_compute_wormhole_tf(wormhole_idx: ::core::ffi::c_int, param_2: *mut f32_)
        -> *mut f32_;
    pub fn g_mtx_mult_right(ret: *mut Mtx, param_2: *mut Mtx);
    pub fn apply_wormhole_tf_to_mtx(src_tf: *mut Mtx, wormhole_tf: *mut Mtx);
    pub fn apply_wormhole_tf_to_vec(vec: *mut Vec, wormhole_tf: *mut Mtx);
    pub fn g_apply_wormhole_pos_to_camera(
        camera_pos: *mut Vec,
        camera_vel: *mut Vec,
        mtx: *mut Mtx,
    );
    pub fn apply_wormhole_tf_to_quat(quat: *mut Quat, wormhole_tf: *mut Mtx);
    pub fn g_load_skl(sklRoot: *mut SKLRoot, boneData: *mut SKLInfo, sklFile: *mut SKLFile);
    pub fn g_handL_SKL_func(param_1: *mut ::core::ffi::c_void, param_2: ::core::ffi::c_int);
    pub fn gan_setanim_wrapper(
        param_1: *mut ::core::ffi::c_void,
        param_2: *mut ::core::ffi::c_char,
    );
    pub fn gan_setAnim(
        mal: *mut ::core::ffi::c_void,
        param_2: *mut undefined,
        animation_number: ::core::ffi::c_short,
    );
    pub fn gan_setanim_edance(
        param_1: undefined4,
        param_2: undefined,
        param_3: uint,
        param_4: uint,
        param_5: uint,
    );
    pub fn g_init_floatthing(param_1: *mut gFloats);
    pub fn gan_incframe(g_speed: f64, ape: *mut Ape);
    pub fn g_set_more_ape_state(param_1: *mut undefined2, param_2: *mut undefined2);
    pub fn g_smth_with_quat_slerp(param_1: *mut ushort);
    pub fn g_something_arc(fileInfo: *mut ArcFileInfo);
    pub fn g_table_index(param1: *mut SKLRoot, str_: *mut ::core::ffi::c_char) -> uint;
    pub fn load_ape_body(ape_index: ::core::ffi::c_int, game_index: ::core::ffi::c_int);
    pub fn gan_setanim_estagebegin(
        ape: *mut Ape,
        chara_index: ::core::ffi::c_int,
        scene_index: ::core::ffi::c_int,
    );
    pub fn g_something_freeing_chara_heap_3(param_1: *mut *mut ::core::ffi::c_void);
    pub fn g_something_with_new_ape(
        ape: *mut Ape,
        chara_index: ::core::ffi::c_int,
        scene_index: ::core::ffi::c_int,
    );
    pub fn event_ape_init() -> ulonglong;
    pub fn event_ape_tick();
    pub fn event_ape_dest();
    pub fn load_ape(
        chara_index: ::core::ffi::c_int,
        LOD: ApeLOD,
        game_index: ::core::ffi::c_int,
        s_mal: ::core::ffi::c_int,
    ) -> *mut Ape;
    pub fn load_ape_s(
        chara_id: ::core::ffi::c_int,
        LOD: ::core::ffi::c_int,
        game_index: ::core::ffi::c_int,
    ) -> *mut Ape;
    pub fn load_ape_gameplay(
        monkey_id: ::core::ffi::c_int,
        LOD: undefined4,
        g_variant: ::core::ffi::c_int,
    ) -> *mut Ape;
    pub fn load_ape_gameplay_LOD(monkey_id: ::core::ffi::c_int, LOD: ApeLOD) -> *mut Ape;
    pub fn draw_ape_subroutine(param_1: ::core::ffi::c_int);
    pub fn g_draw_ape1(param_1: f64, ape2: *mut Ape);
    pub fn draw_ape(ape: *mut Ape);
    pub fn g_something_with_freeing_chara_heap_ape(ape: *mut Ape);
    pub fn ape_default_anim(ape: *mut Ape);
    pub fn g_ape_anim_body(
        ape: *mut Ape,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn g_load_mal_files_from_disc(
        chara_index: ::core::ffi::c_int,
        LOD: ::core::ffi::c_int,
        s_mal: ::core::ffi::c_int,
        game_index: ::core::ffi::c_int,
    );
    pub fn g_something_freeing_chara_heap_4(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn g_something_freeing_chara_heap_2(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    );
    pub fn assign_model_pointers(ape: *mut Ape, lod: ApeLOD);
    pub fn gan_getsomeframe(ape: *mut Ape, index: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn body_frame_add72(ape: *mut Ape) -> f64;
    pub fn get_ape_game_string(ape: *mut Ape) -> *mut undefined;
    pub fn get_ape_anim_flags(
        ape: *mut Ape,
        param_2: undefined4,
        param_3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn preload_ape(
        chara_index: ::core::ffi::c_int,
        LOD: ::core::ffi::c_int,
        s_mal: ::core::ffi::c_int,
        game_index: ::core::ffi::c_int,
    );
    pub fn g_load_ape_mta_mal_files(
        game_index: ::core::ffi::c_int,
        chara_index: ::core::ffi::c_int,
    );
    pub fn g_something_with_comparing_strings(
        param_1: undefined4,
        param_2: *mut ::core::ffi::c_char,
    ) -> uint;
    pub fn register_ape(ape: *mut Ape);
    pub fn unregister_ape(ape: *mut Ape);
    pub fn get_ape_index(__return_storage_ptr__: *mut Ape, index: ::core::ffi::c_int) -> Ape;
    pub fn dip_apenum_draw(ape: *mut Ape);
    pub fn get_ape_name_string(ape: *mut Ape) -> *mut ::core::ffi::c_char;
    pub fn get_ape_lod_string(ape: *mut Ape) -> *mut ::core::ffi::c_char;
    pub fn get_ape_face_string(ape: *mut Ape) -> *mut ::core::ffi::c_char;
    pub fn seek(param_1: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    pub fn g_load_models(ape: *mut Ape);
    pub fn g_get_structure_from_ape_common_mal_struct(common_mal: *mut Mal) -> *mut SomeApeState;
    pub fn g_something_freeing_heap_3(param_1: *mut ::core::ffi::c_void);
    pub fn g_get_ape_flag(
        ape: *mut Ape,
        g_something_with_game: undefined4,
        param_3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn g_alloc_some_ape_state_0x8(
        g_some_ape_state: *mut SomeApeState,
        chara_idx: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn gan_setanim_e4(ape: *mut Ape);
    pub fn g_set_ape_dance_state1(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: undefined2,
        param_4: ::core::ffi::c_int,
        param_5: undefined4,
        param_6: undefined4,
        param_7: ::core::ffi::c_int,
    );
    pub fn g_set_ape_dance_state2(
        g_some_ape_state: *mut SomeApeState,
        param_2: uint,
        param_3: uint,
        param_4: ::core::ffi::c_int,
        param_5: ::core::ffi::c_int,
        param_6: undefined4,
        param_7: undefined4,
        param_8: ::core::ffi::c_int,
    );
    pub fn gan_setAnim2(
        ape: *mut Ape,
        param_2: ::core::ffi::c_int,
        param_3: *mut ::core::ffi::c_short,
    );
    pub fn g_some_ape_anim_func2(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: undefined4,
        param_4: undefined4,
        param_5: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn g_set_ape_stuff_in_chara_heap(param_1: *mut undefined2, param_2: *mut undefined2);
    pub fn g_something_with_GXPeekZ();
    pub fn g_init_rankings_to_defaults_wrapper();
    pub fn g_init_rankings_to_defaults();
    pub fn g_NameEntry2_InitFirst();
    pub fn g_nameentry2_init();
    pub fn game_nameentry_draw_func();
    pub fn ape_assignment();
    pub fn sprite_rank_tick();
    pub fn sprite_rank_disp();
    pub fn g_something_with_name_entry_get_course(param_1: ::core::ffi::c_int);
    pub fn g_some_ape_anim_func1(ape: *mut Ape);
    pub fn set_ape_anim(ape: *mut Ape, animationType: undefined);
    pub fn g_some_set_ape_anim(ape: *mut Ape, chara_anim_type: undefined, param_3: undefined2);
    pub fn run_anim_funcs(ape: *mut Ape);
    pub fn load_scene_files(scene_category: ::core::ffi::c_int);
    pub fn load_scene_data(scene_category: ::core::ffi::c_int) -> uint;
    pub fn g_parse_scene_data(param_1: *mut ::core::ffi::c_int);
    pub fn g_something_freeing_heap_4();
    pub fn g_something_with_cutscenes_func2();
    pub fn g_something_with_cutscenes_func(g_something_cutscene: u16_) -> undefined4;
    pub fn g_dump_scene_info();
    pub fn g_something_to_do_with_soft_fx(
        param_1: undefined4,
        param_2: undefined4,
        param_3: ::core::ffi::c_int,
    );
    pub fn load_dialog_tbl(scene_id: ::core::ffi::c_int) -> *mut OSHeapHandle;
    pub fn g_smth_with_dialog2(
        param_1: *mut ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn load_scene_sound(param_1_00: ::core::ffi::c_char);
    pub fn smd_author_select_init();
    pub fn smd_author_select_tick();
    pub fn g_print_author_debug_data();
    pub fn smd_author_play_init();
    pub fn smd_author_play_tick(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn smd_author_play_story_init();
    pub fn smd_author_play_ending_init();
    pub fn smd_author_play_from_sel();
    pub fn smd_author_play_ret_sel();
    pub fn md_author_func();
    pub fn author_draw_func();
    pub fn g_assign_new_main_and_sub_mode_for_play_tick(param_1: MainMode, param_2: SubMode);
    pub fn g_set_some_author_tick_func(param_1: undefined4);
    pub fn g_get_some_author_related_data() -> undefined4;
    pub fn g_get_author_scene() -> undefined4;
    pub fn g_get_author_scene_max() -> ::core::ffi::c_int;
    pub fn g_get_author_frame() -> undefined2;
    pub fn g_get_author_frame_max() -> undefined2;
    pub fn g_some_author_cutscene_related_func();
    pub fn g_load_stageselect_after_cutscene();
    pub fn g_preload_next_stage_files(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
        param_3: ::core::ffi::c_int,
    );
    pub fn clear_unlock_info();
    pub fn g_is_master_unlocked() -> byte;
    pub fn g_set_unlockables_status();
    pub fn g_handle_goal();
    pub fn compare_play_points_with_99999_after_exit_game();
    pub fn get_play_point_count() -> dword;
    pub fn g_display_playpoint_or_gift_message(g_x_pos: f64, g_y_pos: f64, param_3: undefined);
    pub fn g_playpoint_or_gift_msg_disp(
        param_1_00: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: *mut ::core::ffi::c_int,
        param_10: undefined4,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn is_able_to_unlock_party_game() -> bool_;
    pub fn unlock_party_game(party_game: ::core::ffi::c_int);
    pub fn is_able_to_unlock_gift() -> bool_;
    pub fn g_something_with_assinging_unlockables();
    pub fn unlock_movie(movie: ::core::ffi::c_int);
    pub fn unlock_staff_credits_game();
    pub fn are_all_gifts_unlocked() -> uint;
    pub fn g_check_if_partygame_unlocked(param_1: ::core::ffi::c_int) -> uint;
    pub fn get_num_of_unlocked_party_games() -> ::core::ffi::c_int;
    pub fn are_all_party_games_unlocked() -> bool_;
    pub fn set_unlocked_monkeys_to_three();
    pub fn get_num_unlocked_monkeys() -> byte;
    pub fn are_all_extra_monkeys_unlocked() -> bool_;
    pub fn g_set_movie_as_unlocked(param_1: ::core::ffi::c_int);
    pub fn g_is_movie_unlocked(param_1: ::core::ffi::c_int) -> uint;
    pub fn are_all_movies_unlocked() -> bool_;
    pub fn is_staff_credits_game_unlocked() -> byte;
    pub fn return_5() -> undefined4;
    pub fn main_game_rel_prolog();
    pub fn main_game_rel_epilog();
    pub fn main_game_rel_unlinked();
    pub fn md_game_func();
    pub fn smd_game_first_init();
    pub fn smd_game_restart_init();
    pub fn smd_game_ready_init();
    pub fn smd_game_ready_tick();
    pub fn smd_game_play_init();
    pub fn smd_game_play_tick();
    pub fn smd_game_goal_init();
    pub fn smd_game_goal_tick();
    pub fn smd_game_goal_replay_init();
    pub fn smd_game_goal_replay_tick();
    pub fn smd_game_continue_init();
    pub fn smd_game_continue_tick();
    pub fn smd_game_timeover_init();
    pub fn smd_game_timeover_tick();
    pub fn smd_game_ringout_init();
    pub fn smd_game_ringout_tick();
    pub fn smd_game_bonus_clear_init();
    pub fn smd_game_bonus_clear_tick();
    pub fn smd_game_first_tick();
    pub fn smd_game_over_init();
    pub fn smd_game_over_point_init();
    pub fn smd_game_over_point_tick();
    pub fn smd_game_scenario_init();
    pub fn smd_game_scenario_tick();
    pub fn g_some_dest_function_handler();
    pub fn smd_game_scenario_return();
    pub fn smd_game_retry_init();
    pub fn smd_game_retry_tick();
    pub fn smd_game_over_save();
    pub fn smd_game_over_dest();
    pub fn smd_game_nameentry_ready_init();
    pub fn smd_game_nameentry_ready_tick();
    pub fn smd_game_nameentry_init();
    pub fn smd_game_nameentry_tick();
    pub fn smd_game_roll_init();
    pub fn smd_game_roll_tick(
        param_1: undefined4,
        param_2_00: undefined4,
        param_3: ::core::ffi::c_short,
    );
    pub fn smd_game_extra_init();
    pub fn smd_game_extra_tick();
    pub fn smd_game_result_init();
    pub fn smd_game_result_tick();
    pub fn smd_game_result_menu();
    pub fn smd_game_intr_sel_init();
    pub fn smd_game_intr_sel_tick();
    pub fn smd_game_sugg_save_init();
    pub fn smd_game_sugg_save_tick();
    pub fn get_next_stage_id() -> ::core::ffi::c_int;
    pub fn g_decrement_active_ball_monkey_count() -> uint;
    pub fn smd_game_force_exit_init();
    pub fn smd_game_force_exit_tick();
    pub fn smd_game_scenscnplay_return();
    pub fn smd_game_force_over_init();
    pub fn smd_game_force_over_tick();
    pub fn g_preload_stage_or_results();
    pub fn g_challenge_mode_start(ball: *mut Ball);
    pub fn challenge_mode_physics(ball: *mut Ball);
    pub fn apply_velocity(ball: *mut Ball);
    pub fn g_smth_with_mystery_3(ball: *mut Ball);
    pub fn g_camera_func89(camera: *mut Camera, ball: *mut Ball);
    pub fn g_camera_func90(camera: *mut Camera, ball: *mut Ball);
    pub fn smd_game_scenario_init_child();
    pub fn smd_game_scenario_tick_child();
    pub fn g_some_storymode_dest_function();
    pub fn game_scenario_draw_func();
    pub fn get_storymode_score() -> undefined4;
    pub fn set_storymode_score(value: ::core::ffi::c_int);
    pub fn get_storymode_banana_count() -> undefined4;
    pub fn set_storymode_bananas(banana_count: ::core::ffi::c_int);
    pub fn g_preload_ape_model_for_stageselect();
    pub fn g_save_storymode_progress(param_1: *mut ::core::ffi::c_void);
    pub fn get_current_storymode_stage_time_limit() -> ::core::ffi::c_int;
    pub fn get_storymode_stage_time_limit_wrapper(
        world: ::core::ffi::c_int,
        world_stage: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn g_some_scenario_init_func_1();
    pub fn g_some_storymode_mode_handler();
    pub fn g_get_storymode_playtime_frames();
    pub fn dmd_scen_select_init();
    pub fn dmd_scen_select_main();
    pub fn dmd_scen_1st_init();
    pub fn dmd_scen_return_init();
    pub fn dmd_scen_newgame_init();
    pub fn dmd_scen_newgame_main();
    pub fn dmd_scen_loadgame_init();
    pub fn dmd_scen_loadgame_main();
    pub fn dmd_scen_loadgame_restore();
    pub fn dmd_scen_sceneplay_init();
    pub fn dmd_scen_sceneplay_main();
    pub fn dmd_scen_scnplay_return();
    pub fn dmd_scen_scnplay_return_loading();
    pub fn dmd_scen_sel_world_init();
    pub fn dmd_scen_sel_world_next();
    pub fn dmd_scen_sel_floor_init();
    pub fn dmd_scen_sel_floor_main();
    pub fn dmd_scen_game_init();
    pub fn dmd_scen_game_main();
    pub fn dmd_scen_game_clear_init();
    pub fn dmd_scen_game_clear_main();
    pub fn dmd_scen_nameentry_init();
    pub fn dmd_scen_nameentry_main();
    pub fn dmd_scen_game_over_init();
    pub fn dmd_scen_game_over_main();
    pub fn dmd_scen_entry_init();
    pub fn dmd_scen_entry_main();
    pub fn g_some_storymode_mode_func();
    pub fn get_current_storymode_save_file() -> *mut StoryModeSaveFile;
    pub fn g_some_scenario_init_func_4();
    pub fn g_free_scen_stage_name_buffer();
    pub fn g_create_storymode_select_sprites(param_1: uint);
    pub fn g_related_to_loading_story_stageselect(param_1: uint);
    pub fn sprite_story_stage_select_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_story_stage_select_disp(sprite: *mut Sprite);
    pub fn g_handle_story_clear_stage_balls(param_1: ::core::ffi::c_short);
    pub fn sprite_clear_floors_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_clear_floors_disp(sprite: *mut Sprite);
    pub fn sprite_decoration_bar_disp(sprite: *mut Sprite);
    pub fn sprite_world_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_world_disp(sprite: *mut Sprite);
    pub fn g_animate_story_select_sprites(param_1: undefined2);
    pub fn g_sprite_world_info_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn g_sprite_world_info_disp(sprite: *mut Sprite);
    pub fn sprite_scen_stagesel_stage_name_tick(param_1: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_scen_stagesel_stage_name_disp(sprite: *mut Sprite);
    pub fn sprite_story_difficulty_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_story_difficulty_disp(sprite: *mut Sprite);
    pub fn g_draw_story_stage_preview_ball(param_1: undefined2);
    pub fn g_sprite_story_stage_info_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn g_sprite_story_stage_info_disp(sprite: *mut Sprite);
    pub fn g_preload_all_story_preview_images();
    pub fn g_draw_now_loading_text();
    pub fn g_get_storymode_next_world() -> uint;
    pub fn g_check_if_game_over_or_after_credits_sequence(
        param_1: ::core::ffi::c_int,
        param_2: *mut ::core::ffi::c_void,
    ) -> *mut ::core::ffi::c_void;
    pub fn g_some_scenario_init_func_3();
    pub fn g_handle_storymode_stageselect_state();
    pub fn dmd_scen_sel_floor_init_child();
    pub fn g_set_some_storymode_stageids();
    pub fn g_load_new_storymode_stage(param_1: ::core::ffi::c_int);
    pub fn g_some_scenario_init_func_2();
    pub fn g_smth_with_storymode();
    pub fn sprite_story_file_nameentry_disp();
    pub fn create_story_file_nameentry_sprite();
    pub fn dmd_scen_entry_main_child();
    pub fn g_get_story_file_name(param_1: *mut ::core::ffi::c_char);
    pub fn draw_storymode_save_file(saveFile: *mut StoryModeSaveFile, index: ::core::ffi::c_int);
    pub fn g_related_to_loading_dataselect_menu();
    pub fn dmd_scen_loadgame_main_child();
    pub fn get_storymode_menu_state() -> ::core::ffi::c_int;
    pub fn staff_roll_init();
    pub fn game_roll_draw_func();
    pub fn game_continue_draw_func();
    pub fn event_view_init();
    pub fn event_view_tick();
    pub fn event_view_dest();
    pub fn g_something_with_view_stage2();
    pub fn draw_reflective_objects_in_viewstage();
    pub fn g_call_advance_stage_animation();
    pub fn g_increment_bg_related_timer();
    pub fn view_stage_draw_bananas();
    pub fn g_smth_with_rendering_models_for_reflective_surfaces();
    pub fn g_draw_stobjs_in_viewstage();
    pub fn g_something_with_view_stage_camera(camera: *mut Camera);
    pub fn sel_ngc_prolog(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
    );
    pub fn sel_ngc_epilog();
    pub fn sel_ngc_unlinked_func();
    pub fn did_any_pad_press_input(input_id: PadInputID) -> bool_;
    pub fn g_create_main_menu();
    pub fn g_initialize_sel_ngc(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
    );
    pub fn g_reinitialize_sel_ngc();
    pub fn g_called_when_fading_to_storymode() -> undefined4;
    pub fn g_sel_ngc_item_selected(play_menu_selction_sound: ::core::ffi::c_int);
    pub fn g_b_button_pressed_on_menu(param_1_00: ::core::ffi::c_int);
    pub fn g_is_screen_in_screen_stack(g_screen_id: byte) -> BOOL32;
    pub fn menu_tick();
    pub fn g_something_with_menus(param_1: ::core::ffi::c_int);
    pub fn menu_mode_select_tick(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
    );
    pub fn menu_party_game_select_tick(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
    );
    pub fn menu_option_tick();
    pub fn menu_return_to_title();
    pub fn menu_number_of_players_tick();
    pub fn menu_character_select_tick();
    pub fn menu_gameplay_settings_tick();
    pub fn menu_main_game_select_tick();
    pub fn menu_level_select_tick();
    pub fn g_get_some_challenge_mode_difficulty_info(param_1: ::core::ffi::c_int);
    pub fn g_get_some_category_count(
        flag: ::core::ffi::c_int,
        g_out_1: *mut undefined4,
        g_out_2: *mut ::core::ffi::c_int,
    );
    pub fn menu_stage_select_tick();
    pub fn menu_start_story_mode();
    pub fn menu_start_challenge_mode();
    pub fn menu_start_practice_mode();
    pub fn menu_race_mode_select_tick();
    pub fn menu_race_course_select_tick();
    pub fn menu_start_race();
    pub fn menu_fight_mode_select_tick();
    pub fn menu_fight_no_of_wins_tick();
    pub fn menu_fight_stage_select_tick();
    pub fn menu_start_fight();
    pub fn menu_start_target();
    pub fn menu_billiards_mode_select_tick();
    pub fn menu_billiards_rule_select_tick();
    pub fn menu_start_billiards();
    pub fn menu_bowling_mode_select_tick();
    pub fn menu_bowling_rule_select_tick();
    pub fn menu_bowling_level_select_tick();
    pub fn menu_start_bowling();
    pub fn menu_golf_mode_select_tick();
    pub fn menu_start_golf();
    pub fn menu_boat_mode_select_entries_tick();
    pub fn menu_boat_course_select_tick();
    pub fn menu_start_boat();
    pub fn menu_shot_stage_select_tick();
    pub fn menu_start_shot();
    pub fn menu_dogfight_mode_select_tick();
    pub fn menu_dogfight_stage_select_tick();
    pub fn menu_start_dogfight();
    pub fn menu_soccer_mode_select_tick();
    pub fn menu_start_soccer();
    pub fn menu_baseball_mode_select_tick();
    pub fn menu_baseball_stadium_select_tick();
    pub fn menu_start_baseball();
    pub fn menu_tennis_mode_select_tick();
    pub fn menu_tennis_pair_select_tick();
    pub fn menu_tennis_court_select_tick();
    pub fn menu_start_tennis();
    pub fn menu_option_replay_tick();
    pub fn menu_option_play_points_tick();
    pub fn menu_option_gift_tick(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: undefined4,
        param_10: u32_,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn menu_option_ranking_tick();
    pub fn menu_option_game_data_tick();
    pub fn menu_option_controller_tick();
    pub fn menu_option_screen_tick();
    pub fn g_handle_starting_monkeys_count(
        param_1: ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
    pub fn create_main_menu_sprites();
    pub fn g_display_game_settings_sprite();
    pub fn create_practice_mode_stage_select_sprite();
    pub fn sprite_title_str_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_title_str_disp(sprite: *mut Sprite);
    pub fn sprite_info_str_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_info_str_disp(sprite: *mut Sprite);
    pub fn sprite_start_mask_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_menu_basic_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_menu_basic_disp(sprite: *mut Sprite);
    pub fn sprite_menu_basic_stack_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_menu_basic_title_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_menu_basic_title_disp(sprite: *mut Sprite);
    pub fn sprite_game_settings_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_game_settings_disp(param_1: *mut Sprite);
    pub fn sprite_practice_stage_select_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_practice_stage_select_disp(param_1: ::core::ffi::c_int);
    pub fn sprite_fight_stage_select_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_fight_stage_select_disp(param_1: *mut Sprite);
    pub fn sprite_button_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_button_disp(param_1: *mut Sprite);
    pub fn g_blink_selected_menu_item();
    pub fn g_something_with_menus5();
    pub fn g_load_select_apes();
    pub fn g_load_some_apes();
    pub fn menu_draw_background();
    pub fn g_draw_menu_bg_overlay(param_1: *mut GXColor, param_2: GXTexFmt);
    pub fn free_some_apes();
    pub fn g_draw_stage_0x9f_for_menu_bg();
    pub fn g_draw_stage_0x8a_for_menu_bg();
    pub fn g_draw_stage_for_menu_bg_2();
    pub fn sprite_practice_stage_preview_tick(status: *mut u8_, sprite: *mut Sprite);
    pub fn sprite_practice_stage_preview_disp(sprite: *mut Sprite);
    pub fn sprite_practice_stage_preview_mask_disp(status: *mut u8_, sprite: *mut Sprite);
    pub fn create_practice_mode_preview_sprites();
    pub fn g_draw_controller_sprites();
    pub fn g_draw_gift_menu(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: undefined4,
        param_10: u32_,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn sel_stage_unlinked_func();
    pub fn g_references_420_03();
    pub fn bowling_rel_prolog();
    pub fn bowling_rel_epilog();
    pub fn bowling_rel_unlinked();
    pub fn g_init_bowling();
    pub fn g_bowl_drawFunc(
        param_1: *mut Ape,
        param_2: ::core::ffi::c_int,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn g_load_missing_apes();
    pub fn g_load_commend_apes();
    pub fn g_load_selthing();
    pub fn ballid_matches_chara(chara_index: u32_) -> BOOL32;
    pub fn mini_billiards_unlinked_func();
    pub fn g_references_420_04();
    pub fn sample_unlinked_func();
    pub fn test_mode_prolog();
    pub fn test_mode_epilog();
    pub fn test_mode_unlinked_func();
    pub fn smd_test_select_init(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: undefined4,
        param_10: undefined4,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn smd_test_select_main();
    pub fn test_select_draw_func();
    pub fn smd_test_dip_init();
    pub fn smd_test_dip_main();
    pub fn smd_test_input_init();
    pub fn smd_test_input_main();
    pub fn smd_test_sound_init();
    pub fn smd_test_sound_main();
    pub fn test_sound_draw_func();
    pub fn smd_test_adx_init();
    pub fn smd_test_adx_main(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: undefined4,
        param_10: undefined4,
        param_11: *mut uint,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn smd_test_blur_init();
    pub fn smd_test_blur_main();
    pub fn test_blur_draw_func();
    pub fn smd_test_shadow_init();
    pub fn smd_test_shadow_main();
    pub fn smd_test_focus_init();
    pub fn smd_test_focus_main();
    pub fn smd_test_indirect_init();
    pub fn smd_test_indirect_main();
    pub fn smd_test_nlobject_init();
    pub fn smd_test_nlobject_main();
    pub fn smd_test_bitmap_init();
    pub fn smd_test_bitmap_main();
    pub fn test_bitmap_draw_func();
    pub fn smd_test_font_init();
    pub fn smd_test_font_main();
    pub fn test_font_draw_func();
    pub fn smd_test_aram_font_init();
    pub fn smd_test_aram_font_main();
    pub fn test_aram_font_draw_func();
    pub fn smd_test_motion_init();
    pub fn smd_test_motion_main(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn smd_test_newmotion_init();
    pub fn smd_test_newmotion_main(
        param_1: undefined4,
        param_2: undefined4,
        param_3: ::core::ffi::c_int,
        param_4: ::core::ffi::c_int,
        param_5: ::core::ffi::c_int,
        param_6: undefined4,
        param_7: ::core::ffi::c_int,
        param_8: ::core::ffi::c_int,
    );
    pub fn smd_test_advreplay_init();
    pub fn smd_test_model_init();
    pub fn smd_test_model_main();
    pub fn test_model_draw_func();
    pub fn smd_test_newmodel_init();
    pub fn smd_test_newmodel_main();
    pub fn test_newmodel_draw_func();
    pub fn smd_test_pattern_init();
    pub fn smd_test_pattern_main();
    pub fn test_pattern_draw_func();
    pub fn smd_test_romfont_init();
    pub fn smd_test_romfont_main();
    pub fn smd_test_prerend_init();
    pub fn smd_test_prerend_main();
    pub fn test_prerend_draw_func();
    pub fn smd_test_preview_init();
    pub fn smd_test_preview_main();
    pub fn smd_test_replay_init();
    pub fn smd_test_replay_main();
    pub fn smd_test_scene_play_init();
    pub fn smd_test_scene_play_main(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn test_scene_play_draw_func();
    pub fn smd_test_dialog_init();
    pub fn smd_test_dialog_main(
        param_1: undefined4,
        param_2: undefined4,
        param_3: *mut undefined2,
        param_4: undefined4,
        param_5: undefined4,
        param_6: undefined4,
        param_7: undefined4,
        param_8: undefined4,
    );
    pub fn test_dialog_draw_func();
    pub fn smd_test_difficulty_init();
    pub fn smd_test_difficulty_main();
    pub fn test_difficulty_draw_func();
    pub fn smd_test_chk_repsize_init();
    pub fn smd_test_chk_repsize_main();
    pub fn test_draw_func_handler(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
    );
    pub fn smd_test_shadow_main_child();
    pub fn g_test_shadow_draw_func_1();
    pub fn g_test_shadow_draw_func_2();
    pub fn smd_test_focus_main_child();
    pub fn test_focus_draw_func();
    pub fn smd_test_indirect_main_child();
    pub fn test_indirect_draw_func();
    pub fn g_some_printf_function_7(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: *mut ::core::ffi::c_char,
        param_10: *mut ::core::ffi::c_char,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn g_test_motion_main_draw_func() -> undefined8;
    pub fn test_adx_draw_func();
    pub fn test_newmotion_draw_func();
    pub fn g_something_freeing_something_from_main_heap_2();
    pub fn gan_setanim_e5(
        param_1: *mut *mut ArcFileInfo,
        param_2: *mut ::core::ffi::c_char,
        param_3: *mut *mut ::core::ffi::c_void,
    );
    pub fn gan_set_anim_e6(param_1: ::core::ffi::c_int);
    pub fn gan_setanim_e7(
        param_1: ::core::ffi::c_int,
        param_2: undefined4,
        param_3: ::core::ffi::c_int,
    );
    pub fn gan_setanim_e8(
        param_1: undefined4,
        param_2: undefined4,
        param_3: undefined4,
        param_4: undefined4,
        param_5: ::core::ffi::c_int,
    );
    pub fn option_prolog();
    pub fn option_epilog();
    pub fn option_unlinked_func();
    pub fn option_draw_func();
    pub fn g_references_420_06(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_short);
    pub fn race2_rel_prolog();
    pub fn race2_rel_epilog();
    pub fn race2_rel_unresolved();
    pub fn race2_tick();
    pub fn g_load_race();
    pub fn g_draw_race_timer_ui();
    pub fn g_print_race_time_remaining(param_1: undefined4, param_2: ::core::ffi::c_int);
    pub fn golf2_unlinked_func();
    pub fn g_golf_init();
    pub fn mini_fight2_unlinked_func();
    pub fn g_references_420_07(param_1: f64, param_2: f64, param_3: ::core::ffi::c_int);
    pub fn pilot2_unlinked_func();
    pub fn g_load_pilot();
    pub fn g_some_printf_function_8(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: *mut ::core::ffi::c_char,
        param_10: undefined4,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn g_some_printf_function_9(
        param_1: f64,
        param_2: f64,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: uint,
        param_10: undefined4,
        param_11: *mut ::core::ffi::c_char,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn item_pilot_init(item: *mut Item);
    pub fn item_pilot_tick(item: *mut Item);
    pub fn item_pilot_disp(item: *mut Item);
    pub fn item_pilot_coli(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn item_pilot_dest();
    pub fn item_pilot_replay_init();
    pub fn item_debug_pilot();
    pub fn boat_unlinked_func();
    pub fn g_load_boat();
    pub fn shooting_unlinked_func();
    pub fn g_read_something_for_shooting_from_dvd(
        param_1: *mut ::core::ffi::c_char,
        param_2: *mut *mut ArcFileInfo,
        param_3: *mut ::core::ffi::c_int,
    );
    pub fn g_read_something_for_shooting_2(
        param_1: *mut *mut SKLFile,
        param_2: *mut ::core::ffi::c_char,
        param_3: *mut *mut SKLRoot,
    );
    pub fn mini_futsal_unlinked_func();
    pub fn load_bg_ape();
    pub fn dogfight_unlinked_func();
    pub fn g_load_dog();
    pub fn g_some_printf_function_10(
        param_1: undefined8,
        param_2: undefined8,
        param_3: undefined8,
        param_4: undefined8,
        param_5: undefined8,
        param_6: undefined8,
        param_7: undefined8,
        param_8: undefined8,
        param_9: *mut ::core::ffi::c_char,
        param_10: undefined4,
        param_11: undefined4,
        param_12: undefined4,
        param_13: undefined4,
        param_14: undefined4,
        param_15: undefined4,
        param_16: undefined4,
    );
    pub fn item_dogfight_init(item: *mut Item);
    pub fn item_dogfight_tick(item: *mut Item);
    pub fn item_dogfight_disp(item: *mut Item);
    pub fn item_dogfight_coli(param_1: ::core::ffi::c_int, param_2: ::core::ffi::c_int);
    pub fn item_dogfight_dest();
    pub fn item_dogfight_replay_init();
    pub fn item_debug_dogfight();
    pub fn g_baseball_prolog();
    pub fn baseball_unlinked_func();
    pub fn g_baseball_game_loop() -> undefined4;
    pub fn g_load_baseball(
        player_id: byte,
        param_2: BallMode,
        param_3: undefined,
        param_4: byte,
        param_5: byte,
        param_6: uint,
        param_7: *mut ::core::ffi::c_void,
        param_8: ::core::ffi::c_int,
    );
    pub fn g_baseball_init_seesaws();
    pub fn g_get_sprite_work(
        param_1: *mut ::core::ffi::c_int,
        param_2: ::core::ffi::c_int,
    ) -> undefined4;
    pub fn g_tennis_prolog();
    pub fn tennis_unlinked_func();
    pub fn something_with_distance_sq(param_1: *mut f32, param_2: *mut f32) -> f64;
    pub fn GXResetOverflowCount(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn ttyClearProperty(param_1: ::core::ffi::c_int, param_2: undefined4);
    pub fn exoption_prolog();
    pub fn exoption_epilog();
    pub fn exoption_unlinked_func();
    pub fn exoption_draw_func();
    pub fn create_replay_hud_sprites();
    pub fn create_replay_stage_name_sprites(x: f32, y: f32);
}
