/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const NULL: u32 = 0;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const OS_CONTEXT_STATE_EXC: u32 = 2;
pub const __OS_INTERRUPT_MEM_0: u32 = 0;
pub const __OS_INTERRUPT_MEM_1: u32 = 1;
pub const __OS_INTERRUPT_MEM_2: u32 = 2;
pub const __OS_INTERRUPT_MEM_3: u32 = 3;
pub const __OS_INTERRUPT_MEM_ADDRESS: u32 = 4;
pub const __OS_INTERRUPT_DSP_AI: u32 = 5;
pub const __OS_INTERRUPT_DSP_ARAM: u32 = 6;
pub const __OS_INTERRUPT_DSP_DSP: u32 = 7;
pub const __OS_INTERRUPT_AI_AI: u32 = 8;
pub const __OS_INTERRUPT_EXI_0_EXI: u32 = 9;
pub const __OS_INTERRUPT_EXI_0_TC: u32 = 10;
pub const __OS_INTERRUPT_EXI_0_EXT: u32 = 11;
pub const __OS_INTERRUPT_EXI_1_EXI: u32 = 12;
pub const __OS_INTERRUPT_EXI_1_TC: u32 = 13;
pub const __OS_INTERRUPT_EXI_1_EXT: u32 = 14;
pub const __OS_INTERRUPT_EXI_2_EXI: u32 = 15;
pub const __OS_INTERRUPT_EXI_2_TC: u32 = 16;
pub const __OS_INTERRUPT_PI_CP: u32 = 17;
pub const __OS_INTERRUPT_PI_PE_TOKEN: u32 = 18;
pub const __OS_INTERRUPT_PI_PE_FINISH: u32 = 19;
pub const __OS_INTERRUPT_PI_SI: u32 = 20;
pub const __OS_INTERRUPT_PI_DI: u32 = 21;
pub const __OS_INTERRUPT_PI_RSW: u32 = 22;
pub const __OS_INTERRUPT_PI_ERROR: u32 = 23;
pub const __OS_INTERRUPT_PI_VI: u32 = 24;
pub const __OS_INTERRUPT_PI_DEBUG: u32 = 25;
pub const __OS_INTERRUPT_PI_HSP: u32 = 26;
pub const __OS_INTERRUPT_MAX: u32 = 32;
pub const OS_INTERRUPTMASK_DSP_DSP: u32 = 16777216;
pub const OS_PRIORITY_MIN: u32 = 0;
pub const OS_PRIORITY_MAX: u32 = 31;
pub const OS_PRIORITY_IDLE: u32 = 31;
pub const OS_THREAD_ATTR_DETACH: u32 = 1;
pub const OS_THREAD_STACK_MAGIC: u32 = 3735927486;
pub const OS_FONT_ENCODE_ANSI: u32 = 0;
pub const OS_FONT_ENCODE_SJIS: u32 = 1;
pub const OS_FONT_SIZE_ANSI: u32 = 131360;
pub const OS_FONT_SIZE_SJIS: u32 = 1183488;
pub const OS_FONT_ROM_SIZE_ANSI: u32 = 12288;
pub const OS_FONT_ROM_SIZE_SJIS: u32 = 315392;
pub const OS_RESET_RESTART: u32 = 0;
pub const OS_RESET_HOTRESET: u32 = 1;
pub const OS_RESET_SHUTDOWN: u32 = 2;
pub const OS_ERROR_SYSTEM_RESET: u32 = 0;
pub const OS_ERROR_MACHINE_CHECK: u32 = 1;
pub const OS_ERROR_DSI: u32 = 2;
pub const OS_ERROR_ISI: u32 = 3;
pub const OS_ERROR_EXTERNAL_INTERRUPT: u32 = 4;
pub const OS_ERROR_ALIGNMENT: u32 = 5;
pub const OS_ERROR_PROGRAM: u32 = 6;
pub const OS_ERROR_FLOATING_POINT: u32 = 7;
pub const OS_ERROR_DECREMENTER: u32 = 8;
pub const OS_ERROR_SYSTEM_CALL: u32 = 9;
pub const OS_ERROR_TRACE: u32 = 10;
pub const OS_ERROR_PERFORMACE_MONITOR: u32 = 11;
pub const OS_ERROR_BREAKPOINT: u32 = 12;
pub const OS_ERROR_SYSTEM_INTERRUPT: u32 = 13;
pub const OS_ERROR_THERMAL_INTERRUPT: u32 = 14;
pub const OS_ERROR_MAX: u32 = 15;
pub const OS_BASE_CACHED: u32 = 2147483648;
pub const OS_BASE_UNCACHED: u32 = 3221225472;
pub const OS_SOUND_MODE_MONO: u32 = 0;
pub const OS_SOUND_MODE_STEREO: u32 = 1;
pub const DVD_RESULT_GOOD: u32 = 0;
pub const DVD_RESULT_FATAL_ERROR: i32 = -1;
pub const DVD_RESULT_IGNORED: i32 = -2;
pub const DVD_RESULT_CANCELED: i32 = -3;
pub const DVD_STATE_FATAL_ERROR: i32 = -1;
pub const DVD_STATE_END: u32 = 0;
pub const DVD_STATE_BUSY: u32 = 1;
pub const DVD_STATE_WAITING: u32 = 2;
pub const DVD_STATE_COVER_CLOSED: u32 = 3;
pub const DVD_STATE_NO_DISK: u32 = 4;
pub const DVD_STATE_COVER_OPEN: u32 = 5;
pub const DVD_STATE_WRONG_DISK: u32 = 6;
pub const DVD_STATE_MOTOR_STOPPED: u32 = 7;
pub const DVD_STATE_PAUSING: u32 = 8;
pub const DVD_STATE_IGNORED: u32 = 9;
pub const DVD_STATE_CANCELED: u32 = 10;
pub const DVD_STATE_RETRY: u32 = 11;
pub const VI_INTERLACE: u32 = 0;
pub const VI_NON_INTERLACE: u32 = 1;
pub const VI_PROGRESSIVE: u32 = 2;
pub const VI_NTSC: u32 = 0;
pub const VI_PAL: u32 = 1;
pub const VI_MPAL: u32 = 2;
pub const VI_DEBUG: u32 = 3;
pub const VI_DEBUG_PAL: u32 = 4;
pub const VI_EURGB60: u32 = 5;
pub const _GX_TF_CTF: u32 = 32;
pub const _GX_TF_ZTF: u32 = 16;
pub const GX_PROJECTION_SZ: u32 = 7;
pub const GXFIFO_ADDR: u32 = 3422584832;
pub const GX_LOAD_BP_REG: u32 = 97;
pub const GX_LOAD_CP_REG: u32 = 8;
pub const GX_LOAD_XF_REG: u32 = 16;
pub const GX_LOAD_INDX_A: u32 = 32;
pub const GX_LOAD_INDX_B: u32 = 40;
pub const GX_LOAD_INDX_C: u32 = 48;
pub const GX_LOAD_INDX_D: u32 = 56;
pub const GX_NOP: u32 = 0;
pub const GX_DRAW_QUADS: u32 = 128;
pub const GX_DRAW_TRIANGLES: u32 = 144;
pub const GX_DRAW_TRIANGLE_STRIP: u32 = 152;
pub const GX_DRAW_TRIANGLE_FAN: u32 = 160;
pub const GX_DRAW_LINES: u32 = 168;
pub const GX_DRAW_LINE_STRIP: u32 = 176;
pub const GX_DRAW_POINTS: u32 = 184;
pub const GX_MAX_Z24: u32 = 16777215;
pub const CARD_RESULT_UNLOCKED: u32 = 1;
pub const CARD_RESULT_READY: u32 = 0;
pub const CARD_RESULT_BUSY: i32 = -1;
pub const CARD_RESULT_WRONGDEVICE: i32 = -2;
pub const CARD_RESULT_NOCARD: i32 = -3;
pub const CARD_RESULT_NOFILE: i32 = -4;
pub const CARD_RESULT_IOERROR: i32 = -5;
pub const CARD_RESULT_BROKEN: i32 = -6;
pub const CARD_RESULT_EXIST: i32 = -7;
pub const CARD_RESULT_NOENT: i32 = -8;
pub const CARD_RESULT_INSSPACE: i32 = -9;
pub const CARD_RESULT_NOPERM: i32 = -10;
pub const CARD_RESULT_LIMIT: i32 = -11;
pub const CARD_RESULT_NAMETOOLONG: i32 = -12;
pub const CARD_RESULT_ENCODING: i32 = -13;
pub const CARD_RESULT_CANCELED: i32 = -14;
pub const CARD_RESULT_FATAL_ERROR: i32 = -128;
pub const CARD_FILENAME_MAX: u32 = 32;
pub const CARD_MAX_FILE: u32 = 127;
pub const CARD_ICON_MAX: u32 = 8;
pub const ARAM_DIR_MRAM_TO_ARAM: u32 = 0;
pub const ARAM_DIR_ARAM_TO_MRAM: u32 = 1;
pub const ARQ_TYPE_MRAM_TO_ARAM: u32 = 0;
pub const ARQ_TYPE_ARAM_TO_MRAM: u32 = 1;
pub const ARQ_PRIORITY_LOW: u32 = 0;
pub const ARQ_PRIORITY_HIGH: u32 = 1;
pub const GQR0: u32 = 912;
pub const GQR1: u32 = 913;
pub const GQR2: u32 = 914;
pub const GQR3: u32 = 915;
pub const GQR4: u32 = 916;
pub const GQR5: u32 = 917;
pub const GQR6: u32 = 918;
pub const GQR7: u32 = 919;
pub const PAD_SPEC_0: u32 = 0;
pub const PAD_SPEC_1: u32 = 1;
pub const PAD_SPEC_2: u32 = 2;
pub const PAD_SPEC_3: u32 = 3;
pub const PAD_SPEC_4: u32 = 4;
pub const PAD_SPEC_5: u32 = 5;
pub const PAD_MOTOR_STOP: u32 = 0;
pub const PAD_MOTOR_RUMBLE: u32 = 1;
pub const PAD_MOTOR_STOP_HARD: u32 = 2;
pub const PAD_CHAN0_BIT: u32 = 2147483648;
pub const PAD_MAX_CONTROLLERS: u32 = 4;
pub const PAD_BUTTON_LEFT: u32 = 1;
pub const PAD_BUTTON_RIGHT: u32 = 2;
pub const PAD_BUTTON_DOWN: u32 = 4;
pub const PAD_BUTTON_UP: u32 = 8;
pub const PAD_TRIGGER_Z: u32 = 16;
pub const PAD_TRIGGER_R: u32 = 32;
pub const PAD_TRIGGER_L: u32 = 64;
pub const PAD_BUTTON_A: u32 = 256;
pub const PAD_BUTTON_B: u32 = 512;
pub const PAD_BUTTON_X: u32 = 1024;
pub const PAD_BUTTON_Y: u32 = 2048;
pub const PAD_BUTTON_MENU: u32 = 4096;
pub const PAD_BUTTON_START: u32 = 4096;
pub const PAD_ERR_NONE: u32 = 0;
pub const PAD_ERR_NO_CONTROLLER: i32 = -1;
pub const PAD_ERR_NOT_READY: i32 = -2;
pub const PAD_ERR_TRANSFER: i32 = -3;
pub const DTK_STATE_STOP: u32 = 0;
pub const DTK_STATE_RUN: u32 = 1;
pub const DTK_STATE_PAUSE: u32 = 2;
pub const DTK_STATE_BUSY: u32 = 3;
pub const DTK_STATE_PREPARE: u32 = 4;
pub const DTK_MODE_NOREPEAT: u32 = 0;
pub const DTK_MODE_ALLREPEAT: u32 = 1;
pub const DTK_MODE_REPEAT1: u32 = 2;
pub const AI_SAMPLERATE_32KHZ: u32 = 0;
pub const AI_SAMPLERATE_48KHZ: u32 = 1;
pub const MAX_PLAYERS: u32 = 4;
pub const MAX_ITEMS: u32 = 256;
pub const MAX_STOBJS: u32 = 128;
pub const MAX_SPRITES: u32 = 64;
pub const MAX_EFFECTS: u32 = 512;
pub const qr0: u32 = 0;
pub const qr2: u32 = 2;
pub const ANALOG_STICK_LEFT: u32 = 1;
pub const ANALOG_STICK_RIGHT: u32 = 2;
pub const ANALOG_STICK_DOWN: u32 = 4;
pub const ANALOG_STICK_UP: u32 = 8;
pub const ANALOG_CSTICK_LEFT: u32 = 16;
pub const ANALOG_CSTICK_RIGHT: u32 = 32;
pub const ANALOG_CSTICK_DOWN: u32 = 64;
pub const ANALOG_CSTICK_UP: u32 = 128;
pub const ANALOG_TRIGGER_LEFT: u32 = 256;
pub const ANALOG_TRIGGER_RIGHT: u32 = 512;
pub const NLSPR_LISTTYPE_OPAQUE: u32 = 0;
pub const NLSPR_LISTTYPE_TRANS: u32 = 2;
pub const NLSPR_LISTTYPE_PUNCH: u32 = 4;
pub const NLSPR_LISTTYPE_AUTO: i32 = -1;
pub const NLSPR_DISP_xL: u32 = 1;
pub const NLSPR_DISP_xC: u32 = 2;
pub const NLSPR_DISP_xR: u32 = 3;
pub const NLSPR_DISP_yT: u32 = 1;
pub const NLSPR_DISP_yC: u32 = 2;
pub const NLSPR_DISP_yB: u32 = 3;
pub const NLSPR_DISP_LT: u32 = 5;
pub const NLSPR_DISP_LC: u32 = 9;
pub const NLSPR_DISP_LB: u32 = 13;
pub const NLSPR_DISP_CT: u32 = 6;
pub const NLSPR_DISP_CC: u32 = 10;
pub const NLSPR_DISP_CB: u32 = 14;
pub const NLSPR_DISP_RT: u32 = 7;
pub const NLSPR_DISP_RC: u32 = 11;
pub const NLSPR_DISP_RB: u32 = 15;
pub const NLSPR_FLIP_H: u32 = 524288;
pub const NLSPR_FLIP_V: u32 = 1048576;
pub const NLSPR_UNKFLAG_12: u32 = 4096;
pub const NLSPR_UNKFLAG_17: u32 = 131072;
pub const NLSPR_PERSP_SCALE: u32 = 262144;
pub const NLSPR_DEPTH_UPDATE: u32 = 2097152;
pub const FADE_IN: u32 = 0;
pub const FADE_OUT: u32 = 1;
pub const FADE_UNK2: u32 = 2;
pub const FADE_ABOVE_SPRITES: u32 = 256;
pub const PI: f64 = 3.141592653589793;
pub const OFFSET_mtxA: u32 = 0;
pub const OFFSET_mtxB: u32 = 48;
pub const OFFSET_mtxStackPtr: u32 = 148;
pub const OFFSET_constZeroF: u32 = 408;
pub const OFFSET_constOneF: u32 = 412;
pub const OFFSET_constOneHalfF: u32 = 416;
pub const OFFSET_constZeroOne: u32 = 428;
pub const OFFSET_constOneZero: u32 = 430;
pub const LC_CACHE_BASE: u32 = 3758096384;
pub const RAND_MAX: u32 = 32767;
pub const TEXTBOX_FONT_SIZE: u32 = 24;
pub const XF_AMBIENT0_ID: u32 = 4106;
pub const XF_MATERIAL0_ID: u32 = 4108;
pub const GX_GENMODE_ID: u32 = 0;
pub const GX_GENMODE_REG_ID_SIZE: u32 = 8;
pub const GX_GENMODE_REG_ID_SHIFT: u32 = 24;
pub const GX_GENMODE_REG_ID_MASK: u32 = 4278190080;
pub const GX_BPMASK_ID: u32 = 15;
pub const GX_BPMASK_REG_ID_SIZE: u32 = 8;
pub const GX_BPMASK_REG_ID_SHIFT: u32 = 24;
pub const GX_BPMASK_REG_ID_MASK: u32 = 4278190080;
pub const GX_LPSIZE_ID: u32 = 34;
pub const GX_LPSIZE_REG_ID_SIZE: u32 = 8;
pub const GX_LPSIZE_REG_ID_SHIFT: u32 = 24;
pub const GX_LPSIZE_REG_ID_MASK: u32 = 4278190080;
pub const TEV_COLOR_ENV_REG_ID_SIZE: u32 = 8;
pub const TEV_COLOR_ENV_REG_ID_SHIFT: u32 = 24;
pub const TEV_COLOR_ENV_REG_ID_MASK: u32 = 4278190080;
pub const TEV_ALPHA_ENV_REG_ID_SIZE: u32 = 8;
pub const TEV_ALPHA_ENV_REG_ID_SHIFT: u32 = 24;
pub const TEV_ALPHA_ENV_REG_ID_MASK: u32 = 4278190080;
pub const TEV_COLOR_ENV_0_ID: u32 = 192;
pub const TEV_ALPHA_ENV_0_ID: u32 = 193;
pub const TEV_COLOR_ENV_1_ID: u32 = 194;
pub const TEV_ALPHA_ENV_1_ID: u32 = 195;
pub const TEV_COLOR_ENV_2_ID: u32 = 196;
pub const TEV_ALPHA_ENV_2_ID: u32 = 197;
pub const TEV_COLOR_ENV_3_ID: u32 = 198;
pub const TEV_ALPHA_ENV_3_ID: u32 = 199;
pub const TEV_COLOR_ENV_4_ID: u32 = 200;
pub const TEV_ALPHA_ENV_4_ID: u32 = 201;
pub const TEV_COLOR_ENV_5_ID: u32 = 202;
pub const TEV_ALPHA_ENV_5_ID: u32 = 203;
pub const TEV_COLOR_ENV_6_ID: u32 = 204;
pub const TEV_ALPHA_ENV_6_ID: u32 = 205;
pub const TEV_COLOR_ENV_7_ID: u32 = 206;
pub const TEV_ALPHA_ENV_7_ID: u32 = 207;
pub const TEV_COLOR_ENV_8_ID: u32 = 208;
pub const TEV_ALPHA_ENV_8_ID: u32 = 209;
pub const TEV_COLOR_ENV_9_ID: u32 = 210;
pub const TEV_ALPHA_ENV_9_ID: u32 = 211;
pub const TEV_COLOR_ENV_A_ID: u32 = 212;
pub const TEV_ALPHA_ENV_A_ID: u32 = 213;
pub const TEV_COLOR_ENV_B_ID: u32 = 214;
pub const TEV_ALPHA_ENV_B_ID: u32 = 215;
pub const TEV_COLOR_ENV_C_ID: u32 = 216;
pub const TEV_ALPHA_ENV_C_ID: u32 = 217;
pub const TEV_COLOR_ENV_D_ID: u32 = 218;
pub const TEV_ALPHA_ENV_D_ID: u32 = 219;
pub const TEV_COLOR_ENV_E_ID: u32 = 220;
pub const TEV_ALPHA_ENV_E_ID: u32 = 221;
pub const TEV_COLOR_ENV_F_ID: u32 = 222;
pub const TEV_ALPHA_ENV_F_ID: u32 = 223;
pub const TEV_KSEL_REG_ID_SIZE: u32 = 8;
pub const TEV_KSEL_REG_ID_SHIFT: u32 = 24;
pub const TEV_KSEL_REG_ID_MASK: u32 = 4278190080;
pub const TEV_KSEL_0_ID: u32 = 246;
pub const TEV_KSEL_1_ID: u32 = 247;
pub const TEV_KSEL_2_ID: u32 = 248;
pub const TEV_KSEL_3_ID: u32 = 249;
pub const TEV_KSEL_4_ID: u32 = 250;
pub const TEV_KSEL_5_ID: u32 = 251;
pub const TEV_KSEL_6_ID: u32 = 252;
pub const TEV_KSEL_7_ID: u32 = 253;
pub const RAS_IREF_ID: u32 = 39;
pub const RAS_IREF_REG_ID_SIZE: u32 = 8;
pub const RAS_IREF_REG_ID_SHIFT: u32 = 24;
pub const RAS_IREF_REG_ID_MASK: u32 = 4278190080;
pub const RAS_TREF0_ID: u32 = 40;
pub const RAS_TREF_REG_ID_SIZE: u32 = 8;
pub const RAS_TREF_REG_ID_SHIFT: u32 = 24;
pub const RAS_TREF_REG_ID_MASK: u32 = 4278190080;
pub const SU_TS0_REG_ID_SIZE: u32 = 8;
pub const SU_TS0_REG_ID_SHIFT: u32 = 24;
pub const SU_TS0_REG_ID_MASK: u32 = 4278190080;
pub const SU_TS1_REG_ID_SIZE: u32 = 8;
pub const SU_TS1_REG_ID_SHIFT: u32 = 24;
pub const SU_TS1_REG_ID_MASK: u32 = 4278190080;
pub const SU_SCIS0_ID: u32 = 32;
pub const SU_SCIS1_ID: u32 = 33;
pub const SU_SCIS0_REG_ID_SIZE: u32 = 8;
pub const SU_SCIS0_REG_ID_SHIFT: u32 = 24;
pub const SU_SCIS0_REG_ID_MASK: u32 = 4278190080;
pub const SU_SCIS1_REG_ID_SIZE: u32 = 8;
pub const SU_SCIS1_REG_ID_SHIFT: u32 = 24;
pub const SU_SCIS1_REG_ID_MASK: u32 = 4278190080;
pub const SU_SSIZE0_ID: u32 = 48;
pub const SU_TSIZE0_ID: u32 = 49;
pub const SU_SSIZE1_ID: u32 = 50;
pub const SU_TSIZE1_ID: u32 = 51;
pub const SU_SSIZE2_ID: u32 = 52;
pub const SU_TSIZE2_ID: u32 = 53;
pub const SU_SSIZE3_ID: u32 = 54;
pub const SU_TSIZE3_ID: u32 = 55;
pub const SU_SSIZE4_ID: u32 = 56;
pub const SU_TSIZE4_ID: u32 = 57;
pub const SU_SSIZE5_ID: u32 = 58;
pub const SU_TSIZE5_ID: u32 = 59;
pub const SU_SSIZE6_ID: u32 = 60;
pub const SU_TSIZE6_ID: u32 = 61;
pub const SU_SSIZE7_ID: u32 = 62;
pub const SU_TSIZE7_ID: u32 = 63;
pub const GX_ZMODE_ID: u32 = 64;
pub const GX_ZMODE_REG_ID_SIZE: u32 = 8;
pub const GX_ZMODE_REG_ID_SHIFT: u32 = 24;
pub const GX_ZMODE_REG_ID_MASK: u32 = 4278190080;
pub const GX_CMODE0_ID: u32 = 65;
pub const GX_CMODE0_REG_ID_SIZE: u32 = 8;
pub const GX_CMODE0_REG_ID_SHIFT: u32 = 24;
pub const GX_CMODE0_REG_ID_MASK: u32 = 4278190080;
pub const GX_CMODE1_ID: u32 = 66;
pub const GX_CMODE1_REG_ID_SIZE: u32 = 8;
pub const GX_CMODE1_REG_ID_SHIFT: u32 = 24;
pub const GX_CMODE1_REG_ID_MASK: u32 = 4278190080;
pub const PE_CONTROL_ID: u32 = 67;
pub const PE_CONTROL_REG_ID_SIZE: u32 = 8;
pub const PE_CONTROL_REG_ID_SHIFT: u32 = 24;
pub const PE_CONTROL_REG_ID_MASK: u32 = 4278190080;
pub const PE_COPY_CMD_GAMMA_SIZE: u32 = 2;
pub const PE_COPY_CMD_GAMMA_SHIFT: u32 = 7;
pub const PE_COPY_CMD_GAMMA_MASK: u32 = 384;
pub const GEN_MODE_REG_ID_SIZE: u32 = 8;
pub const GEN_MODE_REG_ID_SHIFT: u32 = 24;
pub const GEN_MODE_REG_ID_MASK: u32 = 4278190080;
pub const GX_VAT_REG_A_UNK_SIZE: u32 = 1;
pub const GX_VAT_REG_A_UNK_SHIFT: u32 = 30;
pub const GX_VAT_REG_A_UNK_MASK: u32 = 1073741824;
pub const GX_VAT_REG_B_UNK_SIZE: u32 = 1;
pub const GX_VAT_REG_B_UNK_SHIFT: u32 = 31;
pub const GX_VAT_REG_B_UNK_MASK: u32 = 2147483648;
pub const GX_OPCODE_INDEX_SIZE: u32 = 3;
pub const GX_OPCODE_INDEX_SHIFT: u32 = 0;
pub const GX_OPCODE_INDEX_MASK: u32 = 7;
pub const GX_OPCODE_CMD_SHIFT: u32 = 3;
pub const CP_STREAM_REG_INDEX_SIZE: u32 = 4;
pub const CP_STREAM_REG_INDEX_SHIFT: u32 = 0;
pub const CP_STREAM_REG_INDEX_MASK: u32 = 15;
pub const CP_STREAM_REG_ADDR_SIZE: u32 = 4;
pub const CP_STREAM_REG_ADDR_SHIFT: u32 = 4;
pub const CP_STREAM_REG_ADDR_MASK: u32 = 240;
pub const PE_REFRESH_REG_ID_SIZE: u32 = 8;
pub const PE_REFRESH_REG_ID_SHIFT: u32 = 24;
pub const PE_REFRESH_REG_ID_MASK: u32 = 4278190080;
pub const PE_REFRESH_INTERVAL_SHIFT: u32 = 0;
pub const PE_REFRESH_ENABLE_SHIFT: u32 = 9;
pub const PE_REFRESH_TOTAL_SIZE: u32 = 32;
pub const TX_REFRESH_REG_ID_SIZE: u32 = 8;
pub const TX_REFRESH_REG_ID_SHIFT: u32 = 24;
pub const TX_REFRESH_REG_ID_MASK: u32 = 4278190080;
pub const TX_REFRESH_INTERVAL_SHIFT: u32 = 0;
pub const TX_REFRESH_ENABLE_SHIFT: u32 = 10;
pub const TX_REFRESH_TOTAL_SIZE: u32 = 32;
pub const ALL_THREAD_MASK: u32 = 16777215;
pub const NAN: f64 = f64::NAN;
pub const HUGE_VALF: f64 = f64::INFINITY;
pub const INFINITY: f64 = f64::INFINITY;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const NUM_BUTTONS: u32 = 48;
pub const HORIZONTAL_MIN: u32 = 0;
pub const HORIZONTAL_MAX: u32 = 624;
pub const VERTICAL_MIN: u32 = 0;
pub const VERTICAL_MAX: u32 = 464;
pub const MAX_GOALS: u32 = 8;
pub const SCREEN_ASPECT: f64 = 1.3333333333333333;
pub const UNLOCKED_BILLIARDS: u32 = 1;
pub const UNLOCKED_BOWLING: u32 = 2;
pub const UNLOCKED_GOLF: u32 = 4;
pub const UNLOCKED_ALL_CONTINUES: u32 = 8;
pub const UNLOCKED_CONTINUES_SHIFT: u32 = 4;
pub const UNLOCKED_CONTINUES_MASK: u32 = 112;
pub const lbl_802F3768: f64 = 1.0;
pub const GQR_F32: u32 = 0;
pub const GQR_U8: u32 = 2;
pub const GQR_U16: u32 = 3;
pub const GQR_S8: u32 = 4;
pub const GQR_S16: u32 = 5;
pub const FIFO_SIZE: u32 = 1048576;
pub const SUB_HEAP_SIZE: u32 = 524320;
pub const STAGE_HEAP_SIZE: u32 = 3145760;
pub const BACKGROUND_HEAP_SIZE: u32 = 2097184;
pub const CHARA_HEAP_SIZE: u32 = 3145760;
pub const BLOCK_SIZE: u32 = 8192;
pub const SND_AUX_NUMPARAMETERS: u32 = 4;
pub const SND_AUX_REASON_BUFFERUPDATE: u32 = 0;
pub const SND_AUX_REASON_PARAMETERUPDATE: u32 = 1;
pub const LIGHTGROUP_STACK_MAX: u32 = 3;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const MAX_REPLAY_FRAMES: u32 = 3840;
pub const NO_COMPRESSION: u32 = 1;
pub const MAX_FRAMES: u32 = 720;
pub const ARAM_BASE: u32 = 7340032;
pub const ARAM_SIZE: u32 = 4194304;
pub const SCREEN_ROWS: u32 = 37;
pub const SCREEN_COLUMNS: u32 = 53;
pub const RANGE_NOMIN: u32 = 1;
pub const RANGE_NOMAX: u32 = 2;
pub const ALIGNMENT: u32 = 32;
pub const MINOBJSIZE: u32 = 64;
pub const CARD_ATTR_PUBLIC: u32 = 4;
pub const CARD_ATTR_NO_COPY: u32 = 8;
pub const CARD_ATTR_NO_MOVE: u32 = 16;
pub const CARD_ATTR_GLOBAL: u32 = 32;
pub const CARD_ATTR_COMPANY: u32 = 64;
pub const CARD_FAT_AVAIL: u32 = 0;
pub const CARD_FAT_CHECKSUM: u32 = 0;
pub const CARD_FAT_CHECKSUMINV: u32 = 1;
pub const CARD_FAT_CHECKCODE: u32 = 2;
pub const CARD_FAT_FREEBLOCKS: u32 = 3;
pub const CARD_FAT_LASTSLOT: u32 = 4;
pub const CARD_WORKAREA_SIZE: u32 = 40960;
pub const CARD_SEG_SIZE: u32 = 512;
pub const CARD_PAGE_SIZE: u32 = 128;
pub const CARD_NUM_SYSTEM_BLOCK: u32 = 5;
pub const CARD_SYSTEM_BLOCK_SIZE: u32 = 8192;
pub const CARD_MAX_MOUNT_STEP: u32 = 7;
pub const CARD_STAT_SPEED_END: u32 = 0;
pub const CARD_STAT_SPEED_FAST: u32 = 1;
pub const CARD_STAT_SPEED_MIDDLE: u32 = 2;
pub const CARD_STAT_SPEED_SLOW: u32 = 3;
pub const CARD_STAT_SPEED_MASK: u32 = 3;
pub const CARD_READ_SIZE: u32 = 512;
pub const CARD_COMMENT_SIZE: u32 = 64;
pub const CARD_ICON_WIDTH: u32 = 32;
pub const CARD_ICON_HEIGHT: u32 = 32;
pub const CARD_BANNER_WIDTH: u32 = 96;
pub const CARD_BANNER_HEIGHT: u32 = 32;
pub const CARD_STAT_ICON_NONE: u32 = 0;
pub const CARD_STAT_ICON_C8: u32 = 1;
pub const CARD_STAT_ICON_RGB5A3: u32 = 2;
pub const CARD_STAT_ICON_MASK: u32 = 3;
pub const CARD_STAT_BANNER_NONE: u32 = 0;
pub const CARD_STAT_BANNER_C8: u32 = 1;
pub const CARD_STAT_BANNER_RGB5A3: u32 = 2;
pub const CARD_STAT_BANNER_MASK: u32 = 3;
pub type va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FILE {
    pub unk0: ::core::ffi::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub filler6: [::core::ffi::c_uchar; 14usize],
    pub unk14: ::core::ffi::c_int,
    pub unk18: ::core::ffi::c_int,
    pub unk1C: ::core::ffi::c_int,
    pub unk20: ::core::ffi::c_int,
    pub unk24: ::core::ffi::c_int,
    pub unk28: ::core::ffi::c_int,
    pub filler2C: [::core::ffi::c_uchar; 4usize],
    pub unk30: ::core::ffi::c_int,
    pub filler34: [::core::ffi::c_uchar; 8usize],
    pub unk3C: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub filler40: [::core::ffi::c_uchar; 4usize],
    pub unk44: ::core::ffi::c_int,
}
impl FILE {
    #[inline]
    pub fn unk4b0(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_unk4b0(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn unk4b7(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_unk4b7(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn unk4b10(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_unk4b10(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn unk4b12(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unk4b12(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        unk4b0: ::core::ffi::c_ushort,
        unk4b7: ::core::ffi::c_ushort,
        unk4b10: ::core::ffi::c_ushort,
        unk4b12: ::core::ffi::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let unk4b0: u16 = unsafe { ::core::mem::transmute(unk4b0) };
            unk4b0 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 3u8, {
            let unk4b7: u16 = unsafe { ::core::mem::transmute(unk4b7) };
            unk4b7 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let unk4b10: u16 = unsafe { ::core::mem::transmute(unk4b10) };
            unk4b10 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let unk4b12: u16 = unsafe { ::core::mem::transmute(unk4b12) };
            unk4b12 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type s8 = ::core::ffi::c_schar;
pub type u8_ = ::core::ffi::c_uchar;
pub type s16 = ::core::ffi::c_short;
pub type u16_ = ::core::ffi::c_ushort;
pub type s32 = ::core::ffi::c_long;
pub type u32_ = ::core::ffi::c_ulong;
pub type s64 = ::core::ffi::c_longlong;
pub type u64_ = ::core::ffi::c_ulonglong;
pub type f32_ = f32;
pub type f64_ = f64;
pub type BOOL = ::core::ffi::c_int;
pub type OSHeapHandle = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OSContext {
    pub gpr: [u32_; 32usize],
    pub cr: u32_,
    pub lr: u32_,
    pub ctr: u32_,
    pub xer: u32_,
    pub fpr: [f64_; 32usize],
    pub fpscr_pad: u32_,
    pub fpscr: u32_,
    pub srr0: u32_,
    pub srr1: u32_,
    pub mode: u16_,
    pub state: u16_,
    pub gqr: [u32_; 8usize],
    pub psf: [f64_; 32usize],
}
pub type __OSInterrupt = s16;
pub type OSInterruptMask = u32_;
pub type __OSInterruptHandler =
    ::core::option::Option<unsafe extern "C" fn(intr: __OSInterrupt, ctx: *mut OSContext)>;
pub type OSModuleID = u32_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSModuleLink {
    pub next: *mut OSModuleInfo,
    pub prev: *mut OSModuleInfo,
}
impl Default for OSModuleLink {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSModuleInfo {
    pub id: OSModuleID,
    pub link: OSModuleLink,
    pub numSections: u32_,
    pub sectionInfoOffset: u32_,
    pub nameOffset: u32_,
    pub nameSize: u32_,
    pub version: u32_,
}
impl Default for OSModuleInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type OSPriority = s32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSThreadQueue {
    pub head: *mut OSThread,
    pub tail: *mut OSThread,
}
impl Default for OSThreadQueue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSThreadLink {
    pub next: *mut OSThread,
    pub prev: *mut OSThread,
}
impl Default for OSThreadLink {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSMutexQueue {
    pub head: *mut OSMutex,
    pub tail: *mut OSMutex,
}
impl Default for OSMutexQueue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSMutexLink {
    pub next: *mut OSMutex,
    pub prev: *mut OSMutex,
}
impl Default for OSMutexLink {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSThread {
    pub context: OSContext,
    pub state: u16_,
    pub attr: u16_,
    pub suspend: s32,
    pub priority: OSPriority,
    pub base: OSPriority,
    pub val: *mut ::core::ffi::c_void,
    pub queue: *mut OSThreadQueue,
    pub link: OSThreadLink,
    pub queueJoin: OSThreadQueue,
    pub mutex: *mut OSMutex,
    pub queueMutex: OSMutexQueue,
    pub linkActive: OSThreadLink,
    pub stackBase: *mut u8_,
    pub stackEnd: *mut u32_,
}
impl Default for OSThread {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const OS_THREAD_STATE_OS_THREAD_STATE_READY: OS_THREAD_STATE = 1;
pub const OS_THREAD_STATE_OS_THREAD_STATE_RUNNING: OS_THREAD_STATE = 2;
pub const OS_THREAD_STATE_OS_THREAD_STATE_WAITING: OS_THREAD_STATE = 4;
pub const OS_THREAD_STATE_OS_THREAD_STATE_MORIBUND: OS_THREAD_STATE = 8;
pub type OS_THREAD_STATE = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSMutex {
    pub queue: OSThreadQueue,
    pub thread: *mut OSThread,
    pub count: s32,
    pub link: OSMutexLink,
}
impl Default for OSMutex {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OSFontHeader {
    pub fontType: u16_,
    pub firstChar: u16_,
    pub lastChar: u16_,
    pub invalChar: u16_,
    pub ascent: u16_,
    pub descent: u16_,
    pub width: u16_,
    pub leading: u16_,
    pub cellWidth: u16_,
    pub cellHeight: u16_,
    pub sheetSize: u32_,
    pub sheetFormat: u16_,
    pub sheetColumn: u16_,
    pub sheetRow: u16_,
    pub sheetWidth: u16_,
    pub sheetHeight: u16_,
    pub widthTable: u16_,
    pub sheetImage: u32_,
    pub sheetFullSize: u32_,
    pub c0: u8_,
    pub c1: u8_,
    pub c2: u8_,
    pub c3: u8_,
}
pub type OSResetFunction = ::core::option::Option<unsafe extern "C" fn(arg1: BOOL) -> BOOL>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSResetFunctionInfo {
    pub func: OSResetFunction,
    pub priority: u32_,
    pub next: *mut OSResetFunctionInfo,
    pub prev: *mut OSResetFunctionInfo,
}
impl Default for OSResetFunctionInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type OSError = u16_;
pub type OSErrorHandler =
    ::core::option::Option<unsafe extern "C" fn(error: OSError, context: *mut OSContext, ...)>;
pub type OSTime = s64;
pub type OSTick = u32_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OSCalendarTime {
    pub sec: ::core::ffi::c_int,
    pub min: ::core::ffi::c_int,
    pub hour: ::core::ffi::c_int,
    pub mday: ::core::ffi::c_int,
    pub mon: ::core::ffi::c_int,
    pub year: ::core::ffi::c_int,
    pub wday: ::core::ffi::c_int,
    pub yday: ::core::ffi::c_int,
    pub msec: ::core::ffi::c_int,
    pub usec: ::core::ffi::c_int,
}
pub type DSPCallback = ::core::option::Option<unsafe extern "C" fn(task: *mut ::core::ffi::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DSPTaskInfo {
    pub state: u32_,
    pub priority: u32_,
    pub flags: u32_,
    pub iram_mmem_addr: *mut u16_,
    pub iram_length: u32_,
    pub iram_addr: u32_,
    pub dram_mmem_addr: *mut u16_,
    pub dram_length: u32_,
    pub dram_addr: u32_,
    pub dsp_init_vector: u16_,
    pub dsp_resume_vector: u16_,
    pub init_cb: DSPCallback,
    pub res_cb: DSPCallback,
    pub done_cb: DSPCallback,
    pub req_cb: DSPCallback,
    pub next: *mut DSPTaskInfo,
    pub prev: *mut DSPTaskInfo,
    pub t_context: OSTime,
    pub t_task: OSTime,
}
impl Default for DSPTaskInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DVDDiskID {
    pub gameName: [::core::ffi::c_char; 4usize],
    pub company: [::core::ffi::c_char; 2usize],
    pub diskNumber: u8_,
    pub gameVersion: u8_,
    pub streaming: u8_,
    pub streamingBufSize: u8_,
    pub padding: [u8_; 22usize],
}
pub type DVDCBCallback =
    ::core::option::Option<unsafe extern "C" fn(result: s32, block: *mut DVDCommandBlock)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDCommandBlock {
    pub next: *mut DVDCommandBlock,
    pub prev: *mut DVDCommandBlock,
    pub command: u32_,
    pub state: s32,
    pub offset: u32_,
    pub length: u32_,
    pub addr: *mut ::core::ffi::c_void,
    pub currTransferSize: u32_,
    pub transferredSize: u32_,
    pub id: *mut DVDDiskID,
    pub callback: DVDCBCallback,
    pub userData: *mut ::core::ffi::c_void,
}
impl Default for DVDCommandBlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type DVDCallback =
    ::core::option::Option<unsafe extern "C" fn(result: s32, fileInfo: *mut DVDFileInfo)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDFileInfo {
    pub cb: DVDCommandBlock,
    pub startAddr: u32_,
    pub length: u32_,
    pub callback: DVDCallback,
}
impl Default for DVDFileInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DVDDir {
    pub entryNum: u32_,
    pub location: u32_,
    pub next: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDDirEntry {
    pub entryNum: u32_,
    pub isDir: BOOL,
    pub name: *mut ::core::ffi::c_char,
}
impl Default for DVDDirEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VITVMode_VI_TVMODE_NTSC_INT: VITVMode = 0;
pub const VITVMode_VI_TVMODE_NTSC_DS: VITVMode = 1;
pub const VITVMode_VI_TVMODE_NTSC_PROG: VITVMode = 2;
pub const VITVMode_VI_TVMODE_PAL_INT: VITVMode = 4;
pub const VITVMode_VI_TVMODE_PAL_DS: VITVMode = 5;
pub const VITVMode_VI_TVMODE_EURGB60_INT: VITVMode = 20;
pub const VITVMode_VI_TVMODE_EURGB60_DS: VITVMode = 21;
pub const VITVMode_VI_TVMODE_MPAL_INT: VITVMode = 8;
pub const VITVMode_VI_TVMODE_MPAL_DS: VITVMode = 9;
pub const VITVMode_VI_TVMODE_DEBUG_INT: VITVMode = 12;
pub const VITVMode_VI_TVMODE_DEBUG_PAL_INT: VITVMode = 16;
pub const VITVMode_VI_TVMODE_DEBUG_PAL_DS: VITVMode = 17;
pub type VITVMode = ::core::ffi::c_uint;
pub const VIXFBMode_VI_XFBMODE_SF: VIXFBMode = 0;
pub const VIXFBMode_VI_XFBMODE_DF: VIXFBMode = 1;
pub type VIXFBMode = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GXRenderModeObj {
    pub viTVmode: VITVMode,
    pub fbWidth: u16_,
    pub efbHeight: u16_,
    pub xfbHeight: u16_,
    pub viXOrigin: u16_,
    pub viYOrigin: u16_,
    pub viWidth: u16_,
    pub viHeight: u16_,
    pub xFBmode: VIXFBMode,
    pub field_rendering: u8_,
    pub aa: u8_,
    pub sample_pattern: [[u8_; 2usize]; 12usize],
    pub vfilter: [u8_; 7usize],
}
impl Default for GXRenderModeObj {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXColor {
    pub r: u8_,
    pub g: u8_,
    pub b: u8_,
    pub a: u8_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXTexObj {
    pub dummy: [u32_; 8usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXLightObj {
    pub dummy: [u32_; 16usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXTexRegion {
    pub dummy: [u32_; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXTlutRegion {
    pub dummy: [u32_; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXFogAdjTable {
    pub r: [u16_; 10usize],
}
pub type GXBool = u8_;
pub const GXProjectionType_GX_PERSPECTIVE: GXProjectionType = 0;
pub const GXProjectionType_GX_ORTHOGRAPHIC: GXProjectionType = 1;
pub type GXProjectionType = ::core::ffi::c_uint;
pub const GXCompare_GX_NEVER: GXCompare = 0;
pub const GXCompare_GX_LESS: GXCompare = 1;
pub const GXCompare_GX_EQUAL: GXCompare = 2;
pub const GXCompare_GX_LEQUAL: GXCompare = 3;
pub const GXCompare_GX_GREATER: GXCompare = 4;
pub const GXCompare_GX_NEQUAL: GXCompare = 5;
pub const GXCompare_GX_GEQUAL: GXCompare = 6;
pub const GXCompare_GX_ALWAYS: GXCompare = 7;
pub type GXCompare = ::core::ffi::c_uint;
pub const GXAlphaOp_GX_AOP_AND: GXAlphaOp = 0;
pub const GXAlphaOp_GX_AOP_OR: GXAlphaOp = 1;
pub const GXAlphaOp_GX_AOP_XOR: GXAlphaOp = 2;
pub const GXAlphaOp_GX_AOP_XNOR: GXAlphaOp = 3;
pub const GXAlphaOp_GX_MAX_ALPHAOP: GXAlphaOp = 4;
pub type GXAlphaOp = ::core::ffi::c_uint;
pub const GXZFmt16_GX_ZC_LINEAR: GXZFmt16 = 0;
pub const GXZFmt16_GX_ZC_NEAR: GXZFmt16 = 1;
pub const GXZFmt16_GX_ZC_MID: GXZFmt16 = 2;
pub const GXZFmt16_GX_ZC_FAR: GXZFmt16 = 3;
pub type GXZFmt16 = ::core::ffi::c_uint;
pub const GXGamma_GX_GM_1_0: GXGamma = 0;
pub const GXGamma_GX_GM_1_7: GXGamma = 1;
pub const GXGamma_GX_GM_2_2: GXGamma = 2;
pub type GXGamma = ::core::ffi::c_uint;
pub const GXPixelFmt_GX_PF_RGB8_Z24: GXPixelFmt = 0;
pub const GXPixelFmt_GX_PF_RGBA6_Z24: GXPixelFmt = 1;
pub const GXPixelFmt_GX_PF_RGB565_Z16: GXPixelFmt = 2;
pub const GXPixelFmt_GX_PF_Z24: GXPixelFmt = 3;
pub const GXPixelFmt_GX_PF_Y8: GXPixelFmt = 4;
pub const GXPixelFmt_GX_PF_U8: GXPixelFmt = 5;
pub const GXPixelFmt_GX_PF_V8: GXPixelFmt = 6;
pub const GXPixelFmt_GX_PF_YUV420: GXPixelFmt = 7;
pub type GXPixelFmt = ::core::ffi::c_uint;
pub const GXPrimitive_GX_QUADS: GXPrimitive = 128;
pub const GXPrimitive_GX_TRIANGLES: GXPrimitive = 144;
pub const GXPrimitive_GX_TRIANGLESTRIP: GXPrimitive = 152;
pub const GXPrimitive_GX_TRIANGLEFAN: GXPrimitive = 160;
pub const GXPrimitive_GX_LINES: GXPrimitive = 168;
pub const GXPrimitive_GX_LINESTRIP: GXPrimitive = 176;
pub const GXPrimitive_GX_POINTS: GXPrimitive = 184;
pub type GXPrimitive = ::core::ffi::c_uint;
pub const GXVtxFmt_GX_VTXFMT0: GXVtxFmt = 0;
pub const GXVtxFmt_GX_VTXFMT1: GXVtxFmt = 1;
pub const GXVtxFmt_GX_VTXFMT2: GXVtxFmt = 2;
pub const GXVtxFmt_GX_VTXFMT3: GXVtxFmt = 3;
pub const GXVtxFmt_GX_VTXFMT4: GXVtxFmt = 4;
pub const GXVtxFmt_GX_VTXFMT5: GXVtxFmt = 5;
pub const GXVtxFmt_GX_VTXFMT6: GXVtxFmt = 6;
pub const GXVtxFmt_GX_VTXFMT7: GXVtxFmt = 7;
pub const GXVtxFmt_GX_MAX_VTXFMT: GXVtxFmt = 8;
pub type GXVtxFmt = ::core::ffi::c_uint;
pub const GXAttr_GX_VA_PNMTXIDX: GXAttr = 0;
pub const GXAttr_GX_VA_TEX0MTXIDX: GXAttr = 1;
pub const GXAttr_GX_VA_TEX1MTXIDX: GXAttr = 2;
pub const GXAttr_GX_VA_TEX2MTXIDX: GXAttr = 3;
pub const GXAttr_GX_VA_TEX3MTXIDX: GXAttr = 4;
pub const GXAttr_GX_VA_TEX4MTXIDX: GXAttr = 5;
pub const GXAttr_GX_VA_TEX5MTXIDX: GXAttr = 6;
pub const GXAttr_GX_VA_TEX6MTXIDX: GXAttr = 7;
pub const GXAttr_GX_VA_TEX7MTXIDX: GXAttr = 8;
pub const GXAttr_GX_VA_POS: GXAttr = 9;
pub const GXAttr_GX_VA_NRM: GXAttr = 10;
pub const GXAttr_GX_VA_CLR0: GXAttr = 11;
pub const GXAttr_GX_VA_CLR1: GXAttr = 12;
pub const GXAttr_GX_VA_TEX0: GXAttr = 13;
pub const GXAttr_GX_VA_TEX1: GXAttr = 14;
pub const GXAttr_GX_VA_TEX2: GXAttr = 15;
pub const GXAttr_GX_VA_TEX3: GXAttr = 16;
pub const GXAttr_GX_VA_TEX4: GXAttr = 17;
pub const GXAttr_GX_VA_TEX5: GXAttr = 18;
pub const GXAttr_GX_VA_TEX6: GXAttr = 19;
pub const GXAttr_GX_VA_TEX7: GXAttr = 20;
pub const GXAttr_GX_POS_MTX_ARRAY: GXAttr = 21;
pub const GXAttr_GX_NRM_MTX_ARRAY: GXAttr = 22;
pub const GXAttr_GX_TEX_MTX_ARRAY: GXAttr = 23;
pub const GXAttr_GX_LIGHT_ARRAY: GXAttr = 24;
pub const GXAttr_GX_VA_NBT: GXAttr = 25;
pub const GXAttr_GX_VA_MAX_ATTR: GXAttr = 26;
pub const GXAttr_GX_VA_NULL: GXAttr = 255;
pub type GXAttr = ::core::ffi::c_uint;
pub const GXAttrType_GX_NONE: GXAttrType = 0;
pub const GXAttrType_GX_DIRECT: GXAttrType = 1;
pub const GXAttrType_GX_INDEX8: GXAttrType = 2;
pub const GXAttrType_GX_INDEX16: GXAttrType = 3;
pub type GXAttrType = ::core::ffi::c_uint;
pub const GXTexFmt_GX_TF_I4: GXTexFmt = 0;
pub const GXTexFmt_GX_TF_I8: GXTexFmt = 1;
pub const GXTexFmt_GX_TF_IA4: GXTexFmt = 2;
pub const GXTexFmt_GX_TF_IA8: GXTexFmt = 3;
pub const GXTexFmt_GX_TF_RGB565: GXTexFmt = 4;
pub const GXTexFmt_GX_TF_RGB5A3: GXTexFmt = 5;
pub const GXTexFmt_GX_TF_RGBA8: GXTexFmt = 6;
pub const GXTexFmt_GX_TF_CMPR: GXTexFmt = 14;
pub const GXTexFmt_GX_CTF_R4: GXTexFmt = 32;
pub const GXTexFmt_GX_CTF_RA4: GXTexFmt = 34;
pub const GXTexFmt_GX_CTF_RA8: GXTexFmt = 35;
pub const GXTexFmt_GX_CTF_YUVA8: GXTexFmt = 38;
pub const GXTexFmt_GX_CTF_A8: GXTexFmt = 39;
pub const GXTexFmt_GX_CTF_R8: GXTexFmt = 40;
pub const GXTexFmt_GX_CTF_G8: GXTexFmt = 41;
pub const GXTexFmt_GX_CTF_B8: GXTexFmt = 42;
pub const GXTexFmt_GX_CTF_RG8: GXTexFmt = 43;
pub const GXTexFmt_GX_CTF_GB8: GXTexFmt = 44;
pub const GXTexFmt_GX_TF_Z8: GXTexFmt = 17;
pub const GXTexFmt_GX_TF_Z16: GXTexFmt = 19;
pub const GXTexFmt_GX_TF_Z24X8: GXTexFmt = 22;
pub const GXTexFmt_GX_CTF_Z4: GXTexFmt = 48;
pub const GXTexFmt_GX_CTF_Z8M: GXTexFmt = 57;
pub const GXTexFmt_GX_CTF_Z8L: GXTexFmt = 58;
pub const GXTexFmt_GX_CTF_Z16L: GXTexFmt = 60;
pub const GXTexFmt_GX_TF_A8: GXTexFmt = 39;
pub type GXTexFmt = ::core::ffi::c_uint;
pub const GXCITexFmt_GX_TF_C4: GXCITexFmt = 8;
pub const GXCITexFmt_GX_TF_C8: GXCITexFmt = 9;
pub const GXCITexFmt_GX_TF_C14X2: GXCITexFmt = 10;
pub type GXCITexFmt = ::core::ffi::c_uint;
pub const GXTexWrapMode_GX_CLAMP: GXTexWrapMode = 0;
pub const GXTexWrapMode_GX_REPEAT: GXTexWrapMode = 1;
pub const GXTexWrapMode_GX_MIRROR: GXTexWrapMode = 2;
pub const GXTexWrapMode_GX_MAX_TEXWRAPMODE: GXTexWrapMode = 3;
pub type GXTexWrapMode = ::core::ffi::c_uint;
pub const GXTexFilter_GX_NEAR: GXTexFilter = 0;
pub const GXTexFilter_GX_LINEAR: GXTexFilter = 1;
pub const GXTexFilter_GX_NEAR_MIP_NEAR: GXTexFilter = 2;
pub const GXTexFilter_GX_LIN_MIP_NEAR: GXTexFilter = 3;
pub const GXTexFilter_GX_NEAR_MIP_LIN: GXTexFilter = 4;
pub const GXTexFilter_GX_LIN_MIP_LIN: GXTexFilter = 5;
pub type GXTexFilter = ::core::ffi::c_uint;
pub const GXAnisotropy_GX_ANISO_1: GXAnisotropy = 0;
pub const GXAnisotropy_GX_ANISO_2: GXAnisotropy = 1;
pub const GXAnisotropy_GX_ANISO_4: GXAnisotropy = 2;
pub const GXAnisotropy_GX_MAX_ANISOTROPY: GXAnisotropy = 3;
pub type GXAnisotropy = ::core::ffi::c_uint;
pub const GXTexMapID_GX_TEXMAP0: GXTexMapID = 0;
pub const GXTexMapID_GX_TEXMAP1: GXTexMapID = 1;
pub const GXTexMapID_GX_TEXMAP2: GXTexMapID = 2;
pub const GXTexMapID_GX_TEXMAP3: GXTexMapID = 3;
pub const GXTexMapID_GX_TEXMAP4: GXTexMapID = 4;
pub const GXTexMapID_GX_TEXMAP5: GXTexMapID = 5;
pub const GXTexMapID_GX_TEXMAP6: GXTexMapID = 6;
pub const GXTexMapID_GX_TEXMAP7: GXTexMapID = 7;
pub const GXTexMapID_GX_MAX_TEXMAP: GXTexMapID = 8;
pub const GXTexMapID_GX_TEXMAP_NULL: GXTexMapID = 255;
pub const GXTexMapID_GX_TEX_DISABLE: GXTexMapID = 256;
pub type GXTexMapID = ::core::ffi::c_uint;
pub const GXTexCoordID_GX_TEXCOORD0: GXTexCoordID = 0;
pub const GXTexCoordID_GX_TEXCOORD1: GXTexCoordID = 1;
pub const GXTexCoordID_GX_TEXCOORD2: GXTexCoordID = 2;
pub const GXTexCoordID_GX_TEXCOORD3: GXTexCoordID = 3;
pub const GXTexCoordID_GX_TEXCOORD4: GXTexCoordID = 4;
pub const GXTexCoordID_GX_TEXCOORD5: GXTexCoordID = 5;
pub const GXTexCoordID_GX_TEXCOORD6: GXTexCoordID = 6;
pub const GXTexCoordID_GX_TEXCOORD7: GXTexCoordID = 7;
pub const GXTexCoordID_GX_MAX_TEXCOORD: GXTexCoordID = 8;
pub const GXTexCoordID_GX_TEXCOORD_NULL: GXTexCoordID = 255;
pub type GXTexCoordID = ::core::ffi::c_uint;
pub const GXTevStageID_GX_TEVSTAGE0: GXTevStageID = 0;
pub const GXTevStageID_GX_TEVSTAGE1: GXTevStageID = 1;
pub const GXTevStageID_GX_TEVSTAGE2: GXTevStageID = 2;
pub const GXTevStageID_GX_TEVSTAGE3: GXTevStageID = 3;
pub const GXTevStageID_GX_TEVSTAGE4: GXTevStageID = 4;
pub const GXTevStageID_GX_TEVSTAGE5: GXTevStageID = 5;
pub const GXTevStageID_GX_TEVSTAGE6: GXTevStageID = 6;
pub const GXTevStageID_GX_TEVSTAGE7: GXTevStageID = 7;
pub const GXTevStageID_GX_TEVSTAGE8: GXTevStageID = 8;
pub const GXTevStageID_GX_TEVSTAGE9: GXTevStageID = 9;
pub const GXTevStageID_GX_TEVSTAGE10: GXTevStageID = 10;
pub const GXTevStageID_GX_TEVSTAGE11: GXTevStageID = 11;
pub const GXTevStageID_GX_TEVSTAGE12: GXTevStageID = 12;
pub const GXTevStageID_GX_TEVSTAGE13: GXTevStageID = 13;
pub const GXTevStageID_GX_TEVSTAGE14: GXTevStageID = 14;
pub const GXTevStageID_GX_TEVSTAGE15: GXTevStageID = 15;
pub const GXTevStageID_GX_MAX_TEVSTAGE: GXTevStageID = 16;
pub type GXTevStageID = ::core::ffi::c_uint;
pub const GXTevMode_GX_MODULATE: GXTevMode = 0;
pub const GXTevMode_GX_DECAL: GXTevMode = 1;
pub const GXTevMode_GX_BLEND: GXTevMode = 2;
pub const GXTevMode_GX_REPLACE: GXTevMode = 3;
pub const GXTevMode_GX_PASSCLR: GXTevMode = 4;
pub type GXTevMode = ::core::ffi::c_uint;
pub const GXTexMtxType_GX_MTX3x4: GXTexMtxType = 0;
pub const GXTexMtxType_GX_MTX2x4: GXTexMtxType = 1;
pub type GXTexMtxType = ::core::ffi::c_uint;
pub const GXTexGenType_GX_TG_MTX3x4: GXTexGenType = 0;
pub const GXTexGenType_GX_TG_MTX2x4: GXTexGenType = 1;
pub const GXTexGenType_GX_TG_BUMP0: GXTexGenType = 2;
pub const GXTexGenType_GX_TG_BUMP1: GXTexGenType = 3;
pub const GXTexGenType_GX_TG_BUMP2: GXTexGenType = 4;
pub const GXTexGenType_GX_TG_BUMP3: GXTexGenType = 5;
pub const GXTexGenType_GX_TG_BUMP4: GXTexGenType = 6;
pub const GXTexGenType_GX_TG_BUMP5: GXTexGenType = 7;
pub const GXTexGenType_GX_TG_BUMP6: GXTexGenType = 8;
pub const GXTexGenType_GX_TG_BUMP7: GXTexGenType = 9;
pub const GXTexGenType_GX_TG_SRTG: GXTexGenType = 10;
pub type GXTexGenType = ::core::ffi::c_uint;
pub const GXPosNrmMtx_GX_PNMTX0: GXPosNrmMtx = 0;
pub const GXPosNrmMtx_GX_PNMTX1: GXPosNrmMtx = 3;
pub const GXPosNrmMtx_GX_PNMTX2: GXPosNrmMtx = 6;
pub const GXPosNrmMtx_GX_PNMTX3: GXPosNrmMtx = 9;
pub const GXPosNrmMtx_GX_PNMTX4: GXPosNrmMtx = 12;
pub const GXPosNrmMtx_GX_PNMTX5: GXPosNrmMtx = 15;
pub const GXPosNrmMtx_GX_PNMTX6: GXPosNrmMtx = 18;
pub const GXPosNrmMtx_GX_PNMTX7: GXPosNrmMtx = 21;
pub const GXPosNrmMtx_GX_PNMTX8: GXPosNrmMtx = 24;
pub const GXPosNrmMtx_GX_PNMTX9: GXPosNrmMtx = 27;
pub type GXPosNrmMtx = ::core::ffi::c_uint;
pub const GXTexMtx_GX_TEXMTX0: GXTexMtx = 30;
pub const GXTexMtx_GX_TEXMTX1: GXTexMtx = 33;
pub const GXTexMtx_GX_TEXMTX2: GXTexMtx = 36;
pub const GXTexMtx_GX_TEXMTX3: GXTexMtx = 39;
pub const GXTexMtx_GX_TEXMTX4: GXTexMtx = 42;
pub const GXTexMtx_GX_TEXMTX5: GXTexMtx = 45;
pub const GXTexMtx_GX_TEXMTX6: GXTexMtx = 48;
pub const GXTexMtx_GX_TEXMTX7: GXTexMtx = 51;
pub const GXTexMtx_GX_TEXMTX8: GXTexMtx = 54;
pub const GXTexMtx_GX_TEXMTX9: GXTexMtx = 57;
pub const GXTexMtx_GX_IDENTITY: GXTexMtx = 60;
pub type GXTexMtx = ::core::ffi::c_uint;
pub const GXChannelID_GX_COLOR0: GXChannelID = 0;
pub const GXChannelID_GX_COLOR1: GXChannelID = 1;
pub const GXChannelID_GX_ALPHA0: GXChannelID = 2;
pub const GXChannelID_GX_ALPHA1: GXChannelID = 3;
pub const GXChannelID_GX_COLOR0A0: GXChannelID = 4;
pub const GXChannelID_GX_COLOR1A1: GXChannelID = 5;
pub const GXChannelID_GX_COLOR_ZERO: GXChannelID = 6;
pub const GXChannelID_GX_ALPHA_BUMP: GXChannelID = 7;
pub const GXChannelID_GX_ALPHA_BUMPN: GXChannelID = 8;
pub const GXChannelID_GX_COLOR_NULL: GXChannelID = 255;
pub type GXChannelID = ::core::ffi::c_uint;
pub const GXTexGenSrc_GX_TG_POS: GXTexGenSrc = 0;
pub const GXTexGenSrc_GX_TG_NRM: GXTexGenSrc = 1;
pub const GXTexGenSrc_GX_TG_BINRM: GXTexGenSrc = 2;
pub const GXTexGenSrc_GX_TG_TANGENT: GXTexGenSrc = 3;
pub const GXTexGenSrc_GX_TG_TEX0: GXTexGenSrc = 4;
pub const GXTexGenSrc_GX_TG_TEX1: GXTexGenSrc = 5;
pub const GXTexGenSrc_GX_TG_TEX2: GXTexGenSrc = 6;
pub const GXTexGenSrc_GX_TG_TEX3: GXTexGenSrc = 7;
pub const GXTexGenSrc_GX_TG_TEX4: GXTexGenSrc = 8;
pub const GXTexGenSrc_GX_TG_TEX5: GXTexGenSrc = 9;
pub const GXTexGenSrc_GX_TG_TEX6: GXTexGenSrc = 10;
pub const GXTexGenSrc_GX_TG_TEX7: GXTexGenSrc = 11;
pub const GXTexGenSrc_GX_TG_TEXCOORD0: GXTexGenSrc = 12;
pub const GXTexGenSrc_GX_TG_TEXCOORD1: GXTexGenSrc = 13;
pub const GXTexGenSrc_GX_TG_TEXCOORD2: GXTexGenSrc = 14;
pub const GXTexGenSrc_GX_TG_TEXCOORD3: GXTexGenSrc = 15;
pub const GXTexGenSrc_GX_TG_TEXCOORD4: GXTexGenSrc = 16;
pub const GXTexGenSrc_GX_TG_TEXCOORD5: GXTexGenSrc = 17;
pub const GXTexGenSrc_GX_TG_TEXCOORD6: GXTexGenSrc = 18;
pub const GXTexGenSrc_GX_TG_COLOR0: GXTexGenSrc = 19;
pub const GXTexGenSrc_GX_TG_COLOR1: GXTexGenSrc = 20;
pub type GXTexGenSrc = ::core::ffi::c_uint;
pub const GXBlendMode_GX_BM_NONE: GXBlendMode = 0;
pub const GXBlendMode_GX_BM_BLEND: GXBlendMode = 1;
pub const GXBlendMode_GX_BM_LOGIC: GXBlendMode = 2;
pub const GXBlendMode_GX_BM_SUBTRACT: GXBlendMode = 3;
pub const GXBlendMode_GX_MAX_BLENDMODE: GXBlendMode = 4;
pub type GXBlendMode = ::core::ffi::c_uint;
pub const GXBlendFactor_GX_BL_ZERO: GXBlendFactor = 0;
pub const GXBlendFactor_GX_BL_ONE: GXBlendFactor = 1;
pub const GXBlendFactor_GX_BL_SRCCLR: GXBlendFactor = 2;
pub const GXBlendFactor_GX_BL_INVSRCCLR: GXBlendFactor = 3;
pub const GXBlendFactor_GX_BL_SRCALPHA: GXBlendFactor = 4;
pub const GXBlendFactor_GX_BL_INVSRCALPHA: GXBlendFactor = 5;
pub const GXBlendFactor_GX_BL_DSTALPHA: GXBlendFactor = 6;
pub const GXBlendFactor_GX_BL_INVDSTALPHA: GXBlendFactor = 7;
pub const GXBlendFactor_GX_BL_DSTCLR: GXBlendFactor = 2;
pub const GXBlendFactor_GX_BL_INVDSTCLR: GXBlendFactor = 3;
pub type GXBlendFactor = ::core::ffi::c_uint;
pub const GXLogicOp_GX_LO_CLEAR: GXLogicOp = 0;
pub const GXLogicOp_GX_LO_AND: GXLogicOp = 1;
pub const GXLogicOp_GX_LO_REVAND: GXLogicOp = 2;
pub const GXLogicOp_GX_LO_COPY: GXLogicOp = 3;
pub const GXLogicOp_GX_LO_INVAND: GXLogicOp = 4;
pub const GXLogicOp_GX_LO_NOOP: GXLogicOp = 5;
pub const GXLogicOp_GX_LO_XOR: GXLogicOp = 6;
pub const GXLogicOp_GX_LO_OR: GXLogicOp = 7;
pub const GXLogicOp_GX_LO_NOR: GXLogicOp = 8;
pub const GXLogicOp_GX_LO_EQUIV: GXLogicOp = 9;
pub const GXLogicOp_GX_LO_INV: GXLogicOp = 10;
pub const GXLogicOp_GX_LO_REVOR: GXLogicOp = 11;
pub const GXLogicOp_GX_LO_INVCOPY: GXLogicOp = 12;
pub const GXLogicOp_GX_LO_INVOR: GXLogicOp = 13;
pub const GXLogicOp_GX_LO_NAND: GXLogicOp = 14;
pub const GXLogicOp_GX_LO_SET: GXLogicOp = 15;
pub type GXLogicOp = ::core::ffi::c_uint;
pub const GXCompCnt_GX_POS_XY: GXCompCnt = 0;
pub const GXCompCnt_GX_POS_XYZ: GXCompCnt = 1;
pub const GXCompCnt_GX_NRM_XYZ: GXCompCnt = 0;
pub const GXCompCnt_GX_NRM_NBT: GXCompCnt = 1;
pub const GXCompCnt_GX_NRM_NBT3: GXCompCnt = 2;
pub const GXCompCnt_GX_CLR_RGB: GXCompCnt = 0;
pub const GXCompCnt_GX_CLR_RGBA: GXCompCnt = 1;
pub const GXCompCnt_GX_TEX_S: GXCompCnt = 0;
pub const GXCompCnt_GX_TEX_ST: GXCompCnt = 1;
pub type GXCompCnt = ::core::ffi::c_uint;
pub const GXCompType_GX_U8: GXCompType = 0;
pub const GXCompType_GX_S8: GXCompType = 1;
pub const GXCompType_GX_U16: GXCompType = 2;
pub const GXCompType_GX_S16: GXCompType = 3;
pub const GXCompType_GX_F32: GXCompType = 4;
pub const GXCompType_GX_RGB565: GXCompType = 0;
pub const GXCompType_GX_RGB8: GXCompType = 1;
pub const GXCompType_GX_RGBX8: GXCompType = 2;
pub const GXCompType_GX_RGBA4: GXCompType = 3;
pub const GXCompType_GX_RGBA6: GXCompType = 4;
pub const GXCompType_GX_RGBA8: GXCompType = 5;
pub type GXCompType = ::core::ffi::c_uint;
pub const GXPTTexMtx_GX_PTTEXMTX0: GXPTTexMtx = 64;
pub const GXPTTexMtx_GX_PTTEXMTX1: GXPTTexMtx = 67;
pub const GXPTTexMtx_GX_PTTEXMTX2: GXPTTexMtx = 70;
pub const GXPTTexMtx_GX_PTTEXMTX3: GXPTTexMtx = 73;
pub const GXPTTexMtx_GX_PTTEXMTX4: GXPTTexMtx = 76;
pub const GXPTTexMtx_GX_PTTEXMTX5: GXPTTexMtx = 79;
pub const GXPTTexMtx_GX_PTTEXMTX6: GXPTTexMtx = 82;
pub const GXPTTexMtx_GX_PTTEXMTX7: GXPTTexMtx = 85;
pub const GXPTTexMtx_GX_PTTEXMTX8: GXPTTexMtx = 88;
pub const GXPTTexMtx_GX_PTTEXMTX9: GXPTTexMtx = 91;
pub const GXPTTexMtx_GX_PTTEXMTX10: GXPTTexMtx = 94;
pub const GXPTTexMtx_GX_PTTEXMTX11: GXPTTexMtx = 97;
pub const GXPTTexMtx_GX_PTTEXMTX12: GXPTTexMtx = 100;
pub const GXPTTexMtx_GX_PTTEXMTX13: GXPTTexMtx = 103;
pub const GXPTTexMtx_GX_PTTEXMTX14: GXPTTexMtx = 106;
pub const GXPTTexMtx_GX_PTTEXMTX15: GXPTTexMtx = 109;
pub const GXPTTexMtx_GX_PTTEXMTX16: GXPTTexMtx = 112;
pub const GXPTTexMtx_GX_PTTEXMTX17: GXPTTexMtx = 115;
pub const GXPTTexMtx_GX_PTTEXMTX18: GXPTTexMtx = 118;
pub const GXPTTexMtx_GX_PTTEXMTX19: GXPTTexMtx = 121;
pub const GXPTTexMtx_GX_PTIDENTITY: GXPTTexMtx = 125;
pub type GXPTTexMtx = ::core::ffi::c_uint;
pub const GXTevRegID_GX_TEVPREV: GXTevRegID = 0;
pub const GXTevRegID_GX_TEVREG0: GXTevRegID = 1;
pub const GXTevRegID_GX_TEVREG1: GXTevRegID = 2;
pub const GXTevRegID_GX_TEVREG2: GXTevRegID = 3;
pub const GXTevRegID_GX_MAX_TEVREG: GXTevRegID = 4;
pub type GXTevRegID = ::core::ffi::c_uint;
pub const GXDiffuseFn_GX_DF_NONE: GXDiffuseFn = 0;
pub const GXDiffuseFn_GX_DF_SIGN: GXDiffuseFn = 1;
pub const GXDiffuseFn_GX_DF_CLAMP: GXDiffuseFn = 2;
pub type GXDiffuseFn = ::core::ffi::c_uint;
pub const GXColorSrc_GX_SRC_REG: GXColorSrc = 0;
pub const GXColorSrc_GX_SRC_VTX: GXColorSrc = 1;
pub type GXColorSrc = ::core::ffi::c_uint;
pub const GXAttnFn_GX_AF_SPEC: GXAttnFn = 0;
pub const GXAttnFn_GX_AF_SPOT: GXAttnFn = 1;
pub const GXAttnFn_GX_AF_NONE: GXAttnFn = 2;
pub type GXAttnFn = ::core::ffi::c_uint;
pub const GXLightID_GX_LIGHT0: GXLightID = 1;
pub const GXLightID_GX_LIGHT1: GXLightID = 2;
pub const GXLightID_GX_LIGHT2: GXLightID = 4;
pub const GXLightID_GX_LIGHT3: GXLightID = 8;
pub const GXLightID_GX_LIGHT4: GXLightID = 16;
pub const GXLightID_GX_LIGHT5: GXLightID = 32;
pub const GXLightID_GX_LIGHT6: GXLightID = 64;
pub const GXLightID_GX_LIGHT7: GXLightID = 128;
pub const GXLightID_GX_MAX_LIGHT: GXLightID = 256;
pub const GXLightID_GX_LIGHT_NULL: GXLightID = 0;
pub type GXLightID = ::core::ffi::c_uint;
pub const GXTexOffset_GX_TO_ZERO: GXTexOffset = 0;
pub const GXTexOffset_GX_TO_SIXTEENTH: GXTexOffset = 1;
pub const GXTexOffset_GX_TO_EIGHTH: GXTexOffset = 2;
pub const GXTexOffset_GX_TO_FOURTH: GXTexOffset = 3;
pub const GXTexOffset_GX_TO_HALF: GXTexOffset = 4;
pub const GXTexOffset_GX_TO_ONE: GXTexOffset = 5;
pub const GXTexOffset_GX_MAX_TEXOFFSET: GXTexOffset = 6;
pub type GXTexOffset = ::core::ffi::c_uint;
pub const GXSpotFn_GX_SP_OFF: GXSpotFn = 0;
pub const GXSpotFn_GX_SP_FLAT: GXSpotFn = 1;
pub const GXSpotFn_GX_SP_COS: GXSpotFn = 2;
pub const GXSpotFn_GX_SP_COS2: GXSpotFn = 3;
pub const GXSpotFn_GX_SP_SHARP: GXSpotFn = 4;
pub const GXSpotFn_GX_SP_RING1: GXSpotFn = 5;
pub const GXSpotFn_GX_SP_RING2: GXSpotFn = 6;
pub type GXSpotFn = ::core::ffi::c_uint;
pub const GXDistAttnFn_GX_DA_OFF: GXDistAttnFn = 0;
pub const GXDistAttnFn_GX_DA_GENTLE: GXDistAttnFn = 1;
pub const GXDistAttnFn_GX_DA_MEDIUM: GXDistAttnFn = 2;
pub const GXDistAttnFn_GX_DA_STEEP: GXDistAttnFn = 3;
pub type GXDistAttnFn = ::core::ffi::c_uint;
pub const GXCullMode_GX_CULL_NONE: GXCullMode = 0;
pub const GXCullMode_GX_CULL_FRONT: GXCullMode = 1;
pub const GXCullMode_GX_CULL_BACK: GXCullMode = 2;
pub const GXCullMode_GX_CULL_ALL: GXCullMode = 3;
pub type GXCullMode = ::core::ffi::c_uint;
pub const GXTevSwapSel_GX_TEV_SWAP0: GXTevSwapSel = 0;
pub const GXTevSwapSel_GX_TEV_SWAP1: GXTevSwapSel = 1;
pub const GXTevSwapSel_GX_TEV_SWAP2: GXTevSwapSel = 2;
pub const GXTevSwapSel_GX_TEV_SWAP3: GXTevSwapSel = 3;
pub const GXTevSwapSel_GX_MAX_TEVSWAP: GXTevSwapSel = 4;
pub type GXTevSwapSel = ::core::ffi::c_uint;
pub const GXTevColorChan_GX_CH_RED: GXTevColorChan = 0;
pub const GXTevColorChan_GX_CH_GREEN: GXTevColorChan = 1;
pub const GXTevColorChan_GX_CH_BLUE: GXTevColorChan = 2;
pub const GXTevColorChan_GX_CH_ALPHA: GXTevColorChan = 3;
pub type GXTevColorChan = ::core::ffi::c_uint;
pub const _GXFogType_GX_FOG_NONE: _GXFogType = 0;
pub const _GXFogType_GX_FOG_LIN: _GXFogType = 2;
pub const _GXFogType_GX_FOG_EXP: _GXFogType = 4;
pub const _GXFogType_GX_FOG_EXP2: _GXFogType = 5;
pub const _GXFogType_GX_FOG_REVEXP: _GXFogType = 6;
pub const _GXFogType_GX_FOG_REVEXP2: _GXFogType = 7;
pub type _GXFogType = ::core::ffi::c_uint;
pub use self::_GXFogType as GXFogType;
pub const GXTevColorArg_GX_CC_CPREV: GXTevColorArg = 0;
pub const GXTevColorArg_GX_CC_APREV: GXTevColorArg = 1;
pub const GXTevColorArg_GX_CC_C0: GXTevColorArg = 2;
pub const GXTevColorArg_GX_CC_A0: GXTevColorArg = 3;
pub const GXTevColorArg_GX_CC_C1: GXTevColorArg = 4;
pub const GXTevColorArg_GX_CC_A1: GXTevColorArg = 5;
pub const GXTevColorArg_GX_CC_C2: GXTevColorArg = 6;
pub const GXTevColorArg_GX_CC_A2: GXTevColorArg = 7;
pub const GXTevColorArg_GX_CC_TEXC: GXTevColorArg = 8;
pub const GXTevColorArg_GX_CC_TEXA: GXTevColorArg = 9;
pub const GXTevColorArg_GX_CC_RASC: GXTevColorArg = 10;
pub const GXTevColorArg_GX_CC_RASA: GXTevColorArg = 11;
pub const GXTevColorArg_GX_CC_ONE: GXTevColorArg = 12;
pub const GXTevColorArg_GX_CC_HALF: GXTevColorArg = 13;
pub const GXTevColorArg_GX_CC_KONST: GXTevColorArg = 14;
pub const GXTevColorArg_GX_CC_ZERO: GXTevColorArg = 15;
pub type GXTevColorArg = ::core::ffi::c_uint;
pub const GXTevAlphaArg_GX_CA_APREV: GXTevAlphaArg = 0;
pub const GXTevAlphaArg_GX_CA_A0: GXTevAlphaArg = 1;
pub const GXTevAlphaArg_GX_CA_A1: GXTevAlphaArg = 2;
pub const GXTevAlphaArg_GX_CA_A2: GXTevAlphaArg = 3;
pub const GXTevAlphaArg_GX_CA_TEXA: GXTevAlphaArg = 4;
pub const GXTevAlphaArg_GX_CA_RASA: GXTevAlphaArg = 5;
pub const GXTevAlphaArg_GX_CA_KONST: GXTevAlphaArg = 6;
pub const GXTevAlphaArg_GX_CA_ZERO: GXTevAlphaArg = 7;
pub type GXTevAlphaArg = ::core::ffi::c_uint;
pub const GXTevOp_GX_TEV_ADD: GXTevOp = 0;
pub const GXTevOp_GX_TEV_SUB: GXTevOp = 1;
pub const GXTevOp_GX_TEV_COMP_R8_GT: GXTevOp = 8;
pub const GXTevOp_GX_TEV_COMP_R8_EQ: GXTevOp = 9;
pub const GXTevOp_GX_TEV_COMP_GR16_GT: GXTevOp = 10;
pub const GXTevOp_GX_TEV_COMP_GR16_EQ: GXTevOp = 11;
pub const GXTevOp_GX_TEV_COMP_BGR24_GT: GXTevOp = 12;
pub const GXTevOp_GX_TEV_COMP_BGR24_EQ: GXTevOp = 13;
pub const GXTevOp_GX_TEV_COMP_RGB8_GT: GXTevOp = 14;
pub const GXTevOp_GX_TEV_COMP_RGB8_EQ: GXTevOp = 15;
pub const GXTevOp_GX_TEV_COMP_A8_GT: GXTevOp = 14;
pub const GXTevOp_GX_TEV_COMP_A8_EQ: GXTevOp = 15;
pub type GXTevOp = ::core::ffi::c_uint;
pub const GXTevBias_GX_TB_ZERO: GXTevBias = 0;
pub const GXTevBias_GX_TB_ADDHALF: GXTevBias = 1;
pub const GXTevBias_GX_TB_SUBHALF: GXTevBias = 2;
pub const GXTevBias_GX_MAX_TEVBIAS: GXTevBias = 3;
pub type GXTevBias = ::core::ffi::c_uint;
pub const GXTevScale_GX_CS_SCALE_1: GXTevScale = 0;
pub const GXTevScale_GX_CS_SCALE_2: GXTevScale = 1;
pub const GXTevScale_GX_CS_SCALE_4: GXTevScale = 2;
pub const GXTevScale_GX_CS_DIVIDE_2: GXTevScale = 3;
pub const GXTevScale_GX_MAX_TEVSCALE: GXTevScale = 4;
pub type GXTevScale = ::core::ffi::c_uint;
pub const GXTevKColorSel_GX_TEV_KCSEL_1: GXTevKColorSel = 0;
pub const GXTevKColorSel_GX_TEV_KCSEL_7_8: GXTevKColorSel = 1;
pub const GXTevKColorSel_GX_TEV_KCSEL_3_4: GXTevKColorSel = 2;
pub const GXTevKColorSel_GX_TEV_KCSEL_5_8: GXTevKColorSel = 3;
pub const GXTevKColorSel_GX_TEV_KCSEL_1_2: GXTevKColorSel = 4;
pub const GXTevKColorSel_GX_TEV_KCSEL_3_8: GXTevKColorSel = 5;
pub const GXTevKColorSel_GX_TEV_KCSEL_1_4: GXTevKColorSel = 6;
pub const GXTevKColorSel_GX_TEV_KCSEL_1_8: GXTevKColorSel = 7;
pub const GXTevKColorSel_GX_TEV_KCSEL_K0: GXTevKColorSel = 12;
pub const GXTevKColorSel_GX_TEV_KCSEL_K1: GXTevKColorSel = 13;
pub const GXTevKColorSel_GX_TEV_KCSEL_K2: GXTevKColorSel = 14;
pub const GXTevKColorSel_GX_TEV_KCSEL_K3: GXTevKColorSel = 15;
pub const GXTevKColorSel_GX_TEV_KCSEL_K0_R: GXTevKColorSel = 16;
pub const GXTevKColorSel_GX_TEV_KCSEL_K1_R: GXTevKColorSel = 17;
pub const GXTevKColorSel_GX_TEV_KCSEL_K2_R: GXTevKColorSel = 18;
pub const GXTevKColorSel_GX_TEV_KCSEL_K3_R: GXTevKColorSel = 19;
pub const GXTevKColorSel_GX_TEV_KCSEL_K0_G: GXTevKColorSel = 20;
pub const GXTevKColorSel_GX_TEV_KCSEL_K1_G: GXTevKColorSel = 21;
pub const GXTevKColorSel_GX_TEV_KCSEL_K2_G: GXTevKColorSel = 22;
pub const GXTevKColorSel_GX_TEV_KCSEL_K3_G: GXTevKColorSel = 23;
pub const GXTevKColorSel_GX_TEV_KCSEL_K0_B: GXTevKColorSel = 24;
pub const GXTevKColorSel_GX_TEV_KCSEL_K1_B: GXTevKColorSel = 25;
pub const GXTevKColorSel_GX_TEV_KCSEL_K2_B: GXTevKColorSel = 26;
pub const GXTevKColorSel_GX_TEV_KCSEL_K3_B: GXTevKColorSel = 27;
pub const GXTevKColorSel_GX_TEV_KCSEL_K0_A: GXTevKColorSel = 28;
pub const GXTevKColorSel_GX_TEV_KCSEL_K1_A: GXTevKColorSel = 29;
pub const GXTevKColorSel_GX_TEV_KCSEL_K2_A: GXTevKColorSel = 30;
pub const GXTevKColorSel_GX_TEV_KCSEL_K3_A: GXTevKColorSel = 31;
pub type GXTevKColorSel = ::core::ffi::c_uint;
pub const GXTevKAlphaSel_GX_TEV_KASEL_1: GXTevKAlphaSel = 0;
pub const GXTevKAlphaSel_GX_TEV_KASEL_7_8: GXTevKAlphaSel = 1;
pub const GXTevKAlphaSel_GX_TEV_KASEL_3_4: GXTevKAlphaSel = 2;
pub const GXTevKAlphaSel_GX_TEV_KASEL_5_8: GXTevKAlphaSel = 3;
pub const GXTevKAlphaSel_GX_TEV_KASEL_1_2: GXTevKAlphaSel = 4;
pub const GXTevKAlphaSel_GX_TEV_KASEL_3_8: GXTevKAlphaSel = 5;
pub const GXTevKAlphaSel_GX_TEV_KASEL_1_4: GXTevKAlphaSel = 6;
pub const GXTevKAlphaSel_GX_TEV_KASEL_1_8: GXTevKAlphaSel = 7;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K0_R: GXTevKAlphaSel = 16;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K1_R: GXTevKAlphaSel = 17;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K2_R: GXTevKAlphaSel = 18;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K3_R: GXTevKAlphaSel = 19;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K0_G: GXTevKAlphaSel = 20;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K1_G: GXTevKAlphaSel = 21;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K2_G: GXTevKAlphaSel = 22;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K3_G: GXTevKAlphaSel = 23;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K0_B: GXTevKAlphaSel = 24;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K1_B: GXTevKAlphaSel = 25;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K2_B: GXTevKAlphaSel = 26;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K3_B: GXTevKAlphaSel = 27;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K0_A: GXTevKAlphaSel = 28;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K1_A: GXTevKAlphaSel = 29;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K2_A: GXTevKAlphaSel = 30;
pub const GXTevKAlphaSel_GX_TEV_KASEL_K3_A: GXTevKAlphaSel = 31;
pub type GXTevKAlphaSel = ::core::ffi::c_uint;
pub const GXTevKColorID_GX_KCOLOR0: GXTevKColorID = 0;
pub const GXTevKColorID_GX_KCOLOR1: GXTevKColorID = 1;
pub const GXTevKColorID_GX_KCOLOR2: GXTevKColorID = 2;
pub const GXTevKColorID_GX_KCOLOR3: GXTevKColorID = 3;
pub const GXTevKColorID_GX_MAX_KCOLOR: GXTevKColorID = 4;
pub type GXTevKColorID = ::core::ffi::c_uint;
pub const GXZTexOp_GX_ZT_DISABLE: GXZTexOp = 0;
pub const GXZTexOp_GX_ZT_ADD: GXZTexOp = 1;
pub const GXZTexOp_GX_ZT_REPLACE: GXZTexOp = 2;
pub const GXZTexOp_GX_MAX_ZTEXOP: GXZTexOp = 3;
pub type GXZTexOp = ::core::ffi::c_uint;
pub const GXIndTexFormat_GX_ITF_8: GXIndTexFormat = 0;
pub const GXIndTexFormat_GX_ITF_5: GXIndTexFormat = 1;
pub const GXIndTexFormat_GX_ITF_4: GXIndTexFormat = 2;
pub const GXIndTexFormat_GX_ITF_3: GXIndTexFormat = 3;
pub const GXIndTexFormat_GX_MAX_ITFORMAT: GXIndTexFormat = 4;
pub type GXIndTexFormat = ::core::ffi::c_uint;
pub const GXIndTexBiasSel_GX_ITB_NONE: GXIndTexBiasSel = 0;
pub const GXIndTexBiasSel_GX_ITB_S: GXIndTexBiasSel = 1;
pub const GXIndTexBiasSel_GX_ITB_T: GXIndTexBiasSel = 2;
pub const GXIndTexBiasSel_GX_ITB_ST: GXIndTexBiasSel = 3;
pub const GXIndTexBiasSel_GX_ITB_U: GXIndTexBiasSel = 4;
pub const GXIndTexBiasSel_GX_ITB_SU: GXIndTexBiasSel = 5;
pub const GXIndTexBiasSel_GX_ITB_TU: GXIndTexBiasSel = 6;
pub const GXIndTexBiasSel_GX_ITB_STU: GXIndTexBiasSel = 7;
pub const GXIndTexBiasSel_GX_MAX_ITBIAS: GXIndTexBiasSel = 8;
pub type GXIndTexBiasSel = ::core::ffi::c_uint;
pub const GXIndTexAlphaSel_GX_ITBA_OFF: GXIndTexAlphaSel = 0;
pub const GXIndTexAlphaSel_GX_ITBA_S: GXIndTexAlphaSel = 1;
pub const GXIndTexAlphaSel_GX_ITBA_T: GXIndTexAlphaSel = 2;
pub const GXIndTexAlphaSel_GX_ITBA_U: GXIndTexAlphaSel = 3;
pub const GXIndTexAlphaSel_GX_MAX_ITBALPHA: GXIndTexAlphaSel = 4;
pub type GXIndTexAlphaSel = ::core::ffi::c_uint;
pub const GXIndTexMtxID_GX_ITM_OFF: GXIndTexMtxID = 0;
pub const GXIndTexMtxID_GX_ITM_0: GXIndTexMtxID = 1;
pub const GXIndTexMtxID_GX_ITM_1: GXIndTexMtxID = 2;
pub const GXIndTexMtxID_GX_ITM_2: GXIndTexMtxID = 3;
pub const GXIndTexMtxID_GX_ITM_S0: GXIndTexMtxID = 5;
pub const GXIndTexMtxID_GX_ITM_S1: GXIndTexMtxID = 6;
pub const GXIndTexMtxID_GX_ITM_S2: GXIndTexMtxID = 7;
pub const GXIndTexMtxID_GX_ITM_T0: GXIndTexMtxID = 9;
pub const GXIndTexMtxID_GX_ITM_T1: GXIndTexMtxID = 10;
pub const GXIndTexMtxID_GX_ITM_T2: GXIndTexMtxID = 11;
pub type GXIndTexMtxID = ::core::ffi::c_uint;
pub const GXIndTexWrap_GX_ITW_OFF: GXIndTexWrap = 0;
pub const GXIndTexWrap_GX_ITW_256: GXIndTexWrap = 1;
pub const GXIndTexWrap_GX_ITW_128: GXIndTexWrap = 2;
pub const GXIndTexWrap_GX_ITW_64: GXIndTexWrap = 3;
pub const GXIndTexWrap_GX_ITW_32: GXIndTexWrap = 4;
pub const GXIndTexWrap_GX_ITW_16: GXIndTexWrap = 5;
pub const GXIndTexWrap_GX_ITW_0: GXIndTexWrap = 6;
pub const GXIndTexWrap_GX_MAX_ITWRAP: GXIndTexWrap = 7;
pub type GXIndTexWrap = ::core::ffi::c_uint;
pub const GXIndTexStageID_GX_INDTEXSTAGE0: GXIndTexStageID = 0;
pub const GXIndTexStageID_GX_INDTEXSTAGE1: GXIndTexStageID = 1;
pub const GXIndTexStageID_GX_INDTEXSTAGE2: GXIndTexStageID = 2;
pub const GXIndTexStageID_GX_INDTEXSTAGE3: GXIndTexStageID = 3;
pub const GXIndTexStageID_GX_MAX_INDTEXSTAGE: GXIndTexStageID = 4;
pub type GXIndTexStageID = ::core::ffi::c_uint;
pub const GXIndTexScale_GX_ITS_1: GXIndTexScale = 0;
pub const GXIndTexScale_GX_ITS_2: GXIndTexScale = 1;
pub const GXIndTexScale_GX_ITS_4: GXIndTexScale = 2;
pub const GXIndTexScale_GX_ITS_8: GXIndTexScale = 3;
pub const GXIndTexScale_GX_ITS_16: GXIndTexScale = 4;
pub const GXIndTexScale_GX_ITS_32: GXIndTexScale = 5;
pub const GXIndTexScale_GX_ITS_64: GXIndTexScale = 6;
pub const GXIndTexScale_GX_ITS_128: GXIndTexScale = 7;
pub const GXIndTexScale_GX_ITS_256: GXIndTexScale = 8;
pub const GXIndTexScale_GX_MAX_ITSCALE: GXIndTexScale = 9;
pub type GXIndTexScale = ::core::ffi::c_uint;
pub const GXPerf0_GX_PERF0_VERTICES: GXPerf0 = 0;
pub const GXPerf0_GX_PERF0_CLIP_VTX: GXPerf0 = 1;
pub const GXPerf0_GX_PERF0_CLIP_CLKS: GXPerf0 = 2;
pub const GXPerf0_GX_PERF0_XF_WAIT_IN: GXPerf0 = 3;
pub const GXPerf0_GX_PERF0_XF_WAIT_OUT: GXPerf0 = 4;
pub const GXPerf0_GX_PERF0_XF_XFRM_CLKS: GXPerf0 = 5;
pub const GXPerf0_GX_PERF0_XF_LIT_CLKS: GXPerf0 = 6;
pub const GXPerf0_GX_PERF0_XF_BOT_CLKS: GXPerf0 = 7;
pub const GXPerf0_GX_PERF0_XF_REGLD_CLKS: GXPerf0 = 8;
pub const GXPerf0_GX_PERF0_XF_REGRD_CLKS: GXPerf0 = 9;
pub const GXPerf0_GX_PERF0_CLIP_RATIO: GXPerf0 = 10;
pub const GXPerf0_GX_PERF0_TRIANGLES: GXPerf0 = 11;
pub const GXPerf0_GX_PERF0_TRIANGLES_CULLED: GXPerf0 = 12;
pub const GXPerf0_GX_PERF0_TRIANGLES_PASSED: GXPerf0 = 13;
pub const GXPerf0_GX_PERF0_TRIANGLES_SCISSORED: GXPerf0 = 14;
pub const GXPerf0_GX_PERF0_TRIANGLES_0TEX: GXPerf0 = 15;
pub const GXPerf0_GX_PERF0_TRIANGLES_1TEX: GXPerf0 = 16;
pub const GXPerf0_GX_PERF0_TRIANGLES_2TEX: GXPerf0 = 17;
pub const GXPerf0_GX_PERF0_TRIANGLES_3TEX: GXPerf0 = 18;
pub const GXPerf0_GX_PERF0_TRIANGLES_4TEX: GXPerf0 = 19;
pub const GXPerf0_GX_PERF0_TRIANGLES_5TEX: GXPerf0 = 20;
pub const GXPerf0_GX_PERF0_TRIANGLES_6TEX: GXPerf0 = 21;
pub const GXPerf0_GX_PERF0_TRIANGLES_7TEX: GXPerf0 = 22;
pub const GXPerf0_GX_PERF0_TRIANGLES_8TEX: GXPerf0 = 23;
pub const GXPerf0_GX_PERF0_TRIANGLES_0CLR: GXPerf0 = 24;
pub const GXPerf0_GX_PERF0_TRIANGLES_1CLR: GXPerf0 = 25;
pub const GXPerf0_GX_PERF0_TRIANGLES_2CLR: GXPerf0 = 26;
pub const GXPerf0_GX_PERF0_QUAD_0CVG: GXPerf0 = 27;
pub const GXPerf0_GX_PERF0_QUAD_NON0CVG: GXPerf0 = 28;
pub const GXPerf0_GX_PERF0_QUAD_1CVG: GXPerf0 = 29;
pub const GXPerf0_GX_PERF0_QUAD_2CVG: GXPerf0 = 30;
pub const GXPerf0_GX_PERF0_QUAD_3CVG: GXPerf0 = 31;
pub const GXPerf0_GX_PERF0_QUAD_4CVG: GXPerf0 = 32;
pub const GXPerf0_GX_PERF0_AVG_QUAD_CNT: GXPerf0 = 33;
pub const GXPerf0_GX_PERF0_CLOCKS: GXPerf0 = 34;
pub const GXPerf0_GX_PERF0_NONE: GXPerf0 = 35;
pub type GXPerf0 = ::core::ffi::c_uint;
pub const GXPerf1_GX_PERF1_TEXELS: GXPerf1 = 0;
pub const GXPerf1_GX_PERF1_TX_IDLE: GXPerf1 = 1;
pub const GXPerf1_GX_PERF1_TX_REGS: GXPerf1 = 2;
pub const GXPerf1_GX_PERF1_TX_MEMSTALL: GXPerf1 = 3;
pub const GXPerf1_GX_PERF1_TC_CHECK1_2: GXPerf1 = 4;
pub const GXPerf1_GX_PERF1_TC_CHECK3_4: GXPerf1 = 5;
pub const GXPerf1_GX_PERF1_TC_CHECK5_6: GXPerf1 = 6;
pub const GXPerf1_GX_PERF1_TC_CHECK7_8: GXPerf1 = 7;
pub const GXPerf1_GX_PERF1_TC_MISS: GXPerf1 = 8;
pub const GXPerf1_GX_PERF1_VC_ELEMQ_FULL: GXPerf1 = 9;
pub const GXPerf1_GX_PERF1_VC_MISSQ_FULL: GXPerf1 = 10;
pub const GXPerf1_GX_PERF1_VC_MEMREQ_FULL: GXPerf1 = 11;
pub const GXPerf1_GX_PERF1_VC_STATUS7: GXPerf1 = 12;
pub const GXPerf1_GX_PERF1_VC_MISSREP_FULL: GXPerf1 = 13;
pub const GXPerf1_GX_PERF1_VC_STREAMBUF_LOW: GXPerf1 = 14;
pub const GXPerf1_GX_PERF1_VC_ALL_STALLS: GXPerf1 = 15;
pub const GXPerf1_GX_PERF1_VERTICES: GXPerf1 = 16;
pub const GXPerf1_GX_PERF1_FIFO_REQ: GXPerf1 = 17;
pub const GXPerf1_GX_PERF1_CALL_REQ: GXPerf1 = 18;
pub const GXPerf1_GX_PERF1_VC_MISS_REQ: GXPerf1 = 19;
pub const GXPerf1_GX_PERF1_CP_ALL_REQ: GXPerf1 = 20;
pub const GXPerf1_GX_PERF1_CLOCKS: GXPerf1 = 21;
pub const GXPerf1_GX_PERF1_NONE: GXPerf1 = 22;
pub type GXPerf1 = ::core::ffi::c_uint;
pub const GXClipMode_GX_CLIP_ENABLE: GXClipMode = 0;
pub const GXClipMode_GX_CLIP_DISABLE: GXClipMode = 1;
pub type GXClipMode = ::core::ffi::c_uint;
pub const GXFBClamp_GX_CLAMP_NONE: GXFBClamp = 0;
pub const GXFBClamp_GX_CLAMP_TOP: GXFBClamp = 1;
pub const GXFBClamp_GX_CLAMP_BOTTOM: GXFBClamp = 2;
pub type GXFBClamp = ::core::ffi::c_uint;
pub const GXCopyMode_GX_COPY_PROGRESSIVE: GXCopyMode = 0;
pub const GXCopyMode_GX_COPY_INTLC_EVEN: GXCopyMode = 2;
pub const GXCopyMode_GX_COPY_INTLC_ODD: GXCopyMode = 3;
pub type GXCopyMode = ::core::ffi::c_uint;
pub const GXAlphaReadMode_GX_READ_00: GXAlphaReadMode = 0;
pub const GXAlphaReadMode_GX_READ_FF: GXAlphaReadMode = 1;
pub const GXAlphaReadMode_GX_READ_NONE: GXAlphaReadMode = 2;
pub type GXAlphaReadMode = ::core::ffi::c_uint;
pub const GXTexCacheSize_GX_TEXCACHE_32K: GXTexCacheSize = 0;
pub const GXTexCacheSize_GX_TEXCACHE_128K: GXTexCacheSize = 1;
pub const GXTexCacheSize_GX_TEXCACHE_512K: GXTexCacheSize = 2;
pub const GXTexCacheSize_GX_TEXCACHE_NONE: GXTexCacheSize = 3;
pub type GXTexCacheSize = ::core::ffi::c_uint;
pub const GXTlutSize_GX_TLUT_16: GXTlutSize = 1;
pub const GXTlutSize_GX_TLUT_32: GXTlutSize = 2;
pub const GXTlutSize_GX_TLUT_64: GXTlutSize = 4;
pub const GXTlutSize_GX_TLUT_128: GXTlutSize = 8;
pub const GXTlutSize_GX_TLUT_256: GXTlutSize = 16;
pub const GXTlutSize_GX_TLUT_512: GXTlutSize = 32;
pub const GXTlutSize_GX_TLUT_1K: GXTlutSize = 64;
pub const GXTlutSize_GX_TLUT_2K: GXTlutSize = 128;
pub const GXTlutSize_GX_TLUT_4K: GXTlutSize = 256;
pub const GXTlutSize_GX_TLUT_8K: GXTlutSize = 512;
pub const GXTlutSize_GX_TLUT_16K: GXTlutSize = 1024;
pub type GXTlutSize = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GXFifoObj {
    pub pad: [u8_; 128usize],
}
impl Default for GXFifoObj {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GXDrawDoneCallback = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union PPCWGPipe {
    pub u8_: u8_,
    pub u16_: u16_,
    pub u32_: u32_,
    pub u64_: u64_,
    pub s8: s8,
    pub s16: s16,
    pub s32: s32,
    pub s64: s64,
    pub f32_: f32_,
    pub f64_: f64_,
}
impl Default for PPCWGPipe {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GXTexRegionCallback = ::core::option::Option<
    unsafe extern "C" fn(t_obj: *mut GXTexObj, id: GXTexMapID) -> *mut GXTexRegion,
>;
pub type GXTlutRegionCallback =
    ::core::option::Option<unsafe extern "C" fn(idx: u32_) -> *mut GXTlutRegion>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Vec {
    pub x: f32_,
    pub y: f32_,
    pub z: f32_,
}
pub type VecPtr = *mut Vec;
pub type Point3d = Vec;
pub type Point3dPtr = *mut Vec;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct S16Vec {
    pub x: s16,
    pub y: s16,
    pub z: s16,
}
pub type S16VecPtr = *mut S16Vec;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Quaternion {
    pub x: f32_,
    pub y: f32_,
    pub z: f32_,
    pub w: f32_,
}
pub type QuaternionPtr = *mut Quaternion;
pub type Qtrn = Quaternion;
pub type QtrnPtr = *mut Quaternion;
pub type Mtx = [[f32_; 4usize]; 3usize];
pub type Mtx44 = [[f32_; 4usize]; 4usize];
pub type OSAlarmHandler =
    ::core::option::Option<unsafe extern "C" fn(alarm: *mut OSAlarm, context: *mut OSContext)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSAlarm {
    pub handler: OSAlarmHandler,
    pub tag: u32_,
    pub fire: OSTime,
    pub prev: *mut OSAlarm,
    pub next: *mut OSAlarm,
    pub period: OSTime,
    pub start: OSTime,
}
impl Default for OSAlarm {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CARDCallback = ::core::option::Option<unsafe extern "C" fn(chan: s32, result: s32)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CARDFileInfo {
    pub chan: s32,
    pub fileNo: s32,
    pub offset: s32,
    pub length: s32,
    pub iBlock: u16_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CARDStat {
    pub fileName: [::core::ffi::c_char; 32usize],
    pub length: u32_,
    pub time: u32_,
    pub gameName: [u8_; 4usize],
    pub company: [u8_; 2usize],
    pub bannerFormat: u8_,
    pub iconAddr: u32_,
    pub iconFormat: u16_,
    pub iconSpeed: u16_,
    pub commentAddr: u32_,
    pub offsetBanner: u32_,
    pub offsetBannerTlut: u32_,
    pub offsetIcon: [u32_; 8usize],
    pub offsetIconTlut: u32_,
    pub offsetData: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CARDDir {
    pub gameName: [u8_; 4usize],
    pub company: [u8_; 2usize],
    pub _padding0: u8_,
    pub bannerFormat: u8_,
    pub fileName: [u8_; 32usize],
    pub time: u32_,
    pub iconAddr: u32_,
    pub iconFormat: u16_,
    pub iconSpeed: u16_,
    pub permission: u8_,
    pub copyTimes: u8_,
    pub startBlock: u16_,
    pub length: u16_,
    pub _padding1: [u8_; 2usize],
    pub commentAddr: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CARDControl {
    pub attached: BOOL,
    pub result: s32,
    pub size: u16_,
    pub pageSize: u16_,
    pub sectorSize: s32,
    pub cBlock: u16_,
    pub vendorID: u16_,
    pub latency: s32,
    pub id: [u8_; 12usize],
    pub mountStep: ::core::ffi::c_int,
    pub scramble: u32_,
    pub formatStep: ::core::ffi::c_int,
    pub task: DSPTaskInfo,
    pub workArea: *mut ::core::ffi::c_void,
    pub currentDir: *mut CARDDir,
    pub currentFat: *mut u16_,
    pub threadQueue: OSThreadQueue,
    pub cmd: [u8_; 9usize],
    pub cmdlen: s32,
    pub mode: u32_,
    pub retry: ::core::ffi::c_int,
    pub repeat: ::core::ffi::c_int,
    pub addr: u32_,
    pub buffer: *mut ::core::ffi::c_void,
    pub xferred: s32,
    pub freeNo: u16_,
    pub startBlock: u16_,
    pub fileInfo: *mut CARDFileInfo,
    pub extCallback: CARDCallback,
    pub txCallback: CARDCallback,
    pub exiCallback: CARDCallback,
    pub apiCallback: CARDCallback,
    pub xferCallback: CARDCallback,
    pub eraseCallback: CARDCallback,
    pub unlockCallback: CARDCallback,
    pub alarm: OSAlarm,
}
impl Default for CARDControl {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PERFId = u8_;
pub const PerfType_PERF_CPU_EVENT: PerfType = 0;
pub const PerfType_PERF_CPU_GP_EVENT: PerfType = 1;
pub const PerfType_PERF_GP_EVENT: PerfType = 2;
pub type PerfType = ::core::ffi::c_uint;
pub type PERFAllocator =
    ::core::option::Option<unsafe extern "C" fn(size: u32_) -> *mut ::core::ffi::c_void>;
pub type PERFDeallocator =
    ::core::option::Option<unsafe extern "C" fn(block: *mut ::core::ffi::c_void)>;
pub type PERFDrawCallback = ::core::option::Option<unsafe extern "C" fn()>;
pub type ARQCallback = ::core::option::Option<unsafe extern "C" fn(pointerToARQRequest: u32_)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARQRequest {
    pub next: *mut ARQRequest,
    pub owner: u32_,
    pub type_: u32_,
    pub priority: u32_,
    pub source: u32_,
    pub dest: u32_,
    pub length: u32_,
    pub callback: ARQCallback,
}
impl Default for ARQRequest {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PADStatus {
    pub button: u16_,
    pub stickX: s8,
    pub stickY: s8,
    pub substickX: s8,
    pub substickY: s8,
    pub triggerLeft: u8_,
    pub triggerRight: u8_,
    pub analogA: u8_,
    pub analogB: u8_,
    pub err: s8,
}
pub type DTKCallback = ::core::option::Option<unsafe extern "C" fn(eventMask: u32_)>;
pub type DTKFlushCallback = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DTKTrack {
    pub prev: *mut DTKTrack,
    pub next: *mut DTKTrack,
    pub fileName: *mut ::core::ffi::c_char,
    pub eventMask: u32_,
    pub callback: DTKCallback,
    pub dvdFileInfo: DVDFileInfo,
}
impl Default for DTKTrack {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type AISCallback = ::core::option::Option<unsafe extern "C" fn(count: u32_)>;
pub type AIDCallback = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Vec2d {
    pub x: f32_,
    pub y: f32_,
}
pub type Vec2dPtr = *mut Vec2d;
pub type Point2d = Vec2d;
pub type Point2dPtr = *mut Vec2d;
pub const DIP_DEBUG: _bindgen_ty_1 = 1;
pub const DIP_DISP: _bindgen_ty_1 = 2;
pub const DIP_STCOLI: _bindgen_ty_1 = 4;
pub const DIP_TRIANGLE: _bindgen_ty_1 = 8;
pub const DIP_BALL_TGT: _bindgen_ty_1 = 16;
pub const DIP_JOINT_OFF: _bindgen_ty_1 = 32;
pub const DIP_APE_COLOR: _bindgen_ty_1 = 64;
pub const DIP_TIME_STOP: _bindgen_ty_1 = 128;
pub const DIP_KARAKUCHI: _bindgen_ty_1 = 256;
pub const DIP_NAMEENTRY: _bindgen_ty_1 = 512;
pub const DIP_SHADOW_TEST: _bindgen_ty_1 = 1024;
pub const DIP_FALL_DISP: _bindgen_ty_1 = 2048;
pub const DIP_TEST_CAM: _bindgen_ty_1 = 4096;
pub const DIP_NO_INTR: _bindgen_ty_1 = 8192;
pub const DIP_CAPTURE: _bindgen_ty_1 = 16384;
pub const DIP_OLD_BALL: _bindgen_ty_1 = 32768;
pub const DIP_NO_KARI: _bindgen_ty_1 = 65536;
pub const DIP_PLAY_STG_ALL: _bindgen_ty_1 = 131072;
pub const DIP_PLAY_PNT_X10: _bindgen_ty_1 = 262144;
pub const DIP_SARU_0: _bindgen_ty_1 = 524288;
pub const DIP_SWITCH20: _bindgen_ty_1 = 1048576;
pub const DIP_SWITCH21: _bindgen_ty_1 = 2097152;
pub const DIP_SWITCH22: _bindgen_ty_1 = 4194304;
pub const DIP_SWITCH23: _bindgen_ty_1 = 8388608;
pub const DIP_SWITCH24: _bindgen_ty_1 = 16777216;
pub const DIP_SWITCH25: _bindgen_ty_1 = 33554432;
pub const DIP_SWITCH26: _bindgen_ty_1 = 67108864;
pub const DIP_SWITCH27: _bindgen_ty_1 = 134217728;
pub const DIP_SWITCH28: _bindgen_ty_1 = 268435456;
pub const DIP_SWITCH29: _bindgen_ty_1 = 536870912;
pub const DIP_SWITCH30: _bindgen_ty_1 = 1073741824;
pub const DIP_SWITCH31: _bindgen_ty_1 = -2147483648;
pub type _bindgen_ty_1 = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Color3f {
    pub r: f32,
    pub g: f32,
    pub b: f32,
}
pub const Alignment_ALIGN_LT: Alignment = 0;
pub const Alignment_ALIGN_LC: Alignment = 1;
pub const Alignment_ALIGN_LB: Alignment = 2;
pub const Alignment_ALIGN_CT: Alignment = 3;
pub const Alignment_ALIGN_CC: Alignment = 4;
pub const Alignment_ALIGN_CB: Alignment = 5;
pub const Alignment_ALIGN_RT: Alignment = 6;
pub const Alignment_ALIGN_RC: Alignment = 7;
pub const Alignment_ALIGN_RB: Alignment = 8;
pub const Alignment_ALIGN_PIC: Alignment = 9;
pub type Alignment = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TPLTextureHeader {
    pub format: u32_,
    pub imageOffset: u32_,
    pub width: u16_,
    pub height: u16_,
    pub unkC: u16_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPL {
    pub numTextures: u32_,
    pub texHeaders: *mut TPLTextureHeader,
    pub fileData: *mut u8_,
    pub texObjs: *mut GXTexObj,
}
impl Default for TPL {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFXBufferInfo {
    pub currFrameBuf: *mut ::core::ffi::c_void,
    pub frameBufs: [*mut ::core::ffi::c_void; 2usize],
    pub fbNum: u32_,
    pub fifos: [*mut GXFifoObj; 2usize],
}
impl Default for GFXBufferInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MotionChannel {
    pub keyframeCount: u8_,
    pub currKeyframe: u8_,
    pub times: *mut u16_,
    pub valueCounts: *mut u8_,
    pub values: *mut f32,
}
impl Default for MotionChannel {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const JOINT_FLAG_HAS_ROTATION_MTX: _bindgen_ty_2 = 8;
pub const JOINT_FLAG_HAS_OTHER_ROTATION_MTX: _bindgen_ty_2 = 64;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnimJoint {
    pub flags: u32_,
    pub unk4: Vec,
    pub unk10: Vec,
    pub otherRotateMtx: Mtx,
    pub childCount: u32_,
    pub childIndexes: *const u8_,
    pub channels: [MotionChannel; 6usize],
    pub fillerB4: [u8_; 180usize],
    pub unk168: Mtx,
    pub unk198: f32,
    pub unk19C: f32,
    pub parentIdx: s32,
    pub unk1A4: Vec,
    pub unk1B0: Quaternion,
    pub u_motionPos: Point3d,
    pub unk1CC: Point3d,
    pub u_motRotation: Mtx,
    pub transformMtx: Mtx,
}
impl Default for AnimJoint {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct8003699C_child_sub {
    pub unk0: u32_,
    pub unk4: u16_,
    pub unk6: u16_,
    pub unk8: u16_,
    pub unkA: u16_,
    pub unkC: u16_,
    pub unk10: f32,
    pub unk14: f32,
    pub unk18: u32_,
    pub unk1C: f32,
    pub unk20: f32,
    pub unk24: s32,
    pub unk28: u16_,
    pub unk2A: u16_,
    pub unk2C: f32,
    pub filler30: [u8_; 4usize],
    pub unk34: *mut AnimJoint,
    pub joints: [AnimJoint; 29usize],
}
impl Default for Struct8003699C_child_sub {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct8003699C_child_child {
    pub unk0: u16_,
    pub unk2: u16_,
    pub unk4: u32_,
    pub unk8: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ApeAnimationThing {
    pub unk0: u32_,
    pub filler4: [u8_; 36usize],
    pub unk28: u16_,
    pub unk2A: u16_,
    pub unk2C: u16_,
    pub unk2E: s16,
    pub filler30: [u8_; 2usize],
    pub u_animId: u16_,
    pub u_nextAnimId: u16_,
    pub unk36: u16_,
    pub u_currKeyframe: u16_,
    pub u_keyframeCount: u16_,
    pub u_someDeltaTime: f32,
    pub u_timeInKeyframe: f32,
    pub filler44: [u8_; 16usize],
    pub unk54: Mtx,
    pub unk84: Struct8003699C_child_sub,
    pub unk4114: Struct8003699C_child_sub,
    pub unk81A4: *const Struct8003699C_child_child,
    pub joints: [AnimJoint; 29usize],
}
impl Default for ApeAnimationThing {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MotRotation {
    pub rotX: f32,
    pub rotY: f32,
    pub rotZ: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SomeMotInfoStruct {
    pub unk0: f32,
    pub unk4: s32,
    pub unk8: u32_,
    pub unkC: u32_,
    pub animId: s32,
    pub unk14: s32,
    pub u_maybeSpeed: f32,
    pub unk1C: u32_,
}
pub const APE_FLAG_INVISIBLE: _bindgen_ty_3 = 32;
pub const APE_FLAG_BLINK: _bindgen_ty_3 = 128;
pub const APE_FLAG_14: _bindgen_ty_3 = 16384;
pub const APE_FLAG_TRANSLUCENT: _bindgen_ty_3 = 1048576;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ape {
    pub unk0: *mut ApeAnimationThing,
    pub unk4: *mut ApeAnimationThing,
    pub animTimerCurr: f32,
    pub animTimerMax: f32,
    pub charaId: s32,
    pub flags: u32_,
    pub unk18: s32,
    pub unk1C: *mut SomeMotInfoStruct,
    pub unk20: *mut SomeMotInfoStruct,
    pub unk24: s32,
    pub unk28: s32,
    pub skel: *mut Skeleton,
    pub pos: Vec,
    pub unk3C: Vec,
    pub unk48: Vec,
    pub unk54: s32,
    pub modelScale: f32,
    pub threadId: u32_,
    pub unk60: Quaternion,
    pub unk70: u32_,
    pub unk74: u32_,
    pub filler78: [u8_; 24usize],
    pub lod: s32,
    pub u_bodyPartCount: u32_,
    pub u_bodyParts: *mut BodyPart,
    pub unk9C: u32_,
    pub unkA0: Vec,
    pub unkAC: f32,
    pub unkB0: u32_,
    pub colorId: ::core::ffi::c_int,
    pub unkB8: *mut ::core::ffi::c_void,
    pub unkBC: *mut ::core::ffi::c_void,
    pub ballId: s8,
    pub unkC1: u8_,
    pub unkC2: s16,
}
impl Default for Ape {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AnimGroupInfo {
    pub pos: Point3d,
    pub prevPos: Point3d,
    pub rot: S16Vec,
    pub prevRot: S16Vec,
    pub transform: Mtx,
    pub prevTransform: Mtx,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UnkStruct27 {
    pub filler0: [u8_; 4usize],
    pub shape: *mut GMAShape,
    pub modelTevs: *mut GMATevLayer,
    pub fillerC: [u8_; 44usize],
}
impl Default for UnkStruct27 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type Func802F20F0 =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut UnkStruct27) -> u32_>;
pub type CameraCallback =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut Camera, arg2: *mut Ball)>;
pub type BallCallback = ::core::option::Option<unsafe extern "C" fn(arg1: *mut Ball)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PolyShadowUnit {
    pub unk0: Vec,
    pub unkC: S16Vec,
    pub unk14: Vec,
    pub unk20: f32,
    pub unk24: f32,
    pub unk28: *mut GMAModel,
    pub unk2C: GXColor,
    pub unk30: f32,
    pub unk34: f32,
}
impl Default for PolyShadowUnit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type Struct80206DEC_Func = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct80206DEC {
    pub unk0: s32,
    pub u_stageTimer: f32,
    pub unk8: Struct80206DEC_Func,
    pub unkC: u32_,
    pub unk10: [f32; 3usize],
    pub unk1C: u32_,
    pub filler20: [u8_; 60usize],
}
impl Default for Struct80206DEC {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MotDatJoint {
    pub jointIdx: u8_,
    pub chanFlags: u16_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MotDat {
    pub u_keyframeCount: u16_,
    pub jointInfo: *mut MotDatJoint,
    pub keyframeCounts: *mut u8_,
    pub times: *mut u16_,
    pub valueCounts: *mut u8_,
    pub values: *mut f32,
}
impl Default for MotDat {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ChildJointList {
    pub count: u32_,
    pub children: *const u8_,
}
impl Default for ChildJointList {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Skeleton {
    pub unused0: *mut ::core::ffi::c_void,
    pub childLists: *mut ChildJointList,
    pub rotations: *mut MotRotation,
    pub unkC: *mut Vec,
    pub unk10: *mut Vec,
    pub name: *mut ::core::ffi::c_char,
}
impl Default for Skeleton {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct80034B50_child2_child {
    pub unused0: *mut ::core::ffi::c_void,
    pub filler4: [u8_; 20usize],
}
impl Default for Struct80034B50_child2_child {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MotSkeletonEntry2 {
    pub unused0: *mut ::core::ffi::c_void,
    pub unk4: [*mut Struct80034B50_child2_child; 3usize],
    pub unk10: [s32; 3usize],
}
impl Default for MotSkeletonEntry2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SkeletonFileData {
    pub skeletons: *mut Skeleton,
    pub skeletonsCount: u32_,
    pub unk8: *mut MotSkeletonEntry2,
    pub unkC: u32_,
}
impl Default for SkeletonFileData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MotInfo2_child {
    pub filler0: [u8_; 384usize],
    pub unk180: SomeMotInfoStruct,
}
impl Default for MotInfo2_child {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MotInfo {
    pub skelName: [::core::ffi::c_char; 24usize],
    pub modelName: [::core::ffi::c_char; 24usize],
    pub unk30: [*mut MotInfo2_child; 16usize],
    pub unk70: [u32_; 16usize],
    pub unkB0: *mut u8_,
}
impl Default for MotInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct JointPositionSomething {
    pub unk0: u16_,
    pub jointIdx: u16_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct JointRotationSomething {
    pub filler0: u16_,
    pub jointIdx: u16_,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: f32,
    pub unk10: f32,
    pub unk14: f32,
    pub unk18: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CoordsS8 {
    pub x: s8,
    pub y: s8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct8020A348_child {
    pub flags: u32_,
    pub model: *mut GMAModel,
    pub unk8: f32,
}
impl Default for Struct8020A348_child {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct8020A348 {
    pub unk0: *mut Struct8020A348_child,
    pub unk4: s32,
}
impl Default for Struct8020A348 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageSelection {
    pub difficulty: s32,
    pub levelNum: s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DynamicStagePart {
    pub modelName: *mut ::core::ffi::c_void,
    pub origModel: *mut NlModel,
    pub posNrmTexFunc: ::core::option::Option<unsafe extern "C" fn(arg1: *mut NlVtxTypeB)>,
    pub posColorTexFunc: ::core::option::Option<unsafe extern "C" fn(arg1: *mut NlVtxTypeA)>,
    pub raycastDownFunc: ::core::option::Option<
        unsafe extern "C" fn(
            rayOrigin: *mut Point3d,
            outHitPos: *mut Point3d,
            outHitNormal: *mut Vec,
        ) -> u32_,
    >,
    pub tempModel: *mut NlModel,
}
impl Default for DynamicStagePart {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct802F1B4C {
    pub unk6C: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FogInfo {
    pub unk0: s8,
    pub filler1: [u8_; 3usize],
    pub unk4: f32,
    pub unk8: f32,
    pub r: u8_,
    pub g: u8_,
    pub b: u8_,
    pub enabled: s8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct80209488 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct802F1B3C {
    pub matrices: [Mtx; 5usize],
    pub entries: *mut OrdTblNode,
    pub maxEntries: s32,
    pub depthOffset: f32,
    pub minDepth: f32,
    pub maxDepth: f32,
    pub lastEntry: *mut OrdTblNode,
    pub firstEntry: *mut OrdTblNode,
    pub depthRange: f32,
}
impl Default for Struct802F1B3C {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Sphere {
    pub pos: Point3d,
    pub radius: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801EED88 {
    pub unk0: u8_,
    pub unk1: [u8_; 6usize],
    pub unk8: u32_,
    pub unkC: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ScoreRecord {
    pub initials: [::core::ffi::c_char; 4usize],
    pub score: s32,
    pub unk8: u32_,
    pub floorNum: u8_,
    pub unkD: s8,
    pub unkE: s8,
    pub fillerF: [u8_; 1usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct802C6220 {
    pub size: u32_,
    pub records: [ScoreRecord; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemcardGameData {
    pub filler0: [u8_; 4usize],
    pub padLimit: [[s8; 2usize]; 32usize],
    pub unk44: u8_,
    pub unk45: u8_,
    pub unk46: u8_,
    pub unk47: u8_,
    pub unk48: u8_,
    pub unk49: u8_,
    pub unk4A: u8_,
    pub unk4B: u8_,
    pub bgmVolume: u8_,
    pub seVolume: u8_,
    pub unk4E: u8_,
    pub unk4F: u8_,
    pub unk50: u8_,
    pub unk51: u8_,
    pub unk52: u8_,
    pub unk53: u8_,
    pub unk54: u8_,
    pub unk55: u8_,
    pub filler56: [u8_; 2usize],
    pub unk58: s16,
    pub unk5A: s16,
    pub unk5C: s16,
    pub unk5E: s16,
    pub unk60: s16,
    pub unk62: s16,
    pub unk64: s16,
    pub unk66: s16,
    pub unk68: s16,
    pub unk6A: s16,
    pub filler6C: [u8_; 4usize],
    pub unk70: u32_,
    pub unk74: u32_,
    pub unk78: u32_,
    pub unk7C: u32_,
    pub unk80: u32_,
    pub unk84: u32_,
    pub unk88: s16,
    pub unk8A: s16,
    pub unk8C: u32_,
    pub visitedFloors: [u32_; 4usize],
    pub unkA0: u32_,
    pub unkA4: [u8_; 6usize],
    pub unkAA: u8_,
    pub unkAB: s8,
    pub unkAC: u8_,
    pub unkAD: u8_,
    pub unkAE: u8_,
    pub unkAF: s8,
    pub unkB0: [u8_; 508usize],
    pub unk2AC: u32_,
    pub unk2B0: u8_,
    pub unk2B1: u8_,
    pub unk2B2: u8_,
    pub unk2B3: u8_,
    pub unk2B4: u8_,
    pub unk2B5: u8_,
    pub unk2B6: u8_,
    pub unk2B7: s8,
    pub unk2B8: u32_,
    pub unk2BC: s8,
    pub unk2BD: u8_,
    pub filler2BE: [u8_; 1usize],
    pub unk2BF: u8_,
    pub totalPlayPoints: u32_,
    pub recordPlayPoints: u32_,
    pub unk2C8: Struct802C6220,
    pub unk3BC: u32_,
}
impl Default for MemcardGameData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemcardContents {
    pub crc: u16_,
    pub version: u16_,
    pub bannerAndIcon: [u8_; 22528usize],
    pub comment: [::core::ffi::c_char; 32usize],
    pub title: [::core::ffi::c_char; 32usize],
    pub gameData: MemcardGameData,
}
impl Default for MemcardContents {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Keyframe {
    pub easeType: s32,
    pub timeSeconds: f32,
    pub value: f32,
    pub tangentIn: f32,
    pub tangentOut: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ModelLOD {
    pub modelId: s32,
    pub distance: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct80089CBC {
    pub unk0: s32,
    pub unk4: s32,
    pub unk8: u32_,
    pub unkC: u32_,
    pub unk10: s32,
    pub unk14: s32,
    pub filler18: [u8_; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BodyPartNameInfo {
    pub unk0: *mut ::core::ffi::c_char,
    pub names: [*mut ::core::ffi::c_char; 4usize],
    pub unk14: u32_,
    pub filler18: [u32_; 6usize],
    pub u_someLodRelatedIndexes: [s32; 4usize],
}
impl Default for BodyPartNameInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BodyPart {
    pub type_: u32_,
    pub unk4: f32,
    pub unk8: s32,
    pub unkC: *mut Struct80089CBC,
    pub unk10: f32,
    pub u_someLodRelatedIndexes: [s32; 4usize],
}
impl Default for BodyPart {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BodyPartDesc {
    pub modelId: s16,
    pub jointIdx: s16,
    pub offset: Vec,
    pub draw: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut Ape, arg2: *mut BodyPartDesc, arg3: *mut BodyPart),
    >,
    pub name: *mut ::core::ffi::c_char,
    pub filler18: [u8_; 8usize],
}
impl Default for BodyPartDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ApeGfxFileInfo {
    pub basename: *mut ::core::ffi::c_char,
    pub bodyPartInfo: [*mut BodyPartDesc; 4usize],
    pub partCounts: [s16; 4usize],
    pub mainBodyModelIDs: [s16; 2usize],
    pub unused20: [u8_; 4usize],
}
impl Default for ApeGfxFileInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BgLightInfo {
    pub unk0: f32,
    pub ambient: Color3f,
    pub unk10: f32,
    pub unk14: f32,
    pub unk18: f32,
    pub unk1C: f32,
    pub unk20: f32,
    pub unk24: f32,
    pub unk28: f32,
    pub unk2C: f32,
    pub unk30: f32,
    pub infLightColor: Color3f,
    pub infLightRotX: s16,
    pub infLightRotY: s16,
    pub bgLightGroups: *mut *mut s8,
}
impl Default for BgLightInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type EnvMapFunc = ::core::option::Option<unsafe extern "C" fn(arg1: *mut GCMMatState_Unit)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct802F1BE8 {
    pub unk0: u32_,
    pub unk4: u8_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct802F1BF4 {
    pub unk0: u8_,
    pub unk1: u8_,
    pub filler2: [u8_; 2usize],
    pub unk4: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct802F1BFC {
    pub unk0: u8_,
    pub filler1: [u8_; 3usize],
    pub unk4: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct802F1C04 {
    pub unk0: s16,
    pub unk2: s16,
    pub unk4: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct802F1C10 {
    pub unk0: u8_,
    pub unk1: u8_,
    pub unk2: s8,
    pub unk3: u8_,
    pub unk4: [u8_; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GBilLightGroup {
    pub name: *mut ::core::ffi::c_char,
    pub u_bgLightGroupId: s8,
}
impl Default for GBilLightGroup {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const PAUSEMENU_CONT_HOW_EXIT: _bindgen_ty_4 = 0;
pub const PAUSEMENU_CONT_VIEW_HOW_EXIT: _bindgen_ty_4 = 1;
pub const PAUSEMENU_CONT_RETRY_VIEW_HOW_SELECT_EXIT: _bindgen_ty_4 = 2;
pub const PAUSEMENU_CONT_RETRY_HOW_EXIT: _bindgen_ty_4 = 3;
pub const PAUSEMENU_CONT_GUIDE_HOW_EXIT: _bindgen_ty_4 = 4;
pub type _bindgen_ty_4 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct801EEDA8 {
    pub filler0: [u8_; 256usize],
    pub unk100: f32,
    pub filler104: [u8_; 20usize],
}
impl Default for Struct801EEDA8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct8009DBB0 {
    pub unk0: ::core::ffi::c_int,
    pub unk4: Vec,
    pub unk10: Vec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct802C5D60 {
    pub unk0: u32_,
    pub unk4: u32_,
    pub filler8: [u8_; 8usize],
    pub unk10: u32_,
    pub filler14: [u8_; 12usize],
    pub unk20: [::core::ffi::c_char; 1024usize],
}
impl Default for Struct802C5D60 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct80094870 {
    pub unk0: u32_,
    pub unk4: u32_,
    pub unk8: u16_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct802099E8 {
    pub unk0: *mut u32_,
    pub unk4: *mut ::core::ffi::c_void,
    pub unk8: s32,
}
impl Default for Struct802099E8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct800993A8_sub {
    pub unk0: s32,
    pub unk4: Vec,
    pub unk10: Vec,
    pub unk1C: *mut GMAModel,
    pub unk20: f32,
    pub unk24: f32,
    pub unk28: s16,
    pub unk2A: s16,
    pub unk2C: f32,
}
impl Default for Struct800993A8_sub {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct800993A8 {
    pub unk0: GXTexObj,
    pub unk20: u32_,
    pub unk24: *mut ::core::ffi::c_void,
    pub unk28: u16_,
    pub unk2A: u16_,
    pub unk2C: GXTexObj,
    pub unk4C: *mut ::core::ffi::c_void,
    pub unk50: Mtx,
    pub filler80: [u8_; 4usize],
    pub unk84: u8_,
    pub filler85: [u8_; 3usize],
    pub unk88: f32,
    pub unk8C: s32,
    pub unk90: [Struct800993A8_sub; 256usize],
}
impl Default for Struct800993A8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct8008669C_sub {
    pub unk0: Vec,
    pub unkC: Vec,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FacialAnimationSomething {
    pub unk0: Vec,
    pub unkC: Vec,
    pub unk18: [Struct8008669C_sub; 3usize],
    pub unk60: [s16; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ScreenFadeInfo {
    pub type_: s32,
    pub color: u32_,
    pub timer: s32,
    pub timerMax: s32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ApeIconInfo {
    pub emotion: s32,
    pub unk4: s32,
    pub frameNum: s32,
    pub angle: s16,
    pub unk10: s32,
    pub unk14: s32,
}
pub const DIFFICULTY_BEGINNER: _bindgen_ty_5 = 0;
pub const DIFFICULTY_ADVANCED: _bindgen_ty_5 = 1;
pub const DIFFICULTY_EXPERT: _bindgen_ty_5 = 2;
pub type _bindgen_ty_5 = ::core::ffi::c_uint;
pub const Character_CHARACTER_AIAI: Character = 0;
pub const Character_CHARACTER_MEEMEE: Character = 1;
pub const Character_CHARACTER_BABY: Character = 2;
pub const Character_CHARACTER_GONGON: Character = 3;
pub type Character = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AdvLogoInfo {
    pub pos: Vec,
    pub xrot: s16,
    pub zrot: s16,
    pub rollTimer: s32,
    pub timer: s32,
    pub unk18: [s32; 4usize],
}
pub const ADV_FLAG_SHOW_BLIMP: _bindgen_ty_6 = 1;
pub const ADV_FLAG_SHOW_STAGE: _bindgen_ty_6 = 2;
pub const ADV_FLAG_SHOW_BALLS: _bindgen_ty_6 = 4;
pub type _bindgen_ty_6 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AdvDemoInfo {
    pub filler0: [u8_; 4usize],
    pub flags: u32_,
    pub unk8: s32,
    pub unkC: s32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AdvTutorialInfo {
    pub stickXRot: s32,
    pub stickZRot: s32,
    pub state: s32,
    pub transitionValue: f32,
    pub filler10: [u8_; 4usize],
}
pub const EV_STATE_INACTIVE: _bindgen_ty_7 = 0;
pub const EV_STATE_RUNNING: _bindgen_ty_7 = 2;
pub const EV_STATE_SUSPENDED: _bindgen_ty_7 = 4;
pub type _bindgen_ty_7 = ::core::ffi::c_uint;
pub const EVENT_MEMCARD: _bindgen_ty_8 = 0;
pub const EVENT_STAGE: _bindgen_ty_8 = 1;
pub const EVENT_WORLD: _bindgen_ty_8 = 2;
pub const EVENT_BALL: _bindgen_ty_8 = 3;
pub const EVENT_STOBJ: _bindgen_ty_8 = 4;
pub const EVENT_ITEM: _bindgen_ty_8 = 5;
pub const EVENT_RECPLAY: _bindgen_ty_8 = 6;
pub const EVENT_OBJ_COLLISION: _bindgen_ty_8 = 7;
pub const EVENT_NAME_ENTRY: _bindgen_ty_8 = 8;
pub const EVENT_INFO: _bindgen_ty_8 = 9;
pub const EVENT_COURSE: _bindgen_ty_8 = 10;
pub const EVENT_VIBRATION: _bindgen_ty_8 = 11;
pub const EVENT_VIEW: _bindgen_ty_8 = 12;
pub const EVENT_EFFECT: _bindgen_ty_8 = 13;
pub const EVENT_MINIMAP: _bindgen_ty_8 = 14;
pub const EVENT_CAMERA: _bindgen_ty_8 = 15;
pub const EVENT_SPRITE: _bindgen_ty_8 = 16;
pub const EVENT_MOUSE: _bindgen_ty_8 = 17;
pub const EVENT_SOUND: _bindgen_ty_8 = 18;
pub const EVENT_BACKGROUND: _bindgen_ty_8 = 19;
pub const EVENT_REND_EFC: _bindgen_ty_8 = 20;
pub type _bindgen_ty_8 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Event {
    pub state: s8,
    pub name: *mut ::core::ffi::c_char,
    pub start: ::core::option::Option<unsafe extern "C" fn()>,
    pub main: ::core::option::Option<unsafe extern "C" fn()>,
    pub finish: ::core::option::Option<unsafe extern "C" fn()>,
    pub time: u32_,
}
impl Default for Event {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ControllerInfo {
    pub held: PADStatus,
    pub prevHeld: PADStatus,
    pub pressed: PADStatus,
    pub released: PADStatus,
    pub repeat: PADStatus,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AnalogInput {
    pub held: u16_,
    pub prevHeld: u16_,
    pub pressed: u16_,
    pub released: u16_,
    pub repeat: u16_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FileCacheEntry {
    pub hasData: s32,
    pub entryNum: s32,
    pub aramAddr: u32_,
    pub aramSize: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct File {
    pub isCached: u32_,
    pub dvdFile: DVDFileInfo,
    pub cacheEntry: FileCacheEntry,
}
impl Default for File {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const MD_ADV: _bindgen_ty_9 = 0;
pub const MD_SEL: _bindgen_ty_9 = 1;
pub const MD_GAME: _bindgen_ty_9 = 2;
pub const MD_TEST: _bindgen_ty_9 = 3;
pub const MD_MINI: _bindgen_ty_9 = 4;
pub const MD_OPTION: _bindgen_ty_9 = 5;
pub type _bindgen_ty_9 = ::core::ffi::c_uint;
pub const SMD_ADV_TOP: _bindgen_ty_10 = 0;
pub const SMD_ADV_DEMO_INIT: _bindgen_ty_10 = 1;
pub const SMD_ADV_DEMO_MAIN: _bindgen_ty_10 = 2;
pub const SMD_ADV_LOGO_INIT: _bindgen_ty_10 = 3;
pub const SMD_ADV_LOGO_MAIN: _bindgen_ty_10 = 4;
pub const SMD_ADV_WARNING_INIT: _bindgen_ty_10 = 5;
pub const SMD_ADV_WARNING_MAIN: _bindgen_ty_10 = 6;
pub const SMD_ADV_RATING_INIT: _bindgen_ty_10 = 7;
pub const SMD_ADV_RATING_MAIN: _bindgen_ty_10 = 8;
pub const SMD_ADV_START_INIT: _bindgen_ty_10 = 9;
pub const SMD_ADV_START_MAIN: _bindgen_ty_10 = 10;
pub const SMD_ADV_RANKING_INIT: _bindgen_ty_10 = 11;
pub const SMD_ADV_RANKING_MAIN: _bindgen_ty_10 = 12;
pub const SMD_ADV_INFO_INIT: _bindgen_ty_10 = 13;
pub const SMD_ADV_INFO_MAIN: _bindgen_ty_10 = 14;
pub const SMD_ADV_GAME_READY_INIT: _bindgen_ty_10 = 15;
pub const SMD_ADV_GAME_READY_MAIN: _bindgen_ty_10 = 16;
pub const SMD_ADV_GAME_PLAY_INIT: _bindgen_ty_10 = 17;
pub const SMD_ADV_GAME_PLAY_MAIN: _bindgen_ty_10 = 18;
pub const SMD_ADV_TITLE_INIT: _bindgen_ty_10 = 19;
pub const SMD_ADV_TITLE_MAIN: _bindgen_ty_10 = 20;
pub const SMD_ADV_TITLE_REINIT: _bindgen_ty_10 = 21;
pub const SMD_ADV_DMY4: _bindgen_ty_10 = 22;
pub const SMD_ADV_DMY5: _bindgen_ty_10 = 23;
pub const SMD_ADV_DMY6: _bindgen_ty_10 = 24;
pub const SMD_ADV_DMY7: _bindgen_ty_10 = 25;
pub const SMD_ADV_DMY8: _bindgen_ty_10 = 26;
pub const SMD_ADV_BOTTOM: _bindgen_ty_10 = 27;
pub const SMD_SEL_TOP: _bindgen_ty_10 = 28;
pub const SMD_SEL_STAGE_INIT: _bindgen_ty_10 = 29;
pub const SMD_SEL_STAGE_MAIN: _bindgen_ty_10 = 30;
pub const SMD_SEL_NGC_INIT: _bindgen_ty_10 = 31;
pub const SMD_SEL_NGC_MAIN: _bindgen_ty_10 = 32;
pub const SMD_SEL_NGC_REINIT: _bindgen_ty_10 = 33;
pub const SMD_SEL_NGC_DEST: _bindgen_ty_10 = 34;
pub const SMD_SEL_DMY1: _bindgen_ty_10 = 35;
pub const SMD_SEL_DMY2: _bindgen_ty_10 = 36;
pub const SMD_SEL_DMY3: _bindgen_ty_10 = 37;
pub const SMD_SEL_DMY4: _bindgen_ty_10 = 38;
pub const SMD_SEL_DMY5: _bindgen_ty_10 = 39;
pub const SMD_SEL_DMY6: _bindgen_ty_10 = 40;
pub const SMD_SEL_DMY7: _bindgen_ty_10 = 41;
pub const SMD_SEL_DMY8: _bindgen_ty_10 = 42;
pub const SMD_SEL_DMY9: _bindgen_ty_10 = 43;
pub const SMD_SEL_DMYa: _bindgen_ty_10 = 44;
pub const SMD_SEL_DMYb: _bindgen_ty_10 = 45;
pub const SMD_SEL_BOTTOM: _bindgen_ty_10 = 46;
pub const SMD_GAME_TOP: _bindgen_ty_10 = 47;
pub const SMD_GAME_READY_INIT: _bindgen_ty_10 = 48;
pub const SMD_GAME_READY_MAIN: _bindgen_ty_10 = 49;
pub const SMD_GAME_PLAY_INIT: _bindgen_ty_10 = 50;
pub const SMD_GAME_PLAY_MAIN: _bindgen_ty_10 = 51;
pub const SMD_GAME_GOAL_INIT: _bindgen_ty_10 = 52;
pub const SMD_GAME_GOAL_MAIN: _bindgen_ty_10 = 53;
pub const SMD_GAME_GOAL_REPLAY_INIT: _bindgen_ty_10 = 54;
pub const SMD_GAME_GOAL_REPLAY_MAIN: _bindgen_ty_10 = 55;
pub const SMD_GAME_TIMEOVER_INIT: _bindgen_ty_10 = 56;
pub const SMD_GAME_TIMEOVER_MAIN: _bindgen_ty_10 = 57;
pub const SMD_GAME_RINGOUT_INIT: _bindgen_ty_10 = 58;
pub const SMD_GAME_RINGOUT_MAIN: _bindgen_ty_10 = 59;
pub const SMD_GAME_FIRST_INIT: _bindgen_ty_10 = 60;
pub const SMD_GAME_OVER_INIT: _bindgen_ty_10 = 61;
pub const SMD_GAME_OVER_MAIN: _bindgen_ty_10 = 62;
pub const SMD_GAME_NAMEENTRY_INIT: _bindgen_ty_10 = 63;
pub const SMD_GAME_NAMEENTRY_MAIN: _bindgen_ty_10 = 64;
pub const SMD_GAME_CONTINUE_INIT: _bindgen_ty_10 = 65;
pub const SMD_GAME_CONTINUE_MAIN: _bindgen_ty_10 = 66;
pub const SMD_GAME_RESTART_INIT: _bindgen_ty_10 = 67;
pub const SMD_GAME_NAMEENTRY_READY_INIT: _bindgen_ty_10 = 68;
pub const SMD_GAME_NAMEENTRY_READY_MAIN: _bindgen_ty_10 = 69;
pub const SMD_GAME_BONUS_CLEAR_INIT: _bindgen_ty_10 = 70;
pub const SMD_GAME_BONUS_CLEAR_MAIN: _bindgen_ty_10 = 71;
pub const SMD_GAME_ENDING_INIT: _bindgen_ty_10 = 72;
pub const SMD_GAME_ENDING_MAIN: _bindgen_ty_10 = 73;
pub const SMD_GAME_EXTRA_INIT: _bindgen_ty_10 = 74;
pub const SMD_GAME_EXTRA_WAIT: _bindgen_ty_10 = 75;
pub const SMD_GAME_RESULT_INIT: _bindgen_ty_10 = 76;
pub const SMD_GAME_RESULT_MAIN: _bindgen_ty_10 = 77;
pub const SMD_GAME_RESULT_MENU: _bindgen_ty_10 = 78;
pub const SMD_GAME_INTR_SEL_INIT: _bindgen_ty_10 = 79;
pub const SMD_GAME_INTR_SEL_MAIN: _bindgen_ty_10 = 80;
pub const SMD_GAME_OVER_SAVE: _bindgen_ty_10 = 81;
pub const SMD_GAME_OVER_DEST: _bindgen_ty_10 = 82;
pub const SMD_GAME_ROLL_INIT: _bindgen_ty_10 = 83;
pub const SMD_GAME_ROLL_MAIN: _bindgen_ty_10 = 84;
pub const SMD_GAME_OVER_POINT_INIT: _bindgen_ty_10 = 85;
pub const SMD_GAME_OVER_POINT_MAIN: _bindgen_ty_10 = 86;
pub const SMD_GAME_DMY3: _bindgen_ty_10 = 87;
pub const SMD_GAME_DMY4: _bindgen_ty_10 = 88;
pub const SMD_GAME_DMY5: _bindgen_ty_10 = 89;
pub const SMD_GAME_DMY6: _bindgen_ty_10 = 90;
pub const SMD_GAME_DMY7: _bindgen_ty_10 = 91;
pub const SMD_GAME_DMY8: _bindgen_ty_10 = 92;
pub const SMD_GAME_BOTTOM: _bindgen_ty_10 = 93;
pub const SMD_TEST_TOP: _bindgen_ty_10 = 94;
pub const SMD_TEST_SELECT_INIT: _bindgen_ty_10 = 95;
pub const SMD_TEST_SELECT_MAIN: _bindgen_ty_10 = 96;
pub const SMD_TEST_INPUT_INIT: _bindgen_ty_10 = 97;
pub const SMD_TEST_INPUT_MAIN: _bindgen_ty_10 = 98;
pub const SMD_TEST_DIP_INIT: _bindgen_ty_10 = 99;
pub const SMD_TEST_DIP_MAIN: _bindgen_ty_10 = 100;
pub const SMD_TEST_SOUND_INIT: _bindgen_ty_10 = 101;
pub const SMD_TEST_SOUND_MAIN: _bindgen_ty_10 = 102;
pub const SMD_TEST_BLUR_INIT: _bindgen_ty_10 = 103;
pub const SMD_TEST_BLUR_MAIN: _bindgen_ty_10 = 104;
pub const SMD_TEST_SHADOW_INIT: _bindgen_ty_10 = 105;
pub const SMD_TEST_SHADOW_MAIN: _bindgen_ty_10 = 106;
pub const SMD_TEST_FOCUS_INIT: _bindgen_ty_10 = 107;
pub const SMD_TEST_FOCUS_MAIN: _bindgen_ty_10 = 108;
pub const SMD_TEST_INDIRECT_INIT: _bindgen_ty_10 = 109;
pub const SMD_TEST_INDIRECT_MAIN: _bindgen_ty_10 = 110;
pub const SMD_TEST_NLOBJPUT_INIT: _bindgen_ty_10 = 111;
pub const SMD_TEST_NLOBJPUT_MAIN: _bindgen_ty_10 = 112;
pub const SMD_TEST_BITMAP_INIT: _bindgen_ty_10 = 113;
pub const SMD_TEST_BITMAP_MAIN: _bindgen_ty_10 = 114;
pub const SMD_TEST_FONT_INIT: _bindgen_ty_10 = 115;
pub const SMD_TEST_FONT_MAIN: _bindgen_ty_10 = 116;
pub const SMD_TEST_REPLAY_INIT: _bindgen_ty_10 = 117;
pub const SMD_TEST_REPLAY_MAIN: _bindgen_ty_10 = 118;
pub const SMD_TEST_MOTION_INIT: _bindgen_ty_10 = 119;
pub const SMD_TEST_MOTION_MAIN: _bindgen_ty_10 = 120;
pub const SMD_TEST_ADVREPLAY_INIT: _bindgen_ty_10 = 121;
pub const SMD_TEST_MODEL_INIT: _bindgen_ty_10 = 122;
pub const SMD_TEST_MODEL_MAIN: _bindgen_ty_10 = 123;
pub const SMD_TEST_NEWMODEL_INIT: _bindgen_ty_10 = 124;
pub const SMD_TEST_NEWMODEL_MAIN: _bindgen_ty_10 = 125;
pub const SMD_TEST_PATTERN_INIT: _bindgen_ty_10 = 126;
pub const SMD_TEST_PATTERN_MAIN: _bindgen_ty_10 = 127;
pub const SMD_TEST_ROMFONT_INIT: _bindgen_ty_10 = 128;
pub const SMD_TEST_ROMFONT_MAIN: _bindgen_ty_10 = 129;
pub const SMD_TEST_PREREND_INIT: _bindgen_ty_10 = 130;
pub const SMD_TEST_PREREND_MAIN: _bindgen_ty_10 = 131;
pub const SMD_TEST_PREVIEW_INIT: _bindgen_ty_10 = 132;
pub const SMD_TEST_PREVIEW_MAIN: _bindgen_ty_10 = 133;
pub const SMD_TEST_DMY2: _bindgen_ty_10 = 134;
pub const SMD_TEST_DMY3: _bindgen_ty_10 = 135;
pub const SMD_TEST_DMY4: _bindgen_ty_10 = 136;
pub const SMD_TEST_DMY5: _bindgen_ty_10 = 137;
pub const SMD_TEST_DMY6: _bindgen_ty_10 = 138;
pub const SMD_TEST_DMY7: _bindgen_ty_10 = 139;
pub const SMD_TEST_DMY8: _bindgen_ty_10 = 140;
pub const SMD_TEST_DMY9: _bindgen_ty_10 = 141;
pub const SMD_TEST_BOTTOM: _bindgen_ty_10 = 142;
pub const SMD_MINI_TOP: _bindgen_ty_10 = 143;
pub const SMD_MINI_SELECT_INIT: _bindgen_ty_10 = 144;
pub const SMD_MINI_SELECT_MAIN: _bindgen_ty_10 = 145;
pub const SMD_MINI_TEST0_INIT: _bindgen_ty_10 = 146;
pub const SMD_MINI_TEST0_MAIN: _bindgen_ty_10 = 147;
pub const SMD_MINI_FIGHT_INIT: _bindgen_ty_10 = 148;
pub const SMD_MINI_FIGHT_MAIN: _bindgen_ty_10 = 149;
pub const SMD_MINI_BOWLING_INIT: _bindgen_ty_10 = 150;
pub const SMD_MINI_BOWLING_MAIN: _bindgen_ty_10 = 151;
pub const SMD_MINI_RACE_INIT: _bindgen_ty_10 = 152;
pub const SMD_MINI_RACE_MAIN: _bindgen_ty_10 = 153;
pub const SMD_MINI_PILOT_INIT: _bindgen_ty_10 = 154;
pub const SMD_MINI_PILOT_MAIN: _bindgen_ty_10 = 155;
pub const SMD_MINI_BILLIARDS_INIT: _bindgen_ty_10 = 156;
pub const SMD_MINI_BILLIARDS_MAIN: _bindgen_ty_10 = 157;
pub const SMD_MINI_GOLF_INIT: _bindgen_ty_10 = 158;
pub const SMD_MINI_GOLF_MAIN: _bindgen_ty_10 = 159;
pub const SMD_MINI_REL_SAMPLE_INIT: _bindgen_ty_10 = 160;
pub const SMD_MINI_REL_SAMPLE_MAIN: _bindgen_ty_10 = 161;
pub const SMD_MINI_COMMEND_INIT: _bindgen_ty_10 = 162;
pub const SMD_MINI_COMMEND_MAIN: _bindgen_ty_10 = 163;
pub const SMD_MINI_RANKING_INIT: _bindgen_ty_10 = 164;
pub const SMD_MINI_RANKING_MAIN: _bindgen_ty_10 = 165;
pub const SMD_MINI_ENDING_INIT: _bindgen_ty_10 = 166;
pub const SMD_MINI_ENDING_MAIN: _bindgen_ty_10 = 167;
pub const SMD_MINI_DMY4: _bindgen_ty_10 = 168;
pub const SMD_MINI_DMY5: _bindgen_ty_10 = 169;
pub const SMD_MINI_DMY6: _bindgen_ty_10 = 170;
pub const SMD_MINI_DMY7: _bindgen_ty_10 = 171;
pub const SMD_MINI_BOTTOM: _bindgen_ty_10 = 172;
pub const SMD_OPTION_TOP: _bindgen_ty_10 = 173;
pub const SMD_OPTION_SELECT_INIT: _bindgen_ty_10 = 174;
pub const SMD_OPTION_SELECT_MAIN: _bindgen_ty_10 = 175;
pub const SMD_OPTION_SOUND_INIT: _bindgen_ty_10 = 176;
pub const SMD_OPTION_SOUND_MAIN: _bindgen_ty_10 = 177;
pub const SMD_OPTION_PAD_INIT: _bindgen_ty_10 = 178;
pub const SMD_OPTION_PAD_MAIN: _bindgen_ty_10 = 179;
pub const SMD_OPTION_MEMCARD_INIT: _bindgen_ty_10 = 180;
pub const SMD_OPTION_MEMCARD_MAIN: _bindgen_ty_10 = 181;
pub const SMD_OPTION_POINT_INIT: _bindgen_ty_10 = 182;
pub const SMD_OPTION_POINT_MAIN: _bindgen_ty_10 = 183;
pub const SMD_OPTION_RANKING_INIT: _bindgen_ty_10 = 184;
pub const SMD_OPTION_RANKING_MAIN: _bindgen_ty_10 = 185;
pub const SMD_OPTION_AUTOSAVE_INIT: _bindgen_ty_10 = 186;
pub const SMD_OPTION_AUTOSAVE_MAIN: _bindgen_ty_10 = 187;
pub const SMD_OPTION_REPLAY_INIT: _bindgen_ty_10 = 188;
pub const SMD_OPTION_REPLAY_MAIN: _bindgen_ty_10 = 189;
pub const SMD_OPTION_SEPARATE_INIT: _bindgen_ty_10 = 190;
pub const SMD_OPTION_SEPARATE_MAIN: _bindgen_ty_10 = 191;
pub const SMD_OPTION_REPLAY_PLAY_INIT: _bindgen_ty_10 = 192;
pub const SMD_OPTION_REPLAY_PLAY_MAIN: _bindgen_ty_10 = 193;
pub const SMD_OPTION_PAD_MENU_INIT: _bindgen_ty_10 = 194;
pub const SMD_OPTION_PAD_MENU_MAIN: _bindgen_ty_10 = 195;
pub const SMD_OPTION_PAD_VIB_INIT: _bindgen_ty_10 = 196;
pub const SMD_OPTION_PAD_VIB_MAIN: _bindgen_ty_10 = 197;
pub const SMD_OPTION_BOTTOM: _bindgen_ty_10 = 198;
pub type _bindgen_ty_10 = ::core::ffi::c_uint;
pub const COURSE_FLAG_EXTRA: _bindgen_ty_11 = 8;
pub const COURSE_FLAG_MASTER: _bindgen_ty_11 = 16;
pub const COURSE_FLAG_FAILED_EXTRA: _bindgen_ty_11 = 1048576;
pub type _bindgen_ty_11 = ::core::ffi::c_uint;
pub const GAMETYPE_MAIN_NORMAL: _bindgen_ty_12 = 0;
pub const GAMETYPE_MAIN_COMPETITION: _bindgen_ty_12 = 1;
pub const GAMETYPE_MAIN_PRACTICE: _bindgen_ty_12 = 2;
pub const GAMETYPE_MINI_RACE: _bindgen_ty_12 = 3;
pub const GAMETYPE_MINI_FIGHT: _bindgen_ty_12 = 4;
pub const GAMETYPE_MINI_TARGET: _bindgen_ty_12 = 5;
pub const GAMETYPE_MINI_BILLIARDS: _bindgen_ty_12 = 6;
pub const GAMETYPE_MINI_BOWLING: _bindgen_ty_12 = 7;
pub const GAMETYPE_MINI_GOLF: _bindgen_ty_12 = 8;
pub type _bindgen_ty_12 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ModeControl {
    pub submodeTimer: s32,
    pub difficulty: s32,
    pub courseFlags: u32_,
    pub fillerC: [u8_; 4usize],
    pub unk10: s32,
    pub unk14: u32_,
    pub unk18: s32,
    pub unk1C: s32,
    pub menuSel: s32,
    pub playerCount: ::core::ffi::c_int,
    pub gameType: s32,
    pub currPlayer: s32,
    pub unk30: s32,
    pub filler34: [u8_; 8usize],
    pub unk3C: s32,
    pub unk40: s16,
    pub splitscreenMode: u8_,
    pub filler43: [u8_; 5usize],
}
pub const SPLITSCREEN_1P_WIDE: _bindgen_ty_13 = 0;
pub const SPLITSCREEN_2P_WIDE: _bindgen_ty_13 = 1;
pub const SPLITSCREEN_3P_WIDE: _bindgen_ty_13 = 2;
pub const SPLITSCREEN_4_SPLIT: _bindgen_ty_13 = 3;
pub type _bindgen_ty_13 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PauseMenuState {
    pub unk0: s32,
    pub unk4: u32_,
    pub selection: s32,
    pub itemCount: s32,
    pub menuType: s32,
    pub padId: s8,
    pub playerId: s8,
    pub unk16: s16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MinigameLinkInfo {
    pub module: OSModuleInfo,
    pub bssSize: u32_,
    pub filler24: [u8_; 16usize],
    pub init: ::core::option::Option<unsafe extern "C" fn()>,
    pub finish: ::core::option::Option<unsafe extern "C" fn()>,
}
impl Default for MinigameLinkInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RelModule {
    pub info: *mut MinigameLinkInfo,
    pub bss: *mut ::core::ffi::c_void,
}
impl Default for RelModule {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tagNLsprarg {
    pub sprno: s32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub zm_x: f32,
    pub zm_y: f32,
    pub u0: f32,
    pub v0: f32,
    pub u1: f32,
    pub v1: f32,
    pub ang: s32,
    pub trnsl: f32,
    pub listType: s32,
    pub attr: u32_,
    pub base_color: u32_,
    pub offset_color: u32_,
    pub reserved: [s32; 4usize],
}
pub type NLsprarg = tagNLsprarg;
pub const FontID_FONT_ASCII: FontID = 0;
pub const FontID_FONT_ASC_8x16: FontID = 1;
pub const FontID_FONT_ASC_12x12: FontID = 2;
pub const FontID_FONT_DMY00: FontID = 3;
pub const FontID_FONT_DMY01: FontID = 4;
pub const FontID_FONT_DMY02: FontID = 5;
pub const FontID_FONT_DMY03: FontID = 6;
pub const FontID_FONT_DMY04: FontID = 7;
pub const FontID_FONT_DMY05: FontID = 8;
pub const FontID_FONT_ASC_72x64: FontID = 9;
pub const FontID_FONT_DMY06: FontID = 10;
pub const FontID_FONT_DMY07: FontID = 11;
pub const FontID_FONT_DMY08: FontID = 12;
pub const FontID_FONT_DMY09: FontID = 13;
pub const FontID_FONT_DMY10: FontID = 14;
pub const FontID_FONT_DMY11: FontID = 15;
pub const FontID_FONT_DMY12: FontID = 16;
pub const FontID_FONT_DMY13: FontID = 17;
pub const FontID_FONT_DMY14: FontID = 18;
pub const FontID_FONT_DMY15: FontID = 19;
pub const FontID_FONT_DMY16: FontID = 20;
pub const FontID_FONT_ICON_SD: FontID = 21;
pub const FontID_FONT_ICON_SD2: FontID = 22;
pub const FontID_FONT_DMY20: FontID = 23;
pub const FontID_FONT_DMY21: FontID = 24;
pub const FontID_FONT_DMY22: FontID = 25;
pub const FontID_FONT_DMY23: FontID = 26;
pub const FontID_FONT_NUM_26x31: FontID = 27;
pub const FontID_FONT_ASC_30x31: FontID = 28;
pub const FontID_FONT_ICON_TPL: FontID = 29;
pub const FontID_FONT_ICON_MDE: FontID = 30;
pub const FontID_FONT_ICON_RNK: FontID = 31;
pub const FontID_FONT_RNK_32x32: FontID = 32;
pub const FontID_FONT_RNK_NUM: FontID = 33;
pub const FontID_FONT_MINI_RNK: FontID = 34;
pub const FontID_FONT_SCORE_NUM: FontID = 35;
pub const FontID_FONT_DMY_RNK0: FontID = 36;
pub const FontID_FONT_DMY_RNK1: FontID = 37;
pub const FontID_FONT_DMY_RNK2: FontID = 38;
pub const FontID_FONT_DMY_RNK3: FontID = 39;
pub const FontID_FONT_DMY_RNK4: FontID = 40;
pub const FontID_FONT_DMY_RNK5: FontID = 41;
pub const FontID_FONT_DMY_RNK6: FontID = 42;
pub const FontID_FONT_DMY_RNK7: FontID = 43;
pub const FontID_FONT_DMY_RNK8: FontID = 44;
pub const FontID_FONT_DMY_RNK9: FontID = 45;
pub const FontID_FONT_DMY_RNKa: FontID = 46;
pub const FontID_FONT_DMY_RNKb: FontID = 47;
pub const FontID_FONT_DMY_RNKc: FontID = 48;
pub const FontID_FONT_DMY_RNKd: FontID = 49;
pub const FontID_FONT_DMY_RNKe: FontID = 50;
pub const FontID_FONT_DMY_RNKf: FontID = 51;
pub const FontID_FONT_NUM_7x10: FontID = 52;
pub const FontID_FONT_NUM_8x10: FontID = 53;
pub const FontID_FONT_NUM_12x24: FontID = 54;
pub const FontID_FONT_ICON_CRS: FontID = 55;
pub const FontID_FONT_DMY40: FontID = 56;
pub const FontID_FONT_DMY41: FontID = 57;
pub const FontID_FONT_DMY42: FontID = 58;
pub const FontID_FONT_DMY43: FontID = 59;
pub const FontID_FONT_BWL_SCORE: FontID = 60;
pub const FontID_FONT_DMY50: FontID = 61;
pub const FontID_FONT_DMY51: FontID = 62;
pub const FontID_FONT_DMY52: FontID = 63;
pub const FontID_FONT_DMY53: FontID = 64;
pub const FontID_FONT_DMY54: FontID = 65;
pub const FontID_FONT_DMY55: FontID = 66;
pub const FontID_FONT_DMY56: FontID = 67;
pub const FontID_FONT_DMY57: FontID = 68;
pub const FontID_FONT_RAC_ASC16x16: FontID = 69;
pub const FontID_FONT_RAC_PLAYER: FontID = 70;
pub const FontID_FONT_RAC_RANK: FontID = 71;
pub const FontID_FONT_RAC_RAP_MARK_NUM: FontID = 72;
pub const FontID_FONT_RAC_RAP_NUM: FontID = 73;
pub const FontID_FONT_RAC_TIME_NUM: FontID = 74;
pub const FontID_FONT_RAC_RAP_MARK_NUM_S: FontID = 75;
pub const FontID_FONT_RAC_TIME_NUM_S: FontID = 76;
pub const FontID_FONT_DMY60: FontID = 77;
pub const FontID_FONT_DMY61: FontID = 78;
pub const FontID_FONT_DMY62: FontID = 79;
pub const FontID_FONT_DMY63: FontID = 80;
pub const FontID_FONT_DMY64: FontID = 81;
pub const FontID_FONT_TGT_PLAYER: FontID = 82;
pub const FontID_FONT_TGT_MSCORE: FontID = 83;
pub const FontID_FONT_TGT_SPEED: FontID = 84;
pub const FontID_FONT_TGT_SCORE: FontID = 85;
pub const FontID_FONT_TGT_ROUND: FontID = 86;
pub const FontID_FONT_TGT_ALT: FontID = 87;
pub const FontID_FONT_TGT_WIND: FontID = 88;
pub const FontID_FONT_TGT_RESULT: FontID = 89;
pub const FontID_FONT_DMY72: FontID = 90;
pub const FontID_FONT_DMY73: FontID = 91;
pub const FontID_FONT_DMY74: FontID = 92;
pub const FontID_FONT_ICON_LV: FontID = 93;
pub const FontID_FONT_NUM_22x22: FontID = 94;
pub const FontID_FONT_ASC_16x16: FontID = 95;
pub const FontID_FONT_ASC_16x16P: FontID = 96;
pub const FontID_FONT_ASC_18x16: FontID = 97;
pub const FontID_FONT_ASC_20x20: FontID = 98;
pub const FontID_FONT_ASC_20x20P: FontID = 99;
pub const FontID_FONT_ASC_32x32: FontID = 100;
pub const FontID_FONT_NUM_12x19: FontID = 101;
pub const FontID_FONT_NUM_24x37: FontID = 102;
pub const FontID_FONT_DMY79: FontID = 103;
pub const FontID_FONT_DMY7a: FontID = 104;
pub const FontID_FONT_DMY7b: FontID = 105;
pub const FontID_FONT_DMY7c: FontID = 106;
pub const FontID_FONT_DMY7d: FontID = 107;
pub const FontID_FONT_DMY7e: FontID = 108;
pub const FontID_FONT_DMY7f: FontID = 109;
pub const FontID_FONT_DMY80: FontID = 110;
pub const FontID_FONT_DMY81: FontID = 111;
pub const FontID_FONT_DMY82: FontID = 112;
pub const FontID_FONT_DMY83: FontID = 113;
pub const FontID_FONT_DMY84: FontID = 114;
pub const FontID_FONT_DMY85: FontID = 115;
pub const FontID_FONT_DMY86: FontID = 116;
pub const FontID_FONT_DMY87: FontID = 117;
pub const FontID_FONT_DMY88: FontID = 118;
pub const FontID_FONT_DMY89: FontID = 119;
pub const FontID_FONT_DMY8a: FontID = 120;
pub const FontID_FONT_DMY8b: FontID = 121;
pub const FontID_FONT_DMY8c: FontID = 122;
pub const FontID_FONT_DMY8d: FontID = 123;
pub const FontID_FONT_DMY8e: FontID = 124;
pub const FontID_FONT_DMY8f: FontID = 125;
pub const FontID_FONT_DMY90: FontID = 126;
pub const FontID_FONT_DMY91: FontID = 127;
pub const FontID_FONT_DMY92: FontID = 128;
pub const FontID_FONT_DMY93: FontID = 129;
pub const FontID_FONT_DMY94: FontID = 130;
pub const FontID_FONT_DMY95: FontID = 131;
pub const FontID_FONT_DMY96: FontID = 132;
pub const FontID_FONT_DMY97: FontID = 133;
pub const FontID_FONT_DMY98: FontID = 134;
pub const FontID_FONT_DMY99: FontID = 135;
pub const FontID_FONT_DMY9a: FontID = 136;
pub const FontID_FONT_DMY9b: FontID = 137;
pub const FontID_FONT_DMY9c: FontID = 138;
pub const FontID_FONT_DMY9d: FontID = 139;
pub const FontID_FONT_DMY9e: FontID = 140;
pub const FontID_FONT_DMY9f: FontID = 141;
pub const FontID_FONT_DMYa0: FontID = 142;
pub const FontID_FONT_DMYa1: FontID = 143;
pub const FontID_FONT_DMYa2: FontID = 144;
pub const FontID_FONT_DMYa3: FontID = 145;
pub const FontID_FONT_DMYa4: FontID = 146;
pub const FontID_FONT_DMYa5: FontID = 147;
pub const FontID_FONT_DMYa6: FontID = 148;
pub const FontID_FONT_DMYa7: FontID = 149;
pub const FontID_FONT_DMYa8: FontID = 150;
pub const FontID_FONT_DMYa9: FontID = 151;
pub const FontID_FONT_DMYaa: FontID = 152;
pub const FontID_FONT_DMYab: FontID = 153;
pub const FontID_FONT_DMYac: FontID = 154;
pub const FontID_FONT_DMYad: FontID = 155;
pub const FontID_FONT_DMYae: FontID = 156;
pub const FontID_FONT_DMYaf: FontID = 157;
pub const FontID_FONT_DMYb0: FontID = 158;
pub const FontID_FONT_DMYb1: FontID = 159;
pub const FontID_FONT_DMYb2: FontID = 160;
pub const FontID_FONT_DMYb3: FontID = 161;
pub const FontID_FONT_DMYb4: FontID = 162;
pub const FontID_FONT_DMYb5: FontID = 163;
pub const FontID_FONT_DMYb6: FontID = 164;
pub const FontID_FONT_DMYb7: FontID = 165;
pub const FontID_FONT_DMYb8: FontID = 166;
pub const FontID_FONT_DMYb9: FontID = 167;
pub const FontID_FONT_DMYba: FontID = 168;
pub const FontID_FONT_DMYbb: FontID = 169;
pub const FontID_FONT_DMYbc: FontID = 170;
pub const FontID_FONT_DMYbd: FontID = 171;
pub const FontID_FONT_DMYbe: FontID = 172;
pub const FontID_FONT_DMYbf: FontID = 173;
pub const FontID_FONT_JAP_TAG: FontID = 174;
pub const FontID_FONT_JAP_DMY: FontID = 175;
pub const FontID_FONT_JAP_24x24_2: FontID = 176;
pub const FontID_FONT_JAP_24x24_2P: FontID = 177;
pub const FontID_FONT_JAP_24x24_I: FontID = 178;
pub const FontID_FONT_JAP_24x24_2Pg: FontID = 179;
pub type FontID = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FontParams {
    pub bmpId: s16,
    pub spaceWidth: u8_,
    pub lineHeight: u8_,
    pub firstChar: s32,
    pub lastChar: s32,
    pub unkC: s8,
    pub unkD: s8,
    pub unk10: f32,
    pub unk14: f32,
    pub unk18: f32,
    pub unk1C: f32,
    pub unk20: s8,
    pub unk21: s8,
    pub unk22: s8,
    pub unk23: s8,
}
pub const SPRITE_TYPE_TEXT: _bindgen_ty_14 = 0;
pub const SPRITE_TYPE_BITMAP: _bindgen_ty_14 = 1;
pub const SPRITE_TYPE_TILED_BITMAP: _bindgen_ty_14 = 2;
pub type _bindgen_ty_14 = ::core::ffi::c_uint;
pub const SPRITE_FLAG_HFLIP: _bindgen_ty_15 = 524288;
pub const SPRITE_FLAG_VFLIP: _bindgen_ty_15 = 1048576;
pub type _bindgen_ty_15 = ::core::ffi::c_uint;
pub const SPRITE_TAG_TIMER: _bindgen_ty_16 = 2;
pub const SPRITE_TAG_LOGO_PLUS: _bindgen_ty_16 = 3;
pub const SPRITE_TAG_PAUSE_MENU: _bindgen_ty_16 = 4;
pub const SPRITE_TAG_EIEIPU: _bindgen_ty_16 = 11;
pub const SPRITE_TAG_FINAL_FLOOR_BANNER: _bindgen_ty_16 = 14;
pub const SPRITE_TAG_FLOOR_NAME_BANNER: _bindgen_ty_16 = 15;
pub const SPRITE_TAG_ADV_DEMO_BANANA_1: _bindgen_ty_16 = 30;
pub const SPRITE_TAG_ADV_DEMO_BANANA_2: _bindgen_ty_16 = 31;
pub const SPRITE_TAG_ADV_DEMO_BANANA_3: _bindgen_ty_16 = 32;
pub type _bindgen_ty_16 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sprite {
    pub type_: s8,
    pub fontId: u8_,
    pub unk2: s8,
    pub textAlign: s8,
    pub x: f32,
    pub y: f32,
    pub mulR: u8_,
    pub mulG: u8_,
    pub mulB: u8_,
    pub tag: s8,
    pub counter: s16,
    pub filler12: [u8_; 30usize],
    pub destFunc: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Sprite)>,
    pub mainFunc: ::core::option::Option<unsafe extern "C" fn(arg1: *mut s8, arg2: *mut Sprite)>,
    pub drawFunc: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Sprite)>,
    pub bmpId: u16_,
    pub filler3E: [u8_; 2usize],
    pub scaleX: f32,
    pub scaleY: f32,
    pub userVar: s32,
    pub depth: f32,
    pub unk50: *mut Sprite,
    pub next: *mut Sprite,
    pub left: s32,
    pub top: s32,
    pub right: s32,
    pub bottom: s32,
    pub rotation: s16,
    pub filler6A: [u8_; 2usize],
    pub opacity: f32,
    pub addR: u8_,
    pub addG: u8_,
    pub addB: u8_,
    pub filler73: [u8_; 1usize],
    pub flags: u32_,
    pub unk78: u32_,
    pub unk7C: f32,
    pub unk80: f32,
    pub unk84: f32,
    pub unk88: f32,
    pub text: [::core::ffi::c_char; 48usize],
}
impl Default for Sprite {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const WINDOW_COLOR_WHITE: _bindgen_ty_17 = 0;
pub const WINDOW_COLOR_RED: _bindgen_ty_17 = 1;
pub const WINDOW_COLOR_GREEN: _bindgen_ty_17 = 2;
pub const WINDOW_COLOR_BLUE: _bindgen_ty_17 = 3;
pub const WINDOW_COLOR_YELLOW: _bindgen_ty_17 = 4;
pub const WINDOW_COLOR_MAGENTA: _bindgen_ty_17 = 5;
pub const WINDOW_COLOR_CYAN: _bindgen_ty_17 = 6;
pub const WINDOW_COLOR_BLACK: _bindgen_ty_17 = 7;
pub type _bindgen_ty_17 = ::core::ffi::c_uint;
pub const CAMERA_STATE_LEVEL_MAIN: _bindgen_ty_18 = 1;
pub const CAMERA_STATE_TEST: _bindgen_ty_18 = 2;
pub const CAMERA_STATE_IDLE: _bindgen_ty_18 = 3;
pub const CAMERA_STATE_FALLOUT_REPLAY: _bindgen_ty_18 = 8;
pub const CAMERA_STATE_READY_INIT: _bindgen_ty_18 = 10;
pub const CAMERA_STATE_READY_MAIN: _bindgen_ty_18 = 11;
pub const CAMERA_STATE_GOAL_MAIN: _bindgen_ty_18 = 15;
pub const CAMERA_STATE_GOAL_REPLAY: _bindgen_ty_18 = 17;
pub const CAMERA_STATE_TIME_OVER: _bindgen_ty_18 = 22;
pub const CAMERA_STATE_CONTINUE: _bindgen_ty_18 = 26;
pub const CAMERA_STATE_AV_INTRO: _bindgen_ty_18 = 28;
pub const CAMERA_STATE_ATTRACT_CUTSCENE: _bindgen_ty_18 = 30;
pub const CAMERA_STATE_DEMO: _bindgen_ty_18 = 45;
pub const CAMERA_STATE_EXTRA_CUTSCENE: _bindgen_ty_18 = 51;
pub const CAMERA_STATE_ATTRACT_LEVEL: _bindgen_ty_18 = 55;
pub const CAMERA_STATE_MINI_FIGHT: _bindgen_ty_18 = 59;
pub const CAMERA_STATE_MINI_RACE: _bindgen_ty_18 = 60;
pub const CAMERA_STATE_MINI_BOWLING: _bindgen_ty_18 = 61;
pub const CAMERA_STATE_CREDITS: _bindgen_ty_18 = 63;
pub const CAMERA_STATE_MINI_GOLF: _bindgen_ty_18 = 64;
pub const CAMERA_STATE_MINI_BILLIARDS: _bindgen_ty_18 = 65;
pub const CAMERA_STATE_MINI_PILOT: _bindgen_ty_18 = 67;
pub const CAMERA_STATE_RANK_IN: _bindgen_ty_18 = 71;
pub const CAMERA_STATE_END_CUTSCENE: _bindgen_ty_18 = 74;
pub type _bindgen_ty_18 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Viewport {
    pub left: f32,
    pub top: f32,
    pub width: f32,
    pub height: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Camera_sub {
    pub unk28: f32,
    pub unk2C: f32,
    pub fov: s16,
    pub unk32: s16,
    pub aspect: f32,
    pub unk38: f32,
    pub unk3C: f32,
    pub vp: Viewport,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Camera {
    pub eye: Vec,
    pub lookAt: Vec,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub state: s8,
    pub subState: s8,
    pub unk20: f32,
    pub flags: s16,
    pub unk26: s8,
    pub filler27: [u8_; 1usize],
    pub sub28: Camera_sub,
    pub timerCurr: s16,
    pub timerMax: s16,
    pub lookAtStart: Vec,
    pub unk60: f32,
    pub unk64: f32,
    pub angleXStart: s32,
    pub angleYStart: s32,
    pub angleZStart: s32,
    pub lookAtEnd: Vec,
    pub unk80: f32,
    pub filler84: [u8_; 4usize],
    pub angleXEnd: s32,
    pub angleYEnd: s32,
    pub angleZEnd: s32,
    pub eyeVel: Vec,
    pub lookAtVel: Vec,
    pub unkAC: Vec,
    pub unkB8: s16,
    pub fillerBA: [u8_; 2usize],
    pub unkBC: Vec,
    pub unkC8: Vec,
    pub fillerD4: [u8_; 24usize],
    pub isShaking: u32_,
    pub shakeTimer: s32,
    pub unkF4: Vec,
    pub unk100: f32,
    pub unk104: f32,
    pub unk108: f32,
    pub unk10C: s16,
    pub unk10E: s16,
    pub unk110: s16,
    pub filler112: [u8_; 2usize],
    pub unk114: Vec,
    pub filler120: [u8_; 12usize],
    pub unk12C: Vec,
    pub unk138: Vec,
    pub unk144: Mtx,
    pub unk174: Mtx,
    pub unk1A4: Mtx,
    pub unk1D4: Mtx,
    pub unk204: u32_,
    pub unk208: u8_,
    pub filler20C: [u8_; 120usize],
}
impl Default for Camera {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EndingSceneCharacter {
    pub ape: *mut Ape,
    pub state: s16,
    pub timer: s16,
    pub unk8: s16,
    pub unkA: s16,
    pub pos: Vec,
    pub vel: Vec,
    pub filler24: [u8_; 12usize],
    pub unk30: S16Vec,
    pub unk36: u16_,
    pub unk38: s16,
    pub unk3A: s16,
    pub model: *mut ::core::ffi::c_void,
    pub unk40: u32_,
    pub unk44: Vec,
    pub unk50: s16,
    pub unk52: s16,
    pub unk54: s16,
    pub unk56: s16,
    pub unk58: s16,
    pub unk5A: s16,
    pub unk5C: s16,
    pub filler5E: [u8_; 18usize],
    pub unk70: u32_,
    pub unk74: Vec,
}
impl Default for EndingSceneCharacter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SomeBigEndingStruct_sub {
    pub unk0: s16,
    pub unk2: s16,
    pub unk4: Vec,
    pub unk10: Vec,
    pub unk1C: s16,
    pub unk1E: s16,
    pub unk20: Vec,
    pub unk2C: Vec,
    pub unk38: Vec,
    pub unk44: s16,
    pub unk46: s16,
    pub unk48: Vec,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SomeStruct {
    pub unk0: s8,
    pub unk2: s16,
    pub unk4: s16,
    pub unk8: Vec,
    pub unk14: Vec,
    pub unk20: Vec,
    pub unk2C: Vec,
    pub unk38: s16,
    pub unk3A: s16,
    pub unk3C: s16,
    pub unk3E: s16,
    pub unk40: s16,
    pub unk42: s16,
    pub unk44: Vec,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SomeBigEndingStruct_sub4_sub2 {
    pub filler0: [u8_; 8usize],
    pub unk8: Vec,
    pub unk14: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SomeBigEndingStruct_sub4_sub {
    pub filler0: [u8_; 4usize],
    pub unk4: Vec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EndingSceneObject {
    pub isActive: s8,
    pub unk2: s16,
    pub unk4: s16,
    pub unk8: s32,
    pub pos: Vec,
    pub vel: Vec,
    pub unk24: Vec,
    pub unk30: S16Vec,
    pub unk36: s16,
    pub unk38: s16,
    pub unk3A: s16,
    pub unk3C: f32,
    pub unk40: f32,
    pub unk44: f32,
    pub unk48: f32,
    pub unk4C: *mut SomeBigEndingStruct_sub4_sub,
    pub model: *mut SomeBigEndingStruct_sub4_sub2,
}
impl Default for EndingSceneObject {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EndingCharaDialogue {
    pub numLines: s32,
    pub lines: [*mut ::core::ffi::c_char; 6usize],
}
impl Default for EndingCharaDialogue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EndingWork {
    pub unk0: f32,
    pub objects: [EndingSceneObject; 512usize],
    pub characters: [EndingSceneCharacter; 4usize],
    pub unkAA04: SomeStruct,
    pub unkAA54: SomeBigEndingStruct_sub,
    pub unkAAA8: f32,
    pub unkAAAC: f32,
    pub charaDialogue: EndingCharaDialogue,
    pub unkAACC: u32_,
    pub dialogueBuf: [::core::ffi::c_char; 6144usize],
}
impl Default for EndingWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EndingInfo {
    pub state: s16,
    pub nextState: s16,
    pub flags: u32_,
    pub work: *mut EndingWork,
}
impl Default for EndingInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MathutilData {
    pub mtxA: Mtx,
    pub mtxB: Mtx,
    pub filler60: [u8_; 48usize],
    pub mtxStack: *mut Mtx,
    pub mtxStackPtr: *mut Mtx,
    pub filler98: [u8_; 256usize],
    pub constZeroF: f32,
    pub constOneF: f32,
    pub constOneHalfF: f32,
    pub constThreeHalvesF: f32,
    pub unk1A8: s32,
    pub constZeroOne: [u8_; 2usize],
    pub constOneZero: [u8_; 2usize],
}
impl Default for MathutilData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type wchar_t = ::core::ffi::c_ushort;
pub const BG_NULL: _bindgen_ty_19 = 0;
pub const BG_TYPE_BLUESKY_A: _bindgen_ty_19 = 1;
pub const BG_TYPE_NIGHT_B: _bindgen_ty_19 = 2;
pub const BG_TYPE_SUNSET_C: _bindgen_ty_19 = 3;
pub const BG_TYPE_WATER_C: _bindgen_ty_19 = 4;
pub const BG_TYPE_STORM_D: _bindgen_ty_19 = 5;
pub const BG_TYPE_ICE_E: _bindgen_ty_19 = 6;
pub const BG_TYPE_SAND_G: _bindgen_ty_19 = 7;
pub const BG_TYPE_SPACE_H: _bindgen_ty_19 = 8;
pub const BG_TYPE_CAVE_I: _bindgen_ty_19 = 9;
pub const BG_TYPE_BONUS_J: _bindgen_ty_19 = 10;
pub const BG_TYPE_EXTRAMASTER_J: _bindgen_ty_19 = 11;
pub const BG_TYPE_E3: _bindgen_ty_19 = 12;
pub const BG_TYPE_JUN: _bindgen_ty_19 = 13;
pub const BG_TYPE_WAT: _bindgen_ty_19 = 14;
pub const BG_TYPE_NIG: _bindgen_ty_19 = 15;
pub const BG_TYPE_SUN: _bindgen_ty_19 = 16;
pub const BG_TYPE_SPA: _bindgen_ty_19 = 17;
pub const BG_TYPE_SND: _bindgen_ty_19 = 18;
pub const BG_TYPE_ICE2: _bindgen_ty_19 = 19;
pub const BG_TYPE_STM: _bindgen_ty_19 = 20;
pub const BG_TYPE_BNS: _bindgen_ty_19 = 21;
pub const BG_TYPE_PIL: _bindgen_ty_19 = 22;
pub const BG_TYPE_BIL: _bindgen_ty_19 = 23;
pub const BG_TYPE_GOL: _bindgen_ty_19 = 24;
pub const BG_TYPE_BOW: _bindgen_ty_19 = 25;
pub const BG_TYPE_MST: _bindgen_ty_19 = 26;
pub const BG_TYPE_END: _bindgen_ty_19 = 27;
pub type _bindgen_ty_19 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BackgroundInfo {
    pub bgId: s16,
    pub unk2: s16,
    pub animTimer: f32,
    pub unk8: u32_,
    pub backdropColor: GXColor,
    pub unk10: s32,
    pub unk14: Vec,
    pub unk20: Vec,
    pub unk2C: Vec,
    pub unk38: Vec,
    pub unk44: f32,
    pub unk48: Mtx,
    pub unk78: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub unk7C: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub unk80: *mut NlModel,
    pub unk84: f32,
    pub unk88: f32,
    pub stageEnvMapFunc: EnvMapFunc,
    pub bgEnvMapFunc: EnvMapFunc,
    pub ballEnvMapFunc: EnvMapFunc,
    pub u_lightAssignFunc: ::core::option::Option<unsafe extern "C" fn()>,
    pub work: *mut ::core::ffi::c_void,
    pub randSeed: u32_,
    pub u_otherSeed: u32_,
}
impl Default for BackgroundInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BG_MDL_CMP_PREFIX: _bindgen_ty_20 = 0;
pub const BG_MDL_CMP_FULL: _bindgen_ty_20 = 1;
pub const BG_MDL_CMP_SUFFIX: _bindgen_ty_20 = 2;
pub const BG_MDL_CMP_END: _bindgen_ty_20 = 3;
pub type _bindgen_ty_20 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGModelSearch {
    pub cmpType: u32_,
    pub name: *mut ::core::ffi::c_char,
}
impl Default for BGModelSearch {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGJungleCloud {
    pub bgObj: *mut StageBgObject,
    pub unk4: Vec,
    pub unk10: Vec,
    pub unk1C: Vec,
    pub texMtx: Mtx,
}
impl Default for BGJungleCloud {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGJungleWork {
    pub filler0: [u8_; 4usize],
    pub cloudCount: s32,
    pub clouds: [BGJungleCloud; 4usize],
    pub mode: s32,
}
impl Default for BGJungleWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGSunsetLayer {
    pub bgObj: *mut StageBgObject,
    pub texTranslation: Vec,
    pub currTexVel: Vec,
    pub desiredTexVel: Vec,
    pub texMtx: Mtx,
}
impl Default for BGSunsetLayer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGSunsetWork {
    pub filler0: [u8_; 4usize],
    pub layersCount: s32,
    pub layers: [BGSunsetLayer; 4usize],
    pub mode: s32,
}
impl Default for BGSunsetWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct BGStormWork_child {
    pub unk0: f32,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGStormWork {
    pub unk0: s32,
    pub rain00Model: *mut GMAModel,
    pub rain01Model: *mut GMAModel,
    pub rain02Model: *mut GMAModel,
    pub unk10: Vec,
    pub unk1C: Vec,
    pub unk28: [BGStormWork_child; 64usize],
}
impl Default for BGStormWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct BGBonusStarpoint {
    pub u_pos: Vec,
    pub pulse: s16,
    pub pulseSpeed: s16,
    pub red: f32,
    pub green: f32,
    pub blue: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGBonusWork {
    pub initialized: s32,
    pub mainObj: *mut StageBgObject,
    pub shotstarModel: *mut GMAModel,
    pub starlightModel: *mut GMAModel,
    pub starpointCount: s32,
    pub starpoints: [BGBonusStarpoint; 64usize],
    pub lightmapTexObjs: *mut GXTexObj,
    pub lightmapATexObjs: *mut GXTexObj,
    pub unk71C: Mtx,
    pub unk74C: Mtx,
    pub unk77C: Mtx,
    pub unk7AC: Mtx,
    pub unk7DC: Mtx,
}
impl Default for BGBonusWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGEndWork {
    pub unk0: s32,
    pub fountainWaterModel: *mut GMAModel,
    pub waterModel: *mut GMAModel,
    pub waterSpecTex: *mut GXTexObj,
    pub cloudTex: *mut GXTexObj,
    pub unk14: ::core::option::Option<unsafe extern "C" fn()>,
    pub unk18: ::core::option::Option<unsafe extern "C" fn()>,
    pub unk1C: Vec,
    pub unk28: f32,
    pub unk2C: f32,
    pub filler30: [u8_; 4usize],
    pub unk34: f32,
    pub unk38: f32,
    pub unk3C: f32,
    pub unk40: Vec,
    pub unk4C: Vec,
    pub unk58: f32,
    pub unk5C: f32,
    pub filler60: [u8_; 4usize],
    pub unk64: Mtx,
}
impl Default for BGEndWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGWaterWork {
    pub unk0: s32,
    pub filler4: [u8_; 12usize],
    pub unk10: s16,
    pub unk12: s16,
    pub unk14: s16,
    pub unk16: s16,
    pub unk18: s16,
    pub unk1A: s16,
    pub unk1C: u16_,
    pub unk1E: u16_,
    pub unk20: f32,
    pub waterSurfaceMat: *mut GMAModel,
    pub causticTex: *mut GXTexObj,
    pub waterSurfaceTestTex: *mut GXTexObj,
    pub lightmapTex: *mut GXTexObj,
    pub lightmapStageTex: *mut GXTexObj,
    pub lightmapGradTex: *mut GXTexObj,
    pub unk3C: Mtx,
    pub unk6C: Mtx,
    pub unk9C: Mtx,
    pub unkCC: Mtx,
    pub unkFC: Mtx,
    pub unk12C: Mtx,
    pub unk15C: Mtx,
    pub bubbleModel: *mut GMAModel,
    pub waterSurface: *mut StageBgObject,
}
impl Default for BGWaterWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGSpaceWork {
    pub unk0: s32,
    pub corePos: Vec,
    pub coreScale: f32,
    pub meteorModelCount: s32,
    pub meteorModels: [*mut GMAModel; 8usize],
    pub unk38: s32,
    pub unk3C: f32,
    pub saturn: *mut StageBgObject,
    pub saturnIndMap: *mut GXTexObj,
    pub unk48: Vec,
    pub unk54: f32,
    pub unk58: f32,
    pub unk5C: f32,
    pub unk60: f32,
    pub unk64: Mtx,
    pub unk94: [[f32; 3usize]; 2usize],
}
impl Default for BGSpaceWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGSandWork_sub_sub {
    pub unk0: *mut GMAModel,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: s16,
    pub unkE: s16,
}
impl Default for BGSandWork_sub_sub {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGSandWork_sub {
    pub unk0: Vec,
    pub unkC: f32,
    pub unk10: f32,
    pub unk14: f32,
    pub unk18: Vec,
    pub unk24: f32,
    pub unk28: f32,
    pub unk2C: f32,
    pub unk30: f32,
    pub unk34: [BGSandWork_sub_sub; 6usize],
}
impl Default for BGSandWork_sub {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGSandWork {
    pub unk0: s32,
    pub unk4: Vec,
    pub unk10: f32,
    pub unk14: f32,
    pub unk18: f32,
    pub unk1C: Vec,
    pub unk28: Vec,
    pub shadowMapTex: *mut GXTexObj,
    pub unk38: *mut GXTexObj,
    pub sandTex: *mut GXTexObj,
    pub unk40: u32_,
    pub pyramidClouds: [*mut StageBgObject; 8usize],
    pub unk64: Vec,
    pub unk70: Vec,
    pub unk7C: u32_,
    pub unk80: [BGSandWork_sub; 8usize],
    pub fountainWater: [*mut StageBgObject; 6usize],
    pub unk538: [*mut GMAModel; 2usize],
    pub waterAUraModel: *mut GMAModel,
    pub waterBModel: *mut GMAModel,
    pub waterBUraModel: *mut GMAModel,
    pub fountainIndirectTex: *mut GXTexObj,
    pub fountainGradientTex: *mut GXTexObj,
    pub unk554: *mut GMAModel,
    pub unk558: *mut GMAModel,
    pub unk55C: *mut GMAModel,
    pub unk560: *mut GMAModel,
    pub unk564: *mut BGSandWork_sub,
    pub filler568: [u8_; 4usize],
}
impl Default for BGSandWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGMasterWork_sub {
    pub unk0: *mut StageBgObject,
    pub unk4: Vec,
    pub unk10: Vec,
    pub unk1C: Vec,
    pub unk28: Mtx,
}
impl Default for BGMasterWork_sub {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGMasterWork_sub2 {
    pub unk0: *mut StageBgObject,
    pub unk4: Vec,
    pub unk10: s16,
    pub unk12: s16,
    pub unk14: Vec,
    pub unk20: Vec,
    pub unk2C: Vec,
    pub unk38: Mtx,
    pub unk68: Mtx,
}
impl Default for BGMasterWork_sub2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGMasterWork {
    pub unk0: s32,
    pub stgCloudTex: *mut GXTexObj,
    pub unk8: s32,
    pub unkC: [BGMasterWork_sub; 4usize],
    pub unk16C: s32,
    pub unk170: s32,
    pub unk174: [BGMasterWork_sub2; 16usize],
    pub miniCloudModelsCount: s32,
    pub miniCloudModels: [*mut GMAModel; 4usize],
    pub unkB08: *mut GMAModel,
    pub unkB0C: *mut GMAModel,
    pub waterTex: *mut GXTexObj,
    pub unkB14: EnvMapFunc,
    pub unkB18: Vec,
    pub unkB24: Vec,
    pub unkB30: Vec,
    pub unkB3C: Vec,
    pub unkB48: Vec,
    pub unkB54: Vec,
    pub unkB60: Mtx,
}
impl Default for BGMasterWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct BGPilotWork_sub {
    pub unk0: Vec,
    pub unkC: Vec,
    pub unk18: Vec,
    pub unk24: s16,
    pub unk28: Mtx,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGPilotWork {
    pub unk0: s32,
    pub unk4: *mut GMAModel,
    pub unk8: *mut GMAModel,
    pub unkC: *mut GMAModel,
    pub unk10: *mut GMAModel,
    pub unk14: *mut StageBgObject,
    pub unk18: *mut GMAModel,
    pub unk1C: *mut GXTexObj,
    pub unk20: *mut GXTexObj,
    pub unk24: *mut GMAModel,
    pub unk28: *mut GMAModel,
    pub unk2C: s32,
    pub unk30: [*mut GMAModel; 8usize],
    pub unk50: Mtx,
    pub unk80: Mtx,
    pub unkB0: Mtx,
    pub unkE0: *mut Struct800993A8,
    pub unkE4: [BGPilotWork_sub; 3usize],
}
impl Default for BGPilotWork {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type BgModelFindProc = ::core::option::Option<
    unsafe extern "C" fn(arg1: ::core::ffi::c_int, arg2: *mut GMAModelEntry) -> ::core::ffi::c_int,
>;
pub type BgObjFindProc = ::core::option::Option<
    unsafe extern "C" fn(arg1: ::core::ffi::c_int, arg2: *mut StageBgObject) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NlVtxTypeA {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub unkC: u32_,
    pub color: u32_,
    pub unk14: u32_,
    pub s: f32,
    pub t: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NlVtxTypeB {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub nx: f32,
    pub ny: f32,
    pub nz: f32,
    pub s: f32,
    pub t: f32,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct NlDispList {
    pub flags: u32_,
    pub faceCount: u32_,
    pub vtxData: __IncompleteArrayField<u8_>,
}
pub const NL_TEX_FLAG_T_CLAMP: _bindgen_ty_21 = 32768;
pub const NL_TEX_FLAG_S_CLAMP: _bindgen_ty_21 = 65536;
pub const NL_TEX_FLAG_T_MIRROR: _bindgen_ty_21 = 131072;
pub const NL_TEX_FLAG_S_MIRROR: _bindgen_ty_21 = 262144;
pub type _bindgen_ty_21 = ::core::ffi::c_uint;
pub const NL_DLIST_FLAG_QUADS: _bindgen_ty_22 = 4;
pub const NL_DLIST_FLAG_TRIANGLES: _bindgen_ty_22 = 8;
pub const NL_DLIST_FLAG_TRIANGLESTRIP: _bindgen_ty_22 = 16;
pub type _bindgen_ty_22 = ::core::ffi::c_uint;
pub const NL_MODEL_FLAG_VTX_TYPE_A: _bindgen_ty_23 = 2;
pub const NL_MODEL_FLAG_TRANSLUCENT: _bindgen_ty_23 = 256;
pub const NL_MODEL_FLAG_OPAQUE: _bindgen_ty_23 = 512;
pub type _bindgen_ty_23 = ::core::ffi::c_uint;
pub const NL_MODEL_TYPE_UNLIT_CONST_MAT_COLOR: _bindgen_ty_24 = -1;
pub const NL_MODEL_TYPE_LIT_CONST_MAT_COLOR: _bindgen_ty_24 = -2;
pub const NL_MODEL_TYPE_UNLIT_VERT_MAT_COLOR: _bindgen_ty_24 = -3;
pub type _bindgen_ty_24 = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NlMesh_sub {
    pub materialColorA: f32,
    pub materialColorR: f32,
    pub materialColorG: f32,
    pub materialColorB: f32,
}
#[repr(C)]
#[derive(Debug)]
pub struct NlMesh {
    pub flags: s32,
    pub unk4: u32_,
    pub texFlags: u32_,
    pub texObj: *mut GXTexObj,
    pub unk10: u32_,
    pub filler14: [u8_; 12usize],
    pub tplTexIdx: s32,
    pub type_: s32,
    pub ambientColorScale: f32,
    pub sub2C: NlMesh_sub,
    pub filler3C: [u8_; 16usize],
    pub dispListSize: u32_,
    pub dispListStart: __IncompleteArrayField<u8_>,
}
impl Default for NlMesh {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct NlModel {
    pub u_valid: s32,
    pub flags: u32_,
    pub boundSphereCenter: Vec,
    pub boundSphereRadius: f32,
    pub meshStart: __IncompleteArrayField<u8_>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NlModelHeader_child {
    pub modelSize: u32_,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct NlModelHeader_child2 {
    pub unk0: [::core::ffi::c_char; 4usize],
    pub name: __IncompleteArrayField<::core::ffi::c_char>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NlModelHeader {
    pub unk0: *mut NlModelHeader_child2,
    pub unk4: *mut NlModelHeader_child,
}
impl Default for NlModelHeader {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NlObj_UnkChild_Child {
    pub unk0: u32_,
    pub unk4: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NlObj_UnkChild {
    pub filler0: [u8_; 4usize],
    pub childStructs: *mut NlObj_UnkChild_Child,
}
impl Default for NlObj_UnkChild {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct NlObj {
    pub unk0: *mut *mut NlObj_UnkChild,
    pub models: __IncompleteArrayField<*mut NlModel>,
}
impl Default for NlObj {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoundGroupDesc {
    pub groupName: *mut ::core::ffi::c_char,
    pub unused: s32,
    pub unk8: s32,
    pub index: u32_,
    pub baseName: *mut ::core::ffi::c_char,
}
impl Default for SoundGroupDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoundDesc {
    pub unk0: s32,
    pub name: *mut ::core::ffi::c_char,
    pub unk8: s8,
    pub unkA: s16,
    pub unkC: s16,
}
impl Default for SoundDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const SoundGroupID_SOUND_GRPse04: SoundGroupID = 0;
pub const SoundGroupID_SOUND_GRPse01: SoundGroupID = 1;
pub const SoundGroupID_SOUND_GRPse02: SoundGroupID = 2;
pub const SoundGroupID_SOUND_GRPse03: SoundGroupID = 3;
pub const SoundGroupID_SOUND_GRPnar: SoundGroupID = 4;
pub const SoundGroupID_SOUND_GRPboy: SoundGroupID = 5;
pub const SoundGroupID_SOUND_GRPgirl: SoundGroupID = 6;
pub const SoundGroupID_SOUND_GRPbaby: SoundGroupID = 7;
pub const SoundGroupID_SOUND_GRPgoli: SoundGroupID = 8;
pub const SoundGroupID_SOUND_GRPbil_set: SoundGroupID = 9;
pub const SoundGroupID_SOUND_GRPbow_set: SoundGroupID = 10;
pub const SoundGroupID_SOUND_GRPfight_set: SoundGroupID = 11;
pub const SoundGroupID_SOUND_GRPgolf_set: SoundGroupID = 12;
pub const SoundGroupID_SOUND_GRPrace_set: SoundGroupID = 13;
pub const SoundGroupID_SOUND_GRPtarget_set: SoundGroupID = 14;
pub const SoundGroupID_SOUND_GRPcomn_set: SoundGroupID = 15;
pub const SoundGroupID_SOUND_GRPending: SoundGroupID = 16;
pub const SoundGroupID_SOUND_GRPstream: SoundGroupID = 17;
pub const SoundGroupID_SOUND_GRPend: SoundGroupID = 18;
pub type SoundGroupID = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct802014E0 {
    pub unk0: s32,
    pub unk4: u32_,
    pub filler8: [u8_; 4usize],
    pub unkC: u8_,
    pub fillerD: [u8_; 3usize],
    pub unk10: s32,
    pub unk14: s32,
    pub unk18: s32,
    pub dtkState: s32,
}
pub const BALL_FLAG_00: _bindgen_ty_25 = 1;
pub const BALL_FLAG_TEETER: _bindgen_ty_25 = 2;
pub const BALL_FLAG_02: _bindgen_ty_25 = 4;
pub const BALL_FLAG_03: _bindgen_ty_25 = 8;
pub const BALL_FLAG_INVISIBLE: _bindgen_ty_25 = 16;
pub const BALL_FLAG_05: _bindgen_ty_25 = 32;
pub const BALL_FLAG_06: _bindgen_ty_25 = 64;
pub const BALL_FLAG_07: _bindgen_ty_25 = 128;
pub const BALL_FLAG_08: _bindgen_ty_25 = 256;
pub const BALL_FLAG_REVERSE_GRAVITY: _bindgen_ty_25 = 512;
pub const BALL_FLAG_IGNORE_GRAVITY: _bindgen_ty_25 = 1024;
pub const BALL_FLAG_11: _bindgen_ty_25 = 2048;
pub const BALL_FLAG_GOAL: _bindgen_ty_25 = 4096;
pub const BALL_FLAG_13: _bindgen_ty_25 = 8192;
pub const BALL_FLAG_14: _bindgen_ty_25 = 16384;
pub const BALL_FLAG_TIMEOVER: _bindgen_ty_25 = 32768;
pub const BALL_FLAG_16: _bindgen_ty_25 = 65536;
pub const BALL_FLAG_17: _bindgen_ty_25 = 131072;
pub const BALL_FLAG_18: _bindgen_ty_25 = 262144;
pub const BALL_FLAG_19: _bindgen_ty_25 = 524288;
pub const BALL_FLAG_20: _bindgen_ty_25 = 1048576;
pub const BALL_FLAG_21: _bindgen_ty_25 = 2097152;
pub const BALL_FLAG_22: _bindgen_ty_25 = 4194304;
pub const BALL_FLAG_23: _bindgen_ty_25 = 8388608;
pub const BALL_FLAG_24: _bindgen_ty_25 = 16777216;
pub const BALL_FLAG_25: _bindgen_ty_25 = 33554432;
pub const BALL_FLAG_26: _bindgen_ty_25 = 67108864;
pub const BALL_FLAG_27: _bindgen_ty_25 = 134217728;
pub const BALL_FLAG_28: _bindgen_ty_25 = 268435456;
pub const BALL_FLAG_29: _bindgen_ty_25 = 536870912;
pub const BALL_FLAG_30: _bindgen_ty_25 = 1073741824;
pub const BALL_FLAG_31: _bindgen_ty_25 = -2147483648;
pub type _bindgen_ty_25 = ::core::ffi::c_int;
pub const BALL_STATE_0: _bindgen_ty_26 = 0;
pub const BALL_STATE_1: _bindgen_ty_26 = 1;
pub const BALL_STATE_READY_MAIN: _bindgen_ty_26 = 2;
pub const BALL_STATE_3: _bindgen_ty_26 = 3;
pub const BALL_STATE_4: _bindgen_ty_26 = 4;
pub const BALL_STATE_GOAL_INIT: _bindgen_ty_26 = 5;
pub const BALL_STATE_GOAL_MAIN: _bindgen_ty_26 = 6;
pub const BALL_STATE_REPLAY_INIT_1: _bindgen_ty_26 = 7;
pub const BALL_STATE_REPLAY_MAIN_1: _bindgen_ty_26 = 8;
pub const BALL_STATE_REPLAY_INIT_2: _bindgen_ty_26 = 9;
pub const BALL_STATE_REPLAY_MAIN_2: _bindgen_ty_26 = 10;
pub const BALL_STATE_11: _bindgen_ty_26 = 11;
pub const BALL_STATE_12: _bindgen_ty_26 = 12;
pub const BALL_STATE_13: _bindgen_ty_26 = 13;
pub const BALL_STATE_14: _bindgen_ty_26 = 14;
pub const BALL_STATE_15: _bindgen_ty_26 = 15;
pub const BALL_STATE_16: _bindgen_ty_26 = 16;
pub const BALL_STATE_17: _bindgen_ty_26 = 17;
pub const BALL_STATE_18: _bindgen_ty_26 = 18;
pub const BALL_STATE_19: _bindgen_ty_26 = 19;
pub const BALL_STATE_20: _bindgen_ty_26 = 20;
pub const BALL_STATE_DEMO_INIT: _bindgen_ty_26 = 21;
pub const BALL_STATE_22: _bindgen_ty_26 = 22;
pub const BALL_STATE_23: _bindgen_ty_26 = 23;
pub const BALL_STATE_24: _bindgen_ty_26 = 24;
pub const BALL_STATE_25: _bindgen_ty_26 = 25;
pub const BALL_STATE_26: _bindgen_ty_26 = 26;
pub const BALL_STATE_27: _bindgen_ty_26 = 27;
pub const BALL_STATE_28: _bindgen_ty_26 = 28;
pub type _bindgen_ty_26 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ball_child {
    pub filler0: [u8_; 20usize],
    pub unk14: u32_,
    pub filler18: [u8_; 438usize],
    pub unk1CE: s16,
}
impl Default for Ball_child {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ball {
    pub unk0: u8_,
    pub unk1: s8,
    pub lives: s8,
    pub state: s8,
    pub pos: Vec,
    pub prevPos: Vec,
    pub vel: Vec,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub playerId: s8,
    pub rank: s8,
    pub unk30: Mtx,
    pub unk60: s16,
    pub unk62: s16,
    pub unk64: s16,
    pub oldModelId: s16,
    pub currRadius: f32,
    pub accel: f32,
    pub restitution: f32,
    pub modelScale: f32,
    pub bananas: s32,
    pub score: s32,
    pub unk80: s32,
    pub unk84: Vec,
    pub unk90: s16,
    pub unk92: s16,
    pub flags: u32_,
    pub unk98: Quaternion,
    pub unkA8: Quaternion,
    pub unkB8: Vec,
    pub unkC4: f32,
    pub unkC8: Mtx,
    pub speed: f32,
    pub ape: *mut Ape,
    pub unk100: u32_,
    pub lookPoint: Vec,
    pub lookPointPrio: f32,
    pub unk114: Vec,
    pub unk120: u32_,
    pub unk124: s16,
    pub winStreak: s16,
    pub unk128: s16,
    pub unk12A: s16,
    pub filler12C: [u8_; 4usize],
    pub unk130: f32,
    pub unk134: u32_,
    pub bananaBonus: s32,
    pub unk13C: s32,
    pub targetRadius: f32,
    pub unk144: *mut Ball_child,
    pub unk148: u8_,
    pub filler14A: [u8_; 1usize],
    pub colorId: u8_,
    pub unk14B: u8_,
    pub filler14C: [u8_; 2usize],
    pub unk14E: s16,
    pub unk150: Vec,
    pub u_opacity: [f32; 4usize],
    pub filler16C: [u8_; 56usize],
}
impl Default for Ball {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BitmapGroupID_BMP_COM: BitmapGroupID = 0;
pub const BitmapGroupID_BMP_ADV: BitmapGroupID = 1;
pub const BitmapGroupID_BMP_END: BitmapGroupID = 2;
pub const BitmapGroupID_BMP_RNK: BitmapGroupID = 3;
pub const BitmapGroupID_BMP_SEL: BitmapGroupID = 4;
pub const BitmapGroupID_BMP_NML: BitmapGroupID = 5;
pub const BitmapGroupID_BMP_BWL: BitmapGroupID = 6;
pub const BitmapGroupID_BMP_RAC: BitmapGroupID = 7;
pub const BitmapGroupID_BMP_BIL: BitmapGroupID = 8;
pub const BitmapGroupID_BMP_FGT: BitmapGroupID = 9;
pub const BitmapGroupID_BMP_GLF: BitmapGroupID = 10;
pub const BitmapGroupID_BMP_TGT: BitmapGroupID = 11;
pub const BitmapGroupID_BMP_HOW: BitmapGroupID = 12;
pub const BitmapGroupID_BMP_CMD: BitmapGroupID = 13;
pub const BitmapGroupID_BMP_ALL: BitmapGroupID = 14;
pub type BitmapGroupID = ::core::ffi::c_uint;
pub const BMP_COM_ASCII: _bindgen_ty_27 = 0;
pub const BMP_COM_arrow: _bindgen_ty_27 = 1;
pub const BMP_COM_icon_button: _bindgen_ty_27 = 2;
pub const BMP_COM_icon_gol_00: _bindgen_ty_27 = 3;
pub const BMP_COM_icon_gol_afraid01: _bindgen_ty_27 = 4;
pub const BMP_COM_DUMMY05: _bindgen_ty_27 = 5;
pub const BMP_COM_asc_ball8x16_02: _bindgen_ty_27 = 6;
pub const BMP_COM_icon_gol_afraid02: _bindgen_ty_27 = 7;
pub const BMP_COM_icon_gol_afraid03: _bindgen_ty_27 = 8;
pub const BMP_COM_icon_gol_afraid04: _bindgen_ty_27 = 9;
pub const BMP_COM_icon_gol_afraid05: _bindgen_ty_27 = 10;
pub const BMP_COM_icon_gol_angry01: _bindgen_ty_27 = 11;
pub const BMP_COM_banana_01: _bindgen_ty_27 = 12;
pub const BMP_COM_copyright_02: _bindgen_ty_27 = 13;
pub const BMP_COM_icon_gol_angry02: _bindgen_ty_27 = 14;
pub const BMP_COM_icon_ape_00: _bindgen_ty_27 = 15;
pub const BMP_COM_icon_ape_afraid01: _bindgen_ty_27 = 16;
pub const BMP_COM_icon_ape_afraid02: _bindgen_ty_27 = 17;
pub const BMP_COM_icon_ape_afraid03: _bindgen_ty_27 = 18;
pub const BMP_COM_icon_ape_afraid04: _bindgen_ty_27 = 19;
pub const BMP_COM_icon_ape_afraid05: _bindgen_ty_27 = 20;
pub const BMP_COM_icon_ape_angry01: _bindgen_ty_27 = 21;
pub const BMP_COM_icon_ape_angry02: _bindgen_ty_27 = 22;
pub const BMP_COM_icon_ape_angry03: _bindgen_ty_27 = 23;
pub const BMP_COM_icon_ape_blink01: _bindgen_ty_27 = 24;
pub const BMP_COM_icon_ape_blink02: _bindgen_ty_27 = 25;
pub const BMP_COM_icon_ape_booing01: _bindgen_ty_27 = 26;
pub const BMP_COM_icon_ape_booing02: _bindgen_ty_27 = 27;
pub const BMP_COM_icon_ape_booing03: _bindgen_ty_27 = 28;
pub const BMP_COM_icon_ape_booing04: _bindgen_ty_27 = 29;
pub const BMP_COM_icon_ape_wakka: _bindgen_ty_27 = 30;
pub const BMP_COM_asc12x12: _bindgen_ty_27 = 31;
pub const BMP_COM_icon_gal_00: _bindgen_ty_27 = 32;
pub const BMP_COM_icon_gal_afraid01: _bindgen_ty_27 = 33;
pub const BMP_COM_icon_gal_afraid02: _bindgen_ty_27 = 34;
pub const BMP_COM_icon_gal_afraid03: _bindgen_ty_27 = 35;
pub const BMP_COM_icon_gal_afraid04: _bindgen_ty_27 = 36;
pub const BMP_COM_icon_gal_angry01: _bindgen_ty_27 = 37;
pub const BMP_COM_icon_gal_angry02: _bindgen_ty_27 = 38;
pub const BMP_COM_icon_gal_angry03: _bindgen_ty_27 = 39;
pub const BMP_COM_icon_gal_blink01: _bindgen_ty_27 = 40;
pub const BMP_COM_icon_gal_blink02: _bindgen_ty_27 = 41;
pub const BMP_COM_icon_gal_booing01: _bindgen_ty_27 = 42;
pub const BMP_COM_icon_gal_booing02: _bindgen_ty_27 = 43;
pub const BMP_COM_icon_gal_booing03: _bindgen_ty_27 = 44;
pub const BMP_COM_icon_gal_booing04: _bindgen_ty_27 = 45;
pub const BMP_COM_icon_gal_smile01: _bindgen_ty_27 = 46;
pub const BMP_COM_icon_gal_smile02: _bindgen_ty_27 = 47;
pub const BMP_COM_icon_gal_smile03: _bindgen_ty_27 = 48;
pub const BMP_COM_icon_gal_smile04: _bindgen_ty_27 = 49;
pub const BMP_COM_icon_gal_wakka: _bindgen_ty_27 = 50;
pub const BMP_COM_icon_kid_00: _bindgen_ty_27 = 51;
pub const BMP_COM_icon_kid_afraid01: _bindgen_ty_27 = 52;
pub const BMP_COM_icon_kid_afraid02: _bindgen_ty_27 = 53;
pub const BMP_COM_icon_kid_afraid03: _bindgen_ty_27 = 54;
pub const BMP_COM_icon_kid_angry01: _bindgen_ty_27 = 55;
pub const BMP_COM_icon_kid_angry02: _bindgen_ty_27 = 56;
pub const BMP_COM_icon_kid_angry03: _bindgen_ty_27 = 57;
pub const BMP_COM_icon_kid_blink01: _bindgen_ty_27 = 58;
pub const BMP_COM_icon_kid_blink02: _bindgen_ty_27 = 59;
pub const BMP_COM_icon_kid_booing01: _bindgen_ty_27 = 60;
pub const BMP_COM_icon_kid_booing02: _bindgen_ty_27 = 61;
pub const BMP_COM_icon_kid_booing03: _bindgen_ty_27 = 62;
pub const BMP_COM_icon_kid_booing04: _bindgen_ty_27 = 63;
pub const BMP_COM_icon_kid_smile01: _bindgen_ty_27 = 64;
pub const BMP_COM_icon_kid_smile02: _bindgen_ty_27 = 65;
pub const BMP_COM_icon_kid_wakka: _bindgen_ty_27 = 66;
pub const BMP_COM_icon_kmh_01: _bindgen_ty_27 = 67;
pub const BMP_COM_menu_kiwaku: _bindgen_ty_27 = 68;
pub const BMP_COM_icon_smile01: _bindgen_ty_27 = 69;
pub const BMP_COM_icon_smile02: _bindgen_ty_27 = 70;
pub const BMP_COM_icon_smile03: _bindgen_ty_27 = 71;
pub const BMP_COM_icon_smile04: _bindgen_ty_27 = 72;
pub const BMP_COM_mes_sake24x24: _bindgen_ty_27 = 73;
pub const BMP_COM_mes_waku24x24: _bindgen_ty_27 = 74;
pub const BMP_COM_white_mask8x8: _bindgen_ty_27 = 75;
pub const BMP_COM_frame: _bindgen_ty_27 = 76;
pub const BMP_COM_icon_gol_angry03: _bindgen_ty_27 = 77;
pub const BMP_COM_icon_gol_blink01: _bindgen_ty_27 = 78;
pub const BMP_COM_icon_gol_blink02: _bindgen_ty_27 = 79;
pub const BMP_COM_asc_tama72x64_new: _bindgen_ty_27 = 80;
pub const BMP_COM_icon_gol_booing01: _bindgen_ty_27 = 81;
pub const BMP_COM_str_sega: _bindgen_ty_27 = 82;
pub const BMP_COM_icon_gol_booing02: _bindgen_ty_27 = 83;
pub const BMP_COM_icon_gol_booing03: _bindgen_ty_27 = 84;
pub const BMP_COM_banana_10: _bindgen_ty_27 = 85;
pub const BMP_COM_icon_gol_booing04: _bindgen_ty_27 = 86;
pub const BMP_COM_icon_gol_smile01: _bindgen_ty_27 = 87;
pub const BMP_COM_game_icon_mph: _bindgen_ty_27 = 88;
pub const BMP_COM_menu_kiwaku_l: _bindgen_ty_27 = 89;
pub const BMP_COM_asc_jap24x24_new: _bindgen_ty_27 = 90;
pub const BMP_COM_icon_gol_smile02: _bindgen_ty_27 = 91;
pub const BMP_COM_icon_gol_smile03: _bindgen_ty_27 = 92;
pub const BMP_COM_icon_gol_smile04: _bindgen_ty_27 = 93;
pub const BMP_COM_icon_gol_wakka: _bindgen_ty_27 = 94;
pub const BMP_COM_menu_kiwaku_l2: _bindgen_ty_27 = 95;
pub type _bindgen_ty_27 = ::core::ffi::c_uint;
pub const BMP_ADV_logo_av256: _bindgen_ty_28 = 256;
pub const BMP_ADV_adv_logo_plus: _bindgen_ty_28 = 257;
pub const BMP_ADV_logo_sega512: _bindgen_ty_28 = 258;
pub const BMP_ADV_adv_title_bg: _bindgen_ty_28 = 259;
pub const BMP_ADV_adv_title_mnk_gawa: _bindgen_ty_28 = 260;
pub const BMP_ADV_adv_fukidashi_h: _bindgen_ty_28 = 261;
pub const BMP_ADV_adv_fukidashi_h_mini: _bindgen_ty_28 = 262;
pub const BMP_ADV_logo_plus256x40: _bindgen_ty_28 = 263;
pub const BMP_ADV_adv_title_spr_gawa: _bindgen_ty_28 = 264;
pub const BMP_ADV_adv_title_mnk_a: _bindgen_ty_28 = 265;
pub const BMP_ADV_adv_title_mnk_l: _bindgen_ty_28 = 266;
pub const BMP_ADV_adv_title_mnk_b: _bindgen_ty_28 = 267;
pub const BMP_ADV_adv_title_mnk_m: _bindgen_ty_28 = 268;
pub const BMP_ADV_adv_title_mnk_o: _bindgen_ty_28 = 269;
pub const BMP_ADV_adv_title_mnk_n: _bindgen_ty_28 = 270;
pub const BMP_ADV_adv_title_mnk_k: _bindgen_ty_28 = 271;
pub const BMP_ADV_adv_title_mnk_e: _bindgen_ty_28 = 272;
pub const BMP_ADV_adv_title_mnk_y: _bindgen_ty_28 = 273;
pub const BMP_ADV_adv_title_mnk_kage: _bindgen_ty_28 = 274;
pub const BMP_ADV_adv_title_spr_s: _bindgen_ty_28 = 275;
pub const BMP_ADV_adv_title_spr_u: _bindgen_ty_28 = 276;
pub const BMP_ADV_adv_title_spr_p: _bindgen_ty_28 = 277;
pub const BMP_ADV_adv_title_spr_e: _bindgen_ty_28 = 278;
pub const BMP_ADV_adv_title_spr_r: _bindgen_ty_28 = 279;
pub const BMP_ADV_adv_title_spr_kage: _bindgen_ty_28 = 280;
pub const BMP_ADV_adv_title_tm: _bindgen_ty_28 = 281;
pub type _bindgen_ty_28 = ::core::ffi::c_uint;
pub const BMP_RNK_asc_ball26x31: _bindgen_ty_29 = 768;
pub const BMP_RNK_asc_ball30x31: _bindgen_ty_29 = 769;
pub const BMP_RNK_rnk_ball_a: _bindgen_ty_29 = 770;
pub const BMP_RNK_rnk_ball_g: _bindgen_ty_29 = 771;
pub const BMP_RNK_rnk_ball_i: _bindgen_ty_29 = 772;
pub const BMP_RNK_rnk_ball_k: _bindgen_ty_29 = 773;
pub const BMP_RNK_rnk_ball_n: _bindgen_ty_29 = 774;
pub const BMP_RNK_rnk_ball_r: _bindgen_ty_29 = 775;
pub const BMP_RNK_rnk_catgword: _bindgen_ty_29 = 776;
pub const BMP_RNK_rnk_ex2_icon: _bindgen_ty_29 = 777;
pub const BMP_RNK_rnk_ex_icon: _bindgen_ty_29 = 778;
pub const BMP_RNK_rnk_lines: _bindgen_ty_29 = 779;
pub const BMP_RNK_rnk_monkeyball_logo: _bindgen_ty_29 = 780;
pub const BMP_RNK_rnk_obibar_blue: _bindgen_ty_29 = 781;
pub const BMP_RNK_rnk_obibar_grn: _bindgen_ty_29 = 782;
pub const BMP_RNK_rnk_obibar_red: _bindgen_ty_29 = 783;
pub const BMP_RNK_rnk_obibar_yer: _bindgen_ty_29 = 784;
pub const BMP_RNK_rnk_obiword: _bindgen_ty_29 = 785;
pub const BMP_RNK_rnk_rank: _bindgen_ty_29 = 786;
pub const BMP_RNK_rnk_mini_asc32x32: _bindgen_ty_29 = 787;
pub const BMP_RNK_rnk_mini_bar_bg: _bindgen_ty_29 = 788;
pub const BMP_RNK_rnk_mini_bg: _bindgen_ty_29 = 789;
pub const BMP_RNK_rnk_mini_cursor: _bindgen_ty_29 = 790;
pub const BMP_RNK_rnk_mini_icon_best: _bindgen_ty_29 = 791;
pub const BMP_RNK_rnk_mini_icon_star: _bindgen_ty_29 = 792;
pub const BMP_RNK_rnk_mini_kiwaku: _bindgen_ty_29 = 793;
pub const BMP_RNK_rnk_mini_kiwaku_l: _bindgen_ty_29 = 794;
pub const BMP_RNK_rnk_mini_line: _bindgen_ty_29 = 795;
pub const BMP_RNK_rnk_mini_mark_r: _bindgen_ty_29 = 796;
pub const BMP_RNK_rnk_mini_mark_t: _bindgen_ty_29 = 797;
pub const BMP_RNK_rnk_mini_num: _bindgen_ty_29 = 798;
pub const BMP_RNK_rnk_mini_ptn: _bindgen_ty_29 = 799;
pub const BMP_RNK_rnk_mini_pts: _bindgen_ty_29 = 800;
pub const BMP_RNK_rnk_mini_puramai: _bindgen_ty_29 = 801;
pub const BMP_RNK_rnk_mini_rank: _bindgen_ty_29 = 802;
pub const BMP_RNK_rnk_mini_score_num: _bindgen_ty_29 = 803;
pub const BMP_RNK_rnk_mini_sort: _bindgen_ty_29 = 804;
pub const BMP_RNK_rnk_mini_player: _bindgen_ty_29 = 805;
pub const BMP_RNK_rnk_mini_bar_w: _bindgen_ty_29 = 806;
pub const BMP_RNK_rnk_mini_mark_tgt1: _bindgen_ty_29 = 807;
pub const BMP_RNK_rnk_mini_mark_tgt2: _bindgen_ty_29 = 808;
pub type _bindgen_ty_29 = ::core::ffi::c_uint;
pub const BMP_SEL_sel_kiwaku_be_eex: _bindgen_ty_30 = 1024;
pub const BMP_SEL_sel_kiwaku_be_jex: _bindgen_ty_30 = 1025;
pub const BMP_SEL_sel_kiwaku_ad_eex: _bindgen_ty_30 = 1026;
pub const BMP_SEL_sel_kiwaku_ad_jex: _bindgen_ty_30 = 1027;
pub const BMP_SEL_sel_bg_sel: _bindgen_ty_30 = 1028;
pub const BMP_SEL_sel_flower4: _bindgen_ty_30 = 1029;
pub const BMP_SEL_sel_kiwaku_rac: _bindgen_ty_30 = 1030;
pub const BMP_SEL_sel_kiwaku_button: _bindgen_ty_30 = 1031;
pub const BMP_SEL_sel_kiwaku_sel: _bindgen_ty_30 = 1032;
pub const BMP_SEL_sel_kiwaku_fight: _bindgen_ty_30 = 1033;
pub const BMP_SEL_sel_chara_bar: _bindgen_ty_30 = 1034;
pub const BMP_SEL_sel_shine: _bindgen_ty_30 = 1035;
pub const BMP_SEL_sel_kiwaku_l: _bindgen_ty_30 = 1036;
pub const BMP_SEL_sel_kiwaku_s: _bindgen_ty_30 = 1037;
pub const BMP_SEL_sel_plate: _bindgen_ty_30 = 1038;
pub const BMP_SEL_sel_player: _bindgen_ty_30 = 1039;
pub const BMP_SEL_sel_player_x: _bindgen_ty_30 = 1040;
pub const BMP_SEL_sel_playmode: _bindgen_ty_30 = 1041;
pub const BMP_SEL_sel_chara: _bindgen_ty_30 = 1042;
pub const BMP_SEL_sel_flower1: _bindgen_ty_30 = 1043;
pub const BMP_SEL_sel_flower2: _bindgen_ty_30 = 1044;
pub const BMP_SEL_sel_flower3: _bindgen_ty_30 = 1045;
pub const BMP_SEL_sel_kiwaku_s2: _bindgen_ty_30 = 1046;
pub const BMP_SEL_sel_kiwaku_l2: _bindgen_ty_30 = 1047;
pub const BMP_SEL_sel_kiwaku_be: _bindgen_ty_30 = 1048;
pub const BMP_SEL_sel_kiwaku_ma: _bindgen_ty_30 = 1049;
pub const BMP_SEL_asc_sel12x24_num: _bindgen_ty_30 = 1050;
pub const BMP_SEL_sel_kiwaku_be_e: _bindgen_ty_30 = 1051;
pub const BMP_SEL_sel_kiwaku_be_j: _bindgen_ty_30 = 1052;
pub const BMP_SEL_sel_kiwaku_ad_e: _bindgen_ty_30 = 1053;
pub const BMP_SEL_sel_kiwaku_ad_j: _bindgen_ty_30 = 1054;
pub const BMP_SEL_sel_kiwaku_ex_e: _bindgen_ty_30 = 1055;
pub const BMP_SEL_sel_kiwaku_ex_j: _bindgen_ty_30 = 1056;
pub const BMP_SEL_sel_kiwaku_ma_e: _bindgen_ty_30 = 1057;
pub const BMP_SEL_sel_kiwaku_ma_j: _bindgen_ty_30 = 1058;
pub const BMP_SEL_sel_kiwaku_ad: _bindgen_ty_30 = 1059;
pub const BMP_SEL_sel_kiwaku_ex: _bindgen_ty_30 = 1060;
pub const BMP_SEL_sel_kiwaku_ex_eex: _bindgen_ty_30 = 1061;
pub const BMP_SEL_sel_kiwaku_ex_jex: _bindgen_ty_30 = 1062;
pub const BMP_SEL_sel_kiwaku_noise_l: _bindgen_ty_30 = 1063;
pub const BMP_SEL_sel_kiwaku_noise_s: _bindgen_ty_30 = 1064;
pub const BMP_SEL_sel_kiwaku_stage_l: _bindgen_ty_30 = 1065;
pub const BMP_SEL_sel_kiwaku_stage_s: _bindgen_ty_30 = 1066;
pub const BMP_SEL_sel_normal_level_ad_e: _bindgen_ty_30 = 1067;
pub const BMP_SEL_sel_normal_level_be_e: _bindgen_ty_30 = 1068;
pub const BMP_SEL_sel_normal_level_ex_e: _bindgen_ty_30 = 1069;
pub const BMP_SEL_sel_stg_comp_num: _bindgen_ty_30 = 1070;
pub const BMP_SEL_sel_stg_comp_num_ex: _bindgen_ty_30 = 1071;
pub const BMP_SEL_sel_stg_comp_icon: _bindgen_ty_30 = 1072;
pub const BMP_SEL_sel_kiwaku_noise_l2: _bindgen_ty_30 = 1073;
pub const BMP_SEL_sel_stg_comp_sel: _bindgen_ty_30 = 1074;
pub const BMP_SEL_sel_kiwaku_option: _bindgen_ty_30 = 1075;
pub const BMP_SEL_sel_kiwaku_rac_ad_e: _bindgen_ty_30 = 1076;
pub const BMP_SEL_sel_kiwaku_rac_ad_j: _bindgen_ty_30 = 1077;
pub const BMP_SEL_sel_kiwaku_rac_be_e: _bindgen_ty_30 = 1078;
pub const BMP_SEL_sel_kiwaku_rac_be_j: _bindgen_ty_30 = 1079;
pub const BMP_SEL_sel_kiwaku_rac_ex_e: _bindgen_ty_30 = 1080;
pub const BMP_SEL_sel_kiwaku_rac_ex_j: _bindgen_ty_30 = 1081;
pub const BMP_SEL_sel_playmode_golf: _bindgen_ty_30 = 1082;
pub type _bindgen_ty_30 = ::core::ffi::c_uint;
pub const BMP_NML_icon_bombtimer: _bindgen_ty_31 = 1280;
pub const BMP_NML_icon_lv1234_j: _bindgen_ty_31 = 1281;
pub const BMP_NML_game_rank: _bindgen_ty_31 = 1282;
pub const BMP_NML_game_result_e3: _bindgen_ty_31 = 1283;
pub const BMP_NML_game_goal: _bindgen_ty_31 = 1284;
pub const BMP_NML_asc_ball22x22: _bindgen_ty_31 = 1285;
pub const BMP_NML_asc_komo16x16: _bindgen_ty_31 = 1286;
pub const BMP_NML_asc_tama32x32: _bindgen_ty_31 = 1287;
pub const BMP_NML_asc_ball18x16: _bindgen_ty_31 = 1288;
pub const BMP_NML_asc_ball20x20: _bindgen_ty_31 = 1289;
pub const BMP_NML_fukidashi: _bindgen_ty_31 = 1290;
pub const BMP_NML_game_player: _bindgen_ty_31 = 1291;
pub const BMP_NML_asc_ball26x38: _bindgen_ty_31 = 1292;
pub const BMP_NML_asc_ball16x22: _bindgen_ty_31 = 1293;
pub const BMP_NML_DUMMY14: _bindgen_ty_31 = 1294;
pub const BMP_NML_DUMMY15: _bindgen_ty_31 = 1295;
pub const BMP_NML_icon_bomb_hibi: _bindgen_ty_31 = 1296;
pub const BMP_NML_icon_bomb_part_a: _bindgen_ty_31 = 1297;
pub const BMP_NML_icon_bomb_part_b: _bindgen_ty_31 = 1298;
pub const BMP_NML_icon_bomb_part_c: _bindgen_ty_31 = 1299;
pub const BMP_NML_icon_bomb_part_d: _bindgen_ty_31 = 1300;
pub const BMP_NML_icon_bomb_part_e: _bindgen_ty_31 = 1301;
pub const BMP_NML_icon_bomb_part_f: _bindgen_ty_31 = 1302;
pub const BMP_NML_icon_bomb_part_g: _bindgen_ty_31 = 1303;
pub const BMP_NML_icon_bomb_part_h: _bindgen_ty_31 = 1304;
pub const BMP_NML_icon_bomb_part_i: _bindgen_ty_31 = 1305;
pub const BMP_NML_icon_bomb_part_j: _bindgen_ty_31 = 1306;
pub type _bindgen_ty_31 = ::core::ffi::c_uint;
pub const BMP_HOW_how_kiwaku: _bindgen_ty_32 = 3072;
pub const BMP_HOW_how_bar: _bindgen_ty_32 = 3073;
pub const BMP_HOW_how_bar_circle: _bindgen_ty_32 = 3074;
pub const BMP_HOW_how_item_fgt_big: _bindgen_ty_32 = 3075;
pub const BMP_HOW_how_item_fgt_box: _bindgen_ty_32 = 3076;
pub const BMP_HOW_how_item_fgt_lng: _bindgen_ty_32 = 3077;
pub const BMP_HOW_how_item_fgt_vor: _bindgen_ty_32 = 3078;
pub const BMP_HOW_how_item_rac_bnn: _bindgen_ty_32 = 3079;
pub const BMP_HOW_how_item_rac_bom: _bindgen_ty_32 = 3080;
pub const BMP_HOW_how_item_rac_box: _bindgen_ty_32 = 3081;
pub const BMP_HOW_how_item_rac_ice: _bindgen_ty_32 = 3082;
pub const BMP_HOW_how_item_rac_pol: _bindgen_ty_32 = 3083;
pub const BMP_HOW_how_item_rac_spd: _bindgen_ty_32 = 3084;
pub const BMP_HOW_how_item_tgt_bom: _bindgen_ty_32 = 3085;
pub const BMP_HOW_how_item_tgt_bomb: _bindgen_ty_32 = 3086;
pub const BMP_HOW_how_item_tgt_double: _bindgen_ty_32 = 3087;
pub const BMP_HOW_how_item_tgt_heavy: _bindgen_ty_32 = 3088;
pub const BMP_HOW_how_item_tgt_kum: _bindgen_ty_32 = 3089;
pub const BMP_HOW_how_item_tgt_kumo: _bindgen_ty_32 = 3090;
pub const BMP_HOW_how_item_tgt_saf: _bindgen_ty_32 = 3091;
pub const BMP_HOW_how_item_tgt_stop: _bindgen_ty_32 = 3092;
pub const BMP_HOW_how_item_tgt_tog: _bindgen_ty_32 = 3093;
pub const BMP_HOW_how_item_tgt_toge: _bindgen_ty_32 = 3094;
pub const BMP_HOW_how_item_tgt_triple: _bindgen_ty_32 = 3095;
pub const BMP_HOW_how_item_tgt_wind: _bindgen_ty_32 = 3096;
pub const BMP_HOW_how_waku2_g: _bindgen_ty_32 = 3097;
pub const BMP_HOW_how_waku2_r: _bindgen_ty_32 = 3098;
pub const BMP_HOW_how_waku3_g: _bindgen_ty_32 = 3099;
pub const BMP_HOW_how_waku3_m: _bindgen_ty_32 = 3100;
pub const BMP_HOW_how_waku3_o: _bindgen_ty_32 = 3101;
pub const BMP_HOW_how_waku3_r: _bindgen_ty_32 = 3102;
pub const BMP_HOW_how_waku4_b: _bindgen_ty_32 = 3103;
pub const BMP_HOW_how_waku4_g: _bindgen_ty_32 = 3104;
pub const BMP_HOW_how_waku5_b: _bindgen_ty_32 = 3105;
pub const BMP_HOW_how_waku_b: _bindgen_ty_32 = 3106;
pub const BMP_HOW_how_waku_g: _bindgen_ty_32 = 3107;
pub const BMP_HOW_how_waku_m: _bindgen_ty_32 = 3108;
pub const BMP_HOW_how_waku_o: _bindgen_ty_32 = 3109;
pub const BMP_HOW_how_waku_r: _bindgen_ty_32 = 3110;
pub const BMP_HOW_how_arrow: _bindgen_ty_32 = 3111;
pub const BMP_HOW_how_cont: _bindgen_ty_32 = 3112;
pub const BMP_HOW_how_waku3_b: _bindgen_ty_32 = 3113;
pub const BMP_HOW_how_cont_arrow: _bindgen_ty_32 = 3114;
pub const BMP_HOW_how_cont_bar: _bindgen_ty_32 = 3115;
pub type _bindgen_ty_32 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Bitmap {
    pub x: f32,
    pub y: f32,
    pub unk8: f32,
    pub unkC: f32,
    pub imageId: s16,
    pub rotation: s16,
    pub unk14: u8_,
    pub r: u8_,
    pub g: u8_,
    pub b: u8_,
    pub a: u8_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitmapGroup {
    pub isLoaded: ::core::ffi::c_int,
    pub filename: *mut ::core::ffi::c_char,
    pub name: *mut ::core::ffi::c_char,
    pub unkC: u32_,
    pub tpl: *mut TPL,
    pub heap: OSHeapHandle,
}
impl Default for BitmapGroup {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asdf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct8027CE24 {
    pub unk0: s16,
    pub unk2: s16,
    pub unk4: u32_,
}
pub const ET_PAPERFRAG: _bindgen_ty_33 = 0;
pub const ET_GET_BANANA: _bindgen_ty_33 = 1;
pub const ET_COLI_PARTICLE: _bindgen_ty_33 = 2;
pub const ET_BIRD_KITE: _bindgen_ty_33 = 3;
pub const ET_ROTATE_BG: _bindgen_ty_33 = 4;
pub const ET_ICEWATER_REFLECT: _bindgen_ty_33 = 5;
pub const ET_ICEWATER_PARTICLE: _bindgen_ty_33 = 6;
pub const ET_RAINDROP: _bindgen_ty_33 = 7;
pub const ET_HOLDING_BANANA: _bindgen_ty_33 = 8;
pub const ET_BUBBLE: _bindgen_ty_33 = 9;
pub const ET_LEVITATE: _bindgen_ty_33 = 10;
pub const ET_TWINKLE_STAR: _bindgen_ty_33 = 11;
pub const ET_BONUS_STG_STAR: _bindgen_ty_33 = 12;
pub const ET_BONUS_STG_STAR_TAIL: _bindgen_ty_33 = 13;
pub const ET_WATER_LIGHT: _bindgen_ty_33 = 14;
pub const ET_RAINDROP_RIPPLE: _bindgen_ty_33 = 15;
pub const ET_BALL_GLOW: _bindgen_ty_33 = 16;
pub const ET_EXM_GUIDE_LIGHT: _bindgen_ty_33 = 17;
pub const ET_EXM_GUIDE_LIGHT_TAIL: _bindgen_ty_33 = 18;
pub const ET_COLISTAR_PARTICLE: _bindgen_ty_33 = 19;
pub const ET_BGWAT_BUBBLE_BASE: _bindgen_ty_33 = 20;
pub const ET_BGWAT_BUBBLE: _bindgen_ty_33 = 21;
pub const ET_METEO: _bindgen_ty_33 = 22;
pub const ET_METEO_FIX: _bindgen_ty_33 = 23;
pub const ET_FIGHT_REVIVAL: _bindgen_ty_33 = 24;
pub const ET_FIGHT_PANNEL: _bindgen_ty_33 = 25;
pub const ET_FIGHT_GET_BANANA: _bindgen_ty_33 = 26;
pub const ET_COLIFLASH: _bindgen_ty_33 = 27;
pub const ET_FIGHT_BOX_FRAG: _bindgen_ty_33 = 28;
pub const ET_FIGHT_HOLDING_PITEM: _bindgen_ty_33 = 29;
pub const ET_FIGHT_BALL_EFC: _bindgen_ty_33 = 30;
pub const ET_FIGHT_REVIVAL_PTC: _bindgen_ty_33 = 31;
pub const ET_BNS_STG_STAR: _bindgen_ty_33 = 32;
pub const ET_BNS_STG_STAR_TAIL: _bindgen_ty_33 = 33;
pub const ET_BGMST_GEN_CLOUD: _bindgen_ty_33 = 34;
pub const ET_BGSTM_RAINRIPPLE: _bindgen_ty_33 = 35;
pub const ET_NAMEENT_CODE: _bindgen_ty_33 = 36;
pub const ET_GET_NAMEENT_CODE: _bindgen_ty_33 = 37;
pub const ET_MR_BOMB: _bindgen_ty_33 = 38;
pub const ET_PILOT_BOMB: _bindgen_ty_33 = 39;
pub const ET_BGMST_WATER: _bindgen_ty_33 = 40;
pub const ET_MR_BOMB_LIGHT: _bindgen_ty_33 = 41;
pub const ET_FIGHT_COLIFLASH: _bindgen_ty_33 = 42;
pub const ET_FIGHT_COLIFLASH_PTC: _bindgen_ty_33 = 43;
pub const ET_MR_SPEED_STAR_LIGHT: _bindgen_ty_33 = 44;
pub const ET_COMMENDFRAG: _bindgen_ty_33 = 45;
pub const ET_ENDING_BALLFRAG: _bindgen_ty_33 = 46;
pub const ET_BANANA_DROP: _bindgen_ty_33 = 47;
pub const ET_BGEND_WATER: _bindgen_ty_33 = 48;
pub type _bindgen_ty_33 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Effect {
    pub poolIndex: s16,
    pub uid: s16,
    pub flags: u32_,
    pub type_: s16,
    pub state: s16,
    pub timer: s32,
    pub u_otherTimer: s32,
    pub playerId: s16,
    pub cameras: u16_,
    pub unk18: f32,
    pub unk1C: f32,
    pub unk20: f32,
    pub scale: Vec,
    pub model: *mut GMAModel,
    pub pos: Vec,
    pub vel: Vec,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub unk52: s16,
    pub unk54: s16,
    pub unk56: s16,
    pub unk58: Vec,
    pub unk64: Vec,
    pub unk70: Vec,
    pub unk7C: Vec,
    pub unk88: Vec,
    pub unk94: Vec,
    pub unkA0: s16,
    pub unkA2: s16,
    pub unkA4: s16,
    pub colorFactor: f32,
}
impl Default for Effect {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct EffectFuncs {
    pub init: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>,
    pub main: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>,
    pub draw: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>,
    pub destroy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>,
}
pub const INFO_FLAG_GOAL: _bindgen_ty_34 = 1;
pub const INFO_FLAG_TIMEOVER: _bindgen_ty_34 = 2;
pub const INFO_FLAG_FALLOUT: _bindgen_ty_34 = 4;
pub const INFO_FLAG_TIMER_PAUSED: _bindgen_ty_34 = 8;
pub const INFO_FLAG_REPLAY: _bindgen_ty_34 = 16;
pub const INFO_FLAG_05: _bindgen_ty_34 = 32;
pub const INFO_FLAG_BONUS_STAGE: _bindgen_ty_34 = 64;
pub const INFO_FLAG_07: _bindgen_ty_34 = 128;
pub const INFO_FLAG_08: _bindgen_ty_34 = 256;
pub const INFO_FLAG_BONUS_CLEAR: _bindgen_ty_34 = 512;
pub const INFO_FLAG_10: _bindgen_ty_34 = 1024;
pub const INFO_FLAG_11: _bindgen_ty_34 = 2048;
pub const INFO_FLAG_FINAL_FLOOR: _bindgen_ty_34 = 4096;
pub const INFO_FLAG_13: _bindgen_ty_34 = 8192;
pub type _bindgen_ty_34 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801F3A58 {
    pub flags: u32_,
    pub timerCurr: s16,
    pub timerMax: s16,
    pub unk8: u32_,
    pub goalEntered: s16,
    pub unkE: s16,
    pub unk10: Vec,
    pub unk1C: s16,
    pub attempts: s16,
    pub currFloor: s16,
    pub unk22: s16,
    pub bananasLeft: s32,
    pub livesLost: s16,
    pub continuesUsed: s16,
    pub unk2C: s16,
    pub u_currStageId: s16,
    pub playerId: s16,
    pub unk32: s16,
}
pub const ITEM_FLAG_INVISIBLE: _bindgen_ty_35 = 1;
pub const ITEM_FLAG_TANGIBLE: _bindgen_ty_35 = 2;
pub const ITEM_FLAG_3: _bindgen_ty_35 = 8;
pub const ITEM_FLAG_5: _bindgen_ty_35 = 32;
pub type _bindgen_ty_35 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Item {
    pub index: s16,
    pub uid: s16,
    pub type_: s16,
    pub subType: s16,
    pub flags: u32_,
    pub unkC: s16,
    pub state: s16,
    pub unk10: s16,
    pub unk12: s16,
    pub radius: f32,
    pub unk18: f32,
    pub modelLODs: *mut ::core::ffi::c_void,
    pub pos: Point3d,
    pub vel: Vec,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub rotVelX: s16,
    pub rotVelY: s16,
    pub rotVelZ: s16,
    pub prevPos: Vec,
    pub prevRotX: s16,
    pub prevRotY: s16,
    pub prevRotZ: s16,
    pub filler56: [u8_; 2usize],
    pub coliFunc:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut Item, arg2: *mut PhysicsBall)>,
    pub animGroupId: s8,
    pub unk5E: s16,
    pub stageBanana: *mut StageBanana,
    pub unk64: s32,
    pub shadowModel: *mut GMAModel,
    pub unk6C: S16Vec,
    pub unk74: f32,
    pub shadowColor: GXColor,
    pub unk7C: Vec,
    pub unk88: f32,
}
impl Default for Item {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ItemFuncs {
    pub init: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>,
    pub main: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>,
    pub draw: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>,
    pub collect:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut Item, arg2: *mut PhysicsBall)>,
    pub destroy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>,
    pub unk14: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>,
    pub debug: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Light {
    pub valid: s8,
    pub u_id: s8,
    pub u_inst: s16,
    pub type_: s8,
    pub spotFn: s16,
    pub stageId: u8_,
    pub red: f32,
    pub green: f32,
    pub blue: f32,
    pub pos: Point3d,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub dir: Vec,
    pub refDist: f32,
    pub k0: f32,
    pub k1: f32,
    pub k2: f32,
    pub spotCutoff: f32,
}
pub const LIGHT_GROUP_DEFAULT: _bindgen_ty_36 = 0;
pub const LIGHT_GROUP_SINGLE: _bindgen_ty_36 = 1;
pub const LIGHT_GROUP_SINGLE_UNIT: _bindgen_ty_36 = 2;
pub const LIGHT_GROUP_DEF_MINIMAP: _bindgen_ty_36 = 3;
pub const LIGHT_GROUP_DEF_GMAT: _bindgen_ty_36 = 4;
pub const LIGHT_GROUP_DEF_MIR: _bindgen_ty_36 = 5;
pub const LIGHT_GROUP_BG_0: _bindgen_ty_36 = 6;
pub const LIGHT_GROUP_BG_1: _bindgen_ty_36 = 7;
pub const LIGHT_GROUP_BG_2: _bindgen_ty_36 = 8;
pub const LIGHT_GROUP_BG_3: _bindgen_ty_36 = 9;
pub const LIGHT_GROUP_BG_4: _bindgen_ty_36 = 10;
pub const LIGHT_GROUP_BG_5: _bindgen_ty_36 = 11;
pub const LIGHT_GROUP_BG_6: _bindgen_ty_36 = 12;
pub const LIGHT_GROUP_BG_7: _bindgen_ty_36 = 13;
pub const LIGHT_GROUP_BG_8: _bindgen_ty_36 = 14;
pub const LIGHT_GROUP_BG_9: _bindgen_ty_36 = 15;
pub const LIGHT_GROUP_BG_a: _bindgen_ty_36 = 16;
pub const LIGHT_GROUP_BG_b: _bindgen_ty_36 = 17;
pub const LIGHT_GROUP_BG_c: _bindgen_ty_36 = 18;
pub const LIGHT_GROUP_BG_d: _bindgen_ty_36 = 19;
pub const LIGHT_GROUP_BG_e: _bindgen_ty_36 = 20;
pub const LIGHT_GROUP_BG_f: _bindgen_ty_36 = 21;
pub type _bindgen_ty_36 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct LightGroup {
    pub lightPoolIdxs: [s16; 8usize],
    pub filler10: [u8_; 4usize],
    pub lightObjs: [GXLightObj; 8usize],
    pub lightMask: u32_,
    pub ambient: Color3f,
    pub viewFromWorld: Mtx,
    pub filler254: [u8_; 4usize],
}
pub const MC_MODE_LOAD_GAMEDATA_0: _bindgen_ty_37 = 0;
pub const MC_MODE_SAVE_GAMEDATA_1: _bindgen_ty_37 = 1;
pub const MC_MODE_LOAD_GAMEDATA_2: _bindgen_ty_37 = 2;
pub const MC_MODE_SAVE_GAMEDATA_3: _bindgen_ty_37 = 3;
pub const MC_MODE_LOAD_REPLAY: _bindgen_ty_37 = 4;
pub const MC_MODE_SAVE_REPLAY: _bindgen_ty_37 = 5;
pub const MC_MODE_LIST_REPLAY: _bindgen_ty_37 = 6;
pub const MC_MODE_DELETE_REPLAY: _bindgen_ty_37 = 7;
pub type _bindgen_ty_37 = ::core::ffi::c_uint;
pub const MinimapState_MINIMAP_STATE_0: MinimapState = 0;
pub const MinimapState_MINIMAP_STATE_CLOSE: MinimapState = 1;
pub const MinimapState_MINIMAP_STATE_2: MinimapState = 2;
pub const MinimapState_MINIMAP_STATE_OPEN: MinimapState = 3;
pub const MinimapState_MINIMAP_STATE_4: MinimapState = 4;
pub type MinimapState = ::core::ffi::c_uint;
pub const PoolStatus_STAT_NULL: PoolStatus = 0;
pub const PoolStatus_STAT_INIT: PoolStatus = 1;
pub const PoolStatus_STAT_NORMAL: PoolStatus = 2;
pub const PoolStatus_STAT_DEST: PoolStatus = 3;
pub const PoolStatus_STAT_FREEZE: PoolStatus = 4;
pub const PoolStatus_STAT_INIT_FIRST: PoolStatus = 5;
pub const PoolStatus_STAT_GOAL_INIT: PoolStatus = 6;
pub const PoolStatus_STAT_GOAL: PoolStatus = 7;
pub const PoolStatus_STAT_RINGOUT_INIT: PoolStatus = 8;
pub const PoolStatus_STAT_RINGOUT: PoolStatus = 9;
pub const PoolStatus_STAT_MINI_MODE_0_INIT: PoolStatus = 10;
pub const PoolStatus_STAT_MINI_MODE_0: PoolStatus = 11;
pub type PoolStatus = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PoolInfo_sub {
    pub capacity: s32,
    pub nextFree: s32,
    pub count: s32,
    pub statusList: *mut s8,
}
impl Default for PoolInfo_sub {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PoolInfo {
    pub playerPool: PoolInfo_sub,
    pub itemPool: PoolInfo_sub,
    pub stobjPool: PoolInfo_sub,
    pub spritePool: PoolInfo_sub,
    pub effectPool: PoolInfo_sub,
    pub playerBuf: [s8; 4usize],
    pub itemBuf: [s8; 256usize],
    pub stobjBuf: [s8; 128usize],
    pub spriteBuf: [s8; 64usize],
    pub effectBuf: [s8; 512usize],
}
impl Default for PoolInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const REPLAY_FLAG_GOAL: _bindgen_ty_38 = 1;
pub const REPLAY_FLAG_FALLOUT: _bindgen_ty_38 = 2;
pub const REPLAY_FLAG_TIME_OVER: _bindgen_ty_38 = 4;
pub const REPLAY_FLAG_BONUS_STAGE: _bindgen_ty_38 = 8;
pub const REPLAY_FLAG_4: _bindgen_ty_38 = 16;
pub const REPLAY_FLAG_EXTRA: _bindgen_ty_38 = 32;
pub const REPLAY_FLAG_MASTER: _bindgen_ty_38 = 64;
pub const REPLAY_FLAG_BONUS_CLEAR: _bindgen_ty_38 = 128;
pub const REPLAY_FLAG_15: _bindgen_ty_38 = 32768;
pub type _bindgen_ty_38 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ReplayHeader {
    pub flags: u16_,
    pub stageId: u8_,
    pub difficulty: u8_,
    pub floorNum: u8_,
    pub character: u8_,
    pub playerName: [::core::ffi::c_char; 4usize],
    pub grade: f32,
    pub unk10: s32,
    pub filler14: [u8_; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ReplayBallFrame {
    pub pos: Vec,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub unk12: s16,
    pub unk14: s16,
    pub unk16: s16,
    pub unk18: u32_,
    pub unk1C: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ReplayWorldFrame {
    pub rotX: s16,
    pub rotZ: s16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ReplayInfo {
    pub u_replayIndexes: [s32; 4usize],
    pub u_timeOffset: f32,
    pub u_playerId: s32,
}
pub const REND_EFC_NULL: _bindgen_ty_39 = 0;
pub const REND_EFC_BLUR: _bindgen_ty_39 = 1;
pub const REND_EFC_MOTION_BLUR: _bindgen_ty_39 = 2;
pub const REND_EFC_FOCUS: _bindgen_ty_39 = 3;
pub const REND_EFC_KALEIDOSCOPE: _bindgen_ty_39 = 4;
pub const REND_EFC_FLAT_MIRROR: _bindgen_ty_39 = 5;
pub const REND_EFC_WAVY_MIRROR: _bindgen_ty_39 = 6;
pub type _bindgen_ty_39 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderEffect {
    pub state: s8,
    pub filler1: [u8_; 5usize],
    pub cameraMask: u16_,
    pub enableFlags: u32_,
    pub fillerC: [u8_; 4usize],
    pub work: *mut ::core::ffi::c_void,
    pub funcs: *mut RenderEffectFuncs,
}
impl Default for RenderEffect {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RenderEffectFuncs {
    pub init: ::core::option::Option<unsafe extern "C" fn(arg1: *mut RenderEffect)>,
    pub destroy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut RenderEffect)>,
    pub main: ::core::option::Option<unsafe extern "C" fn(arg1: *mut RenderEffect)>,
    pub draw: ::core::option::Option<
        unsafe extern "C" fn(arg1: ::core::ffi::c_int, arg2: *mut RenderEffect),
    >,
}
pub const ST_000_DUMMY: _bindgen_ty_40 = 0;
pub const ST_001_PLAIN: _bindgen_ty_40 = 1;
pub const ST_002_DIAMOND: _bindgen_ty_40 = 2;
pub const ST_003_HAIRPIN: _bindgen_ty_40 = 3;
pub const ST_004_WIDE_BRIDGE: _bindgen_ty_40 = 4;
pub const ST_005_SLOPES: _bindgen_ty_40 = 5;
pub const ST_006_STEPS: _bindgen_ty_40 = 6;
pub const ST_007_BLOCKS: _bindgen_ty_40 = 7;
pub const ST_008_JUMP_SINGLE: _bindgen_ty_40 = 8;
pub const ST_009_EXAM_A: _bindgen_ty_40 = 9;
pub const ST_010_ARCADE_SPIRAL_HARD: _bindgen_ty_40 = 10;
pub const ST_011_BUMP: _bindgen_ty_40 = 11;
pub const ST_012_WALKING: _bindgen_ty_40 = 12;
pub const ST_013_REPULSE: _bindgen_ty_40 = 13;
pub const ST_014_NARROW_BRIDGE: _bindgen_ty_40 = 14;
pub const ST_015_BREAK: _bindgen_ty_40 = 15;
pub const ST_016_CURVES: _bindgen_ty_40 = 16;
pub const ST_017_DOWNHILL: _bindgen_ty_40 = 17;
pub const ST_018_BLOCKS_SLIM: _bindgen_ty_40 = 18;
pub const ST_019_ARCADE_DIAMOND: _bindgen_ty_40 = 19;
pub const ST_020_ARCADE_TRACKS: _bindgen_ty_40 = 20;
pub const ST_021_CHOICE: _bindgen_ty_40 = 21;
pub const ST_022_BOWL: _bindgen_ty_40 = 22;
pub const ST_023_JUMPIES: _bindgen_ty_40 = 23;
pub const ST_024_STOPPERS: _bindgen_ty_40 = 24;
pub const ST_025_FLOOR_BENT: _bindgen_ty_40 = 25;
pub const ST_026_CONVEYOR: _bindgen_ty_40 = 26;
pub const ST_027_EXAM_B: _bindgen_ty_40 = 27;
pub const ST_028_CHASER: _bindgen_ty_40 = 28;
pub const ST_029_JUMP_DOUBLE: _bindgen_ty_40 = 29;
pub const ST_030_ARCADE_BRIDGE_MASTER: _bindgen_ty_40 = 30;
pub const ST_031_MIDDLE_JAM: _bindgen_ty_40 = 31;
pub const ST_032_ANTLION: _bindgen_ty_40 = 32;
pub const ST_033_COLLAPSE: _bindgen_ty_40 = 33;
pub const ST_034_SWING_BAR: _bindgen_ty_40 = 34;
pub const ST_035_LABYRINTH: _bindgen_ty_40 = 35;
pub const ST_036_SPIRAL: _bindgen_ty_40 = 36;
pub const ST_037_WAVY_JUMP: _bindgen_ty_40 = 37;
pub const ST_038_SPIKY: _bindgen_ty_40 = 38;
pub const ST_039_UNREST: _bindgen_ty_40 = 39;
pub const ST_040_POLAR: _bindgen_ty_40 = 40;
pub const ST_041_RUIN: _bindgen_ty_40 = 41;
pub const ST_042_BRANCH: _bindgen_ty_40 = 42;
pub const ST_043_OVERTURN: _bindgen_ty_40 = 43;
pub const ST_044_EXCURSION: _bindgen_ty_40 = 44;
pub const ST_045_DODECAGON: _bindgen_ty_40 = 45;
pub const ST_046_EXAM_C: _bindgen_ty_40 = 46;
pub const ST_047_SKELETON: _bindgen_ty_40 = 47;
pub const ST_048_TRACKS: _bindgen_ty_40 = 48;
pub const ST_049_ARCADE_NARROW_BRIDGE: _bindgen_ty_40 = 49;
pub const ST_050_ARCADE_CURL_PIPE: _bindgen_ty_40 = 50;
pub const ST_051_DOWNHILL_HARD: _bindgen_ty_40 = 51;
pub const ST_052_GEARS: _bindgen_ty_40 = 52;
pub const ST_053_DESTRUCTION: _bindgen_ty_40 = 53;
pub const ST_054_INVASION: _bindgen_ty_40 = 54;
pub const ST_055_DIVING: _bindgen_ty_40 = 55;
pub const ST_056_FLOOR_SLANT: _bindgen_ty_40 = 56;
pub const ST_057_TRAM: _bindgen_ty_40 = 57;
pub const ST_058_SWING_BAR_LONG: _bindgen_ty_40 = 58;
pub const ST_059_PAPERWORK: _bindgen_ty_40 = 59;
pub const ST_060_ARCADE_SANCTUARY: _bindgen_ty_40 = 60;
pub const ST_061_TWIN_ATTACKER: _bindgen_ty_40 = 61;
pub const ST_062_SEGA_LOGO: _bindgen_ty_40 = 62;
pub const ST_063_SNAKE: _bindgen_ty_40 = 63;
pub const ST_064_WIND: _bindgen_ty_40 = 64;
pub const ST_065_WINDY_SLIDE: _bindgen_ty_40 = 65;
pub const ST_066_FALL_DOWN: _bindgen_ty_40 = 66;
pub const ST_067_TWIN_CROSS: _bindgen_ty_40 = 67;
pub const ST_068_SPIRAL_HARD: _bindgen_ty_40 = 68;
pub const ST_069_CONVEYOR_PARTS: _bindgen_ty_40 = 69;
pub const ST_070_ARCADE_HITTER: _bindgen_ty_40 = 70;
pub const ST_071_GAPS: _bindgen_ty_40 = 71;
pub const ST_072_CURVATURE: _bindgen_ty_40 = 72;
pub const ST_073_ANT_LION_SUPER: _bindgen_ty_40 = 73;
pub const ST_074_DRUM: _bindgen_ty_40 = 74;
pub const ST_075_TWIST_AND_SPIN: _bindgen_ty_40 = 75;
pub const ST_076_SPEEDY_JAM: _bindgen_ty_40 = 76;
pub const ST_077_QUAKE: _bindgen_ty_40 = 77;
pub const ST_078_CASSIOPEIA: _bindgen_ty_40 = 78;
pub const ST_079_PIRATES: _bindgen_ty_40 = 79;
pub const ST_080_ARCADE_AV_LOGO: _bindgen_ty_40 = 80;
pub const ST_081_BOWL_OPEN: _bindgen_ty_40 = 81;
pub const ST_082_CHECKER: _bindgen_ty_40 = 82;
pub const ST_083_CARPET: _bindgen_ty_40 = 83;
pub const ST_084_RIDGE: _bindgen_ty_40 = 84;
pub const ST_085_MIXER: _bindgen_ty_40 = 85;
pub const ST_086_RINGS: _bindgen_ty_40 = 86;
pub const ST_087_STAIRS: _bindgen_ty_40 = 87;
pub const ST_088_CLOVER: _bindgen_ty_40 = 88;
pub const ST_089_COFFEE_CUP: _bindgen_ty_40 = 89;
pub const ST_090_METAMORPHASIS: _bindgen_ty_40 = 90;
pub const ST_091_BONUS_BASIC: _bindgen_ty_40 = 91;
pub const ST_092_BONUS_WAVE: _bindgen_ty_40 = 92;
pub const ST_093_BONUS_GRID: _bindgen_ty_40 = 93;
pub const ST_094_BONUS_BUMPY: _bindgen_ty_40 = 94;
pub const ST_095_BONUS_HUNTING: _bindgen_ty_40 = 95;
pub const ST_096_ARCADE_SNAKE: _bindgen_ty_40 = 96;
pub const ST_097_ARCADE_GEARS: _bindgen_ty_40 = 97;
pub const ST_098_ARCADE_CONVEYOR_PARTS: _bindgen_ty_40 = 98;
pub const ST_099_JUNGLE_BG: _bindgen_ty_40 = 99;
pub const ST_100_ARCADE_POLAR_LARGE: _bindgen_ty_40 = 100;
pub const ST_101_BLUR_BRIDGE: _bindgen_ty_40 = 101;
pub const ST_102_HITTER: _bindgen_ty_40 = 102;
pub const ST_103_AV_LOGO: _bindgen_ty_40 = 103;
pub const ST_104_HARD_HITTER: _bindgen_ty_40 = 104;
pub const ST_105_PUZZLE: _bindgen_ty_40 = 105;
pub const ST_106_POLAR_LARGE: _bindgen_ty_40 = 106;
pub const ST_107_BREATHE: _bindgen_ty_40 = 107;
pub const ST_108_FERRIS_WHEEL: _bindgen_ty_40 = 108;
pub const ST_109_FACTORY: _bindgen_ty_40 = 109;
pub const ST_110_CURL_PIPE: _bindgen_ty_40 = 110;
pub const ST_111_MAGIC_HAND: _bindgen_ty_40 = 111;
pub const ST_112_SANCTUARY: _bindgen_ty_40 = 112;
pub const ST_113_DAA_LOO_MAA: _bindgen_ty_40 = 113;
pub const ST_114_UNUSED_RINGS_STAGE: _bindgen_ty_40 = 114;
pub const ST_115_ALTERNATE_EDGE_MASTER: _bindgen_ty_40 = 115;
pub const ST_116_ALTERNATE_ROLL_MASTER: _bindgen_ty_40 = 116;
pub const ST_117_ARCADE_CURVES: _bindgen_ty_40 = 117;
pub const ST_118_ARCADE_JUMP_DOUBLE: _bindgen_ty_40 = 118;
pub const ST_119_ARCADE_DOWNHILL_HARD: _bindgen_ty_40 = 119;
pub const ST_120_ARCADE_DODECAGON: _bindgen_ty_40 = 120;
pub const ST_121_WAVE_MASTER: _bindgen_ty_40 = 121;
pub const ST_122_FAN_MASTER: _bindgen_ty_40 = 122;
pub const ST_123_STAMINA_MASTER: _bindgen_ty_40 = 123;
pub const ST_124_SPRING_MASTER: _bindgen_ty_40 = 124;
pub const ST_125_DANCE_MASTER: _bindgen_ty_40 = 125;
pub const ST_126_ROLL_MASTER: _bindgen_ty_40 = 126;
pub const ST_127_EDGE_MASTER: _bindgen_ty_40 = 127;
pub const ST_128_DODGE_MASTER: _bindgen_ty_40 = 128;
pub const ST_129_BRIDGE_MASTER: _bindgen_ty_40 = 129;
pub const ST_130_MONKEY_MASTER: _bindgen_ty_40 = 130;
pub const ST_131_RACE_SPACE: _bindgen_ty_40 = 131;
pub const ST_132_RACE_UNUSED: _bindgen_ty_40 = 132;
pub const ST_133_RACE_JUNGLE: _bindgen_ty_40 = 133;
pub const ST_134_RACE_ICE: _bindgen_ty_40 = 134;
pub const ST_135_RACE_DOWNTOWN: _bindgen_ty_40 = 135;
pub const ST_136_RACE_WATER: _bindgen_ty_40 = 136;
pub const ST_137_CHASER_DUPLICATE: _bindgen_ty_40 = 137;
pub const ST_138_RACE_DESERT: _bindgen_ty_40 = 138;
pub const ST_139_EXAM_A_BROKEN: _bindgen_ty_40 = 139;
pub const ST_140_AV_LOGO_BROKEN: _bindgen_ty_40 = 140;
pub const ST_141_YELLOW_SQUARE: _bindgen_ty_40 = 141;
pub const ST_142_WATER_TEST: _bindgen_ty_40 = 142;
pub const ST_143_FIGHT_JUNGLE: _bindgen_ty_40 = 143;
pub const ST_144_FIGHT_ICE: _bindgen_ty_40 = 144;
pub const ST_145_FIGHT_SPACE: _bindgen_ty_40 = 145;
pub const ST_146_DUMMY: _bindgen_ty_40 = 146;
pub const ST_147_DUMMY: _bindgen_ty_40 = 147;
pub const ST_148_DUMMY: _bindgen_ty_40 = 148;
pub const ST_149_DUMMY: _bindgen_ty_40 = 149;
pub const ST_150_TUTORIAL: _bindgen_ty_40 = 150;
pub const ST_151_TARGET_CIRCLES: _bindgen_ty_40 = 151;
pub const ST_152_TARGET_PYRAMIDS: _bindgen_ty_40 = 152;
pub const ST_153_TARGET_HEXAGONS: _bindgen_ty_40 = 153;
pub const ST_154_TARGET_UNUSEDS: _bindgen_ty_40 = 154;
pub const ST_155_MONKEY_TARGET_BG: _bindgen_ty_40 = 155;
pub const ST_156_DUMMY: _bindgen_ty_40 = 156;
pub const ST_157_DUMMY: _bindgen_ty_40 = 157;
pub const ST_158_DUMMY: _bindgen_ty_40 = 158;
pub const ST_159_DUMMY: _bindgen_ty_40 = 159;
pub const ST_160_DUMMY: _bindgen_ty_40 = 160;
pub const ST_161_GOLF_HOLE_18: _bindgen_ty_40 = 161;
pub const ST_162_GOLF_HOLE_4: _bindgen_ty_40 = 162;
pub const ST_163_GOLF_HOLE_6: _bindgen_ty_40 = 163;
pub const ST_164_GOLF_HOLE_3: _bindgen_ty_40 = 164;
pub const ST_165_GOLF_HOLE_5: _bindgen_ty_40 = 165;
pub const ST_166_GOLF_HOLE_15: _bindgen_ty_40 = 166;
pub const ST_167_GOLF_HOLE_1: _bindgen_ty_40 = 167;
pub const ST_168_GOLF_HOLE_8: _bindgen_ty_40 = 168;
pub const ST_169_GOLF_HOLE_10: _bindgen_ty_40 = 169;
pub const ST_170_GOLF_HOLE_14: _bindgen_ty_40 = 170;
pub const ST_171_GOLF_HOLE_16: _bindgen_ty_40 = 171;
pub const ST_172_GOLF_HOLE_7: _bindgen_ty_40 = 172;
pub const ST_173_GOLF_HOLE_12: _bindgen_ty_40 = 173;
pub const ST_174_GOLF_HOLE_17: _bindgen_ty_40 = 174;
pub const ST_175_GOLF_HOLE_9: _bindgen_ty_40 = 175;
pub const ST_176_GOLF_HOLE_13: _bindgen_ty_40 = 176;
pub const ST_177_GOLF_HOLE_2: _bindgen_ty_40 = 177;
pub const ST_178_GOLF_HOLE_11: _bindgen_ty_40 = 178;
pub const ST_179_BOWLING: _bindgen_ty_40 = 179;
pub const ST_180_BILLIARDS: _bindgen_ty_40 = 180;
pub const ST_181_DUMMY: _bindgen_ty_40 = 181;
pub const ST_182_DUMMY: _bindgen_ty_40 = 182;
pub const ST_183_DUMMY: _bindgen_ty_40 = 183;
pub const ST_184_DUMMY: _bindgen_ty_40 = 184;
pub const ST_185_DUMMY: _bindgen_ty_40 = 185;
pub const ST_186_DUMMY: _bindgen_ty_40 = 186;
pub const ST_187_DUMMY: _bindgen_ty_40 = 187;
pub const ST_188_DUMMY: _bindgen_ty_40 = 188;
pub const ST_189_DUMMY: _bindgen_ty_40 = 189;
pub const ST_190_DUMMY: _bindgen_ty_40 = 190;
pub const ST_191_DUMMY: _bindgen_ty_40 = 191;
pub const ST_192_DUMMY: _bindgen_ty_40 = 192;
pub const ST_193_DUMMY: _bindgen_ty_40 = 193;
pub const ST_194_DUMMY: _bindgen_ty_40 = 194;
pub const ST_195_DUMMY: _bindgen_ty_40 = 195;
pub const ST_196_DUMMY: _bindgen_ty_40 = 196;
pub const ST_197_BONUS_BG: _bindgen_ty_40 = 197;
pub const ST_198_ENDING_CUTSCENE_BG: _bindgen_ty_40 = 198;
pub const ST_199_DUMMY: _bindgen_ty_40 = 199;
pub const ST_200_DUMMY: _bindgen_ty_40 = 200;
pub type _bindgen_ty_40 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StageBgAnim {
    pub loopStartSeconds: s32,
    pub loopEndSeconds: s32,
    pub scaleXKeyframeCount: u32_,
    pub scaleXKeyframes: *mut Keyframe,
    pub scaleYKeyframeCount: u32_,
    pub scaleYKeyframes: *mut Keyframe,
    pub scaleZKeyframeCount: u32_,
    pub scaleZKeyframes: *mut Keyframe,
    pub rotXKeyframeCount: u32_,
    pub rotXKeyframes: *mut Keyframe,
    pub rotYKeyframeCount: u32_,
    pub rotYKeyframes: *mut Keyframe,
    pub rotZKeyframeCount: u32_,
    pub rotZKeyframes: *mut Keyframe,
    pub posXKeyframeCount: u32_,
    pub posXKeyframes: *mut Keyframe,
    pub posYKeyframeCount: u32_,
    pub posYKeyframes: *mut Keyframe,
    pub posZKeyframeCount: u32_,
    pub posZKeyframes: *mut Keyframe,
    pub visibleKeyframeCount: u32_,
    pub visibleKeyframes: *mut Keyframe,
    pub translucencyKeyframeCount: u32_,
    pub translucencyKeyframes: *mut Keyframe,
}
impl Default for StageBgAnim {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NightWindowAnim {
    pub pos: Point3d,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub id: s8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StormFireAnim {
    pub pos: Point3d,
    pub frameOffset: s8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StageFlipbookAnims {
    pub nightWindowAnimCount: s32,
    pub nightWindowAnims: *mut NightWindowAnim,
    pub stormFireAnimCount: s32,
    pub stormFireAnims: *mut StormFireAnim,
}
impl Default for StageFlipbookAnims {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageColiTri {
    pub pos: Point3d,
    pub normal: Vec,
    pub rot: S16Vec,
    pub flags: u16_,
    pub vert2: Point2d,
    pub vert3: Point2d,
    pub edge2Normal: Vec2d,
    pub edge3Normal: Vec2d,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageColiCone {
    pub pos: Point3d,
    pub rot: S16Vec,
    pub flags: u16_,
    pub scale: Vec,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageColiSphere {
    pub pos: Point3d,
    pub radius: f32,
    pub flags: u16_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageColiCylinder {
    pub pos: Point3d,
    pub radius: f32,
    pub height: f32,
    pub rot: S16Vec,
    pub flags: u16_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ColiRect {
    pub pos: Point3d,
    pub rot: S16Vec,
    pub normal: Vec,
    pub width: f32,
    pub height: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ColiCircle {
    pub pos: Point3d,
    pub radius: f32,
    pub rot: S16Vec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StageBgObject {
    pub flags: u32_,
    pub name: *mut ::core::ffi::c_char,
    pub model: *mut GMAModel,
    pub pos: Point3d,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub scale: Vec,
    pub translucency: f32,
    pub anim: *mut StageBgAnim,
    pub flipbooks: *mut StageFlipbookAnims,
}
impl Default for StageBgObject {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StageAnimGroupAnim {
    pub rotXKeyframeCount: u32_,
    pub rotXKeyframes: *mut Keyframe,
    pub rotYKeyframeCount: u32_,
    pub rotYKeyframes: *mut Keyframe,
    pub rotZKeyframeCount: u32_,
    pub rotZKeyframes: *mut Keyframe,
    pub posXKeyframeCount: u32_,
    pub posXKeyframes: *mut Keyframe,
    pub posYKeyframeCount: u32_,
    pub posYKeyframes: *mut Keyframe,
    pub posZKeyframeCount: u32_,
    pub posZKeyframes: *mut Keyframe,
}
impl Default for StageAnimGroupAnim {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DecodedStageLzPtr_child_child4 {
    pub unk0: *mut ::core::ffi::c_void,
    pub unk4: *mut GMAModel,
}
impl Default for DecodedStageLzPtr_child_child4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageCollHdr_child2 {
    pub unk0: Vec,
    pub unkC: Vec,
    pub unk18: s16,
    pub unk1A: s16,
    pub unk1C: s16,
    pub padding: [u8_; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageBanana {
    pub pos: Vec,
    pub type_: s32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageBumper {
    pub pos: Point3d,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub filler12: [u8_; 2usize],
    pub unk14: Vec,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageJamabar {
    pub pos: Point3d,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub filler12: [u8_; 2usize],
    pub unk14: Vec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StageAnimGroup {
    pub initPos: Point3d,
    pub initRot: S16Vec,
    pub unk12: u16_,
    pub anim: *mut StageAnimGroupAnim,
    pub modelNames: *mut *mut ::core::ffi::c_char,
    pub triangles: *mut StageColiTri,
    pub gridCellTris: *mut *mut s16,
    pub gridOriginX: f32_,
    pub gridOriginZ: f32_,
    pub gridStepX: f32_,
    pub gridStepZ: f32_,
    pub gridCellCountX: s32,
    pub gridCellCountZ: s32,
    pub goalCount: s32,
    pub goals: *mut StageGoal,
    pub filler44: [u8_; 4usize],
    pub unk48: *mut ::core::ffi::c_void,
    pub bumperCount: s32,
    pub bumpers: *mut StageBumper,
    pub jamabarCount: s32,
    pub jamabars: *mut StageJamabar,
    pub bananaCount: s32,
    pub bananas: *mut StageBanana,
    pub coliConeCount: s32,
    pub coliCones: *mut StageColiCone,
    pub coliSphereCount: s32,
    pub coliSpheres: *mut StageColiSphere,
    pub coliCylinderCount: s32,
    pub coliCylinders: *mut StageColiCylinder,
    pub animGroupModelCount: s32,
    pub animGroupModels: *mut AnimGroupModel,
    pub unk84: s32,
    pub unk88: *mut StageCollHdr_child2,
    pub unk8C: s32,
    pub unk90: *mut DecodedStageLzPtr_child_child4,
    pub filler94: [u8_; 36usize],
    pub unkB8: Vec,
}
impl Default for StageAnimGroup {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnimGroupModel {
    pub unk0: u32_,
    pub name: *mut ::core::ffi::c_char,
    pub unk8: f32,
}
impl Default for AnimGroupModel {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageStartPos {
    pub pos: Point3d,
    pub xrot: s16,
    pub yrot: s16,
    pub zrot: s16,
    pub padding: [u8_; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StageGoal {
    pub pos: Point3d,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub type_: ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DecodedStageLzPtr_child5_child {
    pub filler0: [u8_; 4usize],
    pub unk4: *mut ::core::ffi::c_void,
    pub filler8: [u8_; 4usize],
    pub unkC: *mut ::core::ffi::c_void,
    pub filler10: [u8_; 4usize],
    pub unk14: *mut ::core::ffi::c_void,
}
impl Default for DecodedStageLzPtr_child5_child {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DecodedStageLzPtr_child5 {
    pub filler0: [u8_; 4usize],
    pub unk4: *mut ::core::ffi::c_void,
    pub filler8: [u8_; 4usize],
    pub unkC: *mut ::core::ffi::c_void,
    pub filler10: [u8_; 4usize],
    pub unk14: *mut ::core::ffi::c_void,
    pub unk18: s32,
    pub unk1C: *mut DecodedStageLzPtr_child5_child,
    pub filler20: [u8_; 4usize],
    pub unk24: *mut ::core::ffi::c_void,
    pub filler28: [u8_; 4usize],
    pub unk2C: *mut ::core::ffi::c_void,
    pub filler30: [u8_; 4usize],
    pub unk34: *mut ::core::ffi::c_void,
    pub filler38: [u8_; 4usize],
    pub unk3C: *mut ::core::ffi::c_void,
    pub filler40: [u8_; 4usize],
    pub unk44: *mut ::core::ffi::c_void,
    pub filler48: [u8_; 4usize],
    pub unk4C: *mut ::core::ffi::c_void,
    pub filler50: [u8_; 4usize],
    pub unk54: *mut ::core::ffi::c_void,
    pub filler58: [u8_; 4usize],
    pub unk5C: *mut ::core::ffi::c_void,
    pub filler60: [u8_; 4usize],
    pub unk64: *mut ::core::ffi::c_void,
}
impl Default for DecodedStageLzPtr_child5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DecodedStageLzPtr_child6 {
    pub filler0: [u8_; 12usize],
    pub unkC: *mut StageAnimGroupAnim,
    pub unk10: *mut StageAnimGroupAnim,
}
impl Default for DecodedStageLzPtr_child6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StageMirror {
    pub name: *mut ::core::ffi::c_char,
    pub model: *mut GMAModel,
}
impl Default for StageMirror {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Stage_Child90 {
    pub unk0: u32_,
    pub unk4: Vec,
    pub unk10: s16,
    pub unk12: s16,
    pub unk14: s16,
    pub unk18: Vec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Stage {
    pub loopStartSeconds: s32,
    pub loopEndSeconds: s32,
    pub animGroupCount: s32,
    pub animGroups: *mut StageAnimGroup,
    pub startPos: *mut StageStartPos,
    pub pFallOutY: *mut f32,
    pub goalsCount: s32,
    pub goals: *mut StageGoal,
    pub filler20: [u8_; 4usize],
    pub unk24: *mut ::core::ffi::c_void,
    pub bumperCount: s32,
    pub bumpers: *mut StageBumper,
    pub jamabarCount: s32,
    pub jamabars: *mut StageJamabar,
    pub bananaCount: s32,
    pub bananas: *mut StageBanana,
    pub coliConeCount: s32,
    pub coliCones: *mut StageColiCone,
    pub coliSphereCount: s32,
    pub coliSpheres: *mut StageColiSphere,
    pub coliCylinderCount: s32,
    pub coliCylinders: *mut StageColiCylinder,
    pub animGroupModelCount: s32,
    pub animGroupModels: *mut AnimGroupModel,
    pub filler60: [u8_; 4usize],
    pub unk64: *mut ::core::ffi::c_void,
    pub bgObjectCount: s32,
    pub bgObjects: *mut StageBgObject,
    pub fgObjectCount: s32,
    pub fgObjects: *mut StageBgObject,
    pub unk78: *mut DecodedStageLzPtr_child5,
    pub unk7C: s32,
    pub mirrorCount: s32,
    pub mirrors: *mut ::core::ffi::c_void,
    pub unk88: *mut DecodedStageLzPtr_child6,
    pub unk8C: s32,
    pub unk90: *mut Stage_Child90,
}
impl Default for Stage {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const SOT_BUMPER: _bindgen_ty_41 = 0;
pub const SOT_JAMABAR: _bindgen_ty_41 = 1;
pub const SOT_GOALTAPE: _bindgen_ty_41 = 2;
pub const SOT_GOALBAG: _bindgen_ty_41 = 3;
pub const SOT_GOALBAG_EXMASTER: _bindgen_ty_41 = 4;
pub const SOT_MF_PNL_BUMPER: _bindgen_ty_41 = 5;
pub const SOT_MF_PNL_ELECTRAP: _bindgen_ty_41 = 6;
pub const SOT_MF_BULLET_TEST: _bindgen_ty_41 = 7;
pub const SOT_MF_BOX: _bindgen_ty_41 = 8;
pub const SOT_BUMPER_BGSPECIAL: _bindgen_ty_41 = 9;
pub const SOT_NAMEENT_BTN: _bindgen_ty_41 = 10;
pub type _bindgen_ty_41 = ::core::ffi::c_uint;
pub const STOBJ_FLAG_TANGIBLE: _bindgen_ty_42 = 2;
pub const STOBJ_FLAG_LOOKPOINT: _bindgen_ty_42 = 8;
pub const STOBJ_FLAG_ROTATION_UNK: _bindgen_ty_42 = 16;
pub type _bindgen_ty_42 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Stobj {
    pub index: s16,
    pub uid: s16,
    pub type_: s16,
    pub filler6: [u8_; 2usize],
    pub flags: u32_,
    pub state: s16,
    pub counter: s16,
    pub u_model_origin: Vec,
    pub pos: Vec,
    pub prevPos: Vec,
    pub boundSphereRadius: f32,
    pub coliFunc:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj, arg2: *mut PhysicsBall)>,
    pub unk3C: Vec,
    pub unk48: f32,
    pub unk4C: f32,
    pub unk50: f32,
    pub model: *mut GMAModel,
    pub localPos: Vec,
    pub unk64: Vec,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub unk76: s16,
    pub unk78: s16,
    pub filler7A: [u8_; 2usize],
    pub unk7C: Vec,
    pub unk88: s16,
    pub unk8A: s16,
    pub unk8C: s16,
    pub filler8E: [u8_; 2usize],
    pub lookPoint: Vec,
    pub lookPointPrio: f32,
    pub animGroupId: s8,
    pub extraData: *mut ::core::ffi::c_void,
    pub unkA8: Vec,
    pub offsetPos: Vec,
    pub offsetVel: Vec,
}
impl Default for Stobj {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct8028C0B0 {
    pub unk0: [f32; 4usize],
    pub unk10: u32_,
    pub unk14: [*mut GMAModel; 4usize],
}
impl Default for Struct8028C0B0 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TEXTBOX_STATE_INACTIVE: _bindgen_ty_43 = 0;
pub const TEXTBOX_STATE_INIT: _bindgen_ty_43 = 1;
pub const TEXTBOX_STATE_2: _bindgen_ty_43 = 2;
pub const TEXTBOX_STATE_3: _bindgen_ty_43 = 3;
pub const TEXTBOX_STATE_FADEIN: _bindgen_ty_43 = 10;
pub const TEXTBOX_STATE_SCROLL: _bindgen_ty_43 = 11;
pub const TEXTBOX_STATE_FADEOUT: _bindgen_ty_43 = 20;
pub const TEXTBOX_STATE_21: _bindgen_ty_43 = 21;
pub const TEXTBOX_STATE_22: _bindgen_ty_43 = 22;
pub type _bindgen_ty_43 = ::core::ffi::c_uint;
pub const TEXTBOX_STYLE_TOP_LEFT: _bindgen_ty_44 = 1;
pub const TEXTBOX_STYLE_CENTER_LEFT: _bindgen_ty_44 = 2;
pub const TEXTBOX_STYLE_BOTTOM_LEFT: _bindgen_ty_44 = 3;
pub const TEXTBOX_STYLE_TOP_RIGHT: _bindgen_ty_44 = 4;
pub const TEXTBOX_STYLE_CENTER_RIGHT: _bindgen_ty_44 = 5;
pub const TEXTBOX_STYLE_BOTTOM_RIGHT: _bindgen_ty_44 = 6;
pub const TEXTBOX_STYLE_LEFT_UP: _bindgen_ty_44 = 7;
pub const TEXTBOX_STYLE_CENTER_UP: _bindgen_ty_44 = 8;
pub const TEXTBOX_STYLE_RIGHT_UP: _bindgen_ty_44 = 9;
pub const TEXTBOX_STYLE_LEFT_DOWN: _bindgen_ty_44 = 10;
pub const TEXTBOX_STYLE_CENTER_DOWN: _bindgen_ty_44 = 11;
pub const TEXTBOX_STYLE_RIGHT_DOWN: _bindgen_ty_44 = 12;
pub const TEXTBOX_STYLE_SPIKY: _bindgen_ty_44 = 13;
pub const TEXTBOX_STYLE_PLAIN: _bindgen_ty_44 = 14;
pub const TEXTBOX_STYLE_THIN_BORDER: _bindgen_ty_44 = 15;
pub type _bindgen_ty_44 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TextBox {
    pub state: s32,
    pub timerMax: s32,
    pub timer: u32_,
    pub x: s16,
    pub y: s16,
    pub textWidth: f32,
    pub numColumns: s8,
    pub numRows: s8,
    pub style: s8,
    pub unk17: s8,
    pub unk18: s8,
    pub unk19: s8,
    pub callback: ::core::option::Option<unsafe extern "C" fn(arg1: *mut TextBox)>,
    pub id: s32,
    pub bgColor: s32,
}
pub const WORLD_STATE_INPUT_INIT: _bindgen_ty_45 = 1;
pub const WORLD_STATE_INPUT_MAIN: _bindgen_ty_45 = 2;
pub type _bindgen_ty_45 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct World {
    pub xrot: s16,
    pub zrot: s16,
    pub xrotPrev: s16,
    pub zrotPrev: s16,
    pub state: s8,
    pub playerId: s8,
    pub fillerA: [u8_; 2usize],
    pub maxTilt: f32,
    pub gravityDir: Vec,
    pub unk1C: f32,
    pub unk20: s16,
    pub filler22: [u8_; 30usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801EEEC0 {
    pub playerId: s32,
    pub bananas: s32,
    pub unk8: s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GMATevLayer {
    pub flags: u32_,
    pub tplIndex: u16_,
    pub lodBias: s8,
    pub maxAniso: u8_,
    pub texObj: *mut GXTexObj,
    pub pad32: [u8_; 20usize],
}
impl Default for GMATevLayer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GMA_TEV_LAYER_FLAG_TYPE_VIEW_SPECULAR: _bindgen_ty_46 = 1;
pub const GMA_TEV_LAYER_FLAG_TYPE3: _bindgen_ty_46 = 2;
pub const GMA_TEV_LAYER_FLAG_DO_EDGE_LOD: _bindgen_ty_46 = 64;
pub const GMA_TEV_LAYER_FLAG_MAGFILT_NEAR: _bindgen_ty_46 = 2048;
pub const GMA_TEV_LAYER_FLAG_TYPE_ALPHA_BLEND: _bindgen_ty_46 = 8192;
pub const GMA_TEV_LAYER_FLAG_TYPE_WORLD_SPECULAR: _bindgen_ty_46 = 32768;
pub const GMA_TEV_LAYER_FLAG_UNK16: _bindgen_ty_46 = 65536;
pub type _bindgen_ty_46 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct GMAModel {
    pub magic: u32_,
    pub flags: u32_,
    pub boundSphereCenter: Vec,
    pub boundSphereRadius: f32,
    pub tevLayerCount: u16_,
    pub opaqueShapeCount: u16_,
    pub translucentShapeCount: u16_,
    pub mtxCount: u8_,
    pub shapeOffs: u32_,
    pub texObjs: *mut GXTexObj,
    pub mtxIndexes: [u8_; 8usize],
    pub pad32: [u8_; 16usize],
    pub tevLayers: __IncompleteArrayField<GMATevLayer>,
}
impl Default for GMAModel {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GCMF_16BIT: _bindgen_ty_47 = 1;
pub const GCMF_STITCHING: _bindgen_ty_47 = 4;
pub const GCMF_SKIN: _bindgen_ty_47 = 8;
pub const GCMF_EFFECTIVE: _bindgen_ty_47 = 16;
pub type _bindgen_ty_47 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GMAEffVtxInfo {
    pub filler0: [u8_; 8usize],
    pub vtxDataOffs: u32_,
    pub indexDataOffs: u32_,
    pub pad32: [u8_; 16usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GMAEffVtx {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub nx: f32,
    pub ny: f32,
    pub nz: f32,
    pub u0: f32,
    pub v0: f32,
    pub u1: f32,
    pub v1: f32,
    pub u2: f32,
    pub v2: f32,
    pub r: u8_,
    pub g: u8_,
    pub b: u8_,
    pub a: u8_,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct GMAShape {
    pub flags: u32_,
    pub materialColor: GXColor,
    pub ambientColor: GXColor,
    pub specularColor: GXColor,
    pub reserved: u8_,
    pub alpha: u8_,
    pub tevLayerCount: u8_,
    pub dispListFlags: u8_,
    pub unk14: u8_,
    pub tevLayerIdxs: [u16_; 3usize],
    pub vtxAttrs: u32_,
    pub mtxIndices: [u8_; 8usize],
    pub dispListSizes: [u32_; 2usize],
    pub origin: Point3d,
    pub filler3C: [u8_; 4usize],
    pub blendFactors: u32_,
    pub pad32: [u8_; 28usize],
    pub dispLists: __IncompleteArrayField<u8_>,
}
pub const GMA_SHAPE_FLAG_UNLIT: _bindgen_ty_48 = 1;
pub const GMA_SHAPE_FLAG_DOUBLE_SIDED: _bindgen_ty_48 = 2;
pub const GMA_SHAPE_FLAG_NO_FOG: _bindgen_ty_48 = 4;
pub const GMA_SHAPE_FLAG_CUSTOM_MAT_AMB_COLOR: _bindgen_ty_48 = 8;
pub const GMA_SHAPE_FLAG_CUSTOM_BLEND_SRC: _bindgen_ty_48 = 32;
pub const GMA_SHAPE_FLAG_CUSTOM_BLEND_DST: _bindgen_ty_48 = 64;
pub const GMA_SHAPE_FLAG_SIMPLE_MATERIAL: _bindgen_ty_48 = 128;
pub const GMA_SHAPE_FLAG_VERT_COLORS: _bindgen_ty_48 = 256;
pub type _bindgen_ty_48 = ::core::ffi::c_uint;
pub const GMA_SHAPE_HAS_DLIST0: _bindgen_ty_49 = 1;
pub const GMA_SHAPE_HAS_DLIST1: _bindgen_ty_49 = 2;
pub const GMA_SHAPE_HAS_DLIST2: _bindgen_ty_49 = 4;
pub const GMA_SHAPE_HAS_DLIST3: _bindgen_ty_49 = 8;
pub type _bindgen_ty_49 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default)]
pub struct GMAExtraDispLists {
    pub mtxIndices: [u8_; 8usize],
    pub dispListSizes: [u32_; 2usize],
    pub pad32: [u8_; 16usize],
    pub dispLists: __IncompleteArrayField<u8_>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GMAModelEntry {
    pub model: *mut GMAModel,
    pub name: *mut ::core::ffi::c_char,
}
impl Default for GMAModelEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GMA {
    pub numModels: u32_,
    pub modelsBase: *mut u8_,
    pub modelEntries: *mut GMAModelEntry,
    pub namesBase: *mut ::core::ffi::c_char,
    pub padding: [u8_; 16usize],
    pub fileData: __IncompleteArrayField<u8_>,
}
impl Default for GMA {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TevStageInfo {
    pub tevStage: s32,
    pub texCoordId: GXTexCoordID,
    pub texMtxId: GXTexMtx,
    pub texMapId: GXTexMapID,
    pub tevIndStage: GXIndTexStageID,
    pub ptTexMtxId: GXPTTexMtx,
    pub unk18: u32_,
    pub indTexMtxId: GXIndTexMtxID,
    pub usedUnkLayer3: BOOL,
    pub u_texCoordId2: GXTexCoordID,
    pub u_someTexmapId2: GXTexMapID,
}
impl Default for TevStageInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GCMMatState_Unit {
    pub unk0: s32,
    pub unk4: *mut ::core::ffi::c_void,
    pub unk8: *mut ::core::ffi::c_void,
    pub unkC: TevStageInfo,
}
impl Default for GCMMatState_Unit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GXTevBlendModeCache {
    pub type_: GXBlendMode,
    pub src_factor: GXBlendFactor,
    pub dst_factor: GXBlendFactor,
    pub op: GXLogicOp,
}
impl Default for GXTevBlendModeCache {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GXTevSwapModeTableCache {
    pub r: GXTevColorChan,
    pub g: GXTevColorChan,
    pub b: GXTevColorChan,
    pub a: GXTevColorChan,
}
impl Default for GXTevSwapModeTableCache {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GXTevswapModeSelCache {
    pub ras_sel: GXTevSwapSel,
    pub tex_sel: GXTevSwapSel,
}
impl Default for GXTevswapModeSelCache {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GXFogCache {
    pub type_: GXFogType,
    pub startz: f32,
    pub endz: f32,
    pub nearz: f32,
    pub farz: f32,
    pub color: GXColor,
}
impl Default for GXFogCache {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXTevInputCache {
    pub a: s32,
    pub b: s32,
    pub c: s32,
    pub d: s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GXTevOpCache {
    pub op: GXTevOp,
    pub bias: GXTevBias,
    pub scale: GXTevScale,
    pub clamp: GXBool,
    pub reg: GXTevRegID,
}
impl Default for GXTevOpCache {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXTexSize {
    pub width: u16_,
    pub height: u16_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GXTevOrderCached {
    pub coord: GXTexCoordID,
    pub map: GXTexMapID,
    pub color: GXChannelID,
    pub texSize: GXTexSize,
}
impl Default for GXTevOrderCached {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GXTevKColorCached {
    pub numTevStages: u8_,
    pub colors: [GXColor; 4usize],
    pub filler11: [u8_; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GXCache {
    pub compareEnable: GXBool,
    pub compareFunc: GXCompare,
    pub updateEnable: GXBool,
    pub lineWidth: u8_,
    pub texOffsets: s32,
    pub cullMode: s32,
    pub blendMode: GXTevBlendModeCache,
    pub swapModeTable: [GXTevSwapModeTableCache; 4usize],
    pub swapModeSel: [GXTevswapModeSelCache; 16usize],
    pub fog: GXFogCache,
    pub colorUpdate: GXBool,
    pub alphaUpdate: GXBool,
    pub zCompare: GXBool,
    pub unkFF: u8_,
    pub colorInputs: [GXTevInputCache; 16usize],
    pub alphaInputs: [GXTevInputCache; 16usize],
    pub colorOperations: [GXTevOpCache; 16usize],
    pub alphaOperations: [GXTevOpCache; 16usize],
    pub tevOrders: [GXTevOrderCached; 16usize],
    pub kColorSels: [s32; 16usize],
    pub kAlphaSels: [s32; 16usize],
    pub kColor: GXTevKColorCached,
    pub texSizes: [GXTexSize; 8usize],
    pub filler732: [u8_; 2usize],
}
impl Default for GXCache {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PointWithColor {
    pub pos: Point3d,
    pub color: GXColor,
}
pub type OrdTblDrawFunc = ::core::option::Option<unsafe extern "C" fn(arg1: *mut OrdTblNode)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrdTblNode {
    pub next: *mut OrdTblNode,
    pub drawFunc: OrdTblDrawFunc,
}
impl Default for OrdTblNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GX {
    pub vNum: u16_,
    pub unk2: u16_,
    pub unk4: u32_,
    pub unk8: u32_,
    pub unkC: u32_,
    pub unk10: u32_,
    pub filler14: [u8_; 8usize],
    pub vatA: [u32_; 8usize],
    pub vatB: [u32_; 8usize],
    pub filler5C: [u8_; 32usize],
    pub lpSize: u32_,
    pub unk80: u32_,
    pub unk84: u32_,
    pub filler88: [u8_; 32usize],
    pub unkA8: [u32_; 2usize],
    pub unkB0: [u32_; 2usize],
    pub suTs0: [u32_; 8usize],
    pub suTs1: [u32_; 8usize],
    pub suScis0: u32_,
    pub suScis1: u32_,
    pub tref: [u32_; 8usize],
    pub iref: u32_,
    pub bpMask: u32_,
    pub filler128: [u8_; 8usize],
    pub tevc: [u32_; 16usize],
    pub teva: [u32_; 16usize],
    pub tevKsel: [u32_; 8usize],
    pub cmode0: u32_,
    pub cmode1: u32_,
    pub zmode: u32_,
    pub peCtrl: u32_,
    pub filler1E0: [u8_; 28usize],
    pub cpTex: u32_,
    pub filler200: [u8_; 4usize],
    pub genMode: u32_,
    pub TexRegions: [GXTexRegion; 8usize],
    pub TexRegionsCI: [GXTexRegion; 4usize],
    pub nextTexRgn: u32_,
    pub nextTexRgnCI: u32_,
    pub TlutRegions: [GXTlutRegion; 20usize],
    pub filler410: [u8_; 16usize],
    pub unk420: u32_,
    pub unk424: f32_,
    pub unk428: f32_,
    pub unk42C: f32_,
    pub unk430: f32_,
    pub unk434: f32_,
    pub unk438: f32_,
    pub unk43C: f32_,
    pub unk440: f32_,
    pub unk444: f32_,
    pub unk448: f32_,
    pub unk44C: f32_,
    pub unk450: f32_,
    pub unk454: u8_,
    pub unk458: f32_,
    pub filler45C: [u8_; 64usize],
    pub texmapId: [u32_; 16usize],
    pub tcsManEnab: u32_,
    pub filler4E0: [u8_; 12usize],
    pub inDispList: u8_,
    pub dlSaveContext: u8_,
    pub dirtyVAT: u8_,
    pub dirtyState: u32_,
}
impl Default for GX {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GXFifoObj {
    pub base: *mut ::core::ffi::c_void,
    pub end: *mut ::core::ffi::c_void,
    pub size: u32_,
    pub hiWaterMark: u32_,
    pub loWaterMark: u32_,
    pub readPtr: *mut ::core::ffi::c_void,
    pub writePtr: *mut ::core::ffi::c_void,
    pub unk1C: s32,
    pub filler20: [u8_; 4usize],
}
impl Default for __GXFifoObj {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const invalidModelName: &[u8; 14] = b"Invalid Model\0";
pub const TEVMATCACHE_CHAN_CONFIG_NULL: _bindgen_ty_50 = 0;
pub const TEVMATCACHE_CHAN_CONFIG_UNLIT: _bindgen_ty_50 = 1;
pub const TEVMATCACHE_CHAN_CONFIG_UNLIT_VERTCOLORS: _bindgen_ty_50 = 2;
pub const TEVMATCACHE_CHAN_CONFIG_LIGHTS: _bindgen_ty_50 = 3;
pub const TEVMATCACHE_CHAN_CONFIG_LIGHTS_VERTCOLORS: _bindgen_ty_50 = 4;
pub type _bindgen_ty_50 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_51 {
    pub unk0: u8_,
    pub tevStageCount: s8,
    pub chanConfig: u8_,
    pub num_tev_stages: s8,
    pub num_tex_gens: s8,
    pub num_ind_stages: s8,
    pub filler6: [u8_; 2usize],
    pub postMultiplyTevStageIdx: s32,
    pub postAddTevStageIdx: s32,
    pub materialColor: GXColor,
    pub ambientColor: GXColor,
    pub specularColor: GXColor,
    pub colorIn: GXTevColorArg,
    pub alphaIn: GXTevAlphaArg,
    pub blendSrcFactor: GXBlendFactor,
    pub blendDstFactor: GXBlendFactor,
    pub tevLayerFlags: [u32_; 3usize],
    pub unk38: u32_,
    pub tevLayerIdxs: [u16_; 3usize],
    pub unk44: s32,
    pub unk48: s32,
    pub unk4C: s32,
    pub viewSpecularColorValid: s32,
    pub worldSpecularColorValid: s32,
    pub modelDir_rt_view: Vec,
}
impl Default for _bindgen_ty_51 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct UnkStruct12 {
    pub filler0: [u8_; 8usize],
    pub unk8: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrawShapeDeferredNode {
    pub node: OrdTblNode,
    pub model: *mut GMAModel,
    pub mtx: Mtx,
    pub tevLayers: *mut GMATevLayer,
    pub shape: *mut GMAShape,
    pub cullMode: GXCullMode,
    pub lightGroup: u32_,
    pub alpha: f32,
    pub unk50: EnvMapFunc,
    pub unk54: Func802F20F0,
    pub zCompEnable: u8_,
    pub zUpdEnable: u8_,
    pub zCompFunc: u32_,
    pub useCustomTexMtx: u8_,
    pub s_usePostMultiplyTevStage: u8_,
    pub s_usePostAddTevStage: u8_,
    pub texMtx: *mut Mtx,
    pub unk68: GXColor,
    pub unk6C: GXColor,
    pub fogEnabled: u32_,
}
impl Default for DrawShapeDeferredNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ThreadStatus_THREAD_STATUS_RUNNING: ThreadStatus = 0;
pub const ThreadStatus_THREAD_STATUS_KILLED: ThreadStatus = 3;
pub type ThreadStatus = ::core::ffi::c_uint;
pub const ThreadGroup_THREAD_GROUP_0: ThreadGroup = 0;
pub const ThreadGroup_THREAD_GROUP_1: ThreadGroup = 1;
pub const ThreadGroup_THREAD_GROUP_2: ThreadGroup = 2;
pub const ThreadGroup_THREAD_GROUP_3: ThreadGroup = 3;
pub const ThreadGroup_THREAD_GROUP_4: ThreadGroup = 4;
pub const ThreadGroup_THREAD_GROUP_5: ThreadGroup = 5;
pub const ThreadGroup_THREAD_GROUP_6: ThreadGroup = 6;
pub const ThreadGroup_THREAD_GROUP_7: ThreadGroup = 7;
pub const ThreadGroup_THREAD_GROUP_8: ThreadGroup = 8;
pub const ThreadGroup_THREAD_GROUP_9: ThreadGroup = 9;
pub const ThreadGroup_THREAD_GROUP_10: ThreadGroup = 10;
pub const ThreadGroup_THREAD_GROUP_11: ThreadGroup = 11;
pub const ThreadGroup_THREAD_GROUP_12: ThreadGroup = 12;
pub const ThreadGroup_THREAD_GROUP_13: ThreadGroup = 13;
pub const ThreadGroup_THREAD_GROUP_14: ThreadGroup = 14;
pub const ThreadGroup_THREAD_GROUP_15: ThreadGroup = 15;
pub const ThreadGroup_THREAD_GROUP_COUNT: ThreadGroup = 16;
pub type ThreadGroup = ::core::ffi::c_uint;
pub type ThreadCallback =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut Ape, arg2: ::core::ffi::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Thread {
    pub callback: ThreadCallback,
    pub ape: *mut Ape,
    pub next: *mut Thread,
    pub prev: *mut Thread,
    pub unused1: u32_,
    pub unused2: u32_,
    pub threadId: u32_,
    pub unused3: u32_,
}
impl Default for Thread {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const lbl_0000F020: u32_ = 75;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TextDrawInfo {
    pub startX: f32,
    pub x: f32,
    pub y: f32,
    pub fontId: s32,
    pub mulColor: u32_,
    pub addColor: u32_,
    pub unk18: s16,
    pub unk1C: f32,
    pub scaleX: f32,
    pub scaleY: f32,
    pub opacity: f32,
    pub unk2C: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct8028FE58 {
    pub unk0: *mut Sprite,
    pub unk4: *mut Struct8028FE58,
    pub unk8: *mut Struct8028FE58,
}
impl Default for Struct8028FE58 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_52 {
    pub x: s32,
    pub y: s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GlyphDesc {
    pub text: *mut ::core::ffi::c_char,
    pub unk4: s32,
}
impl Default for GlyphDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DoubleKanjiGlyph {
    pub text: *mut ::core::ffi::c_char,
    pub unk4: s16,
    pub unk6: s16,
}
impl Default for DoubleKanjiGlyph {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StringParseState {
    pub mode: u32_,
    pub unk4: s32,
    pub unk8: s32,
    pub unkC: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct80071140_b {
    pub unk0: s8,
    pub unk1: u8_,
}
pub const TEXT_MODE_ASCII: _bindgen_ty_53 = 0;
pub const TEXT_MODE_HIRAGANA: _bindgen_ty_53 = 1;
pub const TEXT_MODE_KATAKANA: _bindgen_ty_53 = 2;
pub const TEXT_MODE_PICTURE: _bindgen_ty_53 = 3;
pub const TEXT_MODE_BLINK: _bindgen_ty_53 = 65536;
pub type _bindgen_ty_53 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PolyDisp {
    pub flags: u32_,
    pub unk4: Vec,
    pub unk10: Vec,
    pub unk1C: Vec,
    pub unk28: Vec,
    pub unk34: Vec,
    pub unk40: Vec,
}
pub const COLI_FLAG_OCCURRED: _bindgen_ty_54 = 1;
pub type _bindgen_ty_54 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ColiPlane {
    pub point: Point3d,
    pub normal: Vec,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PhysicsBall {
    pub flags: u32_,
    pub pos: Point3d,
    pub prevPos: Point3d,
    pub vel: Vec,
    pub radius: f32,
    pub gravityAccel: f32,
    pub restitution: f32,
    pub hardestColiSpeed: f32,
    pub hardestColiPlane: ColiPlane,
    pub hardestColiAnimGroupId: s32,
    pub friction: f32,
    pub animGroupId: s32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ColiEdge {
    pub start: Point2d,
    pub end: Point2d,
    pub normal: Vec2d,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RaycastHit {
    pub flags: u32_,
    pub pos: Point3d,
    pub normal: Vec,
}
pub const BALL_TARGET_L: _bindgen_ty_55 = 0;
pub const BALL_TARGET_R: _bindgen_ty_55 = 1;
pub const BLU_HEMI_INSIDE: _bindgen_ty_55 = 2;
pub const BLU_HEMI_OUTSIDE: _bindgen_ty_55 = 3;
pub const _DUMMY_4: _bindgen_ty_55 = 4;
pub const BPU_HEMI_INSIDE: _bindgen_ty_55 = 5;
pub const BPU_HEMI_OUTSIDE: _bindgen_ty_55 = 6;
pub const old_button: _bindgen_ty_55 = 7;
pub const CAPSULE_BLU: _bindgen_ty_55 = 8;
pub const CAPSULE_BPU: _bindgen_ty_55 = 9;
pub const CAPSULE_GRE: _bindgen_ty_55 = 10;
pub const CAPSULE_ORA: _bindgen_ty_55 = 11;
pub const CAPSULE_PUR: _bindgen_ty_55 = 12;
pub const CAPSULE_RPU: _bindgen_ty_55 = 13;
pub const CAPSULE_SKY: _bindgen_ty_55 = 14;
pub const CAPSULE_YEL: _bindgen_ty_55 = 15;
pub const CAPSULE_YG: _bindgen_ty_55 = 16;
pub const CLEAR_HEMI_INSIDE: _bindgen_ty_55 = 17;
pub const CLEAR_HEMI_OUTSIDE: _bindgen_ty_55 = 18;
pub const CRASH_STAR: _bindgen_ty_55 = 19;
pub const ENV_ABSORBER: _bindgen_ty_55 = 20;
pub const GRE_HEMI_INSIDE: _bindgen_ty_55 = 21;
pub const GRE_HEMI_OUTSIDE: _bindgen_ty_55 = 22;
pub const LENSFLARE_1_NEW: _bindgen_ty_55 = 23;
pub const LENSFLARE_2_NEW: _bindgen_ty_55 = 24;
pub const LENSFLARE_3_NEW: _bindgen_ty_55 = 25;
pub const LENSFLARE_4_NEW: _bindgen_ty_55 = 26;
pub const LENSFLARE_5_NEW: _bindgen_ty_55 = 27;
pub const LENSFLARE_6_NEW: _bindgen_ty_55 = 28;
pub const LENSFLARE_7_NEW: _bindgen_ty_55 = 29;
pub const NEW_SCENT_BAG_A: _bindgen_ty_55 = 30;
pub const NEW_SCENT_BAG_B: _bindgen_ty_55 = 31;
pub const NEW_SCENT_BAG_WHOLE: _bindgen_ty_55 = 32;
pub const OBJ_BANANA_01_LOD0: _bindgen_ty_55 = 33;
pub const OBJ_BANANA_01_LOD100: _bindgen_ty_55 = 34;
pub const OBJ_BANANA_01_LOD150: _bindgen_ty_55 = 35;
pub const OBJ_BANANA_01_LOD50: _bindgen_ty_55 = 36;
pub const OBJ_BANANA_02_LOD0: _bindgen_ty_55 = 37;
pub const OBJ_BANANA_02_LOD100: _bindgen_ty_55 = 38;
pub const ORA_HEMI_INSIDE: _bindgen_ty_55 = 39;
pub const ORA_HEMI_OUTSIDE: _bindgen_ty_55 = 40;
pub const PAPER_PIECE_DEEPGREEN: _bindgen_ty_55 = 41;
pub const PAPER_PIECE_GREEN: _bindgen_ty_55 = 42;
pub const PAPER_PIECE_ORANGE: _bindgen_ty_55 = 43;
pub const PAPER_PIECE_RED: _bindgen_ty_55 = 44;
pub const PAPER_PIECE_YELLOW: _bindgen_ty_55 = 45;
pub const PUR_HEMI_INSIDE: _bindgen_ty_55 = 46;
pub const PUR_HEMI_OUTSIDE: _bindgen_ty_55 = 47;
pub const BLACK_SCREEN: _bindgen_ty_55 = 48;
pub const RED_HEMI_INSIDE: _bindgen_ty_55 = 49;
pub const RED_HEMI_OUTSIDE: _bindgen_ty_55 = 50;
pub const RPU_HEMI_INSIDE: _bindgen_ty_55 = 51;
pub const RPU_HEMI_OUTSIDE: _bindgen_ty_55 = 52;
pub const SAMPLE: _bindgen_ty_55 = 53;
pub const SKY_HEMI_INSIDE: _bindgen_ty_55 = 54;
pub const SKY_HEMI_OUTSIDE: _bindgen_ty_55 = 55;
pub const SPHERE_EDGE: _bindgen_ty_55 = 56;
pub const SPHERE_EDGE_01_RED: _bindgen_ty_55 = 57;
pub const SPHERE_EDGE_02_ORA: _bindgen_ty_55 = 58;
pub const SPHERE_EDGE_03_YEL: _bindgen_ty_55 = 59;
pub const SPHERE_EDGE_04_YG: _bindgen_ty_55 = 60;
pub const SPHERE_EDGE_05_GRE: _bindgen_ty_55 = 61;
pub const SPHERE_EDGE_06_SKY: _bindgen_ty_55 = 62;
pub const SPHERE_EDGE_07_BLU: _bindgen_ty_55 = 63;
pub const SPHERE_EDGE_08_BPU: _bindgen_ty_55 = 64;
pub const SPHERE_EDGE_09_PUR: _bindgen_ty_55 = 65;
pub const SPHERE_EDGE_10_RPU: _bindgen_ty_55 = 66;
pub const old_button_base: _bindgen_ty_55 = 67;
pub const old_lever_analogue: _bindgen_ty_55 = 68;
pub const YEL_HEMI_INSIDE: _bindgen_ty_55 = 69;
pub const YEL_HEMI_OUTSIDE: _bindgen_ty_55 = 70;
pub const YG_HEMI_INSIDE: _bindgen_ty_55 = 71;
pub const YG_HEMI_OUTSIDE: _bindgen_ty_55 = 72;
pub const button: _bindgen_ty_55 = 73;
pub const button_base: _bindgen_ty_55 = 74;
pub const lever_analogue: _bindgen_ty_55 = 75;
pub const lever_analogue_base: _bindgen_ty_55 = 76;
pub const null1: _bindgen_ty_55 = 77;
pub const polyshadow01: _bindgen_ty_55 = 78;
pub const CRASH_FLASH: _bindgen_ty_55 = 79;
pub const BOMB_FUSE: _bindgen_ty_55 = 80;
pub const mb_bumper: _bindgen_ty_55 = 81;
pub const mb_bumper_low: _bindgen_ty_55 = 82;
pub const mb_jamabar: _bindgen_ty_55 = 83;
pub const ARROW_1P: _bindgen_ty_55 = 84;
pub const ARROW_2P: _bindgen_ty_55 = 85;
pub const ARROW_3P: _bindgen_ty_55 = 86;
pub const ARROW_4P: _bindgen_ty_55 = 87;
pub const ARROW_COM: _bindgen_ty_55 = 88;
pub const gb_grad: _bindgen_ty_55 = 89;
pub const circle_white: _bindgen_ty_55 = 90;
pub const circle_white2: _bindgen_ty_55 = 91;
pub const circle_white2_half: _bindgen_ty_55 = 92;
pub const CLEAR_HEMI_OUTSIDE_L2: _bindgen_ty_55 = 93;
pub const CLEAR_HEMI_OUTSIDE_L3: _bindgen_ty_55 = 94;
pub const RED_HEMI_OUTSIDE_L3: _bindgen_ty_55 = 95;
pub const SPHERE_EDGE_01_RED_L3: _bindgen_ty_55 = 96;
pub const SPHERE_EDGE_03_YEL_L2: _bindgen_ty_55 = 97;
pub const YEL_HEMI_OUTSIDE_L2: _bindgen_ty_55 = 98;
pub const old_lever_analogue_base: _bindgen_ty_55 = 99;
pub const NOCOLI_NODISP: _bindgen_ty_55 = 100;
pub const CLEAR_HEMI_INSIDE_L2: _bindgen_ty_55 = 101;
pub const CLEAR_HEMI_INSIDE_L3: _bindgen_ty_55 = 102;
pub const GRE_HEMI_INSIDE_L2: _bindgen_ty_55 = 103;
pub const GRE_HEMI_INSIDE_L3: _bindgen_ty_55 = 104;
pub const GRE_HEMI_OUTSIDE_L2: _bindgen_ty_55 = 105;
pub const GRE_HEMI_OUTSIDE_L3: _bindgen_ty_55 = 106;
pub const SPHERE_EDGE_05_GRE_L2: _bindgen_ty_55 = 107;
pub const SPHERE_EDGE_05_GRE_L3: _bindgen_ty_55 = 108;
pub const _DUMMY_109: _bindgen_ty_55 = 109;
pub const _DUMMY_110: _bindgen_ty_55 = 110;
pub const MOT_SPARK_POS: _bindgen_ty_55 = 111;
pub const _DUMMY_112: _bindgen_ty_55 = 112;
pub const _DUMMY_113: _bindgen_ty_55 = 113;
pub const _DUMMY_114: _bindgen_ty_55 = 114;
pub const _DUMMY_115: _bindgen_ty_55 = 115;
pub const _DUMMY_116: _bindgen_ty_55 = 116;
pub const _DUMMY_117: _bindgen_ty_55 = 117;
pub const _DUMMY_118: _bindgen_ty_55 = 118;
pub const _DUMMY_119: _bindgen_ty_55 = 119;
pub const _DUMMY_120: _bindgen_ty_55 = 120;
pub const _DUMMY_121: _bindgen_ty_55 = 121;
pub const _DUMMY_122: _bindgen_ty_55 = 122;
pub const _DUMMY_123: _bindgen_ty_55 = 123;
pub const _DUMMY_124: _bindgen_ty_55 = 124;
pub const _DUMMY_125: _bindgen_ty_55 = 125;
pub const _DUMMY_126: _bindgen_ty_55 = 126;
pub const _DUMMY_127: _bindgen_ty_55 = 127;
pub const _DUMMY_128: _bindgen_ty_55 = 128;
pub const _DUMMY_129: _bindgen_ty_55 = 129;
pub const _DUMMY_130: _bindgen_ty_55 = 130;
pub const _DUMMY_131: _bindgen_ty_55 = 131;
pub const _DUMMY_132: _bindgen_ty_55 = 132;
pub const _DUMMY_133: _bindgen_ty_55 = 133;
pub const _DUMMY_134: _bindgen_ty_55 = 134;
pub const _DUMMY_135: _bindgen_ty_55 = 135;
pub const _DUMMY_136: _bindgen_ty_55 = 136;
pub const _DUMMY_137: _bindgen_ty_55 = 137;
pub const _DUMMY_138: _bindgen_ty_55 = 138;
pub const _DUMMY_139: _bindgen_ty_55 = 139;
pub const _DUMMY_140: _bindgen_ty_55 = 140;
pub const _DUMMY_141: _bindgen_ty_55 = 141;
pub const _DUMMY_142: _bindgen_ty_55 = 142;
pub const _DUMMY_143: _bindgen_ty_55 = 143;
pub const _DUMMY_144: _bindgen_ty_55 = 144;
pub const _DUMMY_145: _bindgen_ty_55 = 145;
pub const _DUMMY_146: _bindgen_ty_55 = 146;
pub const _DUMMY_147: _bindgen_ty_55 = 147;
pub const _DUMMY_148: _bindgen_ty_55 = 148;
pub const _DUMMY_149: _bindgen_ty_55 = 149;
pub const _DUMMY_150: _bindgen_ty_55 = 150;
pub const _DUMMY_151: _bindgen_ty_55 = 151;
pub const _DUMMY_152: _bindgen_ty_55 = 152;
pub const _DUMMY_153: _bindgen_ty_55 = 153;
pub const _DUMMY_154: _bindgen_ty_55 = 154;
pub const _DUMMY_155: _bindgen_ty_55 = 155;
pub const _DUMMY_156: _bindgen_ty_55 = 156;
pub const _DUMMY_157: _bindgen_ty_55 = 157;
pub const _DUMMY_158: _bindgen_ty_55 = 158;
pub const _DUMMY_159: _bindgen_ty_55 = 159;
pub const _DUMMY_160: _bindgen_ty_55 = 160;
pub const _DUMMY_161: _bindgen_ty_55 = 161;
pub const _DUMMY_162: _bindgen_ty_55 = 162;
pub const _DUMMY_163: _bindgen_ty_55 = 163;
pub const _DUMMY_164: _bindgen_ty_55 = 164;
pub const _DUMMY_165: _bindgen_ty_55 = 165;
pub const _DUMMY_166: _bindgen_ty_55 = 166;
pub const _DUMMY_167: _bindgen_ty_55 = 167;
pub const _DUMMY_168: _bindgen_ty_55 = 168;
pub const _DUMMY_169: _bindgen_ty_55 = 169;
pub const _DUMMY_170: _bindgen_ty_55 = 170;
pub const _DUMMY_171: _bindgen_ty_55 = 171;
pub const _DUMMY_172: _bindgen_ty_55 = 172;
pub const _DUMMY_173: _bindgen_ty_55 = 173;
pub const _DUMMY_174: _bindgen_ty_55 = 174;
pub const _DUMMY_175: _bindgen_ty_55 = 175;
pub const _DUMMY_176: _bindgen_ty_55 = 176;
pub const _DUMMY_177: _bindgen_ty_55 = 177;
pub const BLU_HEMI_INSIDE_L2: _bindgen_ty_55 = 178;
pub const BLU_HEMI_INSIDE_L3: _bindgen_ty_55 = 179;
pub const BLU_HEMI_OUTSIDE_L2: _bindgen_ty_55 = 180;
pub const BLU_HEMI_OUTSIDE_L3: _bindgen_ty_55 = 181;
pub const RED_HEMI_INSIDE_L2: _bindgen_ty_55 = 182;
pub const RED_HEMI_INSIDE_L3: _bindgen_ty_55 = 183;
pub const RED_HEMI_OUTSIDE_L2: _bindgen_ty_55 = 184;
pub const SPHERE_EDGE_01_RED_L2: _bindgen_ty_55 = 185;
pub const SPHERE_EDGE_03_YEL_L3: _bindgen_ty_55 = 186;
pub const SPHERE_EDGE_07_BLU_L2: _bindgen_ty_55 = 187;
pub const SPHERE_EDGE_07_BLU_L3: _bindgen_ty_55 = 188;
pub const YEL_HEMI_INSIDE_L2: _bindgen_ty_55 = 189;
pub const YEL_HEMI_INSIDE_L3: _bindgen_ty_55 = 190;
pub const YEL_HEMI_OUTSIDE_L3: _bindgen_ty_55 = 191;
pub type _bindgen_ty_55 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NameEntryButton {
    pub letter: ::core::ffi::c_char,
    pub effectUid: s32,
    pub color: Color3f,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_56 {
    pub state: ::core::ffi::c_int,
    pub counter: ::core::ffi::c_int,
    pub cursorPos: ::core::ffi::c_int,
    pub name: [::core::ffi::c_char; 4usize],
    pub unk10: ::core::ffi::c_int,
    pub unk14: ::core::ffi::c_int,
    pub unk18: f32,
    pub unk1C: f32,
    pub unk20: f32,
    pub unk24: f32,
    pub unk28: f32,
    pub unk2C: f32,
    pub unk30: f32,
    pub unk34: f32,
    pub unk38: f32,
    pub unk3C: f32,
}
pub const lbl_0000C230: u32_ = 1409286144;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Mouse {
    pub posHorizontal: s16,
    pub posVertical: s16,
    pub unk04: s16,
    pub unk06: s16,
    pub unk08: s16,
    pub unk0a: s16,
    pub spriteIdx: s16,
    pub unk0e: s16,
}
pub const NLMODEL_common_BSKBALL: _bindgen_ty_57 = 0;
pub const NLMODEL_common_BALL_B: _bindgen_ty_57 = 1;
pub const NLMODEL_common_BOX: _bindgen_ty_57 = 2;
pub const NLMODEL_common_BALL_SHADOW: _bindgen_ty_57 = 3;
pub const NLMODEL_common_GOAL_01: _bindgen_ty_57 = 4;
pub const NLMODEL_common_CUBE_B: _bindgen_ty_57 = 5;
pub const NLMODEL_common_BALL_BLK: _bindgen_ty_57 = 6;
pub const NLMODEL_common_GOAL_SIGN: _bindgen_ty_57 = 7;
pub const NLMODEL_common_shadow: _bindgen_ty_57 = 8;
pub const NLMODEL_common_TRIANGLE_XY: _bindgen_ty_57 = 9;
pub const NLMODEL_common_START_SIGN: _bindgen_ty_57 = 10;
pub const NLMODEL_common_hideball_mark: _bindgen_ty_57 = 11;
pub const NLMODEL_common_mmapring: _bindgen_ty_57 = 12;
pub const NLMODEL_common_mmapbase: _bindgen_ty_57 = 13;
pub const NLMODEL_common_GOAL_TAPE: _bindgen_ty_57 = 14;
pub const NLMODEL_common_PAPER_PIECE: _bindgen_ty_57 = 15;
pub const NLMODEL_common_SCENT_BAG_A: _bindgen_ty_57 = 16;
pub const NLMODEL_common_SCENT_BAG_B: _bindgen_ty_57 = 17;
pub const NLMODEL_common_SCENT_BAG_WHOLE: _bindgen_ty_57 = 18;
pub const NLMODEL_common_L_LCD_0: _bindgen_ty_57 = 19;
pub const NLMODEL_common_L_LCD_1: _bindgen_ty_57 = 20;
pub const NLMODEL_common_L_LCD_2: _bindgen_ty_57 = 21;
pub const NLMODEL_common_L_LCD_3: _bindgen_ty_57 = 22;
pub const NLMODEL_common_L_LCD_4: _bindgen_ty_57 = 23;
pub const NLMODEL_common_L_LCD_5: _bindgen_ty_57 = 24;
pub const NLMODEL_common_L_LCD_6: _bindgen_ty_57 = 25;
pub const NLMODEL_common_L_LCD_7: _bindgen_ty_57 = 26;
pub const NLMODEL_common_L_LCD_8: _bindgen_ty_57 = 27;
pub const NLMODEL_common_L_LCD_9: _bindgen_ty_57 = 28;
pub const NLMODEL_common_S_LCD_0: _bindgen_ty_57 = 29;
pub const NLMODEL_common_S_LCD_1: _bindgen_ty_57 = 30;
pub const NLMODEL_common_S_LCD_2: _bindgen_ty_57 = 31;
pub const NLMODEL_common_S_LCD_3: _bindgen_ty_57 = 32;
pub const NLMODEL_common_S_LCD_4: _bindgen_ty_57 = 33;
pub const NLMODEL_common_S_LCD_5: _bindgen_ty_57 = 34;
pub const NLMODEL_common_S_LCD_6: _bindgen_ty_57 = 35;
pub const NLMODEL_common_S_LCD_7: _bindgen_ty_57 = 36;
pub const NLMODEL_common_S_LCD_8: _bindgen_ty_57 = 37;
pub const NLMODEL_common_S_LCD_9: _bindgen_ty_57 = 38;
pub const NLMODEL_common_BALL_EDGE: _bindgen_ty_57 = 39;
pub const NLMODEL_common_TIMER_FIRE: _bindgen_ty_57 = 40;
pub const NLMODEL_common_YAZI_XYZ: _bindgen_ty_57 = 41;
pub const NLMODEL_common_OBJ_COLOR_BAR_03: _bindgen_ty_57 = 42;
pub const NLMODEL_common_circle_white: _bindgen_ty_57 = 43;
pub const NLMODEL_common_av_ball: _bindgen_ty_57 = 44;
pub const NLMODEL_common_COLI_CONE: _bindgen_ty_57 = 45;
pub const NLMODEL_common_COLI_CYLIN: _bindgen_ty_57 = 46;
pub const NLMODEL_common_COLI_SPHERE: _bindgen_ty_57 = 47;
pub const NLMODEL_common_button: _bindgen_ty_57 = 48;
pub const NLMODEL_common_button_base: _bindgen_ty_57 = 49;
pub const NLMODEL_common_lever: _bindgen_ty_57 = 50;
pub const NLMODEL_common_lever_base: _bindgen_ty_57 = 51;
pub const NLMODEL_common_MOT_STAGE003_BLUR: _bindgen_ty_57 = 52;
pub const NLMODEL_common_CROSS_LIGHT: _bindgen_ty_57 = 53;
pub const NLMODEL_common_AIRSHIP: _bindgen_ty_57 = 54;
pub const NLMODEL_common_BSKBALL_FACE: _bindgen_ty_57 = 55;
pub const NLMODEL_common_BSKBALL_L_HALF: _bindgen_ty_57 = 56;
pub const NLMODEL_common_BSKBALL_R_HALF: _bindgen_ty_57 = 57;
pub const NLMODEL_common_SPOT_LIGHT: _bindgen_ty_57 = 58;
pub const NLMODEL_common_spotl1: _bindgen_ty_57 = 59;
pub const NLMODEL_common_BSKBALL_L_HALF_LOW: _bindgen_ty_57 = 60;
pub const NLMODEL_common_BSKBALL_R_HALF_LOW: _bindgen_ty_57 = 61;
pub const NLMODEL_common_AIRSHIP_LOW: _bindgen_ty_57 = 62;
pub const NLMODEL_common_SPOT_LIGHT_MULTI: _bindgen_ty_57 = 63;
pub const NLMODEL_common_OBJ_BANANA_ENDING: _bindgen_ty_57 = 64;
pub type _bindgen_ty_57 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ColiSub24 {
    pub unk0: Point3d,
    pub unkC: f32,
    pub unk10: f32,
    pub unk14: s16,
    pub unk16: s16,
    pub unk18: s16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct UnkStruct {
    pub unk0: Point3d,
    pub unkC: s32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct InterpolateStuff {
    pub time: f32,
    pub val1: f32,
    pub val2: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FogParams {
    pub bgId: s8,
    pub unk1: u8_,
    pub filler2: u8_,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: GXColor,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LineInfo {
    pub lineWidth: u8_,
    pub blendMode: GXBlendMode,
    pub blendSrcFactor: GXBlendFactor,
    pub blendDstFactor: GXBlendFactor,
    pub blendLogicOp: GXLogicOp,
    pub texOffset: GXTexOffset,
    pub filler18: [u8_; 4usize],
}
impl Default for LineInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrawLineDeferredNode {
    pub node: OrdTblNode,
    pub mtx: Mtx,
    pub primType: GXPrimitive,
    pub vtxCount: u16_,
    pub points: *mut Point3d,
    pub color: GXColor,
    pub lineInfo: LineInfo,
}
impl Default for DrawLineDeferredNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrawLineMulticolorDeferredNode {
    pub node: OrdTblNode,
    pub mtx: Mtx,
    pub primType: GXPrimitive,
    pub vtxCount: u16_,
    pub points: *mut PointWithColor,
    pub lineInfo: LineInfo,
}
impl Default for DrawLineMulticolorDeferredNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct80092B98_child {
    pub unk0: u8_,
    pub unk4: GXTexObj,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct80092B98 {
    pub unk0: Vec,
    pub unkC: f32,
    pub unk10: Vec,
    pub unk1C: f32,
    pub unk20: Vec,
    pub unk2C: u16_,
    pub unk2E: u16_,
    pub unk30: f32,
    pub unk34: f32,
    pub unk38: GXColor,
    pub unk3C: *mut Struct80092B98_child,
}
impl Default for Struct80092B98 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct80092F90 {
    pub unk0: u16_,
    pub unk2: u16_,
    pub model: Struct80092F90__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Struct80092F90__bindgen_ty_1 {
    pub gma: *mut GMAModel,
    pub naomi: *mut NlModel,
}
impl Default for Struct80092F90__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for Struct80092F90 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SomeShadowStruct {
    pub unk0: Struct80092B98,
    pub unk40: f32,
    pub unk44: Vec,
    pub unk50: f32,
    pub unk54: f32,
    pub unk58: f32,
    pub unk5C: Vec,
    pub unk68: Vec,
    pub unk74: Vec,
    pub unk80: Mtx,
    pub unkB0: Mtx,
}
impl Default for SomeShadowStruct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_58 {
    pub unk0: u8_,
    pub filler1: [u8_; 3usize],
    pub unk4: s16,
    pub unk6: s16,
    pub unk8: u32_,
    pub unkC: s16,
    pub unkE: s16,
    pub unk10: u32_,
    pub unk14: s16,
    pub unk16: s16,
    pub unk18: u32_,
    pub unk1C: s16,
    pub unk1E: s16,
    pub unk20: u32_,
    pub unk24: s16,
    pub unk26: s16,
    pub unk28: u32_,
    pub unk2C: u32_,
    pub unk30: u8_,
    pub unk31: u8_,
    pub unk32: u8_,
    pub unk33: u8_,
    pub unk34: u8_,
    pub filler35: [u8_; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_59 {
    pub unk48: u32_,
    pub unk4C: u8_,
    pub unk4D: u8_,
    pub unk4E: u8_,
    pub unk4F: u8_,
    pub unk50: u8_,
    pub filler9: [u8_; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BananaInfo {
    pub modelLODs: *mut *mut ModelLOD,
    pub radius: f32,
    pub bananaValue: s16,
    pub unkA: s16,
    pub pointValue: s16,
    pub rotVelX: s16,
    pub rotVelY: s16,
    pub rotVelZ: s16,
}
impl Default for BananaInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const lbl_000260F0: u32_ = 0;
pub const VibrationState_VIBRATION_STATE_0: VibrationState = 0;
pub const VibrationState_VIBRATION_STATE_1: VibrationState = 1;
pub const VibrationState_VIBRATION_STATE_2: VibrationState = 2;
pub const VibrationState_VIBRATION_STATE_3: VibrationState = 3;
pub const VibrationState_VIBRATION_STATE_4: VibrationState = 4;
pub type VibrationState = ::core::ffi::c_uint;
pub const JUN_BUTTERFLY: _bindgen_ty_60 = 0;
pub const JUN_BUTTERFLY1: _bindgen_ty_60 = 1;
pub const JUN_BUTTERFLY1_LEFT: _bindgen_ty_60 = 2;
pub const JUN_BUTTERFLY1_RIGHT: _bindgen_ty_60 = 3;
pub const JUN_BUTTERFLY_LEFT: _bindgen_ty_60 = 4;
pub const JUN_BUTTERFLY_RIGHT: _bindgen_ty_60 = 5;
pub const JUN_CLOUD00A_NOCOLI: _bindgen_ty_60 = 6;
pub const JUN_CLOUD00B_NOCOLI: _bindgen_ty_60 = 7;
pub const JUN_CLOUD00C_NOCOLI: _bindgen_ty_60 = 8;
pub const JUN_CLOUD00D_NOCOLI: _bindgen_ty_60 = 9;
pub const JUN_CLOUD01_NOCOLI: _bindgen_ty_60 = 10;
pub const JUN_FLOWER_NOCOLI: _bindgen_ty_60 = 11;
pub const JUN_GOAL: _bindgen_ty_60 = 12;
pub const JUN_GROUND_NOCOLI: _bindgen_ty_60 = 13;
pub const JUN_MAME_NOCOLI: _bindgen_ty_60 = 14;
pub const JUN_SKY_NOCOLI: _bindgen_ty_60 = 15;
pub const JUN_TREE_A_NOCOLI: _bindgen_ty_60 = 16;
pub const JUN_TREE_B_NOCOLI: _bindgen_ty_60 = 17;
pub const JUN_TREE_C_NOCOLI: _bindgen_ty_60 = 18;
pub const MOV_TENTO_ASI_NOCOLI: _bindgen_ty_60 = 19;
pub const MOV_TENTO_NOCOLI: _bindgen_ty_60 = 20;
pub const JUN_GOAL_G: _bindgen_ty_60 = 21;
pub const JUN_GOAL_R: _bindgen_ty_60 = 22;
pub const JUN_BUMPER_L1: _bindgen_ty_60 = 23;
pub const JUN_BUMPER_L2: _bindgen_ty_60 = 24;
pub const JUN_PIYO: _bindgen_ty_60 = 25;
pub const JUN_FIG_CLOUD_A: _bindgen_ty_60 = 26;
pub const JUN_BOX: _bindgen_ty_60 = 27;
pub const JUN_GROUND_ADV: _bindgen_ty_60 = 28;
pub const JUN_GOL_SKY: _bindgen_ty_60 = 29;
pub type _bindgen_ty_60 = ::core::ffi::c_uint;
pub const STM_BOX: _bindgen_ty_61 = 0;
pub const STM_FIREBASE: _bindgen_ty_61 = 1;
pub const STM_PILLAR: _bindgen_ty_61 = 2;
pub const STM_SKY: _bindgen_ty_61 = 3;
pub const STM_STATUE00: _bindgen_ty_61 = 4;
pub const STM_STATUE01: _bindgen_ty_61 = 5;
pub const STM_STATUE02: _bindgen_ty_61 = 6;
pub const STM_TOWER: _bindgen_ty_61 = 7;
pub const STM_FIRE00: _bindgen_ty_61 = 8;
pub const STM_FIRE01: _bindgen_ty_61 = 9;
pub const STM_FIRE02: _bindgen_ty_61 = 10;
pub const STM_FIRE03: _bindgen_ty_61 = 11;
pub const STM_FIRE04: _bindgen_ty_61 = 12;
pub const STM_FIRE05: _bindgen_ty_61 = 13;
pub const STM_FIRE06: _bindgen_ty_61 = 14;
pub const STM_FIRE07: _bindgen_ty_61 = 15;
pub const STM_FIRE08: _bindgen_ty_61 = 16;
pub const STM_FIRE09: _bindgen_ty_61 = 17;
pub const STM_FIRE10: _bindgen_ty_61 = 18;
pub const STM_FIRE11: _bindgen_ty_61 = 19;
pub const STM_FIRE12: _bindgen_ty_61 = 20;
pub const STM_FIRE13: _bindgen_ty_61 = 21;
pub const STM_FIRE14: _bindgen_ty_61 = 22;
pub const STM_FIRE15: _bindgen_ty_61 = 23;
pub const STM_FIRE16: _bindgen_ty_61 = 24;
pub const STM_FIRE17: _bindgen_ty_61 = 25;
pub const STM_FIRE18: _bindgen_ty_61 = 26;
pub const STM_FIRE19: _bindgen_ty_61 = 27;
pub const STM_FIRE20: _bindgen_ty_61 = 28;
pub const STM_FIRE21: _bindgen_ty_61 = 29;
pub const STM_FIRE22: _bindgen_ty_61 = 30;
pub const STM_FIRE23: _bindgen_ty_61 = 31;
pub const STM_FIRE24: _bindgen_ty_61 = 32;
pub const STM_FIRE25: _bindgen_ty_61 = 33;
pub const STM_FIRE26: _bindgen_ty_61 = 34;
pub const STM_FIRE27: _bindgen_ty_61 = 35;
pub const STM_FIRE28: _bindgen_ty_61 = 36;
pub const STM_FIRE29: _bindgen_ty_61 = 37;
pub const STM_FIRE30: _bindgen_ty_61 = 38;
pub const STM_FIRE31: _bindgen_ty_61 = 39;
pub const STM_STATUE03: _bindgen_ty_61 = 40;
pub const STM_STATUE04: _bindgen_ty_61 = 41;
pub const STM_STATUE05: _bindgen_ty_61 = 42;
pub const STM_CIRCLE_BIG: _bindgen_ty_61 = 43;
pub const STM_CIRCLE_SMALL: _bindgen_ty_61 = 44;
pub const STM_RAIN00: _bindgen_ty_61 = 45;
pub const STM_RAIN01: _bindgen_ty_61 = 46;
pub const STM_RAIN02: _bindgen_ty_61 = 47;
pub type _bindgen_ty_61 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StobjFuncs {
    pub init: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>,
    pub main: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>,
    pub draw: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>,
    pub coli:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj, arg2: *mut PhysicsBall)>,
    pub destroy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>,
    pub unk14: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>,
}
pub const DMTexFlt_DMTF_POINTSAMPLE: DMTexFlt = 0;
pub const DMTexFlt_DMTF_BILERP: DMTexFlt = 1;
pub type DMTexFlt = ::core::ffi::c_uint;
pub const DMFontType_DM_FT_OPQ: DMFontType = 0;
pub const DMFontType_DM_FT_RVS: DMFontType = 1;
pub const DMFontType_DM_FT_XLU: DMFontType = 2;
pub type DMFontType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GoalTapeSegment {
    pub unk0: Vec,
    pub unkC: Vec,
    pub unk18: f32,
    pub unk1C: Vec,
    pub unk28: u32_,
    pub unk2C: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoalTape {
    pub u_flags: u32_,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: f32,
    pub u_breakTime: s32,
    pub stobj: *mut Stobj,
    pub segments: [GoalTapeSegment; 8usize],
}
impl Default for GoalTape {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoalBag {
    pub u_flags: u32_,
    pub open: f32,
    pub openSpeed: f32,
    pub stobj: *mut Stobj,
    pub goal: StageGoal,
    pub u_openTime: s32,
}
impl Default for GoalBag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Spline {
    pub start_x: ::core::ffi::c_long,
    pub start_y: f32,
    pub end_tangent: f32,
    pub start_tangent: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_62 {
    pub unk0: f32,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct80173FA8 {
    pub modelId: u32_,
    pub xrot: s16,
    pub yrot: s16,
    pub pos: Vec,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DepthMaskParams {
    pub unk0: f32,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: f32,
    pub unk10: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_63 {
    pub state: ::core::ffi::c_int,
    pub unused: ::core::ffi::c_int,
    pub angle: u32_,
    pub angleDelta: s32,
    pub scale: f32,
    pub scaleDelta: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct8027CC58_sub {
    pub unk0: s32,
    pub unk4: s32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct8027CC58 {
    pub unk0: [Struct8027CC58_sub; 4usize],
    pub unk20: s16,
    pub unk22: s16,
}
pub const CMD_IF: _bindgen_ty_64 = 0;
pub const CMD_THEN: _bindgen_ty_64 = 1;
pub const CMD_FLOOR: _bindgen_ty_64 = 2;
pub const CMD_COURSE_END: _bindgen_ty_64 = 3;
pub type _bindgen_ty_64 = ::core::ffi::c_uint;
pub const IF_FLOOR_CLEAR: _bindgen_ty_65 = 0;
pub const IF_GOAL_TYPE: _bindgen_ty_65 = 2;
pub type _bindgen_ty_65 = ::core::ffi::c_uint;
pub const THEN_JUMP_FLOOR: _bindgen_ty_66 = 0;
pub type _bindgen_ty_66 = ::core::ffi::c_uint;
pub const FLOOR_STAGE_ID: _bindgen_ty_67 = 0;
pub const FLOOR_TIME: _bindgen_ty_67 = 1;
pub type _bindgen_ty_67 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CourseCommand {
    pub opcode: u8_,
    pub type_: u8_,
    pub value: s32,
    pub filler8: [u8_; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Preview {
    pub state: u8_,
    pub isLoading: s8,
    pub flags: u16_,
    pub texObj: GXTexObj,
    pub imagePtr: *mut ::core::ffi::c_void,
    pub size: u32_,
    pub width: u16_,
    pub height: u16_,
    pub format: u32_,
    pub heap: OSHeapHandle,
    pub fileInfo: DVDFileInfo,
}
impl Default for Preview {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct802F0990 {
    pub stageId: s32,
    pub unk4: *mut DynamicStagePart,
}
impl Default for Struct802F0990 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const lbl_802F099C: ::core::ffi::c_int = -1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct80209D48 {
    pub unk0: u32_,
    pub unk4: *mut ::core::ffi::c_void,
    pub unk8: f32,
}
impl Default for Struct80209D48 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_68 {
    pub unk0: Vec,
    pub unkC: f32,
    pub unk10: f32,
    pub filler14: [u8_; 8usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PerfInfo {
    pub unk0: u32_,
    pub soundTime: u32_,
    pub inputTime: u32_,
    pub debugTime: u32_,
    pub loadTime: u32_,
    pub unk14: u32_,
    pub unk18: u32_,
    pub eventTime: u32_,
    pub polydispTime: u32_,
    pub bitmapTime: u32_,
    pub windowTime: u32_,
    pub gpwaitTime: u32_,
    pub unk30: u32_,
    pub unk34: u32_,
}
pub const lbl_0000BE80: u32_ = 3801147;
pub const lbl_0000C740: u32_ = 9896088;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderEffectBlur {
    pub texObj: GXTexObj,
    pub imageBuf: *mut ::core::ffi::c_void,
}
impl Default for RenderEffectBlur {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct8009557C_alt_sub {
    pub unk0: s32,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderEffectFocus {
    pub unk0: GXTexObj,
    pub unk20: *mut ::core::ffi::c_void,
    pub unk24: [Struct8009557C_alt_sub; 4usize],
}
impl Default for RenderEffectFocus {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderEffectKaleidoscope {
    pub unk0: s32,
    pub unk4: GXTexObj,
    pub unk24: GXTexObj,
    pub unk44: *mut ::core::ffi::c_void,
    pub unk48: *mut ::core::ffi::c_void,
}
impl Default for RenderEffectKaleidoscope {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const lbl_802F04A8: u32_ = 4294967295;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferInit {
    pub pbuffer: *mut *mut ::core::ffi::c_void,
    pub size: u32_,
}
impl Default for BufferInit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StringEntry {
    pub str_: *mut ::core::ffi::c_char,
    pub unk4: u32_,
}
impl Default for StringEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemCardMessage {
    pub lines: *mut StringEntry,
    pub numLines: ::core::ffi::c_int,
}
impl Default for MemCardMessage {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const MC_STATUS_MOUNTED: _bindgen_ty_69 = 1;
pub const MC_STATUS_OPEN: _bindgen_ty_69 = 2;
pub const MC_STATUS_SAVING: _bindgen_ty_69 = 16;
pub const MC_STATUS_LOADING: _bindgen_ty_69 = 32;
pub const MC_STATUS_ERROR: _bindgen_ty_69 = 512;
pub const MC_STATUS_REPLAY_FILE: _bindgen_ty_69 = 4096;
pub const MC_STATUS_GAMEDATA_FILE: _bindgen_ty_69 = 8192;
pub const MC_STATUS_WRITE_IN_PROGRESS: _bindgen_ty_69 = 2097152;
pub type _bindgen_ty_69 = ::core::ffi::c_uint;
pub const MC_STATE_UNK1: _bindgen_ty_70 = 1;
pub const MC_STATE_PROBE: _bindgen_ty_70 = 2;
pub const MC_STATE_MOUNT: _bindgen_ty_70 = 3;
pub const MC_STATE_CHECK_MOUNT_RESULT: _bindgen_ty_70 = 4;
pub const MC_STATE_VERIFY_FILESYSTEM: _bindgen_ty_70 = 5;
pub const MC_STATE_CHECK_VERIFY_FILESYSTEM_RESULT: _bindgen_ty_70 = 6;
pub const MC_STATE_OPEN_FILE: _bindgen_ty_70 = 8;
pub const MC_STATE_FORMAT_PROMPT: _bindgen_ty_70 = 9;
pub const MC_STATE_OVERWRITE_PROMPT: _bindgen_ty_70 = 13;
pub const MC_STATE_CHECK_CREATE_FILE_RESULT: _bindgen_ty_70 = 14;
pub const MC_STATE_GET_METADATA: _bindgen_ty_70 = 20;
pub const MC_STATE_CHECK_FREE_SPACE: _bindgen_ty_70 = 23;
pub const MC_STATE_CHECK_FREE_SPACE2: _bindgen_ty_70 = 30;
pub const MC_STATE_ERROR: _bindgen_ty_70 = 255;
pub type _bindgen_ty_70 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemcardInfo {
    pub fileNo: s32,
    pub sectorSize: s32,
    pub statusFlags: u32_,
    pub msg: *mut MemCardMessage,
    pub unused10: [u8_; 4usize],
    pub fileName: [::core::ffi::c_char; 36usize],
    pub time: OSTime,
    pub unk40: s16,
    pub unk42: u16_,
    pub unk44: u32_,
    pub fileSize: u32_,
    pub state: u8_,
    pub unk4D: u8_,
    pub cardFileInfo: CARDFileInfo,
    pub unused64: [u8_; 12usize],
}
impl Default for MemcardInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ReplayFileHeader {
    pub crc: u16_,
    pub replayFlags: u16_,
    pub unk4: u8_,
    pub difficulty: u8_,
    pub floorNum: u8_,
    pub character: u8_,
    pub unk8: u32_,
    pub timestamp: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ReplayFileInfo {
    pub header: ReplayFileHeader,
    pub fileSize: u32_,
    pub fileNo: s8,
}
#[repr(C)]
#[derive(Debug)]
pub struct _bindgen_ty_71 {
    pub header: ReplayFileHeader,
    pub bannerImg: [u8_; 6144usize],
    pub replayIcon: [u8_; 2048usize],
    pub comment: [::core::ffi::c_char; 32usize],
    pub unk2030: [::core::ffi::c_char; 32usize],
    pub compressedReplay: __IncompleteArrayField<u8_>,
}
impl Default for _bindgen_ty_71 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct8008AE2C {
    pub filler0: [u8_; 8usize],
    pub unk8: u32_,
    pub unkC: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ApeDrawNode {
    pub node: OrdTblNode,
    pub lightGroup: u32_,
    pub ape: *mut Ape,
    pub opacity: f32,
}
impl Default for ApeDrawNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801818D0 {
    pub u1: f32,
    pub v1: f32,
    pub u2: f32,
    pub v2: f32,
}
pub const lbl_0000FE78: u32_ = 1080016896;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderEffectFlatMirror {
    pub texObj: GXTexObj,
    pub format: GXTexFmt,
    pub imageBuf: *mut ::core::ffi::c_void,
    pub xres: u16_,
    pub yres: u16_,
    pub unk2C: Mtx,
    pub filler5C: [u8_; 4usize],
    pub unk60: u8_,
}
impl Default for RenderEffectFlatMirror {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderEffectWavyMirror {
    pub unk0: GXTexObj,
    pub format: GXTexFmt,
    pub xres: u16_,
    pub yres: u16_,
    pub unk28: *mut ::core::ffi::c_void,
    pub unk2C: Mtx,
    pub unk5C: Mtx,
    pub filler8C: [u8_; 4usize],
    pub unk90: u8_,
    pub unk94: GXTexObj,
    pub unkB4: *mut ::core::ffi::c_void,
}
impl Default for RenderEffectWavyMirror {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_72 {
    pub currPtr: *mut u8_,
    pub initPtr: *mut u8_,
    pub initSize: u32_,
    pub currSize: u32_,
}
impl Default for _bindgen_ty_72 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NLMODEL_bg_d_p_ST_D_WATER: _bindgen_ty_73 = 0;
pub const NLMODEL_bg_d_p_ST_D_WATER_BALL: _bindgen_ty_73 = 1;
pub const NLMODEL_bg_d_p_lightmap: _bindgen_ty_73 = 2;
pub const NLMODEL_bg_d_p_ST_D_WATER_TOP: _bindgen_ty_73 = 3;
pub const NLMODEL_bg_d_p_ST_D_BUBBLE: _bindgen_ty_73 = 4;
pub const NLMODEL_bg_d_p_ST_D_WATERLIGHT_01: _bindgen_ty_73 = 5;
pub const NLMODEL_bg_d_p_ST_D_WATERLIGHT_02: _bindgen_ty_73 = 6;
pub type _bindgen_ty_73 = ::core::ffi::c_uint;
pub const NLMODEL_bg_j_p_ST_J_BONUS: _bindgen_ty_74 = 0;
pub const NLMODEL_bg_j_p_ST_J_OBJ_STARLIGHT: _bindgen_ty_74 = 1;
pub const NLMODEL_bg_j_p_STARPOINT_0: _bindgen_ty_74 = 2;
pub const NLMODEL_bg_j_p_STARPOINT_211: _bindgen_ty_74 = 3;
pub const NLMODEL_bg_j_p_STARPOINT_212: _bindgen_ty_74 = 4;
pub const NLMODEL_bg_j_p_STARPOINT_213: _bindgen_ty_74 = 5;
pub const NLMODEL_bg_j_p_STARPOINT_214: _bindgen_ty_74 = 6;
pub const NLMODEL_bg_j_p_STARPOINT_215: _bindgen_ty_74 = 7;
pub const NLMODEL_bg_j_p_STARPOINT_216: _bindgen_ty_74 = 8;
pub const NLMODEL_bg_j_p_STARPOINT_217: _bindgen_ty_74 = 9;
pub const NLMODEL_bg_j_p_STARPOINT_218: _bindgen_ty_74 = 10;
pub const NLMODEL_bg_j_p_STARPOINT_219: _bindgen_ty_74 = 11;
pub const NLMODEL_bg_j_p_STARPOINT_220: _bindgen_ty_74 = 12;
pub const NLMODEL_bg_j_p_STARPOINT_221: _bindgen_ty_74 = 13;
pub const NLMODEL_bg_j_p_STARPOINT_222: _bindgen_ty_74 = 14;
pub const NLMODEL_bg_j_p_STARPOINT_223: _bindgen_ty_74 = 15;
pub const NLMODEL_bg_j_p_STARPOINT_224: _bindgen_ty_74 = 16;
pub const NLMODEL_bg_j_p_STARPOINT_225: _bindgen_ty_74 = 17;
pub const NLMODEL_bg_j_p_STARPOINT_226: _bindgen_ty_74 = 18;
pub const NLMODEL_bg_j_p_STARPOINT_227: _bindgen_ty_74 = 19;
pub const NLMODEL_bg_j_p_STARPOINT_228: _bindgen_ty_74 = 20;
pub const NLMODEL_bg_j_p_STARPOINT_229: _bindgen_ty_74 = 21;
pub const NLMODEL_bg_j_p_STARPOINT_230: _bindgen_ty_74 = 22;
pub const NLMODEL_bg_j_p_STARPOINT_231: _bindgen_ty_74 = 23;
pub const NLMODEL_bg_j_p_STARPOINT_232: _bindgen_ty_74 = 24;
pub const NLMODEL_bg_j_p_STARPOINT_233: _bindgen_ty_74 = 25;
pub const NLMODEL_bg_j_p_STARPOINT_234: _bindgen_ty_74 = 26;
pub const NLMODEL_bg_j_p_STARPOINT_235: _bindgen_ty_74 = 27;
pub const NLMODEL_bg_j_p_STARPOINT_236: _bindgen_ty_74 = 28;
pub const NLMODEL_bg_j_p_STARPOINT_237: _bindgen_ty_74 = 29;
pub const NLMODEL_bg_j_p_STARPOINT_238: _bindgen_ty_74 = 30;
pub const NLMODEL_bg_j_p_STARPOINT_239: _bindgen_ty_74 = 31;
pub const NLMODEL_bg_j_p_STARPOINT_240: _bindgen_ty_74 = 32;
pub const NLMODEL_bg_j_p_STARPOINT_241: _bindgen_ty_74 = 33;
pub const NLMODEL_bg_j_p_STARPOINT_242: _bindgen_ty_74 = 34;
pub const NLMODEL_bg_j_p_STARPOINT_243: _bindgen_ty_74 = 35;
pub const NLMODEL_bg_j_p_STARPOINT_244: _bindgen_ty_74 = 36;
pub const NLMODEL_bg_j_p_STARPOINT_245: _bindgen_ty_74 = 37;
pub const NLMODEL_bg_j_p_ST_J_OBJ_STAR: _bindgen_ty_74 = 38;
pub const NLMODEL_bg_j_p_ST_J_LIGHTMAP: _bindgen_ty_74 = 39;
pub const NLMODEL_bg_j_p_ST_J_MASTER: _bindgen_ty_74 = 40;
pub type _bindgen_ty_74 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RankingEntry {
    pub x: f32,
    pub unk4: f32,
    pub unk8: s32,
    pub unkC: *mut ScoreRecord,
    pub unk10: *mut ScoreRecord,
}
impl Default for RankingEntry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct802B37F0_sub3 {
    pub unk0: s8,
    pub unk2: s16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801C79C8 {
    pub unk0: f32,
    pub unk4: f32,
    pub unused: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RankingLetterBall {
    pub bmpId: s16,
    pub rotation: s16,
    pub unk4: s16,
    pub filler6: [u8_; 2usize],
    pub x: f32,
    pub unkC: f32,
    pub unk10: f32,
    pub unk14: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_75 {
    pub unk0: s32,
    pub unk4: u32_,
    pub unk8: s32,
    pub unkC: f32,
    pub unk10: f32,
    pub unk14: f32,
    pub unk18: u32_,
    pub unk1C: s32,
    pub letterBalls: [RankingLetterBall; 7usize],
    pub rankingEntries: [RankingEntry; 5usize],
    pub unk12C: s32,
    pub unk130: s32,
    pub unk134: Color3f,
    pub unk140: Color3f,
    pub unk14C: Color3f,
    pub unk158: Color3f,
    pub unk164: Struct802B37F0_sub3,
    pub unk168: *mut ::core::ffi::c_void,
}
impl Default for _bindgen_ty_75 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_76 {
    pub unk0: s32,
    pub unk4: u32_,
    pub unk8: f32,
    pub unkC: f32,
    pub unk10: f32,
    pub unk14: f32,
    pub unk18: s16,
    pub filler1A: [u8_; 2usize],
    pub replayHdr: ReplayHeader,
    pub unk34: u32_,
    pub unk38: u32_,
    pub floorName: [::core::ffi::c_char; 40usize],
}
impl Default for _bindgen_ty_76 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GameResultInfo {
    pub playPoints: s32,
    pub unk4: s32,
    pub unk8: s32,
    pub unlockedMinigames: u8_,
    pub lockedMinigames: u8_,
    pub canUnlockMinigame: s32,
    pub unk14: s32,
    pub unk18: s32,
    pub hasMaxContinues: s32,
    pub continues: u8_,
    pub unk24: s32,
    pub unk28: s32,
    pub unk2C: s32,
    pub unk30: s32,
    pub unk34: s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MyNode {
    pub node: OrdTblNode,
    pub lightGroup: u32_,
    pub effect: *mut Effect,
}
impl Default for MyNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct800341BC_4 {
    pub unk0: u32_,
    pub unk4: *mut u8_,
}
impl Default for Struct800341BC_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct80048084 {
    pub filler0: [u8_; 32usize],
    pub unk20: u32_,
    pub unk24: *mut GXTexObj,
}
impl Default for Struct80048084 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MinimapInfo {
    pub unused: u32_,
    pub state: s32,
    pub unk8: s16,
    pub unkA: u16_,
    pub unkC: f32,
    pub unk10: f32,
    pub unk14: f32,
    pub unk18: f32,
    pub zoomLevel: ::core::ffi::c_int,
    pub stageScale: f32,
    pub focusPos: Point3d,
    pub someX: s16,
    pub someY: s16,
    pub size: s16,
    pub rotation: s16,
    pub rotationVel: s16,
    pub unk3A: u16_,
    pub unk3C: f32,
    pub unk40: f32,
    pub unk44: f32,
    pub unk48: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_77 {
    pub unk0: Vec,
    pub unkC: f32,
    pub filler10: [u8_; 288usize],
}
impl Default for _bindgen_ty_77 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct800847FC {
    pub unk0: f32,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: f32,
    pub unk10: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TextBoxLine {
    pub unk0: s8,
    pub text: [::core::ffi::c_char; 129usize],
    pub unk82: s16,
}
impl Default for TextBoxLine {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_78 {
    pub isVtxTypeA: BOOL,
    pub unk4: u8_,
    pub unk5: u8_,
    pub unk6: u8_,
    pub unk7: u8_,
    pub unk8: u8_,
    pub meshType: u8_,
    pub unkA: u8_,
    pub fillerB: [u8_; 1usize],
    pub texObj: *mut GXTexObj,
    pub texMapId: GXTexMapID,
    pub materialColor: GXColor,
    pub ambientColor: GXColor,
    pub alpha: f32,
    pub unk20: u8_,
    pub filler21: [u8_; 3usize],
    pub unk24: u32_,
    pub unk28: u8_,
    pub filler29: [u8_; 11usize],
}
impl Default for _bindgen_ty_78 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_79 {
    pub materialColor: Color3f,
    pub unused1: f32,
    pub unused2: f32,
    pub unused3: f32,
    pub scale: f32,
    pub prevScale: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrawModelDeferredNode {
    pub node: OrdTblNode,
    pub model: *mut NlModel,
    pub viewFromModel: Mtx,
    pub materialColor: Color3f,
    pub lightGroup: u32_,
    pub ambientColor: Color3f,
    pub fogEnabled: u32_,
}
impl Default for DrawModelDeferredNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrawAlphaModelDeferredNode {
    pub node: OrdTblNode,
    pub model: *mut NlModel,
    pub viewFromModel: Mtx,
    pub materialColor: Color3f,
    pub alpha: f32,
    pub lightGroup: u32_,
    pub ambientColor: Color3f,
    pub fogEnabled: u32_,
}
impl Default for DrawAlphaModelDeferredNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SomeMessageThing2 {
    pub unk0: u32_,
    pub unk4: [s8; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ControlsTextbox {
    pub unk0: s8,
    pub x: s16,
    pub y: s16,
    pub text: *mut *mut ::core::ffi::c_char,
}
impl Default for ControlsTextbox {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SomeHelpThing {
    pub unk0: f32,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: f32,
    pub unk10: u32_,
}
pub type bool_ = ::core::ffi::c_int;
pub type SND_SEQID = u32_;
pub type SND_GROUPID = u16_;
pub type SND_VOICEID = u32_;
pub type SND_FXID = u16_;
pub const SND_OUTPUTMODE_SND_OUTPUTMODE_MONO: SND_OUTPUTMODE = 0;
pub const SND_OUTPUTMODE_SND_OUTPUTMODE_STEREO: SND_OUTPUTMODE = 1;
pub const SND_OUTPUTMODE_SND_OUTPUTMODE_SURROUND: SND_OUTPUTMODE = 2;
pub type SND_OUTPUTMODE = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SND_AUX_INFO {
    pub data: SND_AUX_INFO_SND_AUX_DATA,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SND_AUX_INFO_SND_AUX_DATA {
    pub bufferUpdate: SND_AUX_INFO_SND_AUX_DATA_SND_AUX_BUFFERUPDATE,
    pub parameterUpdate: SND_AUX_INFO_SND_AUX_DATA_SND_AUX_PARAMETERUPDATE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SND_AUX_INFO_SND_AUX_DATA_SND_AUX_BUFFERUPDATE {
    pub left: *mut s32,
    pub right: *mut s32,
    pub surround: *mut s32,
}
impl Default for SND_AUX_INFO_SND_AUX_DATA_SND_AUX_BUFFERUPDATE {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SND_AUX_INFO_SND_AUX_DATA_SND_AUX_PARAMETERUPDATE {
    pub para: [u16_; 4usize],
}
impl Default for SND_AUX_INFO_SND_AUX_DATA {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for SND_AUX_INFO {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SND_HOOKS {
    pub malloc:
        ::core::option::Option<unsafe extern "C" fn(addr: u32_) -> *mut ::core::ffi::c_void>,
    pub free: ::core::option::Option<unsafe extern "C" fn(addr: *mut ::core::ffi::c_void)>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SND_FVECTOR {
    pub x: f32_,
    pub y: f32_,
    pub z: f32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SND_FMATRIX {
    pub m: [[f32_; 3usize]; 3usize],
    pub t: [f32_; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SND_REVHI_DELAYLINE {
    pub inPoint: s32,
    pub outPoint: s32,
    pub length: s32,
    pub inputs: *mut f32_,
    pub lastOutput: f32_,
}
impl Default for _SND_REVHI_DELAYLINE {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SND_REVHI_WORK {
    pub AP: [_SND_REVHI_DELAYLINE; 9usize],
    pub C: [_SND_REVHI_DELAYLINE; 9usize],
    pub allPassCoeff: f32_,
    pub combCoef: [f32_; 9usize],
    pub lpLastout: [f32_; 3usize],
    pub level: f32_,
    pub damping: f32_,
    pub preDelayTime: s32,
    pub crosstalk: f32_,
    pub preDelayLine: [*mut f32_; 3usize],
    pub preDelayPtr: [*mut f32_; 3usize],
}
impl Default for _SND_REVHI_WORK {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SND_AUX_REVERBHI {
    pub rv: _SND_REVHI_WORK,
    pub tempDisableFX: u8_,
    pub coloration: f32_,
    pub mix: f32_,
    pub time: f32_,
    pub damping: f32_,
    pub preDelay: f32_,
    pub crosstalk: f32_,
}
impl Default for SND_AUX_REVERBHI {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SND_PARAMETER {
    pub ctrl: u8_,
    pub paraData: SND_PARAMETER__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SND_PARAMETER__bindgen_ty_1 {
    pub value7: u8_,
    pub value14: u16_,
}
impl Default for SND_PARAMETER__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for SND_PARAMETER {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SND_PARAMETER_INFO {
    pub numPara: u8_,
    pub paraArray: *mut SND_PARAMETER,
}
impl Default for SND_PARAMETER_INFO {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SAL_VOLINFO {
    pub volL: f32_,
    pub volR: f32_,
    pub volS: f32_,
    pub volAuxAL: f32_,
    pub volAuxAR: f32_,
    pub volAuxAS: f32_,
    pub volAuxBL: f32_,
    pub volAuxBR: f32_,
    pub volAuxBS: f32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SAL_PANINFO {
    pub pan_i: u32_,
    pub pan_im: u32_,
    pub span_i: u32_,
    pub span_im: u32_,
    pub rpan_i: u32_,
    pub rpan_im: u32_,
    pub pan_f: f32_,
    pub pan_fm: f32_,
    pub span_f: f32_,
    pub span_fm: f32_,
    pub rpan_f: f32_,
    pub rpan_fm: f32_,
}
pub type SND_AUX_CALLBACK = ::core::option::Option<
    unsafe extern "C" fn(reason: u8_, info: *mut SND_AUX_INFO, user: *mut ::core::ffi::c_void),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801FE498 {
    pub unk0: s16,
    pub unk2: s16,
    pub unk4: s8,
    pub unk5: s8,
    pub unk6: s8,
    pub unk7: s8,
    pub unk8: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct801B2A5C {
    pub unk0: *mut ::core::ffi::c_char,
    pub unk4: u32_,
    pub unk8: u32_,
    pub unkC: s8,
}
impl Default for Struct801B2A5C {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_80 {
    pub unk300: [u8_; 144usize],
    pub unk390: u32_,
    pub unk394: u32_,
    pub unk398: u32_,
}
impl Default for _bindgen_ty_80 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_81 {
    pub unk0: [[s8; 20usize]; 4usize],
    pub unk50: [_bindgen_ty_81__bindgen_ty_1; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_81__bindgen_ty_1 {
    pub unk0: s32,
    pub filler4: [u8_; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_82 {
    pub unk3C: u32_,
    pub unk40: u32_,
    pub unk44: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801B3938 {
    pub unk0: s32,
    pub unk4: s32,
}
pub const LIGHT_TYPE_INFINITE: _bindgen_ty_83 = 0;
pub const LIGHT_TYPE_POINT: _bindgen_ty_83 = 1;
pub const LIGHT_TYPE_SPOT: _bindgen_ty_83 = 2;
pub const LIGHT_TYPE_POINT_POW: _bindgen_ty_83 = 3;
pub const LIGHT_TYPE_SPOT_POW: _bindgen_ty_83 = 4;
pub const LIGHT_TYPE_POINT_DARKPOW: _bindgen_ty_83 = 5;
pub const LIGHT_TYPE_SPOT_DARKPOW: _bindgen_ty_83 = 6;
pub const LIGHT_TYPE_POINT_DARK: _bindgen_ty_83 = 7;
pub const LIGHT_TYPE_SPOT_DARK: _bindgen_ty_83 = 8;
pub type _bindgen_ty_83 = ::core::ffi::c_uint;
pub const LIGHT_ID_TEST: _bindgen_ty_84 = 0;
pub const LIGHT_ID_STAGE: _bindgen_ty_84 = 1;
pub const LIGHT_ID_BUMPER: _bindgen_ty_84 = 2;
pub const LIGHT_ID_AUTO: _bindgen_ty_84 = 3;
pub const LIGHT_ID_BG: _bindgen_ty_84 = 4;
pub const LIGHT_ID_BG_PILLAR: _bindgen_ty_84 = 5;
pub const LIGHT_ID_BG_WALL: _bindgen_ty_84 = 6;
pub const LIGHT_ID_BG_COUNTER: _bindgen_ty_84 = 7;
pub type _bindgen_ty_84 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct LightGroupInfo {
    pub u_someLGIdxToCopy: s32,
    pub flags: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_85 {
    pub unk0: f32,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GfxFileInfo {
    pub nlObjName: *mut ::core::ffi::c_char,
    pub nlTplName: *mut ::core::ffi::c_char,
    pub gmaName: *mut ::core::ffi::c_char,
    pub tplName: *mut ::core::ffi::c_char,
}
impl Default for GfxFileInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct80292C00 {
    pub unk0: s32,
    pub unk4: s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct80292C60 {
    pub unk0: s32,
    pub unk4: s32,
    pub unk8: u32_,
    pub fillerC: [u8_; 36usize],
}
impl Default for Struct80292C60 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TitleLetterOffset {
    pub pos: f32,
    pub vel: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TitleLetter {
    pub bmpId: u32_,
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801C17FC {
    pub unk0: f32,
    pub unk4: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_86 {
    pub unk0: u32_,
    pub name: *mut ::core::ffi::c_char,
    pub unk8: u32_,
}
impl Default for _bindgen_ty_86 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_87 {
    pub unk0: s16,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: s8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801C20EC {
    pub unk0: f32,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct80250B70 {
    pub isRecording: s16,
    pub prevBallPos: Vec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_88 {
    pub header: ReplayHeader,
    pub unk18: s16,
    pub frameCount: s16,
    pub unk1C: s16,
    pub goalEntered: s16,
    pub unk20: s16,
    pub unk22: s16,
    pub unk24: Vec,
    pub unk30: u32_,
    pub currFrameNum: u32_,
    pub unk38: Vec,
    pub frameData: [[u8_; 3840usize]; 24usize],
}
impl Default for _bindgen_ty_88 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_89 {
    pub unk0: s16,
    pub unk2: u16_,
    pub filler4: [u8_; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RLEHeader {
    pub unk0: u16_,
    pub flags: u16_,
    pub size: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct80086794 {
    pub unk0: s32,
    pub unk4: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FlareSpot {
    pub unk0: f32,
    pub scale: f32,
    pub modelId: s16,
}
pub const NIG_CITY00: _bindgen_ty_90 = 0;
pub const NIG_DINER00: _bindgen_ty_90 = 1;
pub const NIG_DINER00_NEON: _bindgen_ty_90 = 2;
pub const NIG_DINER01: _bindgen_ty_90 = 3;
pub const NIG_DINER01_NEON: _bindgen_ty_90 = 4;
pub const NIG_DINER02: _bindgen_ty_90 = 5;
pub const NIG_DINER02_NEON: _bindgen_ty_90 = 6;
pub const NIG_GROUND: _bindgen_ty_90 = 7;
pub const NIG_GROUND_SEP: _bindgen_ty_90 = 8;
pub const NIG_MADO_A_PT00: _bindgen_ty_90 = 9;
pub const NIG_MADO_A_PT01: _bindgen_ty_90 = 10;
pub const NIG_MADO_A_PT02: _bindgen_ty_90 = 11;
pub const NIG_MADO_A_PT03: _bindgen_ty_90 = 12;
pub const NIG_MADO_A_PT04: _bindgen_ty_90 = 13;
pub const NIG_MADO_A_PT05: _bindgen_ty_90 = 14;
pub const NIG_MADO_A_PT06: _bindgen_ty_90 = 15;
pub const NIG_MADO_A_PT07: _bindgen_ty_90 = 16;
pub const NIG_MADO_A_PT08: _bindgen_ty_90 = 17;
pub const NIG_MADO_A_PT09: _bindgen_ty_90 = 18;
pub const NIG_MADO_A_PT10: _bindgen_ty_90 = 19;
pub const NIG_MADO_A_PT11: _bindgen_ty_90 = 20;
pub const NIG_MADO_A_PT12: _bindgen_ty_90 = 21;
pub const NIG_MADO_A_PT13: _bindgen_ty_90 = 22;
pub const NIG_MADO_B_PT00: _bindgen_ty_90 = 23;
pub const NIG_MADO_B_PT01: _bindgen_ty_90 = 24;
pub const NIG_MADO_B_PT02: _bindgen_ty_90 = 25;
pub const NIG_MADO_B_PT03: _bindgen_ty_90 = 26;
pub const NIG_MADO_B_PT04: _bindgen_ty_90 = 27;
pub const NIG_MADO_B_PT05: _bindgen_ty_90 = 28;
pub const NIG_MADO_B_PT06: _bindgen_ty_90 = 29;
pub const NIG_MADO_B_PT07: _bindgen_ty_90 = 30;
pub const NIG_MADO_B_PT08: _bindgen_ty_90 = 31;
pub const NIG_MADO_B_PT09: _bindgen_ty_90 = 32;
pub const NIG_MADO_B_PT10: _bindgen_ty_90 = 33;
pub const NIG_MADO_C_PT00: _bindgen_ty_90 = 34;
pub const NIG_MADO_C_PT01: _bindgen_ty_90 = 35;
pub const NIG_MADO_C_PT02: _bindgen_ty_90 = 36;
pub const NIG_MADO_C_PT03: _bindgen_ty_90 = 37;
pub const NIG_MADO_C_PT04: _bindgen_ty_90 = 38;
pub const NIG_MADO_C_PT05: _bindgen_ty_90 = 39;
pub const NIG_MADO_C_PT06: _bindgen_ty_90 = 40;
pub const NIG_MADO_C_PT07: _bindgen_ty_90 = 41;
pub const NIG_MADO_C_PT08: _bindgen_ty_90 = 42;
pub const NIG_MADO_C_PT09: _bindgen_ty_90 = 43;
pub const NIG_MADO_C_PT10: _bindgen_ty_90 = 44;
pub const NIG_MADO_C_PT11: _bindgen_ty_90 = 45;
pub const NIG_MADO_C_PT12: _bindgen_ty_90 = 46;
pub const NIG_MADO_C_PT13: _bindgen_ty_90 = 47;
pub const NIG_MADO_C_PT14: _bindgen_ty_90 = 48;
pub const NIG_MADO_C_PT15: _bindgen_ty_90 = 49;
pub const NIG_MADO_C_PT16: _bindgen_ty_90 = 50;
pub const NIG_MADO_C_PT17: _bindgen_ty_90 = 51;
pub const NIG_MADO_D_PT00: _bindgen_ty_90 = 52;
pub const NIG_MADO_D_PT01: _bindgen_ty_90 = 53;
pub const NIG_MADO_D_PT02: _bindgen_ty_90 = 54;
pub const NIG_MADO_D_PT03: _bindgen_ty_90 = 55;
pub const NIG_MADO_D_PT04: _bindgen_ty_90 = 56;
pub const NIG_MADO_D_PT05: _bindgen_ty_90 = 57;
pub const NIG_MADO_D_PT06: _bindgen_ty_90 = 58;
pub const NIG_MADO_D_PT07: _bindgen_ty_90 = 59;
pub const NIG_MADO_D_PT08: _bindgen_ty_90 = 60;
pub const NIG_MADO_D_PT09: _bindgen_ty_90 = 61;
pub const NIG_MADO_D_PT10: _bindgen_ty_90 = 62;
pub const NIG_MADO_D_PT11: _bindgen_ty_90 = 63;
pub const NIG_MADO_D_PT12: _bindgen_ty_90 = 64;
pub const NIG_MADO_D_PT13: _bindgen_ty_90 = 65;
pub const NIG_MADO_D_PT14: _bindgen_ty_90 = 66;
pub const NIG_MADO_D_PT15: _bindgen_ty_90 = 67;
pub const NIG_MADO_D_PT16: _bindgen_ty_90 = 68;
pub const NIG_MADO_D_PT17: _bindgen_ty_90 = 69;
pub const NIG_MADO_E_PT00: _bindgen_ty_90 = 70;
pub const NIG_MADO_E_PT01: _bindgen_ty_90 = 71;
pub const NIG_MADO_E_PT02: _bindgen_ty_90 = 72;
pub const NIG_MADO_E_PT03: _bindgen_ty_90 = 73;
pub const NIG_MADO_E_PT04: _bindgen_ty_90 = 74;
pub const NIG_MADO_E_PT05: _bindgen_ty_90 = 75;
pub const NIG_MADO_E_PT06: _bindgen_ty_90 = 76;
pub const NIG_MADO_E_PT07: _bindgen_ty_90 = 77;
pub const NIG_MADO_E_PT08: _bindgen_ty_90 = 78;
pub const NIG_MADO_E_PT09: _bindgen_ty_90 = 79;
pub const NIG_MADO_E_PT10: _bindgen_ty_90 = 80;
pub const NIG_MADO_E_PT11: _bindgen_ty_90 = 81;
pub const NIG_MADO_E_PT12: _bindgen_ty_90 = 82;
pub const NIG_MADO_E_PT13: _bindgen_ty_90 = 83;
pub const NIG_MADO_E_PT14: _bindgen_ty_90 = 84;
pub const NIG_MADO_E_PT15: _bindgen_ty_90 = 85;
pub const NIG_MADO_E_PT16: _bindgen_ty_90 = 86;
pub const NIG_MADO_E_PT17: _bindgen_ty_90 = 87;
pub const NIG_MADO_E_PT18: _bindgen_ty_90 = 88;
pub const NIG_MADO_E_PT19: _bindgen_ty_90 = 89;
pub const NIG_MADO_E_PT20: _bindgen_ty_90 = 90;
pub const NIG_MADO_E_PT21: _bindgen_ty_90 = 91;
pub const NIG_MADO_F_PT00: _bindgen_ty_90 = 92;
pub const NIG_MADO_F_PT01: _bindgen_ty_90 = 93;
pub const NIG_MADO_F_PT02: _bindgen_ty_90 = 94;
pub const NIG_MADO_F_PT03: _bindgen_ty_90 = 95;
pub const NIG_MADO_F_PT04: _bindgen_ty_90 = 96;
pub const NIG_MADO_F_PT05: _bindgen_ty_90 = 97;
pub const NIG_MADO_F_PT06: _bindgen_ty_90 = 98;
pub const NIG_MADO_F_PT07: _bindgen_ty_90 = 99;
pub const NIG_MADO_F_PT08: _bindgen_ty_90 = 100;
pub const NIG_MADO_F_PT09: _bindgen_ty_90 = 101;
pub const NIG_MADO_F_PT10: _bindgen_ty_90 = 102;
pub const NIG_MADO_F_PT11: _bindgen_ty_90 = 103;
pub const NIG_MADO_F_PT12: _bindgen_ty_90 = 104;
pub const NIG_MADO_F_PT13: _bindgen_ty_90 = 105;
pub const NIG_MADO_F_PT14: _bindgen_ty_90 = 106;
pub const NIG_MADO_F_PT15: _bindgen_ty_90 = 107;
pub const NIG_MADO_G_PT00: _bindgen_ty_90 = 108;
pub const NIG_MADO_G_PT01: _bindgen_ty_90 = 109;
pub const NIG_MADO_G_PT02: _bindgen_ty_90 = 110;
pub const NIG_MADO_G_PT03: _bindgen_ty_90 = 111;
pub const NIG_MADO_G_PT04: _bindgen_ty_90 = 112;
pub const NIG_MADO_G_PT05: _bindgen_ty_90 = 113;
pub const NIG_MADO_G_PT06: _bindgen_ty_90 = 114;
pub const NIG_MADO_G_PT07: _bindgen_ty_90 = 115;
pub const NIG_MADO_G_PT08: _bindgen_ty_90 = 116;
pub const NIG_MADO_G_PT09: _bindgen_ty_90 = 117;
pub const NIG_MADO_G_PT10: _bindgen_ty_90 = 118;
pub const NIG_MADO_G_PT11: _bindgen_ty_90 = 119;
pub const NIG_MADO_G_PT12: _bindgen_ty_90 = 120;
pub const NIG_MADO_G_PT13: _bindgen_ty_90 = 121;
pub const NIG_MADO_G_PT14: _bindgen_ty_90 = 122;
pub const NIG_MOUNTAIN: _bindgen_ty_90 = 123;
pub const NIG_SIGN00: _bindgen_ty_90 = 124;
pub const NIG_SKY: _bindgen_ty_90 = 125;
pub const NIG_TREE: _bindgen_ty_90 = 126;
pub const NIG_BOX: _bindgen_ty_90 = 127;
pub type _bindgen_ty_90 = ::core::ffi::c_uint;
pub const lbl_0001C2B8: u32_ = 3212836864;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErrorString {
    pub text: *mut ::core::ffi::c_char,
    pub unused: s32,
}
impl Default for ErrorString {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErrorMessage {
    pub lines: *mut ErrorString,
    pub count: s32,
}
impl Default for ErrorMessage {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const MSG_COVER_OPEN: _bindgen_ty_91 = 0;
pub const MSG_NO_DISK: _bindgen_ty_91 = 1;
pub const MSG_WRONG_DISK: _bindgen_ty_91 = 2;
pub const MSG_READ_ERROR: _bindgen_ty_91 = 3;
pub const MSG_FATAL_ERROR: _bindgen_ty_91 = 4;
pub type _bindgen_ty_91 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PlayerRecordingStatus {
    pub replayIndex: s16,
    pub isRecording: s16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Replay {
    pub header: ReplayHeader,
    pub unk18: s16,
    pub frameCount: s16,
    pub unk1C: s16,
    pub goalEntered: s16,
    pub unk20: s16,
    pub unk24: Vec,
    pub unk30: s32,
    pub currFrame: s16,
    pub time: s16,
    pub ballFrames: [ReplayBallFrame; 720usize],
    pub worldFrames: [ReplayWorldFrame; 720usize],
}
impl Default for Replay {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_92 {
    pub replayIndex: s32,
    pub unk4: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_93 {
    pub grade: f32,
    pub unk4: Vec,
    pub unk10: Vec,
    pub unk1C: s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct802F1C28 {
    pub filler0: [u8_; 48usize],
    pub unk30: f32,
    pub unk34: f32,
    pub unk38: f32,
}
impl Default for Struct802F1C28 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PlayerViewport {
    pub left: f32,
    pub top: f32,
    pub width: f32,
    pub height: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801EFB94 {
    pub unk0: s32,
    pub unk4: s32,
    pub unk8: ReplayHeader,
}
pub const padding: u32_ = 0;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Vibration {
    pub state: u8_,
    pub timer: u16_,
}
pub const contEnableMask: u8_ = 15;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct BallPhysicsParams {
    pub oldModelId: s16,
    pub ballRadius: f32,
    pub unk8: f32,
    pub restitution: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BallDrawNode {
    pub node: OrdTblNode,
    pub unk8: u32_,
    pub ballId: u32_,
}
impl Default for BallDrawNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _bindgen_ty_94 {
    pub unk0: [u8_; 4usize],
    pub unk4: GXTexObj,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct80039320 {
    pub filler0: [u8_; 32usize],
    pub unk20: f32,
}
pub const IT_COIN: _bindgen_ty_95 = 0;
pub const IT_FGT_BANANA: _bindgen_ty_95 = 1;
pub const IT_MINI_RACE: _bindgen_ty_95 = 2;
pub const IT_FGT_POWER: _bindgen_ty_95 = 3;
pub const IT_FGT_PUNCH: _bindgen_ty_95 = 4;
pub const IT_PILOT: _bindgen_ty_95 = 5;
pub type _bindgen_ty_95 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FileLoadInfo {
    pub state: u32_,
    pub entryNum: u32_,
    pub dvdFile: DVDFileInfo,
    pub filler44: [u8_; 4usize],
    pub fileSize: u32_,
    pub fileOffset: u32_,
    pub bytesLeft: u32_,
    pub transferSize: u32_,
    pub cacheEntry: *mut FileCacheEntry,
}
impl Default for FileLoadInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const aramAllocEnd: u32_ = 7340032;
pub type UnkFunc = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StageViewInfo {
    pub eye: Vec,
    pub target: Vec,
    pub rotX: s16,
    pub rotY: s16,
    pub rotZ: s16,
    pub frameCounter: s16,
    pub unk20: f32,
    pub unk24: f32,
    pub stageBoundSphere: Sphere,
    pub unk38: s16,
    pub unk3A: s16,
    pub unk3C: s16,
    pub unk3E: s16,
    pub unk40: f32,
    pub animGroupsBackup: *mut AnimGroupInfo,
    pub unk48: f32,
}
impl Default for StageViewInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801D5854 {
    pub unk0: s32,
    pub unk4: Sphere,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801D404C_child {
    pub unk0: s32,
    pub unk4: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct801D404C {
    pub unk0: *mut ::core::ffi::c_char,
    pub unk4: f32,
    pub unk8: f32,
    pub unkC: u32_,
    pub unk10: *mut Struct801D404C_child,
    pub unk14: s32,
}
impl Default for Struct801D404C {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_96 {
    pub unk0: u32_,
    pub apePtrs: [*mut Ape; 4usize],
    pub apeThreads: [::core::ffi::c_int; 4usize],
    pub unk24: s8,
    pub unk25: [s8; 4usize],
    pub unk29: [s8; 4usize],
    pub unk2D: [s8; 4usize],
    pub tpl: *mut TPL,
    pub gma: *mut GMA,
    pub unk3C: Mtx,
    pub unk6C: *mut Ape,
    pub unk70: s32,
    pub unk74: u8_,
    pub unk75: s8,
    pub unk78: s32,
    pub unused: [u8_; 16usize],
}
impl Default for _bindgen_ty_96 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const CMD_BANANA_BOX: _bindgen_ty_97 = 0;
pub const CMD_HIDE_BANANA_BOXES: _bindgen_ty_97 = 1;
pub const CMD_FADE_FROM_WHITE: _bindgen_ty_97 = 2;
pub const CMD_FADE_TO_WHITE: _bindgen_ty_97 = 3;
pub const CMD_PRELOAD_BG: _bindgen_ty_97 = 4;
pub const CMD_LOAD_BG: _bindgen_ty_97 = 5;
pub const CMD_SET_DEMO_FLAG: _bindgen_ty_97 = 6;
pub const CMD_CLEAR_DEMO_FLAG: _bindgen_ty_97 = 7;
pub const CMD_SHOW_CHARACTER: _bindgen_ty_97 = 8;
pub const CMD_HIDE_CHARACTER: _bindgen_ty_97 = 9;
pub const CMD_PRELOAD_STAGE: _bindgen_ty_97 = 10;
pub const CMD_LOAD_STAGE: _bindgen_ty_97 = 11;
pub const CMD_UNK13: _bindgen_ty_97 = 13;
pub const CMD_INIT_CHARACTER_POS: _bindgen_ty_97 = 14;
pub const CMD_UNK15: _bindgen_ty_97 = 15;
pub const CMD_AIAI_ANIM: _bindgen_ty_97 = 16;
pub const CMD_MEEMEE_ANIM: _bindgen_ty_97 = 17;
pub const CMD_BABY_ANIM: _bindgen_ty_97 = 18;
pub const CMD_GONGON_ANIM: _bindgen_ty_97 = 19;
pub type _bindgen_ty_97 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IntroCutsceneCommand {
    pub time: s32,
    pub cmdId: u32_,
    pub param: s32,
}
pub const INFOCMD_CAMERA_SET_FLAGS: _bindgen_ty_98 = -1;
pub const INFOCMD_CAMERA_CLEAR_FLAGS: _bindgen_ty_98 = -2;
pub const INFOCMD_MINIMAP_SIZE: _bindgen_ty_98 = -3;
pub const INFOCMD_BALL_STATE: _bindgen_ty_98 = -4;
pub const INFOCMD_UNK5: _bindgen_ty_98 = -5;
pub const INFOCMD_FADE_FROM_BLACK: _bindgen_ty_98 = -6;
pub const INFOCMD_FADE_TO_BLACK: _bindgen_ty_98 = -7;
pub const INFOCMD_CAMERA_STATE: _bindgen_ty_98 = -8;
pub const INFOCMD_BALL_SET_FLAGS: _bindgen_ty_98 = -9;
pub const INFOCMD_BALL_CLEAR_FLAGS: _bindgen_ty_98 = -10;
pub const INFOCMD_HIDE_TEXTBOX: _bindgen_ty_98 = -11;
pub const INFOCMD_UNK12: _bindgen_ty_98 = -12;
pub const INFOCMD_PLAY_SOUND: _bindgen_ty_98 = -13;
pub type _bindgen_ty_98 = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InfoCommand {
    pub time: s16,
    pub cmdId: s8,
    pub jpText: *mut ::core::ffi::c_char,
    pub param: u32_,
}
impl Default for InfoCommand {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MinigameTestMenuItem {
    pub name: *mut ::core::ffi::c_char,
    pub submode: u16_,
    pub gameType: s8,
}
impl Default for MinigameTestMenuItem {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const HOUSE_BANANA: _bindgen_ty_99 = 0;
pub const AIAI_BNN: _bindgen_ty_99 = 1;
pub const END_BLUESKY_A: _bindgen_ty_99 = 2;
pub const END_CYL_CLOUD_B: _bindgen_ty_99 = 3;
pub const INSIDE_BANANA: _bindgen_ty_99 = 4;
pub const SEAL_BANANA: _bindgen_ty_99 = 5;
pub const STONE_GATE: _bindgen_ty_99 = 6;
pub const _DUMMY_7: _bindgen_ty_99 = 7;
pub const END_FUNSUI_WATER_A: _bindgen_ty_99 = 8;
pub const _DUMMY_9: _bindgen_ty_99 = 9;
pub const _DUMMY_10: _bindgen_ty_99 = 10;
pub const _DUMMY_11: _bindgen_ty_99 = 11;
pub const END_PARADISE_A: _bindgen_ty_99 = 12;
pub const END_MAME_TYPE_A: _bindgen_ty_99 = 13;
pub const END_TSUTA_TYPE_A: _bindgen_ty_99 = 14;
pub const END_CYL_CLOUD_C: _bindgen_ty_99 = 15;
pub const END_CYL_CLOUD_D: _bindgen_ty_99 = 16;
pub const _DUMMY_17: _bindgen_ty_99 = 17;
pub const END_STG_CLOUD_A: _bindgen_ty_99 = 18;
pub const END_YOUSAI_WATER_A: _bindgen_ty_99 = 19;
pub const END_YOUSAI_WATER_B: _bindgen_ty_99 = 20;
pub const END_YOUSAI_WATER_C: _bindgen_ty_99 = 21;
pub const END_YOUSAI_WATER_SPEC: _bindgen_ty_99 = 22;
pub const GAL_BNN: _bindgen_ty_99 = 23;
pub const KID_BNN: _bindgen_ty_99 = 24;
pub const END_TSUTA_TYPE_B: _bindgen_ty_99 = 25;
pub const END_YASHI_A: _bindgen_ty_99 = 26;
pub const END_YASHI_B: _bindgen_ty_99 = 27;
pub const END_YASHI_C: _bindgen_ty_99 = 28;
pub const BG_WALL: _bindgen_ty_99 = 29;
pub const WALL_PARTS: _bindgen_ty_99 = 30;
pub const END_CYL_CLOUD_E: _bindgen_ty_99 = 31;
pub const END_CYL_CLOUD_F: _bindgen_ty_99 = 32;
pub const END_CYL_CLOUD_G: _bindgen_ty_99 = 33;
pub const END_CYL_CLOUD_H: _bindgen_ty_99 = 34;
pub type _bindgen_ty_99 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct801E2A98 {
    pub unk0: Vec,
    pub unkC: S16Vec,
}
pub const ENDING_STATE_INIT: _bindgen_ty_100 = 0;
pub const ENDING_STATE_BEGINNER_INIT: _bindgen_ty_100 = 1;
pub const ENDING_STATE_ADVANCED_INIT: _bindgen_ty_100 = 7;
pub const ENDING_STATE_EXPERT_INIT: _bindgen_ty_100 = 13;
pub type _bindgen_ty_100 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Blah {
    pub unk0: s8,
    pub unk1: u8_,
    pub unk2: u8_,
    pub unk3: u8_,
    pub filler4: u32_,
    pub unk8: Vec,
    pub unk14: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EndingDrawNode {
    pub node: OrdTblNode,
    pub unk8: *mut EndingSceneCharacter,
}
impl Default for EndingDrawNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct801BDFA0 {
    pub lodModelsPtr: *mut *mut ModelLOD,
    pub unk4: s16,
    pub radius: f32,
    pub unkC: s16,
    pub unkE: s16,
    pub xrotSpeed: s16,
    pub yrotSpeed: s16,
    pub zrotSpeed: s16,
}
impl Default for Struct801BDFA0 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SandDrawNode {
    pub node: OrdTblNode,
    pub unk8: s32,
    pub unkC: *mut StageBgObject,
    pub unk10: Mtx,
}
impl Default for SandDrawNode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MyDrawNode2 {
    pub node: OrdTblNode,
    pub unk8: s32,
    pub unkC: s32,
}
impl Default for MyDrawNode2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct8005C3B8 {
    pub unk0: GXTexObj,
    pub unk20: *mut ::core::ffi::c_void,
    pub unk24: GXTexObj,
    pub unk44: *mut ::core::ffi::c_void,
    pub unk48: *mut GXTexObj,
}
impl Default for Struct8005C3B8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RangeInt {
    pub flags: u32_,
    pub min: s32,
    pub max: s32,
    pub delta: s32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RangeFloat {
    pub flags: u32_,
    pub min: f32,
    pub max: f32,
    pub delta: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowItem {
    pub type_: u32_,
    pub x: s32,
    pub y: s32,
    pub format: *mut ::core::ffi::c_char,
    pub pValue: *mut ::core::ffi::c_void,
    pub param: *mut ::core::ffi::c_void,
}
impl Default for WindowItem {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const WindowItemType_WI_SUBWINDOW: WindowItemType = 0;
pub const WindowItemType_WI_EDIT_U32: WindowItemType = 1;
pub const WindowItemType_WI_EDIT_S32: WindowItemType = 2;
pub const WindowItemType_WI_EDIT_U16: WindowItemType = 3;
pub const WindowItemType_WI_EDIT_S16: WindowItemType = 4;
pub const WindowItemType_WI_EDIT_U8: WindowItemType = 5;
pub const WindowItemType_WI_EDIT_S8: WindowItemType = 6;
pub const WindowItemType_WI_EDIT_F32: WindowItemType = 7;
pub const WindowItemType_WI_EDIT_BIT32: WindowItemType = 8;
pub const WindowItemType_WI_SETWINITEMS: WindowItemType = 9;
pub const WindowItemType_WI_EDIT_INDEX: WindowItemType = 10;
pub const WindowItemType_WI_OPENWIN: WindowItemType = 11;
pub const WindowItemType_WI_LABEL: WindowItemType = 13;
pub const WindowItemType_WI_U32: WindowItemType = 14;
pub const WindowItemType_WI_S32: WindowItemType = 15;
pub const WindowItemType_WI_U16: WindowItemType = 16;
pub const WindowItemType_WI_S16: WindowItemType = 17;
pub const WindowItemType_WI_U8: WindowItemType = 18;
pub const WindowItemType_WI_S8: WindowItemType = 19;
pub const WindowItemType_WI_F32: WindowItemType = 20;
pub const WindowItemType_WI_STRING: WindowItemType = 21;
pub const WindowItemType_WI_STRINGPTR: WindowItemType = 22;
pub const WindowItemType_WI_BIT32: WindowItemType = 23;
pub const WindowItemType_WI_BIT16: WindowItemType = 24;
pub const WindowItemType_WI_STRINGTABLE: WindowItemType = 25;
pub const WindowItemType_WI_INDEX: WindowItemType = 26;
pub const WindowItemType_WI_HEAPINFO: WindowItemType = 29;
pub const WindowItemType_WI_POOLSTATE: WindowItemType = 30;
pub const WindowItemType_WI_END: WindowItemType = 31;
pub type WindowItemType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowDesc {
    pub x: s32,
    pub y: s32,
    pub width: s32,
    pub height: s32,
    pub items: *mut WindowItem,
    pub structSize: u32_,
    pub structIndex: u32_,
    pub selection: s32,
    pub isActive: s32,
    pub unk24: s32,
    pub unk28: s32,
}
impl Default for WindowDesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const lbl_802F0980: u32_ = 32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OSSram {
    pub checkSum: u16_,
    pub checkSumInv: u16_,
    pub ead0: u32_,
    pub ead1: u32_,
    pub counterBias: u32_,
    pub displayOffsetH: s8,
    pub ntd: u8_,
    pub language: u8_,
    pub flags: u8_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OSSramEx {
    pub flashID: [[u8_; 12usize]; 2usize],
    pub wirelessKeyboardID: u32_,
    pub wirelessPadID: [u16_; 4usize],
    pub dvdErrorCode: u8_,
    pub _padding0: u8_,
    pub flashIDCheckSum: [u8_; 2usize],
    pub gbs: u16_,
    pub _padding1: [u8_; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapCell {
    pub prev: *mut HeapCell,
    pub next: *mut HeapCell,
    pub size: u32_,
}
impl Default for HeapCell {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Heap {
    pub size: s32,
    pub free: *mut HeapCell,
    pub allocated: *mut HeapCell,
}
impl Default for Heap {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CARDID {
    pub serial: [u8_; 32usize],
    pub deviceID: u16_,
    pub size: u16_,
    pub encode: u16_,
    pub padding: [u8_; 470usize],
    pub checkSum: u16_,
    pub checkSumInv: u16_,
}
impl Default for CARDID {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CARDDirCheck {
    pub padding0: [u8_; 56usize],
    pub padding1: u16_,
    pub checkCode: s16,
    pub checkSum: u16_,
    pub checkSumInv: u16_,
}
impl Default for CARDDirCheck {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type EXICallback =
    ::core::option::Option<unsafe extern "C" fn(chan: s32, context: *mut OSContext)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DecodeParameters {
    pub inputAddr: *mut u8_,
    pub inputLength: u32_,
    pub aramAddr: u32_,
    pub outputAddr: *mut u8_,
}
impl Default for DecodeParameters {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bb2struct {
    pub _00: u32_,
    pub _04: u32_,
    pub _08: s32,
    pub FSTMaxLength: u32_,
    pub FSTLocationInRam: *mut ::core::ffi::c_void,
}
impl Default for bb2struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DiskInfo {
    pub diskId: DVDDiskID,
    pub filler20: [u8_; 24usize],
    pub FSTLocationInRam: *mut ::core::ffi::c_void,
    pub FSTMaxLength: u32_,
}
impl Default for DiskInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDQueue_sub {
    pub unk0: *mut DVDQueue_sub,
    pub unk4: *mut DVDQueue_sub,
}
impl Default for DVDQueue_sub {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __GXLightObj {
    pub filler0: [u8_; 12usize],
    pub color: u32_,
    pub unk10: f32_,
    pub unk14: f32_,
    pub unk18: f32_,
    pub k0: f32_,
    pub k1: f32_,
    pub k2: f32_,
    pub posX: f32_,
    pub posY: f32_,
    pub posZ: f32_,
    pub dirX: f32_,
    pub dirY: f32_,
    pub dirZ: f32_,
}
pub type __builtin_va_list = [[u32; 3usize]; 1usize];
extern "C" {
    pub static mut string_No_Define: [::core::ffi::c_char; 10usize];
    pub static mut bmpComNames: [*mut ::core::ffi::c_char; 96usize];
    pub fn puts(s: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    pub fn printf(arg1: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    pub fn sprintf(
        s: *mut ::core::ffi::c_char,
        format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
    pub fn vprintf(
        format: *const ::core::ffi::c_char,
        arg: *mut [u32; 3usize],
    ) -> ::core::ffi::c_int;
    pub fn vsprintf(
        s: *mut ::core::ffi::c_char,
        format: *const ::core::ffi::c_char,
        arg: *mut [u32; 3usize],
    ) -> ::core::ffi::c_int;
    pub static mut __OSCurrHeap: OSHeapHandle;
    pub fn OSInitAlloc(
        arg1: *mut ::core::ffi::c_void,
        arg2: *mut ::core::ffi::c_void,
        arg3: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_void;
    pub fn OSCreateHeap(
        arg1: *mut ::core::ffi::c_void,
        arg2: *mut ::core::ffi::c_void,
    ) -> OSHeapHandle;
    pub fn OSSetCurrentHeap(arg1: OSHeapHandle) -> OSHeapHandle;
    pub fn OSAllocFromHeap(arg1: OSHeapHandle, arg2: u32_) -> *mut ::core::ffi::c_void;
    pub fn OSCheckHeap(arg1: OSHeapHandle) -> ::core::ffi::c_long;
    pub fn OSFreeToHeap(heap: OSHeapHandle, ptr: *mut ::core::ffi::c_void);
    pub fn LCEnable();
    pub fn DCInvalidateRange(addr: *mut ::core::ffi::c_void, nBytes: u32_);
    pub fn ICInvalidateRange(addr: *mut ::core::ffi::c_void, nBytes: u32_);
    pub fn DCFlushRange(addr: *mut ::core::ffi::c_void, nBytes: u32_);
    pub fn DCStoreRange(addr: *mut ::core::ffi::c_void, nBytes: u32_);
    pub fn OSGetStackPointer() -> u32_;
    pub fn OSDumpContext(context: *mut OSContext);
    pub fn OSLoadContext(context: *mut OSContext);
    pub fn OSSaveContext(context: *mut OSContext) -> u32_;
    pub fn OSClearContext(context: *mut OSContext);
    pub fn OSGetCurrentContext() -> *mut OSContext;
    pub fn OSSetCurrentContext(context: *mut OSContext);
    pub fn __OSSetInterruptHandler(
        interrupt: __OSInterrupt,
        handler: __OSInterruptHandler,
    ) -> __OSInterruptHandler;
    pub fn __OSUnmaskInterrupts(mask: OSInterruptMask) -> OSInterruptMask;
    pub fn OSSetStringTable(arg1: *mut ::core::ffi::c_void);
    pub fn OSLink(newModule: *mut OSModuleInfo, bss: *mut ::core::ffi::c_void) -> BOOL;
    pub fn OSUnlink(oldModule: *mut OSModuleInfo) -> BOOL;
    pub fn OSInitThreadQueue(queue: *mut OSThreadQueue);
    pub fn OSSleepThread(queue: *mut OSThreadQueue);
    pub fn OSWakeupThread(queue: *mut OSThreadQueue);
    pub fn OSSuspendThread(thread: *mut OSThread) -> s32;
    pub fn OSResumeThread(thread: *mut OSThread) -> s32;
    pub fn OSGetCurrentThread() -> *mut OSThread;
    pub fn OSGetFontEncode() -> u16_;
    pub fn OSInitFont(fontData: *mut OSFontHeader) -> BOOL;
    pub fn OSLoadFont(fontData: *mut OSFontHeader, temp: *mut ::core::ffi::c_void) -> u32_;
    pub fn OSGetFontTexture(
        string: *mut ::core::ffi::c_char,
        image: *mut *mut ::core::ffi::c_void,
        x: *mut s32,
        y: *mut s32,
        width: *mut s32,
    ) -> *mut ::core::ffi::c_char;
    pub fn OSGetFontWidth(
        string: *mut ::core::ffi::c_char,
        width: *mut s32,
    ) -> *mut ::core::ffi::c_char;
    pub fn OSGetFontTexel(
        string: *mut ::core::ffi::c_char,
        image: *mut ::core::ffi::c_void,
        pos: s32,
        stride: s32,
        width: *mut s32,
    ) -> *mut ::core::ffi::c_char;
    pub fn OSRegisterResetFunction(info: *mut OSResetFunctionInfo);
    pub fn OSResetSystem(reset: ::core::ffi::c_int, resetCode: u32_, forceMenu: BOOL);
    pub fn OSGetResetButtonState() -> BOOL;
    pub fn OSSetErrorHandler(error: OSError, handler: OSErrorHandler) -> OSErrorHandler;
    pub fn OSInit();
    pub fn OSGetArenaHi() -> *mut ::core::ffi::c_void;
    pub fn OSGetArenaLo() -> *mut ::core::ffi::c_void;
    pub fn OSSetArenaHi(arg1: *mut ::core::ffi::c_void);
    pub fn OSSetArenaLo(arg1: *mut ::core::ffi::c_void);
    pub fn OSGetPhysicalMemSize() -> u32_;
    pub fn OSGetTick() -> OSTick;
    pub fn OSGetTime() -> OSTime;
    pub fn OSTicksToCalendarTime(ticks: OSTime, td: *mut OSCalendarTime);
    pub fn OSEnableInterrupts() -> BOOL;
    pub fn OSDisableInterrupts() -> BOOL;
    pub fn OSRestoreInterrupts(level: BOOL) -> BOOL;
    pub fn OSGetSoundMode() -> u32_;
    pub fn OSSetSoundMode(mode: u32_);
    pub fn OSReport(arg1: *mut ::core::ffi::c_char, ...);
    pub fn OSPanic(
        file: *mut ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        msg: *mut ::core::ffi::c_char,
        ...
    );
    pub fn DSPInit();
    pub fn DSPCheckMailFromDSP() -> u32_;
    pub fn DSPCheckMailToDSP() -> u32_;
    pub fn DSPReadMailFromDSP() -> u32_;
    pub fn DSPSendMailToDSP(msg: u32_);
    pub fn DSPAddTask(task: *mut DSPTaskInfo) -> *mut DSPTaskInfo;
    pub fn DVDInit();
    pub fn DVDOpen(arg1: *mut ::core::ffi::c_char, arg2: *mut DVDFileInfo) -> BOOL;
    pub fn DVDClose(arg1: *mut DVDFileInfo) -> BOOL;
    pub fn DVDChangeDir(arg1: *mut ::core::ffi::c_char) -> BOOL;
    pub fn DVDFastOpen(entrynum: s32, fileInfo: *mut DVDFileInfo) -> BOOL;
    pub fn DVDReadAsyncPrio(
        fileInfo: *mut DVDFileInfo,
        addr: *mut ::core::ffi::c_void,
        length: s32,
        offset: s32,
        callback: DVDCallback,
        prio: s32,
    ) -> BOOL;
    pub fn DVDConvertPathToEntrynum(pathPtr: *mut ::core::ffi::c_char) -> s32;
    pub fn DVDCancel(block: *mut DVDCommandBlock) -> s32;
    pub fn DVDGetDriveStatus() -> s32;
    pub fn DVDOpenDir(dirName: *mut ::core::ffi::c_char, dir: *mut DVDDir) -> BOOL;
    pub fn DVDCloseDir(dir: *mut DVDDir) -> BOOL;
    pub fn DVDReadDir(dir: *mut DVDDir, dirent: *mut DVDDirEntry) -> BOOL;
    pub fn GXSetProjection(mtx: *mut [f32_; 4usize], type_: GXProjectionType);
    pub fn GXSetViewport(left: f32_, top: f32_, wd: f32_, ht: f32_, nearz: f32_, farz: f32_);
    pub fn GXLoadPosMtxImm(mtx: *mut [f32_; 4usize], id: u32_);
    pub fn GXLoadNrmMtxImm(mtx: *mut [f32_; 4usize], id: u32_);
    pub fn GXLoadTexMtxImm(mtx: *mut [f32_; 4usize], id: u32_, type_: GXTexMtxType);
    pub fn GXSetCurrentMtx(id: u32_);
    pub fn GXSetViewportJitter(
        left: f32_,
        top: f32_,
        wd: f32_,
        ht: f32_,
        nearz: f32_,
        farz: f32_,
        field: u32_,
    );
    pub fn GXSetScissorBoxOffset(x_off: s32, y_off: s32);
    pub fn GXSetClipMode(mode: GXClipMode);
    pub fn GXSetTevOp(id: GXTevStageID, mode: GXTevMode);
    pub fn GXSetTevColorIn(
        stage: GXTevStageID,
        a: GXTevColorArg,
        b: GXTevColorArg,
        c: GXTevColorArg,
        d: GXTevColorArg,
    );
    pub fn GXSetTevAlphaIn(
        stage: GXTevStageID,
        a: GXTevAlphaArg,
        b: GXTevAlphaArg,
        c: GXTevAlphaArg,
        d: GXTevAlphaArg,
    );
    pub fn GXSetTevColorOp(
        stage: GXTevStageID,
        op: GXTevOp,
        bias: GXTevBias,
        scale: GXTevScale,
        clamp: GXBool,
        out_reg: GXTevRegID,
    );
    pub fn GXSetTevAlphaOp(
        stage: GXTevStageID,
        op: GXTevOp,
        bias: GXTevBias,
        scale: GXTevScale,
        clamp: GXBool,
        out_reg: GXTevRegID,
    );
    pub fn GXSetTevColor(id: GXTevRegID, color: GXColor);
    pub fn GXSetTevKColor(id: GXTevKColorID, color: GXColor);
    pub fn GXSetTevKColorSel(stage: GXTevStageID, sel: GXTevKColorSel);
    pub fn GXSetTevKAlphaSel(stage: GXTevStageID, sel: GXTevKAlphaSel);
    pub fn GXSetTevSwapMode(stage: GXTevStageID, ras_sel: GXTevSwapSel, tex_sel: GXTevSwapSel);
    pub fn GXSetTevSwapModeTable(
        table: GXTevSwapSel,
        red: GXTevColorChan,
        green: GXTevColorChan,
        blue: GXTevColorChan,
        alpha: GXTevColorChan,
    );
    pub fn GXSetAlphaCompare(
        comp0: GXCompare,
        ref0: u8_,
        op: GXAlphaOp,
        comp1: GXCompare,
        ref1: u8_,
    );
    pub fn GXSetZTexture(op: GXZTexOp, fmt: GXTexFmt, bias: u32_);
    pub fn GXSetTevOrder(
        stage: GXTevStageID,
        coord: GXTexCoordID,
        map: GXTexMapID,
        color: GXChannelID,
    );
    pub fn GXSetNumTevStages(nStages: u8_);
    pub fn GXSetFog(
        type_: GXFogType,
        startz: f32_,
        endz: f32_,
        nearz: f32_,
        farz: f32_,
        color: GXColor,
    );
    pub fn GXSetFogRangeAdj(enable: GXBool, center: u16_, table: *mut GXFogAdjTable);
    pub fn GXSetBlendMode(
        type_: GXBlendMode,
        src_factor: GXBlendFactor,
        dst_factor: GXBlendFactor,
        op: GXLogicOp,
    );
    pub fn GXSetColorUpdate(update_enable: GXBool);
    pub fn GXSetAlphaUpdate(update_enable: GXBool);
    pub fn GXSetZMode(compare_enable: GXBool, func: GXCompare, update_enable: GXBool);
    pub fn GXSetZCompLoc(before_tex: GXBool);
    pub fn GXSetDither(dither: GXBool);
    pub fn GXSetDstAlpha(enable: GXBool, alpha: u8_);
    pub fn GXSetFieldMask(odd_mask: GXBool, even_mask: GXBool);
    pub fn GXSetFieldMode(field_mode: GXBool, half_aspect_ratio: GXBool);
    pub fn GXInitFifoBase(fifo: *mut GXFifoObj, base: *mut ::core::ffi::c_void, size: u32_);
    pub fn GXInitFifoPtrs(
        fifo: *mut GXFifoObj,
        readPtr: *mut ::core::ffi::c_void,
        writePtr: *mut ::core::ffi::c_void,
    );
    pub fn GXGetFifoPtrs(
        fifo: *mut GXFifoObj,
        readPtr: *mut *mut ::core::ffi::c_void,
        writePtr: *mut *mut ::core::ffi::c_void,
    );
    pub fn GXGetCPUFifo() -> *mut GXFifoObj;
    pub fn GXGetGPFifo() -> *mut GXFifoObj;
    pub fn GXSetCPUFifo(fifo: *mut GXFifoObj);
    pub fn GXSetGPFifo(fifo: *mut GXFifoObj);
    pub fn GXSaveCPUFifo(fifo: *mut GXFifoObj);
    pub fn GXGetFifoStatus(
        fifo: *mut GXFifoObj,
        overhi: *mut GXBool,
        underlow: *mut GXBool,
        fifoCount: *mut u32_,
        cpu_write: *mut GXBool,
        gp_read: *mut GXBool,
        fifowrap: *mut GXBool,
    );
    pub fn GXGetGPStatus(
        overhi: *mut GXBool,
        underlow: *mut GXBool,
        readIdle: *mut GXBool,
        cmdIdle: *mut GXBool,
        brkpt: *mut GXBool,
    );
    pub fn GXInitFifoLimits(fifo: *mut GXFifoObj, hiWaterMark: u32_, loWaterMark: u32_);
    pub fn GXInit(base: *mut ::core::ffi::c_void, size: u32_) -> *mut GXFifoObj;
    pub fn GXSetDrawDoneCallback(cb: GXDrawDoneCallback) -> GXDrawDoneCallback;
    pub fn GXDrawDone();
    pub fn GXSetDrawDone();
    pub fn GXFlush();
    pub fn GXSetScissor(left: u32_, top: u32_, wd: u32_, ht: u32_);
    pub fn GXSetCullMode(mode: GXCullMode);
    pub fn GXSetCoPlanar(enable: GXBool);
    pub fn GXSetVtxDesc(attr: GXAttr, type_: GXAttrType);
    pub fn GXClearVtxDesc();
    pub fn GXSetVtxAttrFmt(
        vtxfmt: GXVtxFmt,
        attr: GXAttr,
        cnt: GXCompCnt,
        type_: GXCompType,
        frac: u8_,
    );
    pub fn GXInvalidateVtxCache();
    pub fn GXSetNumTexGens(nTexGens: u8_);
    pub fn GXBegin(type_: GXPrimitive, vtxfmt: GXVtxFmt, nverts: u16_);
    pub fn GXSetTexCoordGen2(
        dst_coord: GXTexCoordID,
        func: GXTexGenType,
        src_param: GXTexGenSrc,
        mtx: u32_,
        normalize: GXBool,
        postmtx: u32_,
    );
    pub fn GXSetLineWidth(width: u8_, texOffsets: GXTexOffset);
    pub fn GXSetPointSize(pointSize: u8_, texOffsets: GXTexOffset);
    pub fn GXEnableTexOffsets(coord: GXTexCoordID, line_enable: GXBool, point_enable: GXBool);
    pub fn GXInitTexObj(
        obj: *mut GXTexObj,
        image_ptr: *mut ::core::ffi::c_void,
        width: u16_,
        height: u16_,
        format: GXTexFmt,
        wrap_s: GXTexWrapMode,
        wrap_t: GXTexWrapMode,
        mipmap: GXBool,
    );
    pub fn GXInitTexObjLOD(
        obj: *mut GXTexObj,
        min_filt: GXTexFilter,
        mag_filt: GXTexFilter,
        min_lod: f32_,
        max_lod: f32_,
        lod_bias: f32_,
        bias_clamp: GXBool,
        do_edge_lod: GXBool,
        max_aniso: GXAnisotropy,
    );
    pub fn GXLoadTexObj(obj: *mut GXTexObj, id: GXTexMapID);
    pub fn GXGetTexBufferSize(
        width: u16_,
        height: u16_,
        format: u32_,
        mipmap: GXBool,
        max_lod: u8_,
    ) -> u32_;
    pub fn GXInvalidateTexAll();
    pub fn GXInitTexObjWrapMode(obj: *mut GXTexObj, s: GXTexWrapMode, t: GXTexWrapMode);
    pub fn GXInitTexCacheRegion(
        region: *mut GXTexRegion,
        is_32b_mipmap: GXBool,
        tmem_even: u32_,
        size_even: GXTexCacheSize,
        tmem_odd: u32_,
        size_odd: GXTexCacheSize,
    );
    pub fn GXInitTlutRegion(region: *mut GXTlutRegion, tmem_addr: u32_, tlut_size: GXTlutSize);
    pub fn GXSetTexRegionCallback(f: GXTexRegionCallback) -> GXTexRegionCallback;
    pub fn GXSetTlutRegionCallback(f: GXTlutRegionCallback) -> GXTlutRegionCallback;
    pub fn GXSetNumChans(nChans: u8_);
    pub fn GXSetChanCtrl(
        chan: GXChannelID,
        enable: GXBool,
        amb_src: GXColorSrc,
        mat_src: GXColorSrc,
        light_mask: u32_,
        diff_fn: GXDiffuseFn,
        attn_fn: GXAttnFn,
    );
    pub fn GXSetChanAmbColor(chan: GXChannelID, amb_color: GXColor);
    pub fn GXSetChanMatColor(chan: GXChannelID, mat_color: GXColor);
    pub fn GXInitLightSpot(lt_obj: *mut GXLightObj, cutoff: f32_, spot_func: GXSpotFn);
    pub fn GXInitLightDistAttn(
        lt_obj: *mut GXLightObj,
        ref_distance: f32_,
        ref_brightness: f32_,
        dist_func: GXDistAttnFn,
    );
    pub fn GXInitLightPos(lt_obj: *mut GXLightObj, x: f32_, y: f32_, z: f32_);
    pub fn GXInitLightDir(lt_obj: *mut GXLightObj, nx: f32_, ny: f32_, nz: f32_);
    pub fn GXInitLightColor(lt_obj: *mut GXLightObj, color: GXColor);
    pub fn GXInitLightAttnK(lt_obj: *mut GXLightObj, k0: f32_, k1: f32_, k2: f32_);
    pub fn GXLoadLightObjImm(lt_obj: *mut GXLightObj, light: GXLightID);
    pub fn GXBeginDisplayList(list: *mut ::core::ffi::c_void, size: u32_);
    pub fn GXEndDisplayList() -> u32_;
    pub fn GXCallDisplayList(list: *mut ::core::ffi::c_void, nbytes: u32_);
    pub fn GXSetTevDirect(tev_stage: GXTevStageID);
    pub fn GXSetNumIndStages(nIndStages: u8_);
    pub fn GXSetIndTexMtx(mtx_sel: GXIndTexMtxID, offset: *mut [f32_; 3usize], scale_exp: s8);
    pub fn GXSetIndTexOrder(
        ind_stage: GXIndTexStageID,
        tex_coord: GXTexCoordID,
        tex_map: GXTexMapID,
    );
    pub fn GXSetTevIndirect(
        tev_stage: GXTevStageID,
        ind_stage: GXIndTexStageID,
        format: GXIndTexFormat,
        bias_sel: GXIndTexBiasSel,
        matrix_sel: GXIndTexMtxID,
        wrap_s: GXIndTexWrap,
        wrap_t: GXIndTexWrap,
        add_prev: GXBool,
        ind_lod: GXBool,
        alpha_sel: GXIndTexAlphaSel,
    );
    pub fn GXSetIndTexCoordScale(
        ind_state: GXIndTexStageID,
        scale_s: GXIndTexScale,
        scale_t: GXIndTexScale,
    );
    pub static mut GXNtsc480IntDf: GXRenderModeObj;
    pub static mut GXMpal480IntDf: GXRenderModeObj;
    pub static mut GXPal528IntDf: GXRenderModeObj;
    pub static mut GXEurgb60Hz480IntDf: GXRenderModeObj;
    pub fn GXSetCopyClear(clear_clr: GXColor, clear_z: u32_);
    pub fn GXAdjustForOverscan(
        rmin: *mut GXRenderModeObj,
        rmout: *mut GXRenderModeObj,
        hor: u16_,
        ver: u16_,
    );
    pub fn GXCopyDisp(dest: *mut ::core::ffi::c_void, clear: GXBool);
    pub fn GXSetDispCopyGamma(gamma: GXGamma);
    pub fn GXSetDispCopySrc(left: u16_, top: u16_, wd: u16_, ht: u16_);
    pub fn GXSetDispCopyDst(wd: u16_, ht: u16_);
    pub fn GXSetDispCopyYScale(vscale: f32_) -> u32_;
    pub fn GXSetCopyFilter(
        aa: GXBool,
        sample_pattern: *mut [u8_; 2usize],
        vf: GXBool,
        vfilter: *mut u8_,
    );
    pub fn GXSetPixelFmt(pix_fmt: GXPixelFmt, z_fmt: GXZFmt16);
    pub fn GXSetTexCopySrc(left: u16_, top: u16_, wd: u16_, ht: u16_);
    pub fn GXSetTexCopyDst(wd: u16_, ht: u16_, fmt: GXTexFmt, mipmap: GXBool);
    pub fn GXCopyTex(dest: *mut ::core::ffi::c_void, clear: GXBool);
    pub fn GXSetCopyClamp(clamp: GXFBClamp);
    pub fn GXClearBoundingBox();
    pub fn GXSetDispCopyFrame2Field(mode: GXCopyMode);
    pub fn GXGetTexObjMipMap(tex_obj: *mut GXTexObj) -> GXBool;
    pub fn GXGetTexObjFmt(tex_obj: *mut GXTexObj) -> GXTexFmt;
    pub fn GXGetTexObjHeight(tex_obj: *mut GXTexObj) -> u16_;
    pub fn GXGetTexObjWidth(tex_obj: *mut GXTexObj) -> u16_;
    pub fn GXGetTexObjWrapS(tex_obj: *mut GXTexObj) -> GXTexWrapMode;
    pub fn GXGetTexObjWrapT(tex_obj: *mut GXTexObj) -> GXTexWrapMode;
    pub fn GXGetTexObjData(tex_obj: *mut GXTexObj) -> *mut ::core::ffi::c_void;
    pub fn GXGetProjectionv(p: *mut f32_);
    pub fn GXGetLightPos(lt_obj: *mut GXLightObj, x: *mut f32_, y: *mut f32_, z: *mut f32_);
    pub fn GXGetLightColor(lt_obj: *mut GXLightObj, color: *mut GXColor);
    pub fn GXDrawSphere(numMajor: u8_, numMinor: u8_);
    pub fn GXReadXfRasMetric(
        xf_wait_in: *mut u32_,
        xf_wait_out: *mut u32_,
        ras_busy: *mut u32_,
        clocks: *mut u32_,
    );
    pub fn GXPokeColorUpdate(update_enable: GXBool);
    pub fn GXPokeAlphaUpdate(update_enable: GXBool);
    pub fn GXPokeDither(dither: GXBool);
    pub fn GXPokeBlendMode(
        type_: GXBlendMode,
        src_factor: GXBlendFactor,
        dst_factor: GXBlendFactor,
        op: GXLogicOp,
    );
    pub fn GXPokeAlphaMode(func: GXCompare, threshold: u8_);
    pub fn GXPokeAlphaRead(mode: GXAlphaReadMode);
    pub fn GXPokeDstAlpha(enable: GXBool, alpha: u8_);
    pub fn GXPokeZMode(compare_enable: GXBool, func: GXCompare, update_enable: GXBool);
    pub fn HIOReadMailbox(word: *mut u32_) -> BOOL;
    pub fn HIOWriteMailbox(word: u32_) -> BOOL;
    pub fn HIORead(addr: u32_, buffer: *mut ::core::ffi::c_void, size: s32) -> BOOL;
    pub fn HIOWrite(addr: u32_, buffer: *mut ::core::ffi::c_void, size: s32) -> BOOL;
    pub fn C_MTXFrustum(
        m: *mut [f32_; 4usize],
        t: f32_,
        b: f32_,
        l: f32_,
        r: f32_,
        n: f32_,
        f: f32_,
    );
    pub fn C_MTXOrtho(m: *mut [f32_; 4usize], t: f32_, b: f32_, l: f32_, r: f32_, n: f32_, f: f32_);
    pub fn C_MTXPerspective(m: *mut [f32_; 4usize], fovY: f32_, aspect: f32_, n: f32_, f: f32_);
    pub fn C_MTXScale(m: *mut [f32_; 4usize], xS: f32_, yS: f32_, zS: f32_);
    pub fn C_MTXLookAt(
        m: *mut [f32_; 4usize],
        camPos: Point3dPtr,
        camUp: VecPtr,
        target: Point3dPtr,
    );
    pub fn PSMTXIdentity(m: *mut [f32_; 4usize]);
    pub fn VIInit();
    pub fn VIConfigure(rm: *mut GXRenderModeObj);
    pub fn VIFlush();
    pub fn VIGetTvFormat() -> u32_;
    pub fn VISetNextFrameBuffer(fb: *mut ::core::ffi::c_void);
    pub fn VIWaitForRetrace();
    pub fn VISetBlack(black: BOOL);
    pub fn VIGetNextField() -> u32_;
    pub fn OSInitAlarm();
    pub fn OSCreateAlarm(alarm: *mut OSAlarm);
    pub fn OSSetAlarm(alarm: *mut OSAlarm, tick: OSTime, handler: OSAlarmHandler);
    pub fn OSCancelAlarm(alarm: *mut OSAlarm);
    pub fn CARDInit();
    pub fn CARDUnmount(chan: s32) -> s32;
    pub fn CARDCancel(fileInfo: *mut CARDFileInfo) -> s32;
    pub fn CARDOpen(
        chan: s32,
        fileName: *mut ::core::ffi::c_char,
        fileInfo: *mut CARDFileInfo,
    ) -> s32;
    pub fn CARDClose(fileInfo: *mut CARDFileInfo) -> s32;
    pub fn CARDProbeEx(chan: s32, memSize: *mut s32, sectorSize: *mut s32) -> s32;
    pub fn CARDMountAsync(
        chan: s32,
        workArea: *mut ::core::ffi::c_void,
        detachCallback: CARDCallback,
        attachCallback: CARDCallback,
    ) -> s32;
    pub fn CARDGetResultCode(chan: s32) -> s32;
    pub fn CARDCheckAsync(chan: s32, callback: CARDCallback) -> s32;
    pub fn CARDFreeBlocks(chan: s32, byteNotUsed: *mut s32, filesNotUsed: *mut s32) -> s32;
    pub fn CARDCreateAsync(
        chan: s32,
        fileName: *mut ::core::ffi::c_char,
        size: u32_,
        fileInfo: *mut CARDFileInfo,
        callback: CARDCallback,
    ) -> s32;
    pub fn CARDWriteAsync(
        fileInfo: *mut CARDFileInfo,
        addr: *mut ::core::ffi::c_void,
        length: s32,
        offset: s32,
        callback: CARDCallback,
    ) -> s32;
    pub fn CARDSetStatusAsync(
        chan: s32,
        fileNo: s32,
        stat: *mut CARDStat,
        callback: CARDCallback,
    ) -> s32;
    pub fn CARDReadAsync(
        fileInfo: *mut CARDFileInfo,
        addr: *mut ::core::ffi::c_void,
        length: s32,
        offset: s32,
        callback: CARDCallback,
    ) -> s32;
    pub fn CARDGetStatus(chan: s32, fileNo: s32, stat: *mut CARDStat) -> s32;
    pub fn CARDFastOpen(chan: s32, fileNo: s32, fileInfo: *mut CARDFileInfo) -> s32;
    pub fn CARDFastDeleteAsync(chan: s32, fileNo: s32, callback: CARDCallback) -> s32;
    pub fn CARDDeleteAsync(
        chan: s32,
        fileName: *mut ::core::ffi::c_char,
        callback: CARDCallback,
    ) -> s32;
    pub fn CARDRenameAsync(
        chan: s32,
        oldName: *mut ::core::ffi::c_char,
        newName: *mut ::core::ffi::c_char,
        callback: CARDCallback,
    ) -> s32;
    pub fn CARDMount(
        chan: s32,
        workArea: *mut ::core::ffi::c_void,
        detachCallback: CARDCallback,
    ) -> s32;
    pub fn CARDDelete(chan: s32, fileName: *mut ::core::ffi::c_char) -> s32;
    pub fn CARDRename(
        chan: s32,
        oldName: *mut ::core::ffi::c_char,
        newName: *mut ::core::ffi::c_char,
    ) -> s32;
    pub fn PERFInit(
        numSamples: u32_,
        numFramesHistory: u32_,
        numTypes: u32_,
        allocator: PERFAllocator,
        deallocator: PERFDeallocator,
        initDraw: PERFDrawCallback,
    ) -> u32_;
    pub fn PERFEventStart(id: PERFId);
    pub fn PERFEventEnd(id: PERFId);
    pub fn PERFSetEvent(id: PERFId, name: *mut ::core::ffi::c_char, type_: PerfType);
    pub fn PERFSetDrawBWBarKey(tf: BOOL);
    pub fn PERFDumpScreen();
    pub fn PERFStartFrame();
    pub fn PERFEndFrame();
    pub fn PERFStartAutoSampling(msInterval: f32_);
    pub fn PERFStopAutoSampling();
    pub fn PERFPreDraw();
    pub fn PERFPostDraw();
    pub fn ARInit(stack_index_addr: *mut u32_, num_entries: u32_) -> u32_;
    pub fn ARGetBaseAddress() -> u32_;
    pub fn ARGetSize() -> u32_;
    pub fn ARGetDMAStatus() -> u32_;
    pub fn ARStartDMA(type_: u32_, mainmem_addr: u32_, aram_addr: u32_, length: u32_);
    pub fn ARQInit();
    pub fn ARQPostRequest(
        task: *mut ARQRequest,
        owner: u32_,
        type_: u32_,
        priority: u32_,
        source: u32_,
        dest: u32_,
        length: u32_,
        callback: ARQCallback,
    );
    pub fn PPCHalt();
    pub fn PPCSync();
    pub fn PPCMthid2(newhid2: u32_);
    pub fn PPCMfhid2() -> u32_;
    pub fn PPCMtwpar(newwpar: u32_);
    pub fn DBInit();
    pub fn DEMORFPrintf(x: s16, y: s16, z: s16, fmt: *mut ::core::ffi::c_char, ...);
    pub fn DEMOGetRFTextWidth(string: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
    pub fn DEMOInitCaption(arg1: s32, arg2: s32, arg3: s32);
    pub fn DEMOInitROMFont() -> *mut OSFontHeader;
    pub fn DEMOSetROMFontSize(size: s16, space: s16);
    pub fn PADInit() -> BOOL;
    pub fn PADRead(status: *mut PADStatus) -> u32_;
    pub fn PADRecalibrate(mask: u32_) -> BOOL;
    pub fn PADReset(mask: u32_) -> BOOL;
    pub fn PADSetAnalogMode(mode: u32_);
    pub fn PADSetSamplingRate(msec: u32_);
    pub fn PADControlAllMotors(commandArray: *const u32_);
    pub fn PADControlMotor(chan: s32, command: u32_);
    pub fn PADSetSpec(spec: u32_);
    pub fn DTKInit();
    pub fn DTKQueueTrack(
        fileName: *mut ::core::ffi::c_char,
        track: *mut DTKTrack,
        eventMask: u32_,
        callback: DTKCallback,
    ) -> u32_;
    pub fn DTKRemoveTrack(track: *mut DTKTrack) -> u32_;
    pub fn DTKGetState() -> u32_;
    pub fn DTKSetState(state: u32_);
    pub fn DTKSetRepeatMode(repeat: u32_);
    pub fn DTKSetVolume(left: ::core::ffi::c_int, right: ::core::ffi::c_int);
    pub fn DTKPrevTrack();
    pub fn DTKNextTrack();
    pub fn AIRegisterDMACallback(arg1: AIDCallback) -> AIDCallback;
    pub fn AIInitDMA(start_addr: u32_, length: u32_);
    pub fn AIStartDMA();
    pub fn AIRegisterStreamCallback(arg1: AIDCallback) -> AIDCallback;
    pub fn AIGetStreamSampleCount() -> u32_;
    pub fn AIResetStreamSampleCount();
    pub fn AISetStreamPlayState(state: u32_);
    pub fn AIGetStreamPlayState() -> u32_;
    pub fn AISetDSPSampleRate(rate: u32_);
    pub fn AIGetDSPSampleRate() -> u32_;
    pub fn AISetStreamSampleRate(rate: u32_);
    pub fn AIGetStreamSampleRate() -> u32_;
    pub fn AISetStreamVolLeft(volume: u8_);
    pub fn AIGetStreamVolLeft() -> u8_;
    pub fn AISetStreamVolRight(volume: u8_);
    pub fn AIGetStreamVolRight() -> u8_;
    pub fn AIInit(stack: *mut u8_);
    pub fn initialize();
    pub fn init_gx();
    pub fn init_tv();
    pub fn init_vi();
    pub fn init_gx_2();
    pub fn init_dvd();
    pub fn init_heaps();
    pub fn init_rel();
    pub fn init_cache();
    pub fn init_cache_ptrs();
    pub fn u_menu_input_debug();
    pub fn u_menu_input_notdebug();
    pub fn submode_dummy_func();
    pub fn u_reset_gamedata();
    pub fn u_store_gamedata();
    pub fn u_load_gamedata();
    pub fn mode_sel_func();
    pub fn func_800123DC();
    pub fn submode_sel_ngc_dest_func();
    pub fn func_80012434(arg1: ::core::ffi::c_int);
    pub fn func_80012510(
        a: ::core::option::Option<unsafe extern "C" fn()>,
        b: ::core::option::Option<unsafe extern "C" fn()>,
        ballcb: BallCallback,
        cameracb: CameraCallback,
    );
    pub fn submode_sel_init_func();
    pub fn submode_sel_main_func();
    pub fn func_800125A4();
    pub fn clip_init_detail(
        arg1: *mut Vec,
        arg2: *mut S16Vec,
        arg3: f32,
        arg4: f32,
        arg5: f32,
        arg6: f32,
    );
    pub fn clip_z(a: *mut Vec, b: f32) -> BOOL;
    pub fn test_sphere_in_frustum(p: *mut Point3d, radius: f32) -> BOOL;
    pub fn test_scaled_sphere_in_frustum(p: *mut Point3d, radius: f32, scale: f32) -> BOOL;
    pub fn init_wait_vblank();
    pub fn beginframe_main();
    pub fn gpwait_main();
    pub fn syncwait_main();
    pub fn load_common_graphics() -> ::core::ffi::c_int;
    pub fn func_800249D4();
    pub fn u_free_minigame_graphics();
    pub fn debug_main();
    pub fn u_create_joints_from_skeleton(a: *mut AnimJoint, b: *mut Skeleton, c: u16_);
    pub fn u_load_new_anim_into_joints(a: *mut AnimJoint, b: u16_);
    pub fn init_ape_model_info(
        arg1: *mut ::core::ffi::c_char,
        arg2: *mut ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_char,
        arg4: *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn adjust_motdat_pointers(arg1: *mut MotDat);
    pub fn adjust_motlabel_pointers(arg1: *mut u32_);
    pub fn adjust_motskl_pointers(arg1: *mut SkeletonFileData);
    pub fn adjust_motinfo_pointers(arg1: *mut MotInfo);
    pub fn u_get_motdat_keyframe_count(index: u16_) -> u16_;
    pub fn u_interpolate_joint_motion(
        a: *mut AnimJoint,
        b: *const JointRotationSomething,
        c: *const JointPositionSomething,
        e: f32,
        d: u32_,
    );
    pub fn u_mot_joint_start_anim(arg1: *mut ApeAnimationThing);
    pub fn mot_joint_800355FC(arg1: *mut ApeAnimationThing);
    pub fn u_update_skel_anim(arg1: *mut ApeAnimationThing);
    pub fn u_joint_tree_calc_some_matrix();
    pub fn u_init_something_joints_from_something(
        arg0: *mut Struct8003699C_child_sub,
        arg1: *mut ApeAnimationThing,
        arg2: s32,
        arg3: u16_,
    );
    pub fn func_80035FDC(arg1: *mut ApeAnimationThing);
    pub fn u_animate_ape_hands(arg1: *mut ApeAnimationThing);
    pub fn func_80036510(arg1: *mut Struct8003699C_child_sub);
    pub fn u_create_joints_from_hardcoded_arrays(arg0: *mut AnimJoint, arg1: u16_, arg2: u16_);
    pub fn interpolate_keyframes(
        count: ::core::ffi::c_int,
        frames: *mut Keyframe,
        time: f32,
    ) -> f32;
    pub fn draw_stage_preview();
    pub fn u_apply_func_to_nl_model_vertices(
        model: *mut NlModel,
        b: ::core::option::Option<unsafe extern "C" fn(arg1: *mut NlVtxTypeB)>,
        c: ::core::option::Option<unsafe extern "C" fn(arg1: *mut NlVtxTypeA)>,
    );
    pub fn u_apply_func_to_nl_disp_list_type_b(
        dl: *mut NlDispList,
        end: *mut ::core::ffi::c_void,
        func: ::core::option::Option<unsafe extern "C" fn(arg1: *mut NlVtxTypeB)>,
    );
    pub fn u_apply_func_to_nl_disp_list_type_a(
        dl: *mut NlDispList,
        end: *mut ::core::ffi::c_void,
        func: ::core::option::Option<unsafe extern "C" fn(arg1: *mut NlVtxTypeA)>,
    );
    pub fn func_80048084(arg0: *mut NlModel, arg1: *mut NlModel, arg2: *mut f32);
    pub fn func_80048420();
    pub fn func_80081F30();
    pub fn help_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn u_something_with_eyes_blinking(arg1: *mut Ape);
    pub fn lzs_decompress(arg1: *mut u8_, arg2: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
    pub fn mode_mini_func();
    pub fn set_minigame_callbacks(
        arg0: ::core::option::Option<unsafe extern "C" fn()>,
        arg1: ::core::option::Option<unsafe extern "C" fn()>,
        ballCb: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Ball)>,
        cameraCb: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Camera, arg2: *mut Ball)>,
    );
    pub fn submode_mini_game_init_func();
    pub fn submode_mini_game_main_func();
    pub fn u_minigame_draw();
    pub fn func_80093B84();
    pub fn func_80093BB4();
    pub fn submode_mini_select_init_func();
    pub fn submode_mini_select_main_func();
    pub fn submode_mini_test0_init_func();
    pub fn submode_mini_test0_main_func();
    pub fn func_80093E28();
    pub fn submode_mini_ending_init_func();
    pub fn submode_mini_ending_main_func();
    pub fn u_draw_ending_viewer_text();
    pub fn func_80094750(arg1: ::core::ffi::c_int);
    pub fn func_800947B0();
    pub fn func_800947F8() -> ::core::ffi::c_int;
    pub fn func_80094840();
    pub fn func_80094870() -> *mut ::core::ffi::c_void;
    pub fn func_800948D0(arg1: *mut Struct80094870);
    pub fn func_800948F4();
    pub fn poly_shadow_init();
    pub fn set_poly_shadow(arg1: *mut PolyShadowUnit) -> ::core::ffi::c_int;
    pub fn poly_shadow_draw();
    pub fn submode_mini_commend_init_func();
    pub fn submode_mini_commend_main_func();
    pub fn func_8009BEF8();
    pub fn func_8009D5D8() -> ::core::ffi::c_int;
    pub fn func_8009D7CC() -> ::core::ffi::c_int;
    pub fn func_8009D7E8() -> ::core::ffi::c_int;
    pub fn func_8009D7FC(arg1: ::core::ffi::c_int, arg2: *mut Vec);
    pub fn func_8009D98C(arg1: *mut Vec);
    pub fn func_8009DB6C(arg1: *mut [f32_; 4usize]);
    pub fn func_8009DBB0(
        arg1: *mut Vec,
        arg2: *mut Struct8009DBB0,
        arg3: *mut Vec,
    ) -> ::core::ffi::c_int;
    pub fn func_800A5704();
    pub fn ev_view_init();
    pub fn ev_view_main();
    pub fn ev_view_dest();
    pub fn view_draw();
    pub fn view_draw_simple();
    pub fn view_create_text_sprites();
    pub fn view_destroy_text_sprites();
    pub fn view_init_stage_anim();
    pub fn view_animate_stage();
    pub fn func_800A66CC();
    pub fn func_800A66E4();
    pub fn func_800A66FC();
    pub fn func_800A671C();
    pub fn draw_items();
    pub fn draw_banana_shadows();
    pub fn draw_stage_geometry();
    pub fn draw_stage_objects();
    pub fn get_curr_stage_view_bounds(arg1: *mut Sphere);
    pub fn view_apply_camera(arg1: *mut Camera);
    pub fn submode_mini_ranking_init_func();
    pub fn submode_mini_ranking_main_func();
    pub fn avDVDErrorHandling();
    pub fn avDVDRead(
        file: *mut DVDFileInfo,
        arg1: *mut ::core::ffi::c_void,
        arg2: u32_,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn init_loading_gct();
    pub fn credits_finish();
    pub fn credits_init();
    pub fn credits_main();
    pub fn func_800B0B48();
    pub fn create_sel_stage_sprites();
    pub fn dummy_func_C90();
    pub fn dummy_func_C94();
    pub fn dummy_func_C98();
    pub fn sel_stage_draw();
    pub fn __GXSetDirtyState();
    pub static backgroundSongs: [s16; 0usize];
    pub static lbl_80114DD0: [*const JointRotationSomething; 0usize];
    pub static lbl_80114DE0: [*const JointPositionSomething; 0usize];
    pub static u_jointFlagLists: [*const u32_; 0usize];
    pub static lbl_80116634: [*const Struct8003699C_child_child; 0usize];
    pub static mut gameSubmodeFuncs: [::core::option::Option<unsafe extern "C" fn()>; 0usize];
    pub static mut lbl_801741CC: [f32; 0usize];
    pub static mut s_bilLightGroupNames: [GBilLightGroup; 0usize];
    pub static mut s_bgLightInfos: [BgLightInfo; 0usize];
    pub static mut sinTable: [f32; 0usize];
    pub static mut tanTable: [f32; 0usize];
    pub static mut unknownTrigTable: [f32; 0usize];
    pub static mut lbl_801B7CF8: [Color3f; 0usize];
    pub static mut lbl_801C63B0: [*mut BodyPartNameInfo; 0usize];
    pub static mut g_bodyPartCountsPerCharacter: [s32; 0usize];
    pub static mut apeGfxFileInfo: [ApeGfxFileInfo; 8usize];
    pub static mut DEMOFontBitmap: [u32_; 0usize];
    pub static mut lbl_801EED88: Struct801EED88;
    pub static mut lbl_801EEDA8: Struct801EEDA8;
    pub static mut stageInfo: Struct80206DEC;
    pub static mut animGroups: [AnimGroupInfo; 72usize];
    pub static mut lbl_802099E8: [Struct802099E8; 72usize];
    pub static mut lbl_8020A348: [Struct8020A348; 72usize];
    pub static mut lbl_8020AB88: [Struct8020A348; 72usize];
    pub static mut goalModels: [*mut GMAModel; 3usize];
    pub static mut stageBoundSphere: Sphere;
    pub static mut screenFadeInfo: ScreenFadeInfo;
    pub static mut apeIconInfo: ApeIconInfo;
    pub static mut fogInfo: FogInfo;
    pub static mut fontTexObj: GXTexObj;
    pub static mut lbl_802C5D60: Struct802C5D60;
    pub static mut lbl_802F02E8: [::core::ffi::c_char; 8usize];
    pub static mut s_otherReplayIndex: s32;
    pub static mut s_currReplayIndex: s32;
    pub static mut lbl_802F0310: [s8; 8usize];
    pub static mut loadedStageId: ::core::ffi::c_int;
    pub static mut camPerspAngle: f32;
    pub static mut g_minigameNlTpl: *mut TPL;
    pub static mut lbl_802F1AE4: *mut TPL;
    pub static mut g_bgNlTpl: *mut TPL;
    pub static mut g_stageNlTpl: *mut TPL;
    pub static mut g_commonNlTpl: *mut TPL;
    pub static mut g_minigameNlObj: *mut NlObj;
    pub static mut lbl_802F1AF8: *mut NlObj;
    pub static mut g_bgNlObj: *mut NlObj;
    pub static mut g_stageNlObj: *mut NlObj;
    pub static mut g_commonNlObj: *mut NlObj;
    pub static mut charaHeapSize: ::core::ffi::c_long;
    pub static mut backgroundHeapSize: ::core::ffi::c_long;
    pub static mut stageHeapSize: ::core::ffi::c_long;
    pub static mut subHeapSize: ::core::ffi::c_long;
    pub static mut mainHeapSize: ::core::ffi::c_long;
    pub static mut charaHeap: OSHeapHandle;
    pub static mut backgroundHeap: OSHeapHandle;
    pub static mut stageHeap: OSHeapHandle;
    pub static mut subHeap: OSHeapHandle;
    pub static mut mainHeap: OSHeapHandle;
    pub static mut currRenderMode: *mut GXRenderModeObj;
    pub static mut globalAnimTimer: u32_;
    pub static mut powerOnTimer: u32_;
    pub static mut userWork: *mut Struct802F1B3C;
    pub static mut lbl_802F1B40: *mut ::core::ffi::c_void;
    pub static mut lbl_802F1B44: *mut ::core::ffi::c_void;
    pub static mut dvdReadBuffer: *mut ::core::ffi::c_void;
    pub static mut lbl_802F1B4C: *mut NlModel;
    pub static mut mathutilData: *mut MathutilData;
    pub static mut lbl_802F1B98: s32;
    pub static mut lbl_802F1B9C: OSHeapHandle;
    pub static mut lbl_802F1BA0: s8;
    pub static mut lbl_802F1BA1: s8;
    pub static mut stageSelection: StageSelection;
    pub static mut lbl_802F1BE8: Struct802F1BE8;
    pub static mut lbl_802F1BF0: u32_;
    pub static mut lbl_802F1BF4: Struct802F1BF4;
    pub static mut lbl_802F1BFC: Struct802F1BFC;
    pub static mut lbl_802F1C04: Struct802F1C04;
    pub static mut lbl_802F1C0C: u8_;
    pub static mut g_unlockFlags: u8_;
    pub static mut lbl_802F1C10: Struct802F1C10;
    pub static mut lbl_802F1C18: s32;
    pub static mut lbl_802F1C1C: s32;
    pub static mut lbl_802F1C20: s32;
    pub static mut lbl_802F1C24: s8;
    pub static mut lbl_802F1C25: s8;
    pub static mut gfxBufferInfo: *mut GFXBufferInfo;
    pub static mut minigameGma: *mut GMA;
    pub static mut decodedBgGma: *mut GMA;
    pub static mut decodedBgTpl: *mut TPL;
    pub static mut commonGma: *mut GMA;
    pub static mut lbl_802F1C32: s8;
    pub static mut motDat: *mut MotDat;
    pub static mut blurBridgeAccordion: *mut GMAModel;
    pub static mut decodedStageLzPtr: *mut Stage;
    pub static mut u_stageBoxModel: *mut GMAModel;
    pub static mut decodedStageGmaPtr: *mut GMA;
    pub static mut decodedStageTplPtr: *mut TPL;
    pub static mut lbl_802F1F40: u16_;
    pub static mut dynamicStageParts: *mut DynamicStagePart;
    pub static mut animGroupCount: s32;
    pub static mut loadingStageIdRequest: s16;
    pub static mut loadingStageId: s16;
    pub static mut currStageId: s16;
    pub static mut lbl_802F1F80: ::core::ffi::c_int;
    pub static mut lbl_802F1FD4: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut lbl_802F1FF0: s32;
    pub static mut lbl_802F1FF6: s16;
    pub static mut jamabarModel: *mut GMAModel;
    pub static mut spriteClassMask: u32_;
    pub static mut lbl_802F2008: f32;
    pub static mut lbl_802F200C: f32;
    pub static mut lbl_802F2010: f32;
    pub static mut lbl_802F2014: f32;
    pub static mut lbl_802F2018: f32;
    pub static mut lbl_802F201C: f32;
    pub static mut nextApeIndex: u32_;
    pub static mut u_globalAnimSpeedScale: f32;
    pub static mut lbl_802F207C: s32;
    pub static mut apeFaceTpl: *mut TPL;
    pub static mut apeFaceObj: *mut NlObj;
    pub static mut motInfo: *mut MotInfo;
    pub static mut motsklFileData: *mut SkeletonFileData;
    pub static mut u_motAnimCount: s32;
    pub static mut motLabel: *mut u32_;
    pub static mut vtxAttrs: u32_;
    pub static mut gxCache: *mut GXCache;
    pub static mut fontShift: s32;
    pub static mut lbl_802F21D4: *mut OSFontHeader;
    pub static mut LastSheet: *mut ::core::ffi::c_void;
    pub static mut FontSize: s16;
    pub static mut FontSpace: s16;
    pub static mut camPerspChange: s32;
    pub static mut lbl_802F21EC: f32;
    pub static mut lbl_802F21F0: f32;
    pub static mut lbl_802F22C8: u32_;
    pub static pauseMenuItemCounts: [s8; 8usize];
    pub static mut introBackdropColor: u32_;
    pub static mut advSubmode: u32_;
    pub static mut lbl_802F1BC4: s32;
    pub static mut lbl_802F1BBC: [s16; 4usize];
    pub static mut lbl_802F1BB4: [s16; 4usize];
    pub static mut lbl_802F1BB0: s32;
    pub static mut lbl_802F1BA8: s32;
    pub static mut advLogoInfo: AdvLogoInfo;
    #[doc = " Demo Submode"]
    pub static mut advDemoInfo: AdvDemoInfo;
    #[doc = " Info Submode - Shows a tutorial explaining controls"]
    pub static mut advTutorialInfo: AdvTutorialInfo;
    pub fn mode_adv_func();
    #[doc = " Warning Submode - Displays memory card messages immediately upon bootup"]
    pub fn submode_adv_warning_init_func();
    pub fn submode_adv_warning_main_func();
    #[doc = " Rating Submode - Not used"]
    pub fn submode_adv_rating_init_func();
    pub fn submode_adv_rating_main_func();
    pub fn submode_adv_logo_init_func();
    pub fn submode_adv_logo_main_func();
    pub fn submode_adv_demo_init_func();
    pub fn submode_adv_demo_main_func();
    #[doc = " Title Submode"]
    pub fn submode_adv_title_init_func();
    pub fn submode_adv_title_reinit_func();
    pub fn submode_adv_title_main_func();
    pub fn submode_adv_info_init_func();
    pub fn submode_adv_info_main_func();
    pub fn submode_adv_game_ready_init_func();
    pub fn submode_adv_game_ready_main_func();
    pub fn submode_adv_game_play_init_func();
    pub fn submode_adv_game_play_main_func();
    pub fn submode_adv_ranking_init_func();
    pub fn submode_adv_ranking_main_func();
    #[doc = " Start Submode"]
    pub fn submode_adv_start_init_func();
    pub fn submode_adv_start_main_func();
    pub static mut eventInfo: [Event; 0usize];
    pub fn event_init();
    pub fn event_main();
    pub fn event_start(arg1: ::core::ffi::c_int);
    pub fn event_finish(arg1: ::core::ffi::c_int);
    pub fn event_suspend(arg1: ::core::ffi::c_int);
    pub fn event_resume(arg1: ::core::ffi::c_int);
    pub fn event_finish_all();
    pub fn mode_game_func();
    pub fn submode_game_first_init_func();
    pub fn submode_game_restart_init_func();
    pub fn submode_game_ready_init_func();
    pub fn submode_game_ready_main_func();
    #[doc = " Play Submode"]
    pub fn submode_game_play_init_func();
    pub fn submode_game_play_main_func();
    pub fn submode_game_goal_init_func();
    pub fn submode_game_goal_main_func();
    pub fn submode_game_goal_replay_init_func();
    pub fn submode_game_goal_replay_main_func();
    pub fn submode_game_continue_init_func();
    pub fn submode_game_continue_main_func();
    pub fn submode_game_timeover_init_func();
    pub fn submode_game_timeover_main_func();
    pub fn submode_game_ringout_init_func();
    pub fn submode_game_ringout_main_func();
    pub fn submode_game_bonus_clear_init_func();
    pub fn submode_game_bonus_clear_main_func();
    pub fn submode_game_over_init_func();
    pub fn submode_game_over_main_func();
    pub fn submode_game_over_point_init_func();
    pub fn submode_game_over_point_main_func();
    pub fn submode_game_over_save_func();
    pub fn submode_game_over_dest_func();
    pub fn submode_game_nameentry_ready_init_func();
    pub fn submode_game_nameentry_ready_main_func();
    pub fn submode_game_nameentry_init_func();
    pub fn submode_game_nameentry_main_func();
    pub fn submode_game_ending_init_func();
    pub fn submode_game_ending_main_func();
    #[doc = " Roll Submode - Credits (staff roll)"]
    pub fn submode_game_roll_init_func();
    pub fn submode_game_roll_main_func();
    pub fn submode_game_extra_init_func();
    pub fn submode_game_extra_wait_func();
    pub fn submode_game_result_init_func();
    pub fn submode_game_result_main_func();
    pub fn submode_game_result_menu_func();
    pub fn submode_game_intr_sel_init_func();
    pub fn submode_game_intr_sel_main_func();
    pub fn u_get_next_stage_id() -> ::core::ffi::c_int;
    pub fn u_get_next_stage_id_not_practice() -> ::core::ffi::c_int;
    pub fn lose_life() -> u32_;
    pub fn func_80017140();
    pub fn get_next_player() -> ::core::ffi::c_int;
    pub fn u_init_player_data_1();
    pub fn u_init_player_data_2();
    pub fn mark_player_finished(arg1: ::core::ffi::c_int);
    pub fn are_all_players_finished() -> BOOL;
    pub static mut controllerInfo: [ControllerInfo; 4usize];
    pub static mut lbl_801F3C60: [ControllerInfo; 4usize];
    pub static mut analogInputs: [AnalogInput; 4usize];
    pub static mut g_currPlayerButtons: [u16_; 6usize];
    pub static mut g_currPlayerAnalogButtons: [u16_; 6usize];
    pub fn input_init();
    pub fn input_main();
    pub fn func_80025158(arg1: *mut PADStatus);
    pub fn handle_analog_inputs();
    pub fn get_key_repeats();
    pub fn func_80025640();
    pub fn handle_reset_input(arg1: *mut PADStatus);
    pub fn func_80025B1C(arg1: *mut CoordsS8, arg2: *mut s8);
    pub fn save_input_data(arg1: *mut MemcardContents);
    pub fn load_input_data(arg1: *const MemcardContents);
    pub fn file_open(filename: *const ::core::ffi::c_char, file: *mut File) -> BOOL;
    pub fn file_close(file: *mut File) -> BOOL;
    pub fn file_read(
        file: *mut File,
        dest: *mut ::core::ffi::c_void,
        size: u32_,
        offset: u32_,
    ) -> s32;
    pub fn file_size(file: *mut File) -> u32_;
    pub fn load_main();
    pub fn file_preload(filename: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    pub fn is_load_queue_not_empty() -> ::core::ffi::c_int;
    pub fn empty_load_queue();
    pub fn get_load_queue_count() -> ::core::ffi::c_int;
    pub fn empty_file_cache();
    pub static mut modeCtrl: ModeControl;
    pub static mut gameMode: s16;
    pub static mut gameModeRequest: s16;
    pub static mut gameSubmode: s16;
    pub static mut gameSubmodeRequest: s16;
    pub static mut modeStringPtr: *mut ::core::ffi::c_void;
    pub static mut submodeStringPtr: *mut ::core::ffi::c_void;
    pub static mut lbl_802F1B70: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut lbl_802F1B74: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut lbl_802F1B78: s32;
    pub static mut submodeFinishFunc: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut unusedCallback: ::core::option::Option<unsafe extern "C" fn()>;
    pub fn gm_init();
    pub fn gm_main();
    pub static mut pauseMenuState: PauseMenuState;
    pub fn u_menu_input_game_notdebug();
    pub fn relocation_load_module(name: *mut ::core::ffi::c_char, link: *mut RelModule);
    pub fn relocation_unload_module(link: *mut RelModule);
    pub static mut spriteWork: [Sprite; 64usize];
    pub static mut fontInfo: [FontParams; 0usize];
    pub static mut fontStrArray: [*mut ::core::ffi::c_char; 0usize];
    pub fn ev_sprite_init();
    pub fn ev_sprite_main();
    pub fn ev_sprite_dest();
    pub fn func_800700D8(a: ::core::ffi::c_int);
    pub fn func_800702C8(sprite: *mut Sprite);
    pub fn u_something_with_sprites(a: *mut Sprite);
    pub fn call_bitmap_load_group(a: ::core::ffi::c_int);
    pub fn call_bitmap_free_group(a: ::core::ffi::c_int);
    pub fn free_all_bitmap_groups_except_com();
    pub fn create_sprite() -> *mut Sprite;
    pub fn create_child_sprite(a: *mut Sprite) -> *mut Sprite;
    pub fn destroy_sprite_with_tag(a: ::core::ffi::c_int);
    pub fn destroy_all_sprites();
    pub fn find_sprite_with_tag(a: ::core::ffi::c_int) -> *mut Sprite;
    pub fn calc_sprite_bounds(
        arg1: *mut Sprite,
        arg2: *mut s32,
        arg3: *mut s32,
        arg4: *mut s32,
        arg5: *mut s32,
    );
    pub fn get_char_width(
        a: *mut ::core::ffi::c_char,
        b: ::core::ffi::c_int,
        c: *mut FontParams,
    ) -> ::core::ffi::c_int;
    pub fn u_get_char_ratio(a: *mut ::core::ffi::c_char, b: ::core::ffi::c_int) -> f32;
    pub fn reset_text_draw_settings();
    pub fn set_text_font(fontId: ::core::ffi::c_int);
    pub fn set_text_mul_color(color: u32_);
    pub fn set_text_add_color(color: u32_);
    pub fn func_80071B1C(arg1: f32);
    pub fn set_text_scale(scaleX: f32, scaleY: f32);
    pub fn set_text_opacity(opacity: f32);
    pub fn func_80071B50();
    pub fn set_text_pos(x: f32, y: f32);
    pub fn sprite_putc(chr: ::core::ffi::c_char);
    pub fn sprite_puts(str_: *mut ::core::ffi::c_char);
    pub fn u_get_text_width(str_: *mut ::core::ffi::c_char) -> f32;
    pub fn sprite_printf(str_: *mut ::core::ffi::c_char, ...);
    pub fn u_draw_text_sprite(a: *mut Sprite);
    pub fn draw_bitmap_sprite(a: *mut Sprite);
    pub fn u_get_ascii_text_width(str_: *mut ::core::ffi::c_char) -> f32;
    pub fn u_get_jpn_text_width(
        fontId: ::core::ffi::c_int,
        str_: *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn u_draw_screen_fade_mask();
    pub fn start_screen_fade(arg1: s32, arg2: u32_, arg3: ::core::ffi::c_int);
    pub fn nlSprPut(arg1: *mut NLsprarg) -> ::core::ffi::c_int;
    pub fn func_80073E00(bmpId: ::core::ffi::c_int, s: GXTexWrapMode, t: GXTexWrapMode);
    pub static mut debugFlags: u32_;
    pub static mut dipSwitches: u32_;
    pub static mut lbl_802F1ED8: u32_;
    pub static mut lbl_802F1ED4: u16_;
    pub static mut lbl_802F1ED2: u16_;
    pub static mut lbl_802F1ED0: u16_;
    pub static mut lbl_802F1ECC: f32;
    pub static mut lbl_802F1EC8: f32;
    pub static mut lbl_802F1EC4: f32;
    pub static mut lbl_802F1EC0: f32;
    pub static mut lbl_802F1EBC: f32;
    pub static mut lbl_802F1EB8: f32;
    pub static mut lbl_802F1EB4: s32;
    pub static mut lbl_802F1EB0: s32;
    pub static mut lbl_802F1EAC: u32_;
    pub static mut lbl_802F1EA8: u32_;
    pub static mut lbl_802F1EA4: *mut ::core::ffi::c_char;
    pub static mut lbl_802F1EA2: u16_;
    pub static mut lbl_802F1EA0: u16_;
    pub static mut lbl_802F1E9C: u32_;
    pub static mut lbl_802F1E98: u32_;
    pub static mut lbl_802F1E94: u32_;
    pub static mut lbl_802F1E90: u32_;
    pub static mut lbl_802F1E8C: u32_;
    pub static mut lbl_802F1E88: u32_;
    pub static mut lbl_802F1E84: u32_;
    pub static mut lbl_802F1E80: u32_;
    pub static mut lbl_802F1E7C: u32_;
    pub static mut lbl_802F1E78: f32;
    pub static mut lbl_802F1E74: f32;
    pub static mut lbl_802F1E70: f32;
    pub static mut lbl_802F1E6C: f32;
    pub static mut lbl_802F1E6A: u16_;
    pub static mut lbl_802F1E68: u16_;
    pub static mut lbl_802F1E66: u16_;
    pub static mut lbl_802F1E64: u16_;
    pub static mut lbl_802F1E60: f32;
    pub static mut lbl_802F1E5C: f32;
    pub fn window_draw();
    pub fn window_init();
    pub fn window_main();
    pub fn window_set_cursor_pos(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int);
    pub fn window_move_cursor(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int);
    pub fn window_printf(
        arg1: ::core::ffi::c_int,
        arg2: *mut ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
    pub fn window_set_text_color(arg1: ::core::ffi::c_int);
    pub fn u_set_window_text(arg1: ::core::ffi::c_int, arg2: *const ::core::ffi::c_char);
    pub fn u_clear_buffers_2_and_5();
    pub fn window_printf_2(arg1: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    pub fn u_debug_print();
    pub fn u_printf_if_debug(
        arg1: ::core::ffi::c_int,
        arg2: *mut ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
    pub static mut gameModeRelNames: [*mut ::core::ffi::c_char; 6usize];
    pub static mut gameModeFuncs: [::core::option::Option<unsafe extern "C" fn()>; 7usize];
    pub static mut gameModeNames: [*mut ::core::ffi::c_void; 7usize];
    pub static mut gameSubmodeNames: [*mut ::core::ffi::c_char; 200usize];
    pub static mut lbl_802F021C: RelModule;
    pub fn title_screen_debug_menu() -> ::core::ffi::c_int;
    pub fn memcpy(
        dest: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        num: usize,
    ) -> *mut ::core::ffi::c_void;
    pub fn memset(
        dest: *mut ::core::ffi::c_void,
        ch: ::core::ffi::c_int,
        count: usize,
    ) -> *mut ::core::ffi::c_void;
    pub fn memcmp(
        ptr1: *const ::core::ffi::c_void,
        ptr2: *const ::core::ffi::c_void,
        num: usize,
    ) -> ::core::ffi::c_int;
    pub fn strlen(s: *const ::core::ffi::c_char) -> usize;
    pub fn strcpy(
        dest: *mut ::core::ffi::c_char,
        src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
    pub fn strncpy(
        dest: *mut ::core::ffi::c_char,
        src: *const ::core::ffi::c_char,
        num: usize,
    ) -> *mut ::core::ffi::c_char;
    pub fn strcmp(
        s1: *const ::core::ffi::c_char,
        s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn strncmp(
        s1: *const ::core::ffi::c_char,
        s2: *const ::core::ffi::c_char,
        n: usize,
    ) -> ::core::ffi::c_int;
    pub fn strncat(
        dest: *mut ::core::ffi::c_char,
        src: *const ::core::ffi::c_char,
        n: usize,
    ) -> *mut ::core::ffi::c_char;
    pub static mut lbl_802F1C30: s16;
    pub static mut u_cameraId2: s32;
    pub static mut minigameRelCameraCallback:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut Camera, arg2: *mut Ball)>;
    pub static mut currentCamera: *mut Camera;
    pub static mut u_cameraId1: s32;
    pub static mut cameraInfo: [Camera; 5usize];
    pub fn camera_init();
    pub fn ev_camera_init();
    pub fn ev_camera_main();
    pub fn ev_camera_dest();
    pub fn default_camera_env();
    pub fn setup_camera_viewport(
        cameraId: ::core::ffi::c_int,
        left: f32,
        top: f32,
        width: f32,
        height: f32,
    );
    pub fn camera_setup_splitscreen_viewports(playerCount: ::core::ffi::c_int);
    pub fn reset_camera_viewport();
    pub fn set_current_camera(arg1: ::core::ffi::c_int);
    pub fn change_current_camera();
    pub fn change_current_camera_matrix(cameraId: ::core::ffi::c_int);
    pub fn reset_camera_perspective();
    pub fn shake_camera(cameraId: ::core::ffi::c_int, b: ::core::ffi::c_int, c: *mut Vec);
    pub fn camera_set_state_all(state: ::core::ffi::c_int);
    pub fn camera_set_or_clear_flags(flags: ::core::ffi::c_int, set: ::core::ffi::c_int);
    pub fn camera_clear(camera: *mut Camera);
    pub fn camera_shake_main(camera: *mut Camera);
    pub fn camera_func_27(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_av_intro(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_29(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_attract_cutscene(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_54(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_attract_level(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_43(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_12(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_13(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_52(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_53(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_ready_init(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_ready_main(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_38(camera: *mut Camera, ball: *mut Ball);
    pub fn get_curr_stage_fly_in_position(arg1: *mut Sphere);
    pub fn camera_func_0(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_level_main(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_test(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_idle(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_62(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_4(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_5(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_6(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_7(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_fallout_replay(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_9(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_14(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_goal_main(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_16(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_goal_replay(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_18(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_19(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_20(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_21(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_22_23_24(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_25(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_26(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_31(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_32(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_33(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_34(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_35(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_36(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_37(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_39(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_40(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_41(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_42(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_44(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_demo(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_46(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_47(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_48(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_49(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_50(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_51(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_56(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_57(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_63(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_66(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_68(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_69(camera: *mut Camera, ball: *mut Ball);
    pub fn func_8001FF2C(
        arg1: *mut Camera,
        arg2: *mut Ball,
        arg3: *mut Vec,
        arg4: *mut Vec,
        arg5: *mut s16,
        arg6: *mut s16,
        arg7: *mut s16,
        arg8: ::core::ffi::c_int,
    );
    pub fn func_80020334(
        arg1: *mut Camera,
        arg2: *mut Ball,
        arg3: *mut Vec,
        arg4: *mut Vec,
        arg5: *mut s16,
        arg6: *mut s16,
        arg7: *mut s16,
    );
    pub fn camera_func_70(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_71(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_72(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_73(camera: *mut Camera, ball: *mut Ball);
    pub fn camera_func_mini(camera: *mut Camera, ball: *mut Ball);
    pub static mut endingInfo: EndingInfo;
    pub fn ending_init();
    pub fn ending_main() -> ::core::ffi::c_int;
    pub fn ending_finish();
    pub fn u_ending_draw();
    pub fn ending_camera_init();
    pub fn ending_camera_finish();
    pub fn ending_camera_emptyfunc2();
    pub fn ending_effect_finish();
    pub fn effect_ending_ballfrag_init(arg1: *mut Effect);
    pub fn effect_ending_ballfrag_main(arg1: *mut Effect);
    pub fn effect_ending_ballfrag_draw(arg1: *mut Effect);
    pub fn effect_ending_ballfrag_destroy(arg1: *mut Effect);
    pub fn ending_prepare_chara_dialogue(
        out: *mut EndingCharaDialogue,
        buffer: *mut ::core::ffi::c_char,
    );
    pub fn ending_prepare_chara_dialogue_test(
        index: ::core::ffi::c_int,
        out: *mut EndingCharaDialogue,
        buffer: *mut ::core::ffi::c_char,
    );
    pub fn mathutil_init();
    pub fn func_8000716C(a: f64) -> f32;
    pub fn mathutil_sqrt(n: f64) -> f32;
    pub fn mathutil_rsqrt(n: f64) -> f32;
    pub fn mathutil_sin(angle: ::core::ffi::c_int) -> f32;
    pub fn mathutil_sin_cos_v(a: ::core::ffi::c_int, b: *mut f32);
    pub fn func_80007214();
    pub fn mathutil_sin_cos(angle: s16);
    pub fn mathutil_tan(angle: u32_) -> f32;
    pub fn mathutil_atan2(a: f64, b: f32) -> s16;
    pub fn mathutil_atan(angle: f32) -> s16;
    pub fn func_80007424(a: f32) -> s16;
    pub fn mathutil_vec_dot_normalized(vecA: *mut Vec, vecB: *mut Vec) -> f32;
    pub fn mathutil_mtx_from_identity(mtx: *mut [f32_; 4usize]);
    pub fn mathutil_mtxA_from_identity();
    pub fn mathutil_mtxA_sq_from_identity();
    pub fn mathutil_mtxA_from_translate(vec: *mut Vec);
    pub fn mathutil_mtxA_from_translate_xyz(x: f32, y: f32, z: f32);
    pub fn mathutil_mtxA_from_rotate_x(angle: s16);
    pub fn mathutil_mtxA_from_rotate_y(angle: s16);
    pub fn mathutil_mtxA_from_rotate_z(angle: s16);
    pub fn mathutil_mtxA_from_mtxB_translate(vec: *mut Vec);
    pub fn mathutil_mtxA_from_mtxB_translate_xyz(x: f32, y: f32, z: f32);
    pub fn mathutil_mtxA_normalize_basis();
    pub fn mathutil_mtxA_push();
    pub fn mathutil_mtxA_pop();
    pub fn mathutil_mtxA_to_mtx(mtx: *mut [f32_; 4usize]);
    pub fn mathutil_mtxA_from_mtx(mtx: *mut [f32_; 4usize]);
    pub fn mathutil_mtxA_peek();
    pub fn mathutil_mtxA_sq_to_mtx(mtx: *mut [f32_; 4usize]);
    pub fn mathutil_mtxA_sq_from_mtx(mtx: *mut [f32_; 4usize]);
    pub fn mathutil_mtxA_from_mtxB();
    pub fn mathutil_mtxA_to_mtxB();
    pub fn mathutil_mtx_copy(src: *mut [f32_; 4usize], dest: *mut [f32_; 4usize]);
    pub fn mathutil_mtxA_invert();
    pub fn mathutil_mtxA_rigid_invert();
    pub fn mathutil_mtxA_mult_right(mtx: *mut [f32_; 4usize]);
    pub fn mathutil_mtxA_mult_left(mtx: *mut [f32_; 4usize]);
    pub fn mathutil_mtxA_from_mtxB_mult_mtx(mtx: *mut [f32_; 4usize]);
    pub fn mathutil_mtx_mult(
        a: *mut [f32_; 4usize],
        b: *mut [f32_; 4usize],
        c: *mut [f32_; 4usize],
    );
    pub fn mathutil_mtxA_translate(vec: *mut Vec);
    pub fn mathutil_mtxA_translate_xyz(x: f32, y: f32, z: f32);
    pub fn mathutil_mtxA_translate_neg(vec: *mut Vec);
    pub fn mathutil_mtxA_translate_neg_xyz(x: f32, y: f32, z: f32);
    pub fn mathutil_mtxA_scale(vec: *mut Vec);
    pub fn mathutil_mtxA_scale_s(scale: f32);
    pub fn mathutil_mtxA_scale_xyz(x: f32, y: f32, z: f32);
    pub fn mathutil_mtxA_tf_point(src: *mut Vec, dest: *mut Vec);
    pub fn mathutil_mtxA_tf_vec(src: *mut Vec, dest: *mut Vec);
    pub fn mathutil_mtxA_tf_point_xyz(vec: *mut Vec, x: f32, y: f32, z: f32);
    pub fn mathutil_mtxA_tf_vec_xyz(vec: *mut Vec, x: f32, y: f32, z: f32);
    pub fn mathutil_mtxA_rigid_inv_tf_point(a: *mut Vec, b: *mut Vec);
    pub fn mathutil_mtxA_rigid_inv_tf_tl(dest: *mut Vec);
    pub fn mathutil_mtxA_rigid_inv_tf_vec(src: *mut Vec, dest: *mut Vec);
    pub fn mathutil_mtxA_rigid_inv_tf_vec_xyz(dest: *mut Vec, x: f32, y: f32, z: f32);
    pub fn mathutil_mtxA_rotate_x(angle: ::core::ffi::c_int);
    pub fn mathutil_mtxA_rotate_x_sin_cos(sinAngle: f32, cosAngle: f32);
    pub fn mathutil_mtxA_rotate_y(angle: ::core::ffi::c_int);
    pub fn mathutil_mtxA_rotate_y_sin_cos(sinAngle: f32, cosAngle: f32);
    pub fn mathutil_mtxA_rotate_z(angle: ::core::ffi::c_int);
    pub fn mathutil_mtxA_rotate_z_sin_cos(sinAngle: f32, cosAngle: f32);
    pub fn mathutil_vec_normalize_len(vec: *mut Vec) -> f32;
    pub fn mathutil_vec_set_len(src: *mut Vec, dest: *mut Vec, len: f32);
    pub fn mathutil_vec_dot_normalized_safe(a: *mut Vec, b: *mut Vec) -> f32;
    pub fn mathutil_mtxA_from_quat(quat: *mut Quaternion);
    pub fn mathutil_quat_mult(
        result: *mut Quaternion,
        quat1: *mut Quaternion,
        quat2: *mut Quaternion,
    );
    pub fn func_80008378(vec: *mut Vec, a: f32, b: f32, c: f32);
    pub fn u_math_unk6(quat: *mut Quaternion);
    pub fn u_math_unk7(a: *mut Quaternion, b: *mut Vec, c: *mut Vec, d: f32);
    pub fn u_math_unk8(a: *mut Quaternion, b: *mut Vec, c: *mut Vec, d: f32);
    pub fn mathutil_ray_to_euler(rayStart: *mut Vec, rayEnd: *mut Vec, rot: *mut S16Vec);
    pub fn mathutil_ray_to_euler_xy(
        rayStart: *mut Vec,
        rayEnd: *mut Vec,
        rotX: *mut s16,
        rotY: *mut s16,
    );
    pub fn mathutil_vec_to_euler(vec: *mut Vec, rot: *mut S16Vec);
    pub fn mathutil_vec_to_euler_xy(vec: *mut Vec, rotX: *mut s16, rotY: *mut s16);
    pub fn mathutil_mtxA_to_quat(quat: *mut Quaternion);
    pub fn mathutil_quat_from_axis_angle(quat: *mut Quaternion, axis: *mut Vec, angle: s16);
    pub fn u_math_unk9_smth_w_quats(a: *mut Quaternion, b: *mut Vec, c: f32);
    pub fn mathutil_quat_to_axis_angle(quat: *mut Quaternion, axis: *mut Vec) -> f64;
    pub fn mathutil_quat_normalize(quat: *mut Quaternion);
    pub fn mathutil_quat_from_dirs(quat: *mut Quaternion, start: *mut Vec, end: *mut Vec);
    pub fn mathutil_quat_slerp(
        result: *mut Quaternion,
        start: *mut Quaternion,
        end: *mut Quaternion,
        t: f32,
    );
    pub fn u_math_unk10(a: *mut Quaternion, b: *mut Quaternion);
    pub fn u_math_unk11(a: *mut Quaternion, b: *mut Quaternion);
    pub fn mathutil_mtxA_to_euler_yxz(rotY: *mut s16, rotX: *mut s16, rotZ: *mut s16);
    pub fn mathutil_mtxA_to_euler(rot: *mut S16Vec);
    pub fn u_math_unk14(a: *mut s16, b: *mut s16, c: *mut s16);
    pub fn u_math_unk15(a: *mut Vec, b: *mut Vec, c: f32);
    pub fn u_math_unk16(a: *mut Vec, b: *mut Vec, c: f32);
    pub fn mathutil_scale_ray(
        rayStart: *const Vec,
        rayEnd: *const Vec,
        outRayEnd: *mut Vec,
        scale: f32,
    );
    pub fn mathutil_calc_crc16(length: s32, data: *mut u8_) -> u16_;
    pub static mut lbl_801E3248:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Camera, arg2: *mut Ball)>; 4usize];
    pub fn fwide(stream: *mut FILE, mode: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn srand(seed: ::core::ffi::c_uint);
    pub fn rand() -> ::core::ffi::c_int;
    pub fn exit(status: ::core::ffi::c_int) -> !;
    pub fn wcstombs(dest: *mut ::core::ffi::c_char, src: *const wchar_t, max: usize) -> usize;
    pub static mut backgroundInfo: BackgroundInfo;
    pub static mut stageBackgrounds: [u8_; 0usize];
    pub fn ev_background_init();
    pub fn ev_background_main();
    pub fn ev_background_dest();
    pub fn background_light_assign();
    pub fn background_draw();
    pub fn background_free();
    pub fn background_preload(arg1: ::core::ffi::c_int);
    pub fn background_change(bgId: ::core::ffi::c_int);
    pub fn background_interact(arg1: ::core::ffi::c_int);
    pub fn bg_default_init();
    pub fn bg_default_main();
    pub fn bg_default_finish();
    pub fn bg_default_draw();
    pub fn bg_default_interact(arg1: ::core::ffi::c_int);
    pub fn animate_bg_objects(
        bgModels: *mut StageBgObject,
        bgModelCount: ::core::ffi::c_int,
        timeSeconds: f32,
    );
    pub fn draw_bg_objects();
    pub fn draw_bg_flipbooks(a: *mut [f32_; 4usize], b: *mut StageFlipbookAnims);
    pub fn bg_night_init();
    pub fn bg_night_main();
    pub fn bg_night_finish();
    pub fn bg_night_draw();
    pub fn bg_night_interact(arg1: ::core::ffi::c_int);
    pub fn bg_ice2_init();
    pub fn bg_ice2_main();
    pub fn bg_ice2_finish();
    pub fn bg_ice2_draw();
    pub fn bg_ice2_interact(arg1: ::core::ffi::c_int);
    pub fn bg_billiards_init();
    pub fn bg_billiards_main();
    pub fn bg_billiards_finish();
    pub fn bg_billiards_draw();
    pub fn bg_billiards_interact(arg1: ::core::ffi::c_int);
    pub fn bg_golf_init();
    pub fn bg_golf_main();
    pub fn bg_golf_finish();
    pub fn bg_golf_draw();
    pub fn bg_golf_interact(arg1: ::core::ffi::c_int);
    pub fn bg_bowling_init();
    pub fn bg_bowling_main();
    pub fn bg_bowling_finish();
    pub fn bg_bowling_draw();
    pub fn bg_bowling_interact(arg1: ::core::ffi::c_int);
    pub fn func_80056610(a: *mut NlModel, b: *mut NlModel) -> ::core::ffi::c_int;
    pub fn find_background_gma_models(a: *mut BGModelSearch, func: BgModelFindProc);
    pub fn find_background_objects(
        r28: *mut StageBgObject,
        r30_: ::core::ffi::c_int,
        a: *mut BGModelSearch,
        b: BgObjFindProc,
    );
    pub fn clear_background_parts_flag();
    pub fn background_set_random_seed(arg1: ::core::ffi::c_int);
    pub fn bg_old_bluesky_init();
    pub fn bg_old_bluesky_main();
    pub fn bg_old_bluesky_finish();
    pub fn bg_old_bluesky_draw();
    pub fn bg_old_bluesky_interact(arg1: ::core::ffi::c_int);
    pub fn bg_old_cave_init();
    pub fn bg_old_cave_main();
    pub fn bg_old_cave_finish();
    pub fn bg_old_cave_draw();
    pub fn bg_old_cave_interact(arg1: ::core::ffi::c_int);
    pub fn bg_old_extramaster_init();
    pub fn bg_old_extramaster_main();
    pub fn bg_old_extramaster_finish();
    pub fn bg_old_extramaster_draw();
    pub fn bg_old_extramaster_interact(arg1: ::core::ffi::c_int);
    pub fn bg_old_night_init();
    pub fn bg_old_night_main();
    pub fn bg_old_night_finish();
    pub fn bg_old_night_draw();
    pub fn bg_old_night_interact(arg1: ::core::ffi::c_int);
    pub fn bg_old_space_init();
    pub fn bg_old_space_main();
    pub fn bg_old_space_finish();
    pub fn bg_old_space_draw();
    pub fn bg_old_space_interact(arg1: ::core::ffi::c_int);
    pub fn bg_old_sunset_init();
    pub fn bg_old_sunset_main();
    pub fn bg_old_sunset_finish();
    pub fn bg_old_sunset_draw();
    pub fn bg_old_sunset_interact(arg1: ::core::ffi::c_int);
    pub fn bg_old_bonus_init();
    pub fn bg_old_bonus_main();
    pub fn bg_old_bonus_finish();
    pub fn bg_old_bonus_draw();
    pub fn bg_old_bonus_interact(arg1: ::core::ffi::c_int);
    pub fn bg_old_ice_init();
    pub fn bg_old_ice_main();
    pub fn bg_old_ice_finish();
    pub fn bg_old_ice_draw();
    pub fn bg_old_ice_interact(arg1: ::core::ffi::c_int);
    pub fn bg_old_sand_init();
    pub fn bg_old_sand_main();
    pub fn bg_old_sand_finish();
    pub fn bg_old_sand_draw();
    pub fn bg_old_sand_interact(arg1: ::core::ffi::c_int);
    pub fn bg_old_storm_init();
    pub fn bg_old_storm_main();
    pub fn bg_old_storm_finish();
    pub fn bg_old_storm_draw();
    pub fn bg_old_storm_interact(arg1: ::core::ffi::c_int);
    pub fn bg_old_water_init();
    pub fn bg_old_water_main();
    pub fn bg_old_water_finish();
    pub fn bg_old_water_draw();
    pub fn bg_old_water_interact(arg1: ::core::ffi::c_int);
    pub fn func_8005AD80() -> ::core::ffi::c_int;
    pub fn func_8005AE1C(arg1: *mut NlModel, arg2: *mut NlModel) -> ::core::ffi::c_int;
    pub fn bg_jungle_init();
    pub fn bg_jungle_main();
    pub fn bg_jungle_finish();
    pub fn bg_jungle_draw();
    pub fn bg_jungle_interact(arg1: ::core::ffi::c_int);
    pub fn bg_sand_init();
    pub fn bg_sand_main();
    pub fn bg_sand_finish();
    pub fn bg_sand_draw();
    pub fn bg_sand_interact(arg1: ::core::ffi::c_int);
    pub fn bg_water_init();
    pub fn bg_water_main();
    pub fn bg_water_finish();
    pub fn bg_water_draw();
    pub fn bg_water_interact(arg1: ::core::ffi::c_int);
    pub fn bg_space_init();
    pub fn bg_space_main();
    pub fn bg_space_finish();
    pub fn bg_space_draw();
    pub fn bg_space_interact(arg1: ::core::ffi::c_int);
    pub fn bg_sunset_init();
    pub fn bg_sunset_main();
    pub fn bg_sunset_finish();
    pub fn bg_sunset_draw();
    pub fn bg_sunset_interact(arg1: ::core::ffi::c_int);
    pub fn bg_bonus_init();
    pub fn bg_bonus_main();
    pub fn bg_bonus_finish();
    pub fn bg_bonus_draw();
    pub fn bg_bonus_interact(arg1: ::core::ffi::c_int);
    pub fn bg_storm_init();
    pub fn bg_storm_main();
    pub fn bg_storm_finish();
    pub fn bg_storm_draw();
    pub fn bg_storm_interact(arg1: ::core::ffi::c_int);
    pub fn bg_master_init();
    pub fn bg_master_main();
    pub fn bg_master_finish();
    pub fn bg_master_draw();
    pub fn bg_master_interact(arg1: ::core::ffi::c_int);
    pub fn bg_pilot_init();
    pub fn bg_pilot_main();
    pub fn bg_pilot_finish();
    pub fn bg_pilot_draw();
    pub fn bg_pilot_interact(arg1: ::core::ffi::c_int);
    pub fn bg_end_init();
    pub fn bg_end_main();
    pub fn bg_end_finish();
    pub fn bg_end_draw();
    pub fn bg_end_interact(arg1: ::core::ffi::c_int);
    pub fn effect_bird_kite_init(arg1: *mut Effect);
    pub fn effect_bird_kite_main(arg1: *mut Effect);
    pub fn effect_bird_kite_draw(arg1: *mut Effect);
    pub fn effect_bird_kite_destroy(arg1: *mut Effect);
    pub fn effect_icewater_reflect_init(arg1: *mut Effect);
    pub fn effect_icewater_reflect_main(arg1: *mut Effect);
    pub fn effect_icewater_reflect_draw(arg1: *mut Effect);
    pub fn effect_icewater_reflect_destroy(arg1: *mut Effect);
    pub fn effect_icewater_particle_init(arg1: *mut Effect);
    pub fn effect_icewater_particle_main(arg1: *mut Effect);
    pub fn effect_icewater_particle_draw(arg1: *mut Effect);
    pub fn effect_icewater_particle_destroy(arg1: *mut Effect);
    pub fn nlLineSetThickness(width: f32);
    pub fn nl2ngc_set_line_blend_params(srcFactor: GXBlendFactor, dstFactor: GXBlendFactor);
    pub fn nlSingleLine(start: *mut Point3d, end: *mut Point3d, color: u32_);
    pub fn nl2ngc_draw_line_deferred(start: *mut Point3d, end: *mut Point3d, color: u32_);
    pub fn nlSetScaleFactor(arg1: f32);
    pub fn nlObjPutSetFadeColorBase(r: f32, g: f32, b: f32);
    pub fn nlObjModelListLoad(
        pobj: *mut *mut NlObj,
        ptpl: *mut *mut TPL,
        modelName: *mut ::core::ffi::c_char,
        texName: *mut ::core::ffi::c_char,
    ) -> BOOL;
    pub fn nlObjModelListFree(pobj: *mut *mut NlObj, ptpl: *mut *mut TPL) -> BOOL;
    pub fn nlObjPutLoadTexture(model: *mut NlModel, tpl: *mut TPL);
    pub fn nlObjPut(arg1: *mut NlModel);
    pub fn nlObjPutImm(model: *mut NlModel);
    pub fn nlObjPutTrnsl(model: *mut NlModel, alpha: f32);
    pub fn nl2ngc_draw_model_alpha_sort_none(model: *mut NlModel, b: f32);
    pub fn nl2ngc_draw_model_sort_translucent_alt(a: *mut NlModel);
    pub fn nl2ngc_draw_model_sort_none_alt(a: *mut NlModel);
    pub fn nlObjPut_PutStrip(dl: *mut NlDispList, end: *mut ::core::ffi::c_void);
    pub fn nlObjPut_PutStrip_VTC(dl: *mut NlDispList, end: *mut ::core::ffi::c_void);
    pub fn nlObjPutTrnsl_SetMaterial(arg1: *mut NlMesh);
    pub fn nlObjPutTrnsl_PutStrip_VTC(dl: *mut NlDispList, end: *mut ::core::ffi::c_void);
    pub fn nl2ngc_draw_model_sort_translucent_alt2(model: *mut NlModel);
    pub fn nl2ngc_draw_model_sort_none_alt2(model: *mut NlModel);
    pub fn nl2ngc_draw_model_alpha_sort_all_alt(model: *mut NlModel, b: f32);
    pub fn nlLightMask(lightMask: u32_);
    pub fn nlLightAmbRGB(r: f32, g: f32, b: f32);
    pub fn nlSetFog(arg1: ::core::ffi::c_int);
    pub fn nlSetFogType(a: u32_, b: f32, c: f32);
    pub fn nlSetFogColor(r: ::core::ffi::c_int, g: ::core::ffi::c_int, b: ::core::ffi::c_int);
    pub fn nlObjPut_OpaqueList(arg1: *mut NlModel);
    pub fn nlObjPut_TrnslList(arg1: *mut NlModel);
    pub fn nlObjPutTrnsl_TrnslList(arg1: *mut NlModel);
    pub fn u_nl2ngc_draw_model_with_mesh_func(
        a: *mut NlModel,
        func: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NlMesh, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int,
        >,
    );
    pub fn unk_empty();
    pub static g_soundGroupDesc: [SoundGroupDesc; 0usize];
    pub static g_soundDesc: [SoundDesc; 0usize];
    pub static mut g_loadedSoundGroupsCount: s32;
    pub static mut lbl_802F1DFC: s32;
    pub static mut u_somePlayerId: ::core::ffi::c_int;
    pub static mut g_soundSEVol: u8_;
    pub static mut lbl_802F1DF4: u8_;
    pub static mut g_soundAramTop: u32_;
    pub static mut g_soundTotalBytesLoaded: u32_;
    pub static mut u_someSoundId: s32;
    pub static mut u_someSoundGroupId: s32;
    pub static mut u_someSoundName: *const ::core::ffi::c_char;
    pub static mut u_someSoundGroupName: *const ::core::ffi::c_char;
    pub static mut g_soundBGMVol: u8_;
    pub static mut u_volumeRelated2: u8_;
    pub static mut g_soundMuted: s32;
    pub static mut lbl_802F1DD0: u32_;
    pub static mut lbl_802F1DCC: s32;
    pub static mut lbl_802014E0: Struct802014E0;
    pub static mut lbl_80201500: [s8; 1064usize];
    pub fn sound_init();
    pub fn sound_main();
    pub fn SoundGroupLoad(arg0: ::core::ffi::c_int);
    pub fn SoundGroupFree();
    pub fn ev_sound_init();
    pub fn ev_sound_main();
    pub fn ev_sound_dest();
    pub fn SoundReq(arg0: u32_) -> ::core::ffi::c_int;
    pub fn SoundReqDirect(arg0: u32_) -> ::core::ffi::c_int;
    pub fn u_play_sound_0(arg0: ::core::ffi::c_int);
    pub fn u_play_sound_1(arg0: ::core::ffi::c_int);
    pub fn u_play_sound_2(arg0: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn u_play_sound_1_dupe(arg0: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn func_8002B634(
        arg0: ::core::ffi::c_int,
        arg1: *mut Vec,
        arg2: *mut s8,
        arg3: *mut s8,
    ) -> ::core::ffi::c_int;
    pub fn func_8002BFCC(arg0: u32_, arg1: u32_);
    pub fn SoundOff(arg0: u16_);
    pub fn SoundVol(arg0: u16_, arg1: u8_);
    pub fn SoundPan(arg0: u16_, arg1: u8_, arg2: u8_);
    pub fn SoundPitch(arg0: u16_, arg1: u16_);
    pub fn SoundDop(arg0: u16_, arg1: u16_);
    pub fn SoundRev(arg0: u16_, arg1: u8_);
    pub fn SoundCho(arg0: u16_, arg1: u8_);
    pub fn SoundOffID(arg0_: ::core::ffi::c_int);
    pub fn SoundRevID(arg0_: ::core::ffi::c_int, arg1: u8_);
    pub fn SoundChoID(arg0_: ::core::ffi::c_int, arg1: u8_);
    pub fn SoundEffect(arg0: s8, arg1: s8);
    pub fn SoundIcsReq(arg0: u32_, arg1: u8_, arg2: s8);
    pub fn func_8002CEAC();
    pub fn func_8002CEB0();
    pub fn func_8002CEB4();
    pub fn u_play_music(arg0: u32_, arg1: s8);
    pub fn SoundStreamStart();
    pub fn SoundStreamEnd();
    pub fn u_change_sound_mode(mode: u32_);
    pub fn store_sound_settings(arg0: *mut MemcardContents);
    pub fn load_sound_settings(arg0: *mut MemcardContents);
    pub fn func_8002DB38();
    pub fn func_8002DBC4();
    pub static mut string_No_Define_9: [::core::ffi::c_char; 10usize];
    pub static mut bmpBilNames: [*mut ::core::ffi::c_char; 14usize];
    pub static mut ballInfo: [Ball; 8usize];
    pub static mut currentBall: *mut Ball;
    pub static mut minigameRelBallCallback:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut Ball)>;
    pub static mut apeThreadNo: [s32; 16usize];
    pub static mut playerCharacterSelection: [s32; 4usize];
    pub static mut playerControllerIDs: [s32; 4usize];
    pub static mut lbl_80206BE0: [s32; 4usize];
    pub static mut clearHemisphereOutsideParts: [s16; 0usize];
    pub static mut clearHemisphereInsideParts: [s16; 0usize];
    pub static mut coloredBallPartModelIDs: [[s16; 9usize]; 0usize];
    pub fn u_ball_something_with_ape_rotation(a: *mut Ape);
    pub fn u_ball_something_with_walking_speed(a: *const Ape) -> f32;
    pub fn check_ball_teeter(a: *mut Ape);
    pub fn u_choose_ape_anim(a: *mut Ape, b: f32);
    pub fn func_8003765C(a: *mut Ape);
    pub fn func_80037718();
    pub fn func_80037B1C(arg1: *mut Ball);
    pub fn ball_set_ape_flags_80037B20();
    pub fn ev_ball_init();
    pub fn ape_get_by_type(
        a: ::core::ffi::c_int,
        character: Character,
        c: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Ape, arg2: ::core::ffi::c_int)>,
    ) -> *mut Ape;
    pub fn ev_ball_main();
    pub fn func_80038528(arg1: *mut Ball);
    pub fn ev_ball_dest();
    pub fn ball_draw();
    pub fn u_ball_shadow_something_1();
    pub fn u_ball_shadow_something_2();
    pub fn give_bananas(bananas: ::core::ffi::c_int);
    pub fn set_ball_look_point(arg1: ::core::ffi::c_int, arg2: *mut Vec, arg3: f32);
    pub fn u_ball_init_2(arg1: *mut Ball);
    pub fn ball_func_0(arg1: *mut Ball);
    pub fn ball_func_1(arg1: *mut Ball);
    pub fn ball_func_ready_main(arg1: *mut Ball);
    pub fn ball_func_3(arg1: *mut Ball);
    pub fn ball_func_4(arg1: *mut Ball);
    pub fn ball_func_goal_init(arg1: *mut Ball);
    pub fn ball_func_goal_main(arg1: *mut Ball);
    pub fn ball_func_replay_init(arg1: *mut Ball);
    pub fn ball_func_replay_main(arg1: *mut Ball);
    pub fn ball_func_11(arg1: *mut Ball);
    pub fn ball_func_12(arg1: *mut Ball);
    pub fn ball_func_13(arg1: *mut Ball);
    pub fn ball_func_14(arg1: *mut Ball);
    pub fn ball_func_15(arg1: *mut Ball);
    pub fn ball_func_17(arg1: *mut Ball);
    pub fn ball_func_16(arg1: *mut Ball);
    pub fn ball_func_18(arg1: *mut Ball);
    pub fn ball_func_19(arg1: *mut Ball);
    pub fn ball_func_20(arg1: *mut Ball);
    pub fn ball_func_demo_init(arg1: *mut Ball);
    pub fn ball_func_mini(arg1: *mut Ball);
    pub fn ball_func_27(arg1: *mut Ball);
    pub fn ball_func_28(arg1: *mut Ball);
    pub fn handle_ball_linear_kinematics(
        arg1: *mut Ball,
        arg2: *mut PhysicsBall,
        arg3: ::core::ffi::c_int,
    );
    pub fn handle_ball_linear_kinematics_ignore_collision(
        arg1: *mut Ball,
        arg2: *mut PhysicsBall,
        arg3: ::core::ffi::c_int,
    );
    pub fn update_ball_ape_transform(
        arg1: *mut Ball,
        arg2: *mut PhysicsBall,
        arg3: ::core::ffi::c_int,
    );
    pub fn handle_ball_rotational_kinematics(
        arg1: *mut Ball,
        arg2: *mut PhysicsBall,
        arg3: ::core::ffi::c_int,
    );
    pub fn ball_set_type(arg1: *mut Ball, arg2: ::core::ffi::c_int);
    pub fn ball_set_strongcoli_efc(arg1: *mut Ball);
    pub fn init_physball_from_ball(arg1: *mut Ball, b: *mut PhysicsBall);
    pub fn set_ball_pos_and_vel_from_physball(arg1: *mut Ball, b: *mut PhysicsBall);
    pub fn ball_ape_yang(arg1: *mut Ball);
    pub fn ball_effect();
    pub fn ball_sound(arg1: *mut Ball);
    pub fn ball_set_highspeed_efc(arg1: *mut Ball);
    pub fn animate_ball_size_change(arg1: *mut Ball);
    pub static mut spriteParamsBufCount: s32;
    pub static mut spriteParamsBufState: s32;
    pub static mut u_unkBitmapTPL: *mut TPL;
    pub static mut bitmapGroups: [BitmapGroup; 0usize];
    pub static mut bitmapNames: [*mut *mut ::core::ffi::c_char; 0usize];
    pub static mut spriteParamsBuf: [NLsprarg; 0usize];
    pub fn bitmap_init();
    pub fn bitmap_load_tpl(filename: *mut ::core::ffi::c_char) -> *mut TPL;
    pub fn bitmap_load_group(grpId: BitmapGroupID);
    pub fn bitmap_free_group(grpId: BitmapGroupID);
    pub fn bitmap_is_group_loaded(grpId: BitmapGroupID) -> ::core::ffi::c_int;
    pub fn bitmap_free_tpl(tpl: *mut TPL);
    pub fn u_bitmap_set_some_tpl(grpId: BitmapGroupID);
    pub fn u_bitmap_frame_reset();
    pub fn bitmap_init_tev();
    pub fn bitmap_main();
    pub fn bitmap_draw_string();
    pub fn u_draw_all_naomi_sprites();
    pub static mut playPointYieldPerDifficulty: [u32_; 3usize];
    pub static mut lbl_8027CE24: [Struct8027CE24; 6usize];
    pub static mut g_playPointsEarned: u32_;
    pub static mut g_currFloorStreak: s8;
    pub static mut g_totalPlayPoints: u32_;
    pub static mut g_recordPlayPoints: u32_;
    pub static mut lbl_802F1FB4: u32_;
    pub static mut lbl_802F1FB0: ::core::ffi::c_int;
    pub static mut lbl_802F1FAC: u32_;
    pub static mut lbl_802F1FA8: u32_;
    pub static mut u_isCompetitionModeCourse: ::core::ffi::c_int;
    pub fn course_init();
    pub fn reset_earned_play_points();
    pub fn reset_curr_floor_streak();
    pub fn record_play_points();
    pub fn buy_extra_continues();
    pub fn show_play_points_textbox(arg1: ::core::ffi::c_int, arg2: s16, arg3: s16);
    pub fn is_play_points_textbox_done() -> ::core::ffi::c_int;
    pub fn course_first();
    pub fn ev_course_init();
    pub fn ev_course_main();
    pub fn ev_course_dest();
    pub fn u_get_stage_time_limit() -> ::core::ffi::c_int;
    pub fn floor_to_stage_id(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn course_floor_count(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn is_final_floor() -> u32_;
    pub fn is_bonus_stage(stageId: ::core::ffi::c_int) -> u32_;
    pub fn func_800673BC() -> ::core::ffi::c_int;
    pub fn is_minigame_unlocked(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn get_max_continues() -> ::core::ffi::c_int;
    pub fn get_available_continues() -> ::core::ffi::c_int;
    pub fn are_all_continues_unlocked() -> ::core::ffi::c_int;
    pub fn game_sprint_course(sprite: *mut Sprite);
    pub fn save_course_completion_data(data: *mut MemcardContents);
    pub fn load_course_completion_data(data: *mut MemcardContents);
    pub static mut g_effects: [Effect; 512usize];
    pub fn u_give_points(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int);
    pub fn ev_effect_init();
    pub fn ev_effect_main();
    pub fn ev_effect_dest();
    pub fn effect_draw();
    pub fn spawn_effect(arg1: *mut Effect) -> ::core::ffi::c_int;
    pub fn erase_effect(type_: ::core::ffi::c_int);
    pub fn find_effect_by_uid(uid: ::core::ffi::c_int) -> *mut Effect;
    pub fn effect_replace_type_funcs(type_: ::core::ffi::c_int, newFuncs: *mut EffectFuncs);
    pub fn hud_show_pause_menu();
    pub fn func_80075E1C(arg1: ::core::ffi::c_int, arg2: *mut Sprite);
    pub fn hud_show_press_start_textbox(arg1: ::core::ffi::c_int);
    pub fn u_logo_plus_sprite_something();
    pub fn hud_show_adv_copyright_info(arg1: ::core::ffi::c_int);
    pub fn hud_show_title_banner(arg1: ::core::ffi::c_int);
    pub fn hud_show_title_menu();
    pub fn hud_show_title_screen_monkey_sprite();
    pub fn u_show_adv_ready_hud();
    pub fn hud_create_adv_demo_banana_sprite(arg1: ::core::ffi::c_int);
    pub fn u_show_eieipu_sprite(arg1: ::core::ffi::c_int);
    pub fn hud_show_stage_name_banner();
    pub fn hud_show_ready_banner(arg1: ::core::ffi::c_int);
    pub fn hud_show_normal_mode_info();
    pub fn hud_show_competition_mode_info();
    pub fn hud_show_go_banner(arg1: ::core::ffi::c_int);
    pub fn hud_show_goal_banner(arg1: ::core::ffi::c_int);
    pub fn hud_show_fallout_banner(arg1: ::core::ffi::c_int);
    pub fn hud_show_time_over_banner(arg1: ::core::ffi::c_int);
    pub fn hud_show_perfect_banner(arg1: ::core::ffi::c_int);
    pub fn hud_show_continue_interface();
    pub fn hud_show_game_over_banner(arg1: ::core::ffi::c_int);
    pub fn hud_show_1up_banner(arg1: ::core::ffi::c_int);
    pub fn hud_show_hurry_up_banner();
    pub fn hud_show_replay_text(arg1: ::core::ffi::c_int);
    pub fn hud_show_name_entry_info(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int);
    pub fn hud_show_name_entry_banner(arg1: ::core::ffi::c_int);
    pub fn func_8007EB2C(arg1: ::core::ffi::c_int);
    pub fn func_8007ECB8();
    pub fn hud_create_some_ranking_icon(arg1: *mut Ball);
    pub fn hud_show_goal_score_info(
        clearScore: ::core::ffi::c_int,
        floorScore: ::core::ffi::c_int,
        arg2: u32_,
    );
    pub fn u_show_practice_mode_score_info(arg1: ::core::ffi::c_int);
    pub fn hud_show_bomb(arg1: f32, arg2: f32);
    pub static mut lbl_802F1CB0: [s8; 8usize];
    pub static mut practiceBestScore: s32;
    pub static mut practiceBestFlag: s32;
    pub static mut infoWork: Struct801F3A58;
    pub static mut lbl_801F3A8C: [u32_; 4usize];
    pub static mut playerInfos: [Struct801F3A58; 4usize];
    pub fn info_init_first();
    pub fn ev_info_init();
    pub fn ev_info_main();
    pub fn ev_info_dest();
    pub fn check_ball_entered_goal(arg1: *mut Ball, arg2: *mut u32_, arg3: *mut s32) -> BOOL;
    pub fn u_time_over_all_competition_mode_balls();
    pub fn func_80023DB8(arg1: *mut Ball);
    pub fn create_rank_icon(arg1: *mut Ball);
    pub fn func_800245E4(arg1: *mut Ball, arg2: ::core::ffi::c_int, arg3: ::core::ffi::c_int);
    pub fn func_800246F4(arg1: *mut Ball) -> ::core::ffi::c_int;
    pub fn func_80024860(arg1: *mut Ball);
    pub static mut g_itemInfo: [Item; 256usize];
    pub fn ev_item_init();
    pub fn ev_item_main();
    pub fn ev_item_dest();
    pub fn item_draw();
    pub fn item_draw_shadows();
    pub fn release_captured_item(arg1: ::core::ffi::c_int);
    pub fn spawn_stage_banana_items(arg1: *mut StageAnimGroup, arg2: ::core::ffi::c_int);
    pub fn item_coin_init(arg1: *mut Item);
    pub fn item_coin_main(arg1: *mut Item);
    pub fn item_coin_draw(arg1: *mut Item);
    pub fn item_coin_collect(arg1: *mut Item, arg2: *mut PhysicsBall);
    pub fn item_coin_destroy(arg1: *mut Item);
    pub fn item_coin_release(arg1: *mut Item);
    pub fn item_coin_debug(arg1: *mut Item);
    pub fn get_lod(a: *mut *mut ModelLOD) -> *mut GMAModel;
    pub fn item_pilot_init(arg1: *mut Item);
    pub fn item_pilot_main(arg1: *mut Item);
    pub fn item_pilot_draw(arg1: *mut Item);
    pub fn item_pilot_collect(arg1: *mut Item, arg2: *mut PhysicsBall);
    pub fn item_pilot_destroy(arg1: *mut Item);
    pub fn item_pilot_release(arg1: *mut Item);
    pub fn item_pilot_debug(arg1: *mut Item);
    pub static mut s_u_lightPool: [Light; 32usize];
    pub static mut s_lightGroups: [LightGroup; 22usize];
    pub static mut lbl_801F3A08: Light;
    pub static mut lbl_801F39FC: Color3f;
    pub static mut g_bgLightInfo: BgLightInfo;
    pub static mut s_lightPoolSize: s32;
    pub static mut u_someLGIdx: s32;
    pub static mut s_lightGroupStackPos: s8;
    pub static mut u_minimap_light_ref_dist_scale: f32;
    pub static mut s_u_lightPerfTimer: s32;
    pub static mut s_numLightObjsLoaded: s32;
    pub static mut lbl_802F1C60: s32;
    pub static mut lbl_802F1C64: s32;
    pub static mut lbl_802F1C68: s32;
    pub static mut s_u_lightGroupsInitialized: s32;
    pub static mut lightingStageId: s32;
    pub static mut lbl_802F1C80: s32;
    pub static mut lbl_802F1C84: s32;
    pub static mut u_printLight: s32;
    pub static mut lbl_802F1C8C: s32;
    pub static mut u_lightToPrint: s32;
    pub static mut lbl_802F1C90: u32_;
    pub static mut lbl_802F1C74: s8;
    pub static mut lbl_802F1C75: s8;
    pub static mut lightTypeNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut s_lightIdNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut s_lightGroupNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut lbl_802F1C6C: [s8; 8usize];
    pub fn light_init();
    pub fn light_main();
    pub fn add_light_to_pool(a: *mut Light) -> BOOL;
    pub fn load_light_group_uncached(arg1: ::core::ffi::c_int);
    pub fn peek_light_group() -> ::core::ffi::c_int;
    pub fn load_light_group_cached(lightGrpId: ::core::ffi::c_int);
    pub fn push_light_group();
    pub fn pop_light_group();
    pub fn reset_light_group(a: ::core::ffi::c_int);
    pub fn u_set_some_minimap_light_param(arg1: f32);
    pub fn set_bg_ambient(arg1: f32, arg2: f32, arg3: f32);
    pub fn set_render_ambient(r: f32, g: f32, b: f32);
    pub fn get_curr_light_group_ambient(color: *mut Color3f);
    pub fn apply_curr_light_group_ambient();
    pub fn u_draw_naomi_ball();
    pub fn u_smth_with_lights_smd_continue(stageId: ::core::ffi::c_int);
    pub fn u_smth_with_lights_smd_extra(stageId: ::core::ffi::c_int);
    pub fn memcard_set_mode(arg1: ::core::ffi::c_int);
    pub fn memcard_is_write_in_progress() -> ::core::ffi::c_int;
    pub fn func_8009F4C4() -> u8_;
    pub fn memcard_init();
    pub fn ev_memcard_init();
    pub fn ev_memcard_main();
    pub fn ev_memcard_dest();
    pub fn memcard_draw_ui();
    pub fn func_800A4CEC();
    pub fn ev_minimap_init();
    pub fn ev_minimap_main();
    pub fn ev_minimap_dest();
    pub fn minimap_set_state(state: MinimapState);
    pub fn func_80084794(unused: *mut ::core::ffi::c_void);
    pub fn minimap_zoom();
    pub fn minimap_draw();
    pub static mut lbl_802C67D4: [[ScoreRecord; 5usize]; 4usize];
    pub fn name_entry_init();
    pub fn ev_name_entry_init();
    pub fn ev_name_entry_main();
    pub fn ev_name_entry_dest();
    pub fn draw_name_entry_hud();
    pub fn u_is_name_entry_finished() -> ::core::ffi::c_int;
    pub fn func_800AEAD0();
    pub fn u_get_score_records_for_difficulty(
        arg1: ::core::ffi::c_int,
        arg2: *mut ScoreRecord,
    ) -> *mut ScoreRecord;
    pub fn u_calc_rank_of_score_record(
        arg1: ::core::ffi::c_int,
        arg2: *mut ScoreRecord,
    ) -> ::core::ffi::c_int;
    pub fn func_800AEDDC();
    pub fn func_800AEDE0();
    pub fn func_800AF164();
    pub fn effect_nameent_code_init(arg1: *mut Effect);
    pub fn effect_nameent_code_main(arg1: *mut Effect);
    pub fn effect_nameent_code_draw(arg1: *mut Effect);
    pub fn effect_nameent_code_destroy(arg1: *mut Effect);
    pub fn effect_get_nameent_code_init(arg1: *mut Effect);
    pub fn effect_get_nameent_code_main(arg1: *mut Effect);
    pub fn effect_get_nameent_code_draw(arg1: *mut Effect);
    pub fn effect_get_nameent_code_destroy(arg1: *mut Effect);
    pub fn stobj_nameent_btn_init(arg1: *mut Stobj);
    pub fn stobj_nameent_btn_main(arg1: *mut Stobj);
    pub fn stobj_nameent_btn_draw(arg1: *mut Stobj);
    pub fn stobj_nameent_btn_coli(arg1: *mut Stobj, arg2: *mut PhysicsBall);
    pub fn stobj_nameent_btn_destroy(arg1: *mut Stobj);
    pub fn stobj_nameent_btn_debug(arg1: *mut Stobj);
    pub fn func_800AFC1C(arg1: *mut MemcardContents);
    pub fn func_800AFC4C(arg1: *mut MemcardContents);
    pub static mut poolStatusNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut g_poolInfo: PoolInfo;
    pub fn chkstatus_init();
    pub fn chkstatus_main();
    pub fn pool_alloc(arg1: *mut PoolInfo_sub, arg2: u8_) -> ::core::ffi::c_int;
    pub fn pool_reset(arg1: *mut PoolInfo_sub);
    pub static mut g_recplayInfo: ReplayInfo;
    pub fn recplay_init();
    pub fn recplay_load_builtin_replays();
    pub fn recplay_init_first();
    pub fn ev_recplay_init();
    pub fn ev_recplay_main();
    pub fn ev_recplay_dest();
    pub fn recplay_find_new_index() -> ::core::ffi::c_int;
    pub fn u_recplay_reset_recording_state();
    pub fn recplay_set_player_replay_index(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int);
    pub fn recplay_start_recording();
    pub fn recplay_stop_recording();
    pub fn recplay_set_recording_stop_timer(arg1: ::core::ffi::c_int);
    pub fn recplay_record_goal(arg1: ::core::ffi::c_int);
    pub fn recplay_record_fallout(arg1: ::core::ffi::c_int);
    pub fn recplay_record_timeover(arg1: ::core::ffi::c_int);
    pub fn recplay_record_bonus_clear(arg1: ::core::ffi::c_int);
    pub fn recplay_record_player_name(playerName: *mut ::core::ffi::c_char);
    pub fn func_80049514(arg1: ::core::ffi::c_int);
    pub fn recplay_get_time(arg1: ::core::ffi::c_int) -> f32;
    pub fn recplay_get_ball_frame(arg1: ::core::ffi::c_int, arg2: *mut ReplayBallFrame, arg3: f32);
    pub fn recplay_get_world_frame(
        arg1: ::core::ffi::c_int,
        arg2: *mut ReplayWorldFrame,
        arg3: f32,
    );
    pub fn recplay_get_info_timer(arg1: ::core::ffi::c_int, arg2: f32) -> f32;
    pub fn recplay_get_header(arg1: ::core::ffi::c_int, arg2: *mut ReplayHeader);
    pub fn recplay_get_stage_timer(arg1: f32, arg2: ::core::ffi::c_int) -> f32;
    pub fn u_replay_test_init();
    pub fn u_replay_test_main();
    pub fn func_8004A800();
    pub fn func_8004AFC0();
    pub fn cmp_recplay_init_first();
    pub fn dummy_8004AFD4();
    pub fn recplay_cmpr_record_frame();
    pub fn recplay_cmpr_dest();
    pub fn recplay_cmpr_start_recording();
    pub fn recplay_cmpr_stop_recording();
    pub fn recplay_cmpr_record_goal();
    pub fn recplay_cmpr_record_fallout();
    pub fn recplay_cmpr_record_timeover();
    pub fn recplay_cmpr_record_score();
    pub fn recplay_cmpr_record_bonus_clear();
    pub fn recplay_cmpr_record_player_name(arg1: *mut ::core::ffi::c_char);
    pub fn func_8004B70C();
    pub fn recplay_cmpr_get_time() -> f32;
    pub fn recplay_cmpr_get_ball_frame(arg1: f32, arg2: *mut ReplayBallFrame);
    pub fn recplay_cmpr_get_world_frame(arg1: f32, arg2: *mut ReplayWorldFrame);
    pub fn recplay_cmpr_get_info_timer(arg1: f32) -> f32;
    pub fn func_8004C254(arg1: f32) -> f32;
    pub fn recplay_cmpr_get_header(arg1: *mut ReplayHeader);
    pub fn recplay_cmpr_calc_compressed_size() -> u32_;
    pub fn recplay_cmpr_get_data(arg1: *mut ::core::ffi::c_void) -> u32_;
    pub fn recplay_cmpr_set_data(arg1: *const ::core::ffi::c_void) -> ::core::ffi::c_int;
    pub fn func_8004C70C() -> ::core::ffi::c_int;
    pub fn func_8004C754();
    pub fn func_8004C780();
    pub fn func_8004C7A8();
    pub fn ev_rend_efc_init();
    pub fn ev_rend_efc_main();
    pub fn ev_rend_efc_dest();
    pub fn rend_efc_draw();
    pub fn rend_efc_enable(
        index: ::core::ffi::c_int,
        type_: ::core::ffi::c_int,
        params: *mut RenderEffect,
    );
    pub fn rend_efc_blur_init(arg1: *mut RenderEffect);
    pub fn rend_efc_blur_destroy(arg1: *mut RenderEffect);
    pub fn rend_efc_blur_main(arg1: *mut RenderEffect);
    pub fn rend_efc_blur_draw(arg1: ::core::ffi::c_int, arg2: *mut RenderEffect);
    pub fn rend_efc_motion_blur_init(arg1: *mut RenderEffect);
    pub fn rend_efc_motion_blur_destroy(arg1: *mut RenderEffect);
    pub fn rend_efc_motion_blur_main(arg1: *mut RenderEffect);
    pub fn rend_efc_motion_blur_draw(arg1: ::core::ffi::c_int, arg2: *mut RenderEffect);
    pub fn rend_efc_focus_init(arg1: *mut RenderEffect);
    pub fn rend_efc_focus_destroy(arg1: *mut RenderEffect);
    pub fn rend_efc_focus_main(arg1: *mut RenderEffect);
    pub fn rend_efc_focus_draw(arg1: ::core::ffi::c_int, arg2: *mut RenderEffect);
    pub fn rend_efc_kaleidoscope_init(arg1: *mut RenderEffect);
    pub fn rend_efc_kaleidoscope_destroy(arg1: *mut RenderEffect);
    pub fn rend_efc_kaleidoscope_main(arg1: *mut RenderEffect);
    pub fn rend_efc_kaleidoscope_draw(arg1: ::core::ffi::c_int, arg2: *mut RenderEffect);
    pub fn rend_efc_mirror_enable();
    pub fn rend_efc_flat_mirror_init(arg1: *mut RenderEffect);
    pub fn rend_efc_flat_mirror_destroy(arg1: *mut RenderEffect);
    pub fn rend_efc_flat_mirror_main(arg1: *mut RenderEffect);
    pub fn rend_efc_flat_mirror_draw(arg1: ::core::ffi::c_int, arg2: *mut RenderEffect);
    pub fn rend_efc_wavy_mirror_init(arg1: *mut RenderEffect);
    pub fn rend_efc_wavy_mirror_destroy(arg1: *mut RenderEffect);
    pub fn rend_efc_wavy_mirror_main(arg1: *mut RenderEffect);
    pub fn rend_efc_wavy_mirror_draw(arg1: ::core::ffi::c_int, arg2: *mut RenderEffect);
    pub static mut lbl_802F1F4C: s32;
    pub static mut lbl_802F1F50: s32;
    pub fn ev_stage_init();
    pub fn ev_stage_main();
    pub fn ev_stage_dest();
    pub fn stage_find_model(gma: *mut GMA, name: *mut ::core::ffi::c_char) -> *mut GMAModel;
    pub fn find_blur_bridge_accordion();
    pub fn draw_blur_bridge_accordions();
    pub fn animate_anim_groups(arg1: f32);
    pub fn u_initialize_stage_dyn_part_info();
    pub fn func_8004482C();
    pub fn func_80044920();
    pub fn load_stage(arg1: ::core::ffi::c_int);
    pub fn unload_stage();
    pub fn preload_stage_files(arg1: ::core::ffi::c_int);
    pub fn load_stage_files(stageId: ::core::ffi::c_int);
    pub fn func_80044E18();
    pub fn func_80045194();
    pub fn find_stage_or_bg_model(name: *mut ::core::ffi::c_char) -> *mut GMAModel;
    pub fn u_initialize_stuff_for_dynamic_stage_parts(stageId: ::core::ffi::c_int);
    pub fn get_stage_background(stageId: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn get_stage_background_2(stageId: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn compute_stage_bounding_sphere();
    pub fn func_800463E8(arg1: *mut Vec, arg2: *mut f32);
    pub fn func_80046884(arg1: *mut NlModel) -> f32;
    pub fn load_stagedef(stageId: ::core::ffi::c_int);
    pub fn free_stagedef();
    pub fn adjust_stage_anim_ptrs(arg1: *mut *mut StageAnimGroupAnim, arg2: *mut Stage);
    pub fn func_800473C0(arg1: *mut *mut StageBgAnim, arg2: *mut Stage);
    pub fn adjust_stage_flipbook_anims_ptrs(arg1: *mut *mut StageFlipbookAnims, arg2: *mut Stage);
    pub fn stage_draw();
    pub static mut g_stobjInfo: [Stobj; 128usize];
    pub static mut lbl_8028C0B0: Struct8028C0B0;
    pub fn ev_stobj_init();
    pub fn ev_stobj_main();
    pub fn ev_stobj_dest();
    pub fn stobj_draw();
    pub fn spawn_stobj(arg1: *mut Stobj) -> s16;
    pub fn u_spawn_goal_stobjs(arg1: *mut StageAnimGroup, arg2: ::core::ffi::c_int);
    pub fn stobj_goaltape_init(arg1: *mut Stobj);
    pub fn stobj_goaltape_main(arg1: *mut Stobj);
    pub fn stobj_goaltape_draw(arg1: *mut Stobj);
    pub fn stobj_goaltape_coli(arg1: *mut Stobj, arg2: *mut PhysicsBall);
    pub fn stobj_goaltape_destroy(arg1: *mut Stobj);
    pub fn stobj_goaltape_debug(arg1: *mut Stobj);
    pub fn stobj_goalbag_init(arg1: *mut Stobj);
    pub fn stobj_goalbag_main(arg1: *mut Stobj);
    pub fn stobj_goalbag_draw(arg1: *mut Stobj);
    pub fn stobj_goalbag_coli(arg1: *mut Stobj, arg2: *mut PhysicsBall);
    pub fn stobj_goalbag_destroy(arg1: *mut Stobj);
    pub fn stobj_goalbag_debug(arg1: *mut Stobj);
    pub fn stobj_goalbag_exmaster_init(arg1: *mut Stobj);
    pub fn stobj_goalbag_exmaster_main(arg1: *mut Stobj);
    pub fn stobj_goalbag_exmaster_draw(arg1: *mut Stobj);
    pub fn stobj_goalbag_exmaster_coli(arg1: *mut Stobj, arg2: *mut PhysicsBall);
    pub fn stobj_goalbag_exmaster_destroy(arg1: *mut Stobj);
    pub fn stobj_goalbag_exmaster_debug(arg1: *mut Stobj);
    pub fn break_goaltape(arg1: ::core::ffi::c_int, arg2: *mut PhysicsBall);
    pub fn relink_goaltape(arg1: ::core::ffi::c_int);
    pub static mut textBoxes: [TextBox; 4usize];
    pub fn textbox_init();
    pub fn textbox_main();
    pub fn textbox_destroy_all();
    pub fn textbox_draw_all();
    pub fn textbox_set_properties(
        id: ::core::ffi::c_int,
        state: ::core::ffi::c_int,
        template: *mut TextBox,
    );
    pub fn textbox_add_text(id: ::core::ffi::c_int, str_: *const ::core::ffi::c_char);
    pub fn textbox_add_textf(id: ::core::ffi::c_int, fmt: *const ::core::ffi::c_char, ...);
    pub static mut currentWorld: *mut World;
    pub static mut worldInfo: [World; 0usize];
    pub static mut g_gravityDir: Vec;
    pub fn ev_world_init();
    pub fn ev_world_main();
    pub fn ev_world_dest();
    pub fn world_clear(arg1: *mut World);
    pub fn world_sub_input_init(arg1: *mut World);
    pub fn world_sub_input_main(arg1: *mut World);
    pub fn world_sub_6(arg1: *mut World);
    pub fn world_sub_7(arg1: *mut World);
    pub fn world_sub_8(arg1: *mut World);
    pub fn world_sub_9(arg1: *mut World);
    pub fn world_sub_10(arg1: *mut World);
    pub fn world_sub_11(arg1: *mut World);
    pub static countdownSounds: [s16; 10usize];
    pub static mut nameEntryTextJpn: [*mut ::core::ffi::c_char; 4usize];
    pub static mut nameEntryText: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_80175910: [[*mut ::core::ffi::c_char; 6usize]; 4usize];
    pub static mut lbl_80175AA8: [[*mut ::core::ffi::c_char; 6usize]; 4usize];
    pub static mut extraIntroSpeech: [[*mut ::core::ffi::c_char; 4usize]; 4usize];
    pub static mut expertExIntroSpeech: [[*mut ::core::ffi::c_char; 4usize]; 4usize];
    pub static mut masterIntroSpeech: [[*mut ::core::ffi::c_char; 4usize]; 4usize];
    pub fn force_float_order_802F2C00() -> f64;
    pub fn func_800165C0(ball: *mut Ball);
    pub static mut lbl_801761F0: [u32_; 4usize];
    pub static mut lbl_801EEEC0: [u8_; 12usize];
    pub fn _force_bss_order_lbl_801EEEC0() -> *mut ::core::ffi::c_void;
    pub static mut lbl_801EEECC: [Struct801EEEC0; 4usize];
    pub fn avdisp_init();
    pub fn func_8008D788();
    pub fn avdisp_allocate_matrices(count: ::core::ffi::c_int) -> *mut ::core::ffi::c_void;
    pub fn load_gma(fileName: *mut ::core::ffi::c_char, tpl: *mut TPL) -> *mut GMA;
    pub fn load_gma_from_aram(aramSrc: u32_, size: u32_, tpl: *mut TPL) -> *mut GMA;
    pub fn free_gma(gma: *mut GMA);
    pub fn load_tpl(fileName: *mut ::core::ffi::c_char) -> *mut TPL;
    pub fn load_tpl_from_aram(aramSrc: u32_, size: u32_) -> *mut TPL;
    pub fn create_tpl_tex_objs(tpl: *mut TPL) -> *mut GXTexObj;
    pub fn free_tpl(tpl: *mut TPL);
    pub fn avdisp_set_bound_sphere_scale(arg1: f32);
    pub fn avdisp_set_ambient(arg1: f32, arg2: f32, arg3: f32);
    pub fn avdisp_draw_model_culled_sort_translucent(arg1: *mut GMAModel);
    pub fn avdisp_draw_model_culled_sort_none(arg1: *mut GMAModel);
    pub fn avdisp_draw_model_culled_sort_all();
    pub fn avdisp_set_alpha(alpha: f32);
    pub fn avdisp_set_light_mask(lightMask: u32_);
    pub fn avdisp_set_inf_light_dir(a: *mut Vec);
    pub fn avdisp_set_inf_light_color(arg1: f32, arg2: f32, arg3: f32);
    pub fn avdisp_set_z_mode(compareEnable: GXBool, compareFunc: GXCompare, updateEnable: GXBool);
    pub fn u_avdisp_set_some_func_1(arg1: EnvMapFunc) -> EnvMapFunc;
    pub fn u_avdisp_set_some_func_2(arg1: Func802F20F0) -> Func802F20F0;
    pub fn avdisp_draw_model_unculled_sort_translucent(a: *mut GMAModel);
    pub fn avdisp_draw_model_unculled_sort_none(a: *mut GMAModel);
    pub fn avdisp_draw_model_unculled_sort_all(a: *mut GMAModel);
    pub fn u_avdisp_draw_model_4(model: *mut GMAModel);
    pub fn avdisp_enable_custom_tex_mtx(arg1: u32_) -> u32_;
    pub fn avdisp_set_custom_tex_mtx(unused: ::core::ffi::c_int, mtx: *mut [f32_; 4usize]);
    pub fn avdisp_set_post_mult_color(arg1: f32, arg2: f32, arg3: f32, arg4: f32);
    pub fn avdisp_set_post_add_color(arg1: f32, arg2: f32, arg3: f32, arg4: f32);
    pub fn avdisp_enable_fog(a: ::core::ffi::c_int);
    pub fn avdisp_set_fog_params(arg1: ::core::ffi::c_int, arg2: f32, arg3: f32);
    pub fn avdisp_set_fog_color(a: u8_, b: u8_, c: u8_);
    pub fn gxcache_init() -> u32_;
    pub fn GXSetCullMode_cached(mode: GXCullMode);
    pub fn GXSetCullMode_cached_init(mode: GXCullMode, _cache: *mut GXCache);
    pub fn GXSetBlendMode_cached(
        type_: GXBlendMode,
        src_factor: GXBlendFactor,
        dst_factor: GXBlendFactor,
        op: GXLogicOp,
    );
    pub fn GXSetBlendMode_cached_init(
        type_: GXBlendMode,
        src_factor: GXBlendFactor,
        dst_factor: GXBlendFactor,
        op: GXLogicOp,
    );
    pub fn GXSetTevSwapModeTable_cached_init(
        id: GXTevSwapSel,
        red: GXTevColorChan,
        green: GXTevColorChan,
        blue: GXTevColorChan,
        alpha: GXTevColorChan,
    );
    pub fn GXSetTevSwapMode_cached(
        stage: GXTevStageID,
        ras_sel: GXTevSwapSel,
        tex_sel: GXTevSwapSel,
    );
    pub fn GXSetTevSwapMode_cached_init(
        stage: GXTevStageID,
        ras_sel: GXTevSwapSel,
        tex_sel: GXTevSwapSel,
    );
    pub fn GXSetFog_cached(
        type_: GXFogType,
        startz: f32,
        endz: f32,
        nearz: f32,
        farz: f32,
        color: GXColor,
    );
    pub fn GXSetFog_cached_init(
        type_: GXFogType,
        startz: f32,
        endz: f32,
        nearz: f32,
        farz: f32,
        color: GXColor,
    );
    pub fn GXSetColorUpdate_cached(update_enable: GXBool);
    pub fn GXSetColorUpdate_cached_init(update_enable: GXBool);
    pub fn GXSetAlphaUpdate_cached_init(update_enable: GXBool);
    pub fn GXSetZCompLoc_cached(before_tex: GXBool);
    pub fn GXSetZCompLoc_from_cache();
    pub fn GXSetZCompLoc_cached_init(before_tex: GXBool);
    pub fn GXSetTevColorIn_cached(
        stage: GXTevStageID,
        a: GXTevColorArg,
        b: GXTevColorArg,
        c: GXTevColorArg,
        d: GXTevColorArg,
    );
    pub fn GXSetTevColorIn_cached_init(
        stage: GXTevStageID,
        a: GXTevColorArg,
        b: GXTevColorArg,
        c: GXTevColorArg,
        d: GXTevColorArg,
    );
    pub fn GXSetTevAlphaIn_cached(
        stage: GXTevStageID,
        a: GXTevAlphaArg,
        b: GXTevAlphaArg,
        c: GXTevAlphaArg,
        d: GXTevAlphaArg,
    );
    pub fn GXSetTevAlphaIn_cached_init(
        stage: GXTevStageID,
        a: GXTevAlphaArg,
        b: GXTevAlphaArg,
        c: GXTevAlphaArg,
        d: GXTevAlphaArg,
    );
    pub fn GXSetTevColorOp_cached(
        stage: GXTevStageID,
        op: GXTevOp,
        bias: GXTevBias,
        scale: GXTevScale,
        clamp: GXBool,
        out_reg: GXTevRegID,
    );
    pub fn GXSetTevColorOp_cached_init(
        stage: GXTevStageID,
        op: GXTevOp,
        bias: GXTevBias,
        scale: GXTevScale,
        clamp: GXBool,
        out_reg: GXTevRegID,
    );
    pub fn GXSetTevAlphaOp_cached(
        stage: GXTevStageID,
        op: GXTevOp,
        bias: GXTevBias,
        scale: GXTevScale,
        clamp: GXBool,
        out_reg: GXTevRegID,
    );
    pub fn GXSetTevAlphaOp_cached_init(
        stage: GXTevStageID,
        op: GXTevOp,
        bias: GXTevBias,
        scale: GXTevScale,
        clamp: GXBool,
        out_reg: GXTevRegID,
    );
    pub fn GXSetTevOp_cached(stage: GXTevStageID, mode: s32);
    pub fn GXSetTevOrder_cached(
        stage: GXTevStageID,
        coord: GXTexCoordID,
        map: GXTexMapID,
        color: GXChannelID,
    );
    pub fn GXSetTevOrder_cached_init(
        stage: GXTevStageID,
        coord: GXTexCoordID,
        map: GXTexMapID,
        color: GXChannelID,
    );
    pub fn GXSetTevKColorSel_cached(stage: GXTevStageID, sel: GXTevKColorSel);
    pub fn GXSetTevKColorSel_cached_init(stage: GXTevStageID, sel: GXTevKColorSel);
    pub fn GXSetTevKAlphaSel_cached(stage: GXTevStageID, sel: GXTevKAlphaSel);
    pub fn GXSetTevKAlphaSel_cached_init(stage: GXTevStageID, sel: GXTevKAlphaSel);
    pub fn GXSetNumTevStages_cached(nStages: u8_);
    pub fn GXSetNumTevStages_from_cache();
    pub fn GXSetTevKColor_cached(id: GXTevKColorID, color: GXColor);
    pub fn GXSetTevKColor_cached_init(id: GXTevKColorID, color: GXColor);
    pub fn GXLoadTexObj_cached(obj: *mut GXTexObj, id: GXTexMapID);
    pub fn gxutil_begin_display_list(arg1: *mut ::core::ffi::c_void, arg2: u32_);
    pub fn gxutil_end_display_list() -> u32_;
    pub fn gxutil_clear_vtx_attrs();
    pub fn gxutil_set_vtx_attrs(arg1: u32_);
    pub fn gxutil_dummy();
    pub fn gxutil_load_pos_nrm_matrix(arg1: *mut [f32_; 4usize], arg2: ::core::ffi::c_int);
    pub fn u_init_bg_fog_params();
    pub fn fog_main();
    pub fn u_gxutil_set_fog_enabled(arg1: s8);
    pub fn u_gxutil_fog_something_2();
    pub fn fog_gx_set();
    pub fn gxutil_set_line_width(arg1: ::core::ffi::c_int);
    pub fn gxutil_set_line_blend_params(
        blendMode: GXBlendMode,
        srcFactor: GXBlendFactor,
        dstFactor: GXBlendFactor,
        blendLogicOp: GXLogicOp,
    );
    pub fn gxutil_draw_line(pos1: *mut Vec, pos2: *mut Vec, c: *mut GXColor);
    pub fn gxutil_draw_line_strip(numPoints: u16_, points: *mut Point3d, color: *mut GXColor);
    pub fn gxutil_draw_line_deferred(start: *mut Point3d, end: *mut Point3d, c: *mut GXColor);
    pub fn gxutil_draw_line_multicolor_deferred(
        start: *mut PointWithColor,
        end: *mut PointWithColor,
    );
    pub fn prepare_for_drawing_lines();
    pub static mut lbl_80292E70: [u8_; 131072usize];
    pub fn ord_tbl_init(
        depthOffset: f32,
        minDepth: f32,
        maxDepth: f32,
        buffer: *mut ::core::ffi::c_void,
        maxEntries: ::core::ffi::c_int,
    );
    pub fn ord_tbl_reset();
    pub fn ord_tbl_set_depth_offset(offset: f32);
    pub fn ord_tbl_add_depth_offset(offset: f32);
    pub fn ord_tbl_get_entry_for_pos(pos: *mut Point3d) -> *mut OrdTblNode;
    pub fn ord_tbl_get_entry_for_pos_offset_index(
        pos: *mut Point3d,
        indexOffset: ::core::ffi::c_int,
    ) -> *mut OrdTblNode;
    pub fn ord_tbl_draw_nodes();
    pub fn ord_tbl_init_buffer(addr: *mut ::core::ffi::c_void, size: u32_);
    pub fn ord_tbl_insert_node(tblEntry: *mut OrdTblNode, newNode: *mut OrdTblNode);
    pub fn ord_tbl_alloc_node(size: u32_) -> *mut ::core::ffi::c_void;
    pub static mut __cpReg: *mut u16_;
    pub static mut __piReg: *mut u32_;
    pub static mut gx: *mut GX;
    pub fn __GXSaveCPUFifoAux(arg1: *mut __GXFifoObj);
    pub fn __GXSendFlushPrim();
    pub fn __GXSetSUTexSize();
    pub fn __GXUpdateBPMask();
    pub fn __GXSetVCD();
    pub fn __GXSetVAT();
    pub fn __GXSetMatrixIndex(arg1: ::core::ffi::c_int);
    pub fn __GXSetRange(arg1: f32_, arg2: f32_);
    pub fn __GXFifoInit();
    pub fn __GXPEInit();
    pub fn __GXFlushTextureState();
    pub static mut s_animMtxPtrs: *mut *mut Mtx;
    pub static mut s_transformMatrices: *mut Mtx;
    pub static mut s_ambientRed: f32;
    pub static mut s_ambientGreen: f32;
    pub static mut s_ambientBlue: f32;
    pub static mut s_materialAlpha: f32;
    pub static mut s_avdispLightMask: u32_;
    pub static mut s_boundSphereScale: f32;
    pub static mut s_cullMode: GXCullMode;
    pub static mut lbl_802F20EC: EnvMapFunc;
    pub static mut u_customMaterialFunc: Func802F20F0;
    pub static mut u_someColorScaleR: f32;
    pub static mut u_someColorScaleG: f32;
    pub static mut u_someColorScaleB: f32;
    pub static mut s_zModeCompareEnable: GXBool;
    pub static mut s_zModeUpdateEnable: GXBool;
    pub static mut s_zModeCompareFunc: GXCompare;
    pub static mut s_useCustomTexMtx: s32;
    pub static mut s_usePostMultiplyTevStage: s32;
    pub static mut s_postMultiplyColor: GXColor;
    pub static mut s_usePostAddTevStage: s32;
    pub static mut s_postAddColor: GXColor;
    pub static mut s_avdispFogEnabled: s32;
    pub static mut s_avdispFogType: u32_;
    pub static mut s_avdispFogColor: GXColor;
    pub static mut s_avdispFogStartZ: f32;
    pub static mut s_avdispFogEndZ: f32;
    pub static mut s_infLightDir: Vec;
    pub static mut s_customTexMtx: Mtx;
    pub static mut s_identityTexMtx: Mtx;
    pub static mut s_materialCache: _bindgen_ty_51;
    pub static mut s_specularTexObj: GXTexObj;
    pub static mut filler_802B4F50: [u8_; 16usize];
    pub static mut avdispLzssHeader: [u8_; 32usize];
    pub static mut unknownTexImg: [u8_; 64usize];
    pub fn avdisp_get_matrices(model: *mut GMAModel, dest: *mut *mut Mtx);
    pub fn load_model(fileName: *mut ::core::ffi::c_char, tpl: *mut TPL) -> *mut GMAModel;
    pub fn free_model(model: *mut GMAModel);
    pub fn avdisp_get_eff_vertices(model: *mut GMAModel) -> *mut ::core::ffi::c_void;
    pub fn avdisp_get_eff_vtxinfo(model: *mut GMAModel) -> *mut GMAEffVtxInfo;
    pub fn set_shape_flags_in_model(model: *mut GMAModel, flags: u32_);
    pub fn thread_init(work: *mut Thread, count: ::core::ffi::c_int);
    pub fn thread_loop(excludeMask: u32_);
    pub fn thread_create(
        func: ThreadCallback,
        ape: *mut Ape,
        group: ThreadGroup,
    ) -> ::core::ffi::c_int;
    pub fn thread_exit();
    pub fn thread_kill(threadId: ::core::ffi::c_int);
    pub static mut s_freeThread: *mut Thread;
    pub static mut s_threadWork: *mut Thread;
    pub static mut s_currentThread: *mut Thread;
    pub static mut s_restoreThread: *mut Thread;
    pub static mut s_threadGroups: [*mut Thread; 20usize];
    pub static mut string_No_Define_2: [::core::ffi::c_char; 10usize];
    pub static mut bmpAdvNames: [*mut ::core::ffi::c_char; 26usize];
    pub fn fabs(x: f64) -> f64;
    pub fn sin(x: f64) -> f64;
    pub fn cos(x: f64) -> f64;
    pub fn sinf(x: f32) -> f32;
    pub fn cosf(x: f32) -> f32;
    pub fn tanf(x: f32) -> f32;
    pub fn acosf(x: f32) -> f32;
    pub fn powf(base: f32, exponent: f32) -> f32;
    pub fn ldexp(x: f64, exp: ::core::ffi::c_int) -> f64;
    pub fn scalbn(x: f64, n: ::core::ffi::c_int) -> f64;
    pub fn copysign(x: f64, y: f64) -> f64;
    pub fn floor(x: f64) -> f64;
    pub fn fabsf(x: f32) -> f32;
    pub fn __fpclassifyf(x: f32) -> ::core::ffi::c_long;
    pub fn __fpclassifyd(x: f64) -> ::core::ffi::c_long;
    pub static mut textDrawInfo: TextDrawInfo;
    pub fn _force_bss_order_textDrawInfo() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_spriteWork() -> *mut ::core::ffi::c_void;
    pub static mut lbl_8028FE58: [Struct8028FE58; 66usize];
    pub fn _force_bss_order_lbl_8028FE58() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_screenFadeInfo() -> *mut ::core::ffi::c_void;
    pub static mut spriteTileOffsets: [_bindgen_ty_52; 8usize];
    pub static mut alignStrArray: [*mut ::core::ffi::c_char; 10usize];
    pub static mut symbolGlyphs: [GlyphDesc; 32usize];
    pub static mut buttonGlyphs: [GlyphDesc; 14usize];
    pub static mut singleKanjiGlyphs: [GlyphDesc; 80usize];
    pub static mut doubleKanjiGlyphs: [DoubleKanjiGlyph; 59usize];
    pub static lbl_80117A80: [s32; 240usize];
    pub static lbl_80117E40: [s32; 128usize];
    pub static lbl_80118040: [s32; 128usize];
    pub static lbl_80118240: [s32; 128usize];
    pub static lbl_80118440: [s32; 128usize];
    pub static lbl_80118640: [s32; 128usize];
    pub fn parse_char_sequence(
        parseState: *mut StringParseState,
        str_: *mut ::core::ffi::c_char,
        color: *mut s32,
        skip: *mut s32,
        special: *mut s32,
    ) -> ::core::ffi::c_int;
    pub fn get_font_bitmap_id(fontId: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn func_80071B08(a: ::core::ffi::c_int);
    pub fn func_80072DA8(
        fontId: ::core::ffi::c_int,
        str_: *mut ::core::ffi::c_char,
        c: ::core::ffi::c_int,
    ) -> f32;
    pub fn nlSprPut_check(params: *mut NLsprarg) -> ::core::ffi::c_int;
    pub fn monkey_sprite_draw(arg1: *mut Sprite);
    pub fn u_get_monkey_bitmap_id(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub static mut polyDisp: PolyDisp;
    pub fn polydisp_init();
    pub fn polydisp_main();
    pub fn draw_normal_game_scene();
    pub fn func_8000D5B8();
    pub fn draw_monkey();
    pub fn polydisp_set_some_color_based_on_curr_mode(opacity: f32);
    pub fn polydisp_set_nlobj_fade_color_from_goal_type(arg1: ::core::ffi::c_int);
    pub fn fade_color_base_default();
    pub fn fade_color_base_default_set(a: f32, b: f32, c: f32);
    pub fn get_height_mirror_plane(arg1: *mut Vec) -> f32;
    pub fn get_height_world_mirror_plane(arg1: *mut Vec) -> f32;
    pub fn func_8000E53C(pos: *mut Vec) -> f32;
    pub fn draw_ranking_floor_num(
        arg0: ::core::ffi::c_int,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: *mut ScoreRecord,
    );
    pub fn func_800885EC();
    pub fn init_ranking_screen(arg1: ::core::ffi::c_int);
    pub fn ranking_screen_8008897C(arg1: ::core::ffi::c_int);
    pub fn ranking_screen_80088A10();
    pub fn func_80088AF4() -> ::core::ffi::c_int;
    pub fn func_80088C18() -> ::core::ffi::c_int;
    pub fn show_rank_title_logo();
    pub fn func_80088E90();
    pub fn u_show_some_ranking_sprite();
    pub fn ranking_screen_80088FD4(arg1: ::core::ffi::c_int);
    pub fn collide_ball_with_stage(b: *mut PhysicsBall, arg1: *mut Stage);
    pub fn coligrid_lookup(coliHeader: *mut StageAnimGroup, x: f32_, z: f32_) -> *mut s16;
    pub fn collide_ball_with_tri_face(physBall: *mut PhysicsBall, tri: *mut StageColiTri);
    pub fn collide_ball_with_tri_edges(physBall: *mut PhysicsBall, tri: *mut StageColiTri);
    pub fn collide_ball_with_tri_edge(
        physBall: *mut PhysicsBall,
        localBallPos: *mut Vec,
        localBallPrevPos: *mut Vec,
        edge: *mut ColiEdge,
    );
    pub fn collide_ball_with_tri_verts(physBall: *mut PhysicsBall, tri: *mut StageColiTri);
    pub fn collide_ball_with_tri_vert(
        arg1: *mut PhysicsBall,
        arg2: *mut Point3d,
        arg3: *mut Point2d,
    );
    pub fn collide_ball_with_rect(physBall: *mut PhysicsBall, rect: *mut ColiRect);
    pub fn collide_ball_with_cylinder(arg1: *mut PhysicsBall, cylinder: *mut StageColiCylinder);
    pub fn collide_ball_with_circle(ball: *mut PhysicsBall, circle: *mut ColiCircle);
    pub fn collide_ball_with_sphere(arg1: *mut PhysicsBall, sphere: *mut StageColiSphere);
    pub fn collide_ball_with_cone(arg1: *mut PhysicsBall, cone: *mut StageColiCone);
    pub fn collide_ball_with_plane(physBall: *mut PhysicsBall, coliHit: *mut ColiPlane);
    pub fn test_line_intersects_rect(
        lineStart: *mut Point3d,
        lineEnd: *mut Point3d,
        rect: *mut ColiRect,
    ) -> u32_;
    pub fn collide_ball_with_jamabar(ball: *mut PhysicsBall, stobj: *mut Stobj);
    pub fn raycast_stage_down(
        rayOrigin: *mut Point3d,
        outHit: *mut RaycastHit,
        outVelAtPoint: *mut Vec,
    ) -> ::core::ffi::c_int;
    pub fn raycast_tri(rayOrigin: *mut Point3d, rayDir: *mut Vec, tri: *mut StageColiTri) -> u32_;
    pub fn raycast_cone(
        rayOrigin: *mut Point3d,
        rayDir: *mut Point3d,
        cone: *mut StageColiCone,
        outHitPos: *mut Point3d,
        outHitNormal: *mut Vec,
    ) -> u32_;
    pub fn raycast_sphere(
        rayOrigin: *mut Point3d,
        rayDir: *mut Point3d,
        sphere: *mut StageColiSphere,
        outHitPos: *mut Point3d,
        outHitNormal: *mut Vec,
    ) -> u32_;
    pub fn raycast_cylinder(
        rayOrigin: *mut Point3d,
        rayDir: *mut Point3d,
        cylinder: *mut StageColiCylinder,
        outHitPos: *mut Point3d,
        outHitNormal: *mut Vec,
    ) -> u32_;
    pub fn collide_ball_with_goal(ball: *mut PhysicsBall, goal: *mut StageGoal);
    pub fn u_collide_ball_with_dynstageparts(
        arg1: *mut PhysicsBall,
        dynStageParts: *mut DynamicStagePart,
    );
    pub fn u_draw_stage_collision();
    pub fn stcoli_sub30(src: *mut PhysicsBall, dest: *mut PhysicsBall);
    pub fn stcoli_sub31(src: *mut PhysicsBall, dest: *mut PhysicsBall);
    pub fn tf_physball_to_anim_group_space(
        physBall: *mut PhysicsBall,
        animGroupId: ::core::ffi::c_int,
    );
    pub fn stcoli_sub34(ball: *mut PhysicsBall, arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub static mut s_scoreRecordInfo: Struct802C6220;
    pub static mut s_buttonLetters: [::core::ffi::c_char; 48usize];
    pub static mut s_buttonModelNames: [*mut ::core::ffi::c_char; 48usize];
    pub static mut s_buttonModels: [*mut GMAModel; 48usize];
    pub static mut s_nameEntryButtons: [NameEntryButton; 48usize];
    pub static mut s_nameEntry: _bindgen_ty_56;
    pub static mut s_censoredNames: [*mut ::core::ffi::c_char; 6usize];
    pub static mut s_pushedButton: *mut NameEntryButton;
    pub static mut s_unused: [u8_; 48usize];
    pub static mut s_defaultNames: [[*mut ::core::ffi::c_char; 5usize]; 3usize];
    pub fn func_8005AEA8(arg1: *mut NlVtxTypeA);
    pub fn func_8005AFB8(arg1: *mut NlVtxTypeB);
    pub fn func_8005B0C8(arg1: *mut NlVtxTypeA);
    pub static mut charaGMAs: [*mut GMA; 8usize];
    pub static mut shirtTexObjs: [*mut GXTexObj; 4usize];
    pub static mut u_animTransformMatrices: *mut *mut Mtx;
    pub fn mot_ape_8008A55C(
        a: u32_,
        b: *mut BodyPart,
        c: ::core::ffi::c_int,
        d: ::core::ffi::c_int,
    );
    pub fn mot_ape_init();
    pub fn u_something_with_skel_model_names();
    pub fn ape_destroy(arg1: *mut Ape);
    pub fn u_make_ape(arg1: Character) -> *mut Ape;
    pub fn mot_ape_set_some_var_1(arg1: ::core::ffi::c_int);
    pub fn u_start_indexed_anim(arg1: *mut Ape, arg2: ::core::ffi::c_int, arg3: ::core::ffi::c_int);
    pub fn new_ape_stat_motion(
        arg1: *mut Ape,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
        arg4: ::core::ffi::c_int,
        arg5: f32,
    );
    pub fn mot_ape_set_default_lod(arg1: ::core::ffi::c_int);
    pub fn set_ape_model_lod(arg1: *mut Ape, arg2: ::core::ffi::c_int);
    pub fn mot_ape_8008BFB4(
        ape: *mut Ape,
        b: ::core::ffi::c_int,
        c: *mut ::core::ffi::c_int,
        d: *mut f32,
    );
    pub fn mot_ape_8008BFDC(arg1: *mut Ape, arg2: u16_, arg3: u16_);
    pub fn ape_face_dir(arg1: *mut Ape, arg2: *mut Vec);
    pub fn mot_ape_set_quat_from_vec(arg1: *mut Ape, arg2: *mut Vec);
    pub fn u_set_global_skelanim_speed_scale(arg1: f32);
    pub fn ape_skel_anim_main(arg1: *mut Ape);
    pub fn mot_ape_thread(ape: *mut Ape, b: ::core::ffi::c_int);
    pub static neutralFaceTable: [u32_; 4usize];
    pub static angryFaceTable: [u32_; 48usize];
    pub static blinkFaceTable: [u32_; 48usize];
    pub static smileFaceTable: [u32_; 24usize];
    pub static blinkFaceTable2: [u32_; 12usize];
    pub static afraidFaceTable: [u32_; 48usize];
    pub static afraidFaceTable2: [u32_; 4usize];
    pub static afraidFaceTable3: [u32_; 12usize];
    pub static booingFaceTable: [u32_; 16usize];
    pub static booingFaceTable2: [u32_; 16usize];
    pub static unknownFaceTable: [u32_; 13usize];
    pub fn ev_mouse_init();
    pub fn ev_mouse_main();
    pub fn ev_mouse_dest();
    pub fn mouse_draw();
    pub static mut mouse: Mouse;
    pub fn ev_obj_collision_init();
    pub fn ev_obj_collision_main();
    pub fn ev_obj_collision_dest();
    pub fn func_8006A9B8(
        arg1: *mut Point3d,
        arg2: *mut Point3d,
        arg3: *mut Point3d,
        arg4: *mut Point3d,
        arg5: f32,
        arg6: f32,
    ) -> u32_;
    pub fn func_8006AAEC(
        arg1: *mut Point3d,
        arg2: *mut Point3d,
        arg3: *mut Point3d,
        arg4: *mut Point3d,
        arg5: f32,
        arg6: f32,
    ) -> u32_;
    pub fn func_8006AD3C(arg1: *mut Vec, arg2: *mut Vec, arg3: *mut Vec, arg4: f32, arg5: f32);
    pub static mut jamabarColiRects: [ColiRect; 4usize];
    pub fn stcoli_sub23(arg1: *mut PhysicsBall, arg2: *mut ColiSub24);
    pub fn stcoli_sub24(arg1: *mut PhysicsBall, arg2: *mut ColiSub24);
    pub fn stcoli_sub22(arg0: *mut PhysicsBall, arg1: *mut ColiSub24);
    pub fn draw_dynamic_stage_collision(dynStageParts: *mut DynamicStagePart);
    pub fn draw_collision_triangle(tri: *mut StageColiTri);
    pub fn stcoli_sub29(
        tri: *mut StageColiTri,
        arg1: *mut Point3d,
        arg2: *mut Point3d,
        arg3: *mut Point3d,
    );
    pub fn func_80042214(a: u32_) -> ::core::ffi::c_int;
    pub fn stcoli_sub33(ball: *mut PhysicsBall, stage: *mut Stage);
    pub fn stcoli_sub35(ball: *mut PhysicsBall, stage: *mut Stage);
    pub fn lens_flare_init();
    pub fn lens_flare_main();
    pub fn lens_flare_draw(cameraId: ::core::ffi::c_int);
    pub fn lens_flare_draw_mask(cameraId: ::core::ffi::c_int);
    pub fn lens_flare_set_light_position(pos: *mut Point3d);
    pub fn lens_flare_set_light_angle(angleY: ::core::ffi::c_int, angleX: ::core::ffi::c_int);
    pub fn lens_flare_set_scale(scale: f32);
    pub static mut jungleBgObjFind: [BGModelSearch; 2usize];
    pub static mut string_No_Define_11: [::core::ffi::c_char; 10usize];
    pub static mut bmpGlfNames: [*mut ::core::ffi::c_char; 52usize];
    pub fn MTEfcChangeAttributePC(model: *mut NlModel, arg1: u32_, arg2: u32_);
    pub fn MTEfcChangeAttributeITI(model: *mut NlModel, arg1: u32_, arg2: u32_);
    pub fn MTEfcChangeAttributeTI(model: *mut NlModel, arg1: u32_, arg2: u32_);
    pub static bgFogParamsTable: [FogParams; 2usize];
    pub static mut lineInfo: LineInfo;
    pub fn gxutil_draw_line_multicolor(start: *mut PointWithColor, end: *mut PointWithColor);
    pub static mut endBgModelFind: [BGModelSearch; 5usize];
    pub static mut endBgObjFind: [BGModelSearch; 2usize];
    pub fn func_80092498();
    pub fn func_800924CC();
    pub fn shadowerase_main();
    pub fn u_init_shadow_stuff_probably(arg1: *mut Struct80092B98) -> ::core::ffi::c_int;
    pub fn func_80092D34() -> ::core::ffi::c_int;
    pub fn u_draw_ball_shadow();
    pub fn func_80092F90(arg1: *mut Struct80092F90);
    pub static mut lbl_802F2150: s32;
    pub static mut lbl_802F2154: *mut SomeShadowStruct;
    pub static mut lbl_802B57A0: [SomeShadowStruct; 64usize];
    pub static mut shadowTexObj: GXTexObj;
    pub static mut lbl_802B57A0_0x3820: [s8; 256usize];
    pub static mut lbl_802B57A0_0x3920: Mtx;
    pub static mut lbl_802F1BD8: RelModule;
    pub static mut lbl_802F1BD4: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut menuCallback: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut lbl_802F02F8: [u8_; 6usize];
    pub static mut lbl_801EED50: _bindgen_ty_58;
    pub static mut lbl_801EED98: _bindgen_ty_59;
    pub static mut spaceBgModelFind: [BGModelSearch; 3usize];
    pub static mut spaceBgObjFind: [BGModelSearch; 3usize];
    pub static mut lbl_8027CC28: TevStageInfo;
    pub static mut s_singleBananaLODs: [ModelLOD; 5usize];
    pub static mut s_bananaBunchLODs: [ModelLOD; 3usize];
    pub static mut s_singleBananaLODsPtr: *mut ModelLOD;
    pub static mut s_bananaBunchLODsPtr: *mut ModelLOD;
    pub static mut s_bananaInfos: [BananaInfo; 4usize];
    pub static mut wtfisthis: [::core::ffi::c_char; 25usize];
    pub fn item_coin_dummy() -> f32;
    pub fn lbl_80057940(arg1: *mut NlVtxTypeA);
    pub fn ev_vibration_init();
    pub fn ev_vibration_main();
    pub fn ev_vibration_dest();
    pub fn vibration_control(
        contId: ::core::ffi::c_int,
        state: VibrationState,
        duration: ::core::ffi::c_int,
    );
    pub fn vibration_set_cont_enable_mask(contMask: u8_);
    pub fn vibration_get_cont_enable_mask() -> u8_;
    pub static mut s_nextUid: s16;
    pub static mut stobjTypeNames: [*mut ::core::ffi::c_char; 11usize];
    pub static mut stobjInitFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>; 12usize];
    pub static mut stobjMainFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>; 12usize];
    pub static mut stobjDrawFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>; 12usize];
    pub static mut stobjCollisionFuncs: [::core::option::Option<
        unsafe extern "C" fn(arg1: *mut Stobj, arg2: *mut PhysicsBall),
    >; 12usize];
    pub static mut stobjDestroyFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>; 12usize];
    pub static mut stobjDebugFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Stobj)>; 12usize];
    pub static mut string_STATUS___s_n_2: [::core::ffi::c_char; 12usize];
    pub static mut lbl_801BE25C: [::core::ffi::c_char; 25usize];
    pub static mut string_TYPE___s_n_2: [::core::ffi::c_char; 10usize];
    pub static mut string_PART_ID___d_n: [::core::ffi::c_char; 13usize];
    pub static mut string_POS__X__7_3f_n_2: [::core::ffi::c_char; 14usize];
    pub static mut string______Y__7_3f_n_2: [::core::ffi::c_char; 14usize];
    pub static mut string______Z__7_3f_n_2: [::core::ffi::c_char; 14usize];
    pub static mut string_SPD__X__7_3f_n_2: [::core::ffi::c_char; 14usize];
    pub static mut string_ROT__X_0x_04X_n_2: [::core::ffi::c_char; 15usize];
    pub static mut string______Y_0x_04X_n_2: [::core::ffi::c_char; 15usize];
    pub static mut string______Z_0x_04X_n_2: [::core::ffi::c_char; 15usize];
    pub static mut string_ROTSPD__X_0x_04X_n_2: [::core::ffi::c_char; 18usize];
    pub static mut string_________Y_0x_04X_n_2: [::core::ffi::c_char; 18usize];
    pub static mut string_________Z_0x_04X_n_2: [::core::ffi::c_char; 18usize];
    pub static mut string_COLI_RAD___7_3f_n_2: [::core::ffi::c_char; 17usize];
    pub static mut string_Flag__0x_08X_n_2: [::core::ffi::c_char; 14usize];
    pub static mut lbl_802F0B40: [::core::ffi::c_char; 2usize];
    pub static mut stobjDummyFuncs: StobjFuncs;
    pub fn func_8006B3E8(arg0: s32, arg1: *mut StobjFuncs);
    pub static mut lbl_801BE37C: [*mut *mut GMA; 3usize];
    pub static mut stmFireModelIDs: [s16; 32usize];
    pub fn DEMOSetFontType(attr: s32);
    pub fn DEMOLoadFont(
        texMap: GXTexMapID,
        texMtx: GXTexMtx,
        texFlt: DMTexFlt,
        texObj: *mut GXTexObj,
    );
    pub fn DEMOSetupScrnSpc(width: s32, height: s32, depth: f32);
    pub fn DrawFontChar(
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        z: ::core::ffi::c_int,
        xChar: ::core::ffi::c_int,
        yChar: ::core::ffi::c_int,
    );
    pub fn LoadSheet(image: *mut ::core::ffi::c_void, texMapID: GXTexMapID);
    pub fn DEMORFPuts(
        x: s16,
        y: s16,
        z: s16,
        string: *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub static mut goalTapes: [GoalTape; 8usize];
    pub static mut goalBags: [GoalBag; 8usize];
    pub static mut smallLCDModelIDs: [s16; 10usize];
    pub static mut largeLCDModelIDs: [s16; 10usize];
    pub fn deform_goaltape_model(
        arg0: *mut GoalTapeSegment,
        arg1: ::core::ffi::c_int,
        arg2: *mut NlModel,
        arg3: *mut NlModel,
    );
    pub fn open_goalbag(goalId: ::core::ffi::c_int, arg1: *mut PhysicsBall);
    pub fn close_goalbag(arg0: ::core::ffi::c_int);
    pub fn func_8006FCD0(arg1: *mut Point3d, arg2: f32) -> f32;
    pub fn func_8006FD44(tape: *mut GoalTape);
    pub static mut smallLCDModels: [*mut NlModel; 10usize];
    pub static mut largeLCDModels: [*mut NlModel; 10usize];
    pub static lbl_80117A58: Vec;
    pub static lbl_80117A64: Vec;
    pub fn calc_spline(x: f32, splineSegments: *mut Spline) -> f32;
    pub static mut lbl_801EEC80: _bindgen_ty_62;
    pub fn draw_3d_scene();
    pub fn draw_adv_3d_scene();
    pub fn draw_intro_av_logo();
    pub fn draw_adv_demo_scene();
    pub fn u_draw_tutorial_button_and_joystick();
    pub fn func_8000C388();
    pub fn func_8000C7A4();
    pub fn draw_live_arrow();
    pub fn draw_continue_scene();
    pub fn draw_extra_scene();
    pub fn draw_results_scene();
    pub fn draw_test_camera_target();
    pub fn draw_timer_bomb_fuse();
    pub fn set_backdrop_color();
    pub fn func_8000E134();
    pub fn func_8000E180();
    pub fn show_loading_msg();
    pub static mut lbl_80173FA8: [Struct80173FA8; 2usize];
    pub static mut lbl_80173FD0: [f32; 4usize];
    pub static lbl_802F2978: GXColor;
    pub fn draw_depth_mask(a: *mut DepthMaskParams);
    pub static mut arrowModelIDs: [u16_; 4usize];
    pub static mut bombSpark: _bindgen_ty_63;
    pub static mut bombSparkXKeyframes: [Keyframe; 10usize];
    pub static mut bombSparkYKeyframes: [Keyframe; 13usize];
    pub static mut s_courseScriptPtr: *mut CourseCommand;
    pub static mut u_jumpFloors: s32;
    pub static mut courseMesgTimer: u32_;
    pub static mut beginnerMainPlayPoints: [s16; 10usize];
    pub static mut advancedMainPlayPoints: [s16; 30usize];
    pub static mut expertMainPlayPoints: [s16; 50usize];
    pub static mut beginnerExtraPlayPoints: [s16; 3usize];
    pub static mut advancedExtraPlayPoints: [s16; 5usize];
    pub static mut expertExtraPlayPoints: [s16; 10usize];
    pub static mut masterPlayPoints: [s16; 10usize];
    pub static mut coursePlayPointLists: [*mut s16; 9usize];
    pub static mut basePlayPoints: [s16; 70usize];
    pub static mut rt_tbl: [[Struct8027CC58; 3usize]; 4usize];
    pub static mut s_visitedFloors: [u32_; 4usize];
    pub fn difficulty_to_course_id(arg1: ::core::ffi::c_int, arg2: u32_) -> ::core::ffi::c_int;
    pub fn mark_floor_visited(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int, arg3: u32_);
    pub fn game_course_init();
    pub fn game_course_next();
    pub fn func_80067AD4();
    pub fn spend_play_points();
    pub fn course_if_cleared_floor(arg1: *mut CourseCommand) -> u32_;
    pub fn course_if_time_elapsed(arg1: *mut CourseCommand) -> u32_;
    pub fn course_if_goal_type(arg1: *mut CourseCommand) -> u32_;
    pub fn course_then_jump_floor(arg1: *mut CourseCommand);
    pub fn course_sub_give_play_points(arg1: *mut CourseCommand);
    pub fn course_sub_give_play_points_dupe(arg1: *mut CourseCommand);
    pub static mut courseIfFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut CourseCommand) -> u32_>; 4usize];
    pub static mut courseThenFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut CourseCommand)>; 4usize];
    pub static mut s_beginnerMainScript: [CourseCommand; 35usize];
    pub static mut s_advancedMainScript: [CourseCommand; 125usize];
    pub static mut s_expertMainScript: [CourseCommand; 201usize];
    pub static mut s_beginnerExtraScript: [CourseCommand; 13usize];
    pub static mut s_advancedExtraScript: [CourseCommand; 19usize];
    pub static mut s_expertExtraScript: [CourseCommand; 41usize];
    pub static mut s_masterScript: [CourseCommand; 31usize];
    pub static mut lbl_801BD86C: [CourseCommand; 16usize];
    pub static mut s_courseScripts: [*mut CourseCommand; 12usize];
    pub fn play_points_textbox_callback(tbox: *mut TextBox);
    pub static s_bonusStages: [::core::ffi::c_int; 7usize];
    pub static s_courseFloorCounts: [::core::ffi::c_int; 13usize];
    pub fn func_80067310();
    pub fn is_floor_visited(
        difficulty: ::core::ffi::c_int,
        floor: ::core::ffi::c_int,
        flags: u32_,
    ) -> ::core::ffi::c_int;
    pub fn inline1();
    pub fn inline3(temp_r28: *mut Struct8027CC58);
    pub fn preview_create_with_allocated_tex(
        preview: *mut Preview,
        filename: *mut ::core::ffi::c_char,
        index: ::core::ffi::c_int,
        width: u32_,
        height: u32_,
        format: u32_,
    );
    pub fn preview_create(
        preview: *mut Preview,
        filename: *mut ::core::ffi::c_char,
        index: ::core::ffi::c_int,
        width: u32_,
        height: u32_,
        format: u32_,
    );
    pub fn start_preview_image_read(preview: *mut Preview, index: ::core::ffi::c_int);
    pub fn preview_sync(preview: *mut Preview);
    pub fn preview_main(preview: *mut Preview);
    pub fn preview_free();
    pub fn preview_draw(
        preview: *mut Preview,
        color0: u32_,
        color1: u32_,
        x: f32,
        y: f32,
        z: f32,
        width: f32,
        height: f32,
    );
    pub static mut previewLoaded: ::core::ffi::c_int;
    pub static mut lbl_801B86E4: [u8_; 0usize];
    pub static mut lbl_80206D00: [DynamicStagePart; 5usize];
    pub static mut lbl_802F0990: [Struct802F0990; 1usize];
    pub static mut stagePreview: Preview;
    pub fn _force_bss_order_lbl_80206D00() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_stagePreview() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_stageInfo() -> *mut ::core::ffi::c_void;
    pub static mut goalModelNames: [*mut ::core::ffi::c_char; 3usize];
    pub fn u_bonus_wave_warp_callback_1();
    pub fn u_bonus_wave_warp_callback_2();
    pub fn bonus_wave_raycast_down() -> u32_;
    pub static mut u_mapModels: [*mut NlModel; 72usize];
    pub static mut naomiStages: [u8_; 23usize];
    pub fn is_naomi_stage(stageId: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub static mut lbl_80209488: [*mut NlModel; 72usize];
    pub static mut lbl_802095A8: [*mut NlModel; 272usize];
    pub static mut lbl_80209D48: [Struct80209D48; 128usize];
    pub static mut lbl_8020A588: [Struct80209D48; 128usize];
    pub fn _force_bss_order_lbl_80209488() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_lbl_802095A8() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_lbl_802099E8() -> *mut ::core::ffi::c_void;
    pub static mut nlObjList: [*mut *mut NlObj; 3usize];
    pub fn func_80044E18_inline(r7: *mut Struct8020A348);
    pub fn string_match_len(
        a: *mut ::core::ffi::c_char,
        b: *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub static mut gmaList: [*mut *mut GMA; 3usize];
    pub fn find_model_in_gma_list(name: *mut ::core::ffi::c_char) -> *mut GMAModel;
    pub fn find_model_in_gma_list_2(
        name: *mut ::core::ffi::c_char,
        start: ::core::ffi::c_int,
        len: ::core::ffi::c_int,
    ) -> *mut GMAModel;
    pub static mut lbl_8020ADE4: _bindgen_ty_68;
    pub fn _force_bss_order_lbl_8020ADE4() -> *mut ::core::ffi::c_void;
    pub fn u_some_stage_vtx_callback_1();
    pub fn u_some_stage_vtx_callback_2();
    pub static mut lbl_801B87FC: [u8_; 16usize];
    pub static mut lbl_8020AE00: [u8_; 32usize];
    pub fn _force_bss_order_lbl_8020AE00() -> *mut ::core::ffi::c_void;
    pub fn func_80047518(func: Struct80206DEC_Func) -> Struct80206DEC_Func;
    pub static mut bonusBgModelFind: [BGModelSearch; 6usize];
    pub static mut bonusBgObjFind: [BGModelSearch; 2usize];
    pub fn lbl_80061B58();
    pub fn bg_bonus_envmap_ball(a: *mut GCMMatState_Unit);
    pub fn bg_bonus_model_find_proc(
        arg1: ::core::ffi::c_int,
        arg2: *mut GMAModelEntry,
    ) -> ::core::ffi::c_int;
    pub fn bg_bonus_obj_find_proc(
        arg1: ::core::ffi::c_int,
        arg2: *mut StageBgObject,
    ) -> ::core::ffi::c_int;
    pub static mut lbl_802F1B6C: u32_;
    pub static mut lbl_802F1B68: f32;
    pub fn _return_nan();
    pub fn _return_zero();
    pub fn _return_inf();
    pub fn _return_neg_inf();
    pub fn _sqrt_return_special() -> f32;
    pub fn _rsqrt_return_special() -> f32;
    pub fn approx_rsqrt(num: f32, oneHalf: f32) -> f32;
    pub fn mathutil_incr_mtx_stack();
    pub fn mtxA_tf(dest: *mut Vec, x: f32, y: f32, z: f32, w: f32);
    pub fn do_tf(dest: *mut Vec, x: f32, y: f32, z: f32, negate: BOOL);
    pub fn print_mtx(m: *mut [f32_; 4usize]);
    pub fn is_large_enough(n: f32) -> ::core::ffi::c_int;
    pub static crcTable: [u16_; 256usize];
    pub fn is_pausing_allowed() -> ::core::ffi::c_int;
    pub fn should_open_pause_menu() -> ::core::ffi::c_int;
    pub fn u_open_pause_menu(menuSprite: *mut Sprite);
    pub fn u_handle_pause_menu_navigation(menuSprite: *mut Sprite);
    pub fn u_pause_menu_load_how_to_play(menuSprite: *mut Sprite);
    pub fn pause_menu_handle_continue();
    pub fn pause_menu_handle_view_stage_save_replay(menuSprite: *mut Sprite);
    pub fn u_activate_pause_menu_item(menuSprite: *mut Sprite);
    pub fn unkFunc8000AECC(menuSprite: *mut Sprite);
    pub fn preview_init_common(
        preview: *mut Preview,
        filename: *mut ::core::ffi::c_char,
        index: ::core::ffi::c_int,
        width: u32_,
        height: u32_,
        format: GXTexFmt,
    );
    pub fn preview_read_callback(result: s32, fileInfo: *mut DVDFileInfo);
    pub static mut perfInfo: PerfInfo;
    pub static mut perfEnabled: u32_;
    pub fn perf_start_timer(timerId: ::core::ffi::c_int);
    pub fn perf_stop_timer(timerId2: ::core::ffi::c_int) -> u32_;
    pub fn perf_init();
    pub fn perf_frameend();
    pub fn perf_framestart();
    pub static mut perfTimers: [OSTick; 8usize];
    pub static mut zTrigTimer: s8;
    pub static mut currDispList: u32_;
    pub static mut perfDispListSizes: [u32_; 2usize];
    pub static mut perfDispLists: [*mut ::core::ffi::c_void; 2usize];
    pub fn perf_free(ptr: *mut ::core::ffi::c_void);
    pub fn perf_alloc(size: u32_) -> *mut ::core::ffi::c_void;
    pub fn perf_init_draw();
    pub static mut s_renderEffects: [RenderEffect; 4usize];
    pub static mut s_renderEffectFuncs: [RenderEffectFuncs; 7usize];
    pub fn func_80096134_inline(ptr: *mut RenderEffectFocus);
    pub static mut lbl_802F1CFC: u16_;
    pub static mut bitmapList: *mut Bitmap;
    pub static mut currFont: u32_;
    pub static mut prevString: *mut u8_;
    pub static mut currString: *mut ::core::ffi::c_uchar;
    pub static mut lbl_802F1CE8: f32;
    pub static mut textY: u16_;
    pub static mut textX: u16_;
    pub static mut textStartX: u16_;
    pub static mut bmpEndNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut bmpRnkNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut bmpSelNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut bmpNmlNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut bmpBwlNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut bmpRacNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut bmpFgtNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut bmpTgtNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut bmpHowNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut bmpCmdNames: [*mut ::core::ffi::c_char; 0usize];
    pub static mut bitmapLzssHeader: [u8_; 32usize];
    pub fn bitmap_draw(a: *mut Bitmap);
    pub fn get_lbl_802F3100() -> f32;
    pub static mut string_Manager_is_NULL__n: [::core::ffi::c_char; 18usize];
    pub static mut string_Select_texture_is_invalid__n: [::core::ffi::c_char; 28usize];
    pub static mut string_Bitmap_put_entry_is_FULL__n: [::core::ffi::c_char; 27usize];
    pub fn bitmap_calc_pos(bmp: *mut Bitmap, x: *mut f32, y: *mut f32, width: f32, height: f32);
    pub fn bitmap_draw_normal_char(chr: ::core::ffi::c_uchar);
    pub fn bitmap_draw_char(chr: ::core::ffi::c_uchar);
    pub static mut lbl_802F1B50: *mut ::core::ffi::c_void;
    pub static mut lbl_802F1B54: *mut ::core::ffi::c_void;
    pub static mut extraMemPresent: BOOL;
    pub static mut adjustedRenderMode: GXRenderModeObj;
    pub static mut secondFifoObj: GXFifoObj;
    pub static mut bufferInitInfo: [BufferInit; 4usize];
    pub static mut cardStat: CARDStat;
    pub static mut memcardInfo: MemcardInfo;
    pub static mut cardWorkArea: [u8_; 41216usize];
    pub static mut lbl_802C4480: MemcardGameData;
    pub static mut strFmtBufferLine1: [::core::ffi::c_char; 64usize];
    pub static mut strFmtBufferLine2: [::core::ffi::c_char; 64usize];
    pub static mut strFmtBufferLine3: [::core::ffi::c_char; 64usize];
    pub static mut lbl_802C4900: [::core::ffi::c_char; 64usize];
    pub static mut lbl_802F21A8: u8_;
    pub static mut memcardContents: *mut MemcardContents;
    pub static mut memcardMode: u8_;
    pub static mut lbl_802F21B1: u8_;
    pub static mut lbl_802F21B2: s8;
    pub static mut lbl_802F21B4: u32_;
    pub static mut replayFileIndex: u8_;
    pub static mut lbl_802F21B9: u8_;
    pub static mut replayFileInfo: *mut ReplayFileInfo;
    pub static mut lbl_802F21C0: u32_;
    pub static mut memcardReplayData: *mut _bindgen_ty_71;
    pub static mut lbl_802F21C8: u8_;
    pub fn func_800A4E70();
    pub fn func_800A4F04();
    pub fn func_8009F4B8(replay: *mut ReplayFileInfo, b: u32_);
    pub fn func_8009F4CC(a: u8_);
    pub fn memcard_cancel_and_unmount();
    pub fn sub_8009F554() -> ::core::ffi::c_int;
    pub static mut strMemCardError: [StringEntry; 1usize];
    pub static mut msgMemCardError: MemCardMessage;
    pub static mut strFmtBuffer: [StringEntry; 3usize];
    pub static mut msgFmtBuffer: MemCardMessage;
    pub static mut strMemCardCantRead: [StringEntry; 2usize];
    pub static mut strMemCardCantUse: [StringEntry; 1usize];
    pub static mut strMemCardNotInserted: [StringEntry; 2usize];
    pub static mut strMemCardNotInsertedAutosaveOff: [StringEntry; 2usize];
    pub static mut strMemCardNotInsertedSlotA: [StringEntry; 2usize];
    pub static mut strMemCardRemoved: [StringEntry; 2usize];
    pub static mut strMemCardNotSupported: [StringEntry; 2usize];
    pub static mut strMemCardFileDamagedPleaseFormat: [StringEntry; 4usize];
    pub static mut strMemCardFileDamaged: [StringEntry; 1usize];
    pub static mut strMemCardCantUse2: [StringEntry; 1usize];
    pub static mut stringEntry4: [StringEntry; 1usize];
    pub static mut strCantSaveFile: [StringEntry; 1usize];
    pub static mut strCantLoadFile: [StringEntry; 1usize];
    pub static mut strCantReadFile: [StringEntry; 1usize];
    pub static mut lbl_801D46B0: [StringEntry; 3usize];
    pub static mut lbl_801D46E0: [StringEntry; 3usize];
    pub static mut lbl_801D46F8: [StringEntry; 3usize];
    pub static mut lbl_801D46F8_blah: [StringEntry; 3usize];
    pub static mut lbl_801D4774: [StringEntry; 2usize];
    pub static mut lbl_801D4774_blah: [StringEntry; 3usize];
    pub static mut lbl_801D4774_blah2: [StringEntry; 2usize];
    pub static mut lbl_801D48A4: [StringEntry; 5usize];
    pub static mut lbl_801D4934: [StringEntry; 4usize];
    pub static mut lbl_801D49D0: [StringEntry; 3usize];
    pub static mut lbl_801D4A30: [StringEntry; 5usize];
    pub static mut lbl_801D4A80: [StringEntry; 4usize];
    pub static mut lbl_801D4B10: [StringEntry; 2usize];
    pub static mut lbl_801D4B58: [StringEntry; 5usize];
    pub static mut lbl_801D4B58_blah: [StringEntry; 5usize];
    pub static mut lbl_801D4C38: [StringEntry; 4usize];
    pub static mut strCantMakeMoreFiles: [StringEntry; 1usize];
    pub static mut strSaveSuccessNoMoreFiles: [StringEntry; 3usize];
    pub static mut strSaveFinished: [StringEntry; 1usize];
    pub static mut strLoadFinished: [StringEntry; 1usize];
    pub static mut strDeleteFinished: [StringEntry; 1usize];
    pub static mut strGameDataWrongVersion: [StringEntry; 2usize];
    pub static mut strGameDataDamaged: [StringEntry; 2usize];
    pub static mut strReplayDataDamaged: [StringEntry; 2usize];
    pub static mut strFormatInterrupted: [StringEntry; 1usize];
    pub static mut strSaveInterrupted: [StringEntry; 1usize];
    pub static mut strLoadInterrupted: [StringEntry; 1usize];
    pub static mut strFileSizeChanged: [StringEntry; 2usize];
    pub static mut strNoReplayData: [StringEntry; 4usize];
    pub static mut msgMemCardCantRead: MemCardMessage;
    pub static mut msgMemCardCantUse: MemCardMessage;
    pub static mut msgMemCardNotInserted: MemCardMessage;
    pub static mut msgMemCardNotInsertedAutosaveOff: MemCardMessage;
    pub static mut msgMemCardNotInsertedSlotA: MemCardMessage;
    pub static mut msgMemCardRemoved: MemCardMessage;
    pub static mut msgMemCardNotSupported: MemCardMessage;
    pub static mut msgMemCardDamaged: MemCardMessage;
    pub static mut msgMemCardFileDamagedPleaseFormat: MemCardMessage;
    pub static mut msgMemCardCantUse2: MemCardMessage;
    pub static mut lbl_802F14A0: MemCardMessage;
    pub static mut msgCantSaveFile: MemCardMessage;
    pub static mut msgCantLoadFile: MemCardMessage;
    pub static mut msgCantReadFile: MemCardMessage;
    pub static mut lbl_802F14C0: MemCardMessage;
    pub static mut lbl_802F14C8: MemCardMessage;
    pub static mut lbl_802F14D0: MemCardMessage;
    pub static mut lbl_802F14D8: MemCardMessage;
    pub static mut lbl_802F14E0: MemCardMessage;
    pub static mut lbl_802F14E8: MemCardMessage;
    pub static mut lbl_802F14F0: MemCardMessage;
    pub static mut lbl_802F14F8: MemCardMessage;
    pub static mut lbl_802F1500: MemCardMessage;
    pub static mut lbl_802F1508: MemCardMessage;
    pub static mut lbl_802F1510: MemCardMessage;
    pub static mut lbl_802F1518: MemCardMessage;
    pub static mut lbl_802F1520: MemCardMessage;
    pub static mut lbl_802F1528: MemCardMessage;
    pub static mut lbl_802F1530: MemCardMessage;
    pub static mut lbl_802F1538: MemCardMessage;
    pub static mut msgCantMakeMoreFiles: MemCardMessage;
    pub static mut msgSaveSuccessNoMoreFiles: MemCardMessage;
    pub static mut msgSaveFinished: MemCardMessage;
    pub static mut msgLoadFinished: MemCardMessage;
    pub static mut msgDeleteFinished: MemCardMessage;
    pub static mut msgGameDataWrongVersion: MemCardMessage;
    pub static mut msgGameDataDamaged: MemCardMessage;
    pub static mut msgReplayDataDamaged: MemCardMessage;
    pub static mut msgFormatInterrupted: MemCardMessage;
    pub static mut msgSaveInterrupted: MemCardMessage;
    pub static mut msgLoadInterrupted: MemCardMessage;
    pub static mut msgFileSizeChanged: MemCardMessage;
    pub static mut msgNoReplayData: MemCardMessage;
    pub static mut strPressBButton: [StringEntry; 1usize];
    pub static mut strPressBButtonNoSave: [StringEntry; 1usize];
    pub static mut strMemCardNumFreeBlocks: [StringEntry; 1usize];
    pub static mut strMemCardNumFreeBlock: [StringEntry; 1usize];
    pub static mut strMemCardNoFreeBlocks: [StringEntry; 1usize];
    pub static mut strAccessMemCard: [StringEntry; 1usize];
    pub static mut strSavingReplay: [StringEntry; 2usize];
    pub static mut strSavingGame: [StringEntry; 2usize];
    pub static mut strLoadingGame: [StringEntry; 2usize];
    pub static mut strMakeSelection: [StringEntry; 2usize];
    pub static mut strInsertMemcardSlotAPressA: [StringEntry; 3usize];
    pub static mut strFormatPrompt: [StringEntry; 4usize];
    pub static mut strFormatProgress: [StringEntry; 2usize];
    pub static mut strOverwritePrompt: [StringEntry; 4usize];
    pub static mut msgPressBButton: MemCardMessage;
    pub static mut msgPressBButtonNoSave: MemCardMessage;
    pub static mut msgMemCardNumFreeBlocks: MemCardMessage;
    pub static mut msgMemCardNumFreeBlock: MemCardMessage;
    pub static mut msgMemCardNoFreeBlocks: MemCardMessage;
    pub static mut msgAccessMemCard: MemCardMessage;
    pub static mut msgSavingReplay: MemCardMessage;
    pub static mut msgSavingGame: MemCardMessage;
    pub static mut msgLoadingGame: MemCardMessage;
    pub static mut msgMakeSelection: MemCardMessage;
    pub static mut msgInsertMemcardSlotAPressA: MemCardMessage;
    pub static mut msgFormatPrompt: MemCardMessage;
    pub static mut msgFormatProgress: MemCardMessage;
    pub static mut msgOverwritePrompt: MemCardMessage;
    pub static mut s_memcardMsgTable: [*mut MemCardMessage; 54usize];
    pub fn init_gamedata_file();
    pub fn init_replay_file_data();
    pub fn probe_memcard();
    pub fn mount_memcard();
    pub fn check_mount_memcard_result();
    pub fn verify_filesystem();
    pub fn check_verify_filesystem_result();
    pub fn open_memcard_file();
    pub fn check_card_free_space();
    pub fn create_memcard_file();
    pub fn check_create_memcard_file_result();
    pub fn write_memcard_file(data: *mut ::core::ffi::c_void);
    pub fn check_write_memcard_file_result();
    pub fn set_memcard_file_metadata();
    pub fn check_set_memcard_file_metadata_result();
    pub fn read_memcard_file(buffer: *mut ::core::ffi::c_void);
    pub fn check_read_memcard_file_result();
    pub fn get_memcard_file_metadata();
    pub fn format_memcard();
    pub fn check_format_memcard_result();
    pub fn get_memcard_file_metadata_2();
    pub fn replay_list_open_and_read();
    pub fn open_replay_file();
    pub fn delete_memcard_file(fileNo: ::core::ffi::c_int);
    pub fn check_delete_memcard_file_result();
    pub fn delete_gamedata_file();
    pub fn check_delete_gamedata_file_result();
    pub fn rename_gamedata_file();
    pub fn check_rename_gamedata_file_result();
    pub fn load_sequence();
    pub fn save_sequence();
    pub fn replay_save_sequence();
    pub fn replay_list_sequence();
    pub fn replay_load_sequence();
    pub fn replay_delete_sequence();
    pub static mut lbl_801D5724: NLsprarg;
    pub fn draw_memcard_msg(msg: *mut MemCardMessage, x: f32, y: f32);
    pub fn memcard_dummy();
    pub static mut lbl_802F1698: StringEntry;
    pub fn func_800A4DF0();
    pub static mut lbl_801D5A20: [u8_; 0usize];
    pub static mut lbl_801C7A70: SomeMotInfoStruct;
    pub static mut u_animMatrixIdxToJointIdx: [u32_; 15usize];
    pub static mut lbl_801C7ACC: [f32; 4usize];
    pub static mut lbl_801C7ADC: [u32_; 16usize];
    pub static mut lbl_801C7B1C: [s32; 6usize];
    pub fn ape_dummy_1(arg1: *mut Ape);
    pub fn ape_dummy_2(arg1: *mut Ape);
    pub fn ape_dummy_3(arg1: *mut Ape);
    pub fn ape_dummy_4(arg1: *mut Ape);
    pub fn find_shirt_materials_in_gma(
        charaId: Character,
        lod: ::core::ffi::c_int,
        model1: *mut GMAModel,
        model2: *mut GMAModel,
    );
    pub fn recolor_ape_shirt(ape: *mut Ape, unused: *mut GMAModel);
    pub fn mot_ape_8008CAAC(arg1: *mut Ape, arg2: f32);
    pub static mut apeDummyFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Ape)>; 10usize];
    pub static mut workMatrix: Mtx;
    pub static mut uselessArray: [u32_; 32usize];
    pub static mut apeStructs: [Ape; 16usize];
    pub static mut apeStructPtrs: [*mut Ape; 16usize];
    pub static mut charaTPLs: [*mut TPL; 8usize];
    pub static mut charaTplSizes: [u32_; 8usize];
    pub static mut charaTplAramAddrs: [u32_; 8usize];
    pub static mut charaGmaSizes: [u32_; 8usize];
    pub static mut charaGmaAramAddrs: [u32_; 8usize];
    pub static mut shirtTplSizes: [u32_; 4usize];
    pub static mut shirtTplAramAddrs: [u32_; 4usize];
    pub static mut shirtTPLs: [*mut TPL; 4usize];
    pub static mut lbl_802B47F0: [*mut GMAShape; 4usize];
    pub static mut apeShirtMaterials: [*mut GMATevLayer; 8usize];
    pub static mut lbl_802B4820: Mtx;
    pub static mut lbl_802B4850: [Mtx; 15usize];
    pub static mut unused802B4B20: [u8_; 720usize];
    pub static mut u_apeTextures: [*mut GXTexObj; 8usize];
    pub static mut charaModelLoaded: [u8_; 8usize];
    pub static mut lbl_802F2094: [u8_; 8usize];
    pub static mut lbl_802F2090: ::core::ffi::c_int;
    pub static mut lbl_802F208C: u8_;
    pub static mut lbl_802F2074: s8;
    pub static mut transferInProgress: ::core::ffi::c_int;
    pub static mut lbl_802F206C: s32;
    pub fn aram_transfer_callback(a: u32_);
    pub fn load_character_resources();
    pub fn u_find_ape_body_part(
        filesInfo: *const ApeGfxFileInfo,
        lod: ::core::ffi::c_int,
        c: *mut BodyPartNameInfo,
    );
    pub fn u_create_joints_probably(skel: *mut Skeleton) -> *mut ApeAnimationThing;
    pub fn u_iter_joints_80089BD4(joint: *mut AnimJoint);
    pub fn func_80089CBC(
        unused: *mut ::core::ffi::c_void,
        b: ::core::ffi::c_int,
        c: ::core::ffi::c_int,
    ) -> *mut Struct80089CBC;
    pub fn func_80089CF4_inline(ape: *mut Ape);
    pub fn u_start_new_anim_maybe(ape: *mut Ape, animId: ::core::ffi::c_int);
    pub fn emptyfunc();
    pub fn return_0() -> ::core::ffi::c_int;
    pub fn u_iter_joints_8008A124(joint: *mut AnimJoint, b: f32);
    pub fn u_iter_joints_8008A2C4(joint: *mut AnimJoint);
    pub fn u_iter_joints_8008A3A4(r28: *mut AnimJoint, r29: *mut AnimJoint, c: f32);
    pub static lbl_802F56D8: f64;
    pub fn func_8008A7F0_inline(ape: *mut Ape, b: *mut ApeAnimationThing);
    pub fn u_advance_ape_anim(ape: *mut Ape, b: *mut ApeAnimationThing);
    pub fn u_free_character_graphics(chara: ::core::ffi::c_int, lod: ::core::ffi::c_int);
    pub fn mot_ape_next_shape(mesh: *mut GMAShape) -> *mut GMAShape;
    pub fn u_find_some_mesh_with_red(model: *mut GMAModel) -> *mut ::core::ffi::c_void;
    pub fn u_load_character_graphics(chara: Character, lod: ::core::ffi::c_int);
    pub static mut lbl_802F12D8: [u8_; 8usize];
    pub static mut lbl_802F12E0: [u8_; 8usize];
    pub fn u_make_ape_inline(ape: *mut Ape);
    pub static unused_80171980: Vec;
    pub fn func_8008B3B8_inline_3(skelIdx: u8_, r24_: *mut ApeAnimationThing);
    pub fn u_get_skeleton_index_from_name(skelName: *mut ::core::ffi::c_char) -> u8_;
    pub fn u_get_skeleton_from_name(skelName: *mut ::core::ffi::c_char, out: *mut *mut Skeleton);
    pub fn u_make_ape_sub(
        skelName: *mut ::core::ffi::c_char,
        modelName: *mut ::core::ffi::c_char,
    ) -> *mut Ape;
    pub fn force_lbl_802F56D4() -> f32;
    pub fn func_8008B9DC(ape: *mut Ape, b: ::core::ffi::c_int);
    pub fn mot_ape_8008BAA8(a: *mut ::core::ffi::c_int, b: *mut ::core::ffi::c_int);
    pub fn func_8008BFD8();
    pub fn u_draw_ape_transformed(ape: *mut Ape, joints: *mut AnimJoint);
    pub fn ape_draw_callback(arg1: *mut ApeDrawNode);
    pub static mut lbl_801C7D80: [u16_; 4usize];
    pub static mut lbl_801C7D88: [u16_; 4usize];
    pub static mut lbl_801C7D90: [u16_; 4usize];
    pub static mut lbl_801C7D98: [u16_; 4usize];
    pub static mut lbl_801C7DA0: [u16_; 4usize];
    pub static mut lbl_801C7DA8: [u16_; 4usize];
    pub static mut shirtTexIndexes: [*mut u16_; 8usize];
    pub fn find_material(model: *mut GMAModel, texIndex: u32_) -> *mut GMATevLayer;
    pub fn _force_bss_order_unused802B4B20() -> *mut ::core::ffi::c_void;
    pub fn do_object_collision();
    pub fn info_reset();
    pub fn _force_bss_order_lbl_801F3A8C() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_playerInfos() -> *mut ::core::ffi::c_void;
    pub static mut rankTexOffsets: [Struct801818D0; 4usize];
    pub fn bonus_count_sprite_main(dummy: *mut s8, sprite: *mut Sprite);
    pub fn bonus_banana_sprite_main(dummy: *mut s8, sprite: *mut Sprite);
    pub fn win_streak_sprite_main(dummy: *mut s8, sprite: *mut Sprite);
    pub fn rank_icon_sprite_main(dummy: *mut s8, sprite: *mut Sprite);
    pub fn rank_icon_sprite_draw(sprite: *mut Sprite);
    pub fn lbl_00000270();
    pub static mut lbl_000102B0: ::core::option::Option<unsafe extern "C" fn()>;
    pub fn make_flat_mirror_texture(unused: ::core::ffi::c_int, rendEfc: *mut RenderEffect);
    pub fn func_80097E80(unused: ::core::ffi::c_int, rendEfc: *mut RenderEffect);
    pub fn lbl_8009825C() -> u32_;
    pub fn make_wavy_mirror_texture(unused: ::core::ffi::c_int, rendEfc: *mut RenderEffect);
    pub fn func_80098B50(arg0: ::core::ffi::c_int, rendEfc: *mut RenderEffect);
    pub fn func_80098EB4(arg0: ::core::ffi::c_int, rendEfc: *mut RenderEffect);
    pub fn lbl_80098264() -> ::core::ffi::c_int;
    pub static lbl_80118D0C: [FacialAnimationSomething; 412usize];
    pub static lbl_8012346C: [FacialAnimationSomething; 349usize];
    pub static lbl_8012C234: [FacialAnimationSomething; 179usize];
    pub static lbl_80130AEC: [FacialAnimationSomething; 274usize];
    pub static lbl_80137A3C: [FacialAnimationSomething; 148usize];
    pub static lbl_8013B65C: [FacialAnimationSomething; 131usize];
    pub static lbl_8013EB94: [FacialAnimationSomething; 40usize];
    pub static lbl_8013FBD4: [FacialAnimationSomething; 122usize];
    pub static lbl_80142D64: [FacialAnimationSomething; 163usize];
    pub static lbl_80146F9C: [FacialAnimationSomething; 241usize];
    pub static lbl_8014D184: [FacialAnimationSomething; 258usize];
    pub static lbl_80153A54: [FacialAnimationSomething; 161usize];
    pub static lbl_80157BBC: [FacialAnimationSomething; 92usize];
    pub static lbl_8015A11C: [FacialAnimationSomething; 120usize];
    pub static lbl_8015D1DC: [FacialAnimationSomething; 94usize];
    pub static lbl_8015F80C: [FacialAnimationSomething; 75usize];
    pub static lbl_80161684: [FacialAnimationSomething; 56usize];
    pub static lbl_80162D44: [FacialAnimationSomething; 70usize];
    pub static lbl_801649B4: [FacialAnimationSomething; 75usize];
    pub static lbl_8016682C: [FacialAnimationSomething; 68usize];
    pub static lbl_801683CC: [FacialAnimationSomething; 21usize];
    pub static lbl_80168C54: [FacialAnimationSomething; 30usize];
    pub static lbl_80169884: [FacialAnimationSomething; 55usize];
    pub static lbl_8016AEDC: [FacialAnimationSomething; 41usize];
    pub static lbl_8016BF84: [FacialAnimationSomething; 38usize];
    pub static lbl_8016CEF4: [FacialAnimationSomething; 36usize];
    pub static lbl_8016DD94: [FacialAnimationSomething; 35usize];
    pub static lbl_8016EBCC: [FacialAnimationSomething; 21usize];
    pub static lbl_8016F454: [FacialAnimationSomething; 21usize];
    pub static lbl_8016FCDC: [FacialAnimationSomething; 70usize];
    pub fn clear_ord_table(ordTbl: *mut OrdTblNode, count: ::core::ffi::c_int, order: u32_);
    pub fn draw_nodes(node: *mut OrdTblNode);
    pub fn reset_alloc_info();
    pub static mut ordTblAllocInfo: _bindgen_ty_72;
    pub static mut string_No_Define_10: [::core::ffi::c_char; 10usize];
    pub static mut entryRemain: s32;
    pub static mut entryPtr: *mut PolyShadowUnit;
    pub static mut entryBuf: [PolyShadowUnit; 64usize];
    pub fn unload_sel_submode_rel();
    pub static mut selSubmodeRelNames: [*mut ::core::ffi::c_char; 19usize];
    pub fn effect_dummy_init(arg1: *mut Effect);
    pub fn effect_dummy_main(arg1: *mut Effect);
    pub fn effect_dummy_draw(arg1: *mut Effect);
    pub fn effect_dummy_destroy(arg1: *mut Effect);
    pub fn effect_paperfrag_init(arg1: *mut Effect);
    pub fn effect_paperfrag_main(arg1: *mut Effect);
    pub fn effect_paperfrag_draw(arg1: *mut Effect);
    pub fn effect_paperfrag_destroy(arg1: *mut Effect);
    pub fn effect_get_banana_init(arg1: *mut Effect);
    pub fn effect_get_banana_main(arg1: *mut Effect);
    pub fn effect_get_banana_draw(arg1: *mut Effect);
    pub fn effect_get_banana_destroy(arg1: *mut Effect);
    pub fn effect_coli_particle_init(arg1: *mut Effect);
    pub fn effect_coli_particle_main(arg1: *mut Effect);
    pub fn effect_coli_particle_draw(arg1: *mut Effect);
    pub fn effect_coli_particle_destroy(arg1: *mut Effect);
    pub fn effect_rotate_bg_init(arg1: *mut Effect);
    pub fn effect_rotate_bg_main(arg1: *mut Effect);
    pub fn effect_rotate_bg_draw(arg1: *mut Effect);
    pub fn effect_rotate_bg_destroy(arg1: *mut Effect);
    pub fn effect_raindrop_init(arg1: *mut Effect);
    pub fn effect_raindrop_main(arg1: *mut Effect);
    pub fn effect_raindrop_draw(arg1: *mut Effect);
    pub fn effect_raindrop_destroy(arg1: *mut Effect);
    pub fn effect_holding_banana_init(arg1: *mut Effect);
    pub fn effect_holding_banana_main(arg1: *mut Effect);
    pub fn effect_holding_banana_draw(arg1: *mut Effect);
    pub fn effect_holding_banana_destroy(arg1: *mut Effect);
    pub fn effect_bubble_init(arg1: *mut Effect);
    pub fn effect_bubble_main(arg1: *mut Effect);
    pub fn effect_bubble_draw(arg1: *mut Effect);
    pub fn effect_bubble_destroy(arg1: *mut Effect);
    pub fn effect_levitate_init(arg1: *mut Effect);
    pub fn effect_levitate_main(arg1: *mut Effect);
    pub fn effect_levitate_draw(arg1: *mut Effect);
    pub fn effect_levitate_destroy(arg1: *mut Effect);
    pub fn effect_twinkle_star_init(arg1: *mut Effect);
    pub fn effect_twinkle_star_main(arg1: *mut Effect);
    pub fn effect_twinkle_star_draw(arg1: *mut Effect);
    pub fn effect_twinkle_star_destroy(arg1: *mut Effect);
    pub fn effect_bonus_stg_star_init(arg1: *mut Effect);
    pub fn effect_bonus_stg_star_main(arg1: *mut Effect);
    pub fn effect_bonus_stg_star_draw(arg1: *mut Effect);
    pub fn effect_bonus_stg_star_destroy(arg1: *mut Effect);
    pub fn effect_bonus_stg_star_tail_init(arg1: *mut Effect);
    pub fn effect_bonus_stg_star_tail_main(arg1: *mut Effect);
    pub fn effect_bonus_stg_star_tail_draw(arg1: *mut Effect);
    pub fn effect_bonus_stg_star_tail_destroy(arg1: *mut Effect);
    pub fn effect_water_light_init(arg1: *mut Effect);
    pub fn effect_water_light_main(arg1: *mut Effect);
    pub fn effect_water_light_draw(arg1: *mut Effect);
    pub fn effect_water_light_destroy(arg1: *mut Effect);
    pub fn effect_raindrop_ripple_init(arg1: *mut Effect);
    pub fn effect_raindrop_ripple_main(arg1: *mut Effect);
    pub fn effect_raindrop_ripple_draw(arg1: *mut Effect);
    pub fn effect_raindrop_ripple_destroy(arg1: *mut Effect);
    pub fn effect_ball_glow_init(arg1: *mut Effect);
    pub fn effect_ball_glow_main(arg1: *mut Effect);
    pub fn effect_ball_glow_draw(arg1: *mut Effect);
    pub fn effect_ball_glow_destroy(arg1: *mut Effect);
    pub fn effect_exm_guide_light_init(arg1: *mut Effect);
    pub fn effect_exm_guide_light_main(arg1: *mut Effect);
    pub fn effect_exm_guide_light_draw(arg1: *mut Effect);
    pub fn effect_exm_guide_light_destroy(arg1: *mut Effect);
    pub fn effect_exm_guide_light_tail_init(arg1: *mut Effect);
    pub fn effect_exm_guide_light_tail_main(arg1: *mut Effect);
    pub fn effect_exm_guide_light_tail_draw(arg1: *mut Effect);
    pub fn effect_exm_guide_light_tail_destroy(arg1: *mut Effect);
    pub fn effect_colistar_particle_init(arg1: *mut Effect);
    pub fn effect_colistar_particle_main(arg1: *mut Effect);
    pub fn effect_colistar_particle_draw(arg1: *mut Effect);
    pub fn effect_colistar_particle_destroy(arg1: *mut Effect);
    pub fn effect_bgwat_bubble_base_init(arg1: *mut Effect);
    pub fn effect_bgwat_bubble_base_main(arg1: *mut Effect);
    pub fn effect_bgwat_bubble_base_draw(arg1: *mut Effect);
    pub fn effect_bgwat_bubble_base_destroy(arg1: *mut Effect);
    pub fn effect_bgwat_bubble_init(arg1: *mut Effect);
    pub fn effect_bgwat_bubble_main(arg1: *mut Effect);
    pub fn effect_bgwat_bubble_draw(arg1: *mut Effect);
    pub fn effect_bgwat_bubble_destroy(arg1: *mut Effect);
    pub fn effect_meteo_init(arg1: *mut Effect);
    pub fn effect_meteo_main(arg1: *mut Effect);
    pub fn effect_meteo_draw(arg1: *mut Effect);
    pub fn effect_meteo_destroy(arg1: *mut Effect);
    pub fn effect_meteo_fix_init(arg1: *mut Effect);
    pub fn effect_meteo_fix_main(arg1: *mut Effect);
    pub fn effect_meteo_fix_draw(arg1: *mut Effect);
    pub fn effect_meteo_fix_destroy(arg1: *mut Effect);
    pub fn effect_coliflash_init(arg1: *mut Effect);
    pub fn effect_coliflash_main(arg1: *mut Effect);
    pub fn effect_coliflash_draw(arg1: *mut Effect);
    pub fn effect_coliflash_destroy(arg1: *mut Effect);
    pub fn effect_bns_stg_star_init(arg1: *mut Effect);
    pub fn effect_bns_stg_star_main(arg1: *mut Effect);
    pub fn effect_bns_stg_star_draw(arg1: *mut Effect);
    pub fn effect_bns_stg_star_destroy(arg1: *mut Effect);
    pub fn effect_bns_stg_star_tail_init(arg1: *mut Effect);
    pub fn effect_bns_stg_star_tail_main(arg1: *mut Effect);
    pub fn effect_bns_stg_star_tail_draw(arg1: *mut Effect);
    pub fn effect_bns_stg_star_tail_destroy(arg1: *mut Effect);
    pub fn effect_bgmst_gen_cloud_init(arg1: *mut Effect);
    pub fn effect_bgmst_gen_cloud_main(arg1: *mut Effect);
    pub fn effect_bgmst_gen_cloud_draw(arg1: *mut Effect);
    pub fn effect_bgmst_gen_cloud_destroy(arg1: *mut Effect);
    pub fn effect_bgstm_rainripple_init(arg1: *mut Effect);
    pub fn effect_bgstm_rainripple_main(arg1: *mut Effect);
    pub fn effect_bgstm_rainripple_draw(arg1: *mut Effect);
    pub fn effect_bgstm_rainripple_destroy(arg1: *mut Effect);
    pub fn effect_bgmst_water_init(arg1: *mut Effect);
    pub fn effect_bgmst_water_main(arg1: *mut Effect);
    pub fn effect_bgmst_water_draw(arg1: *mut Effect);
    pub fn effect_bgmst_water_destroy(arg1: *mut Effect);
    pub fn effect_commendfrag_init(arg1: *mut Effect);
    pub fn effect_commendfrag_main(arg1: *mut Effect);
    pub fn effect_commendfrag_draw(arg1: *mut Effect);
    pub fn effect_commendfrag_destroy(arg1: *mut Effect);
    pub fn effect_banana_drop_init(arg1: *mut Effect);
    pub fn effect_banana_drop_main(arg1: *mut Effect);
    pub fn effect_banana_drop_draw(arg1: *mut Effect);
    pub fn effect_banana_drop_destroy(arg1: *mut Effect);
    pub fn effect_bgend_water_init(arg1: *mut Effect);
    pub fn effect_bgend_water_main(arg1: *mut Effect);
    pub fn effect_bgend_water_draw(arg1: *mut Effect);
    pub fn effect_bgend_water_destroy(arg1: *mut Effect);
    pub static mut s_currUid: s16;
    pub static mut s_effectTypeNames: [*mut ::core::ffi::c_char; 49usize];
    pub static mut s_effectInitFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>; 50usize];
    pub static mut s_effectMainFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>; 50usize];
    pub static mut s_effectDrawFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>; 50usize];
    pub static mut s_effectDestroyFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Effect)>; 50usize];
    pub static mut s_dummyEffectFuncs: EffectFuncs;
    pub static mut s_paperPieceModels: [u16_; 5usize];
    pub fn ranking_screen_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn ranking_screen_sprite_draw(arg1: *mut Sprite);
    pub fn rnk_title_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn lbl_80089070(arg1: *mut s8, arg2: *mut Sprite);
    pub fn lbl_800890B4(arg1: *mut Sprite);
    pub fn func_800890D4();
    pub fn func_8008923C();
    pub static mut lbl_801C7948: [Color3f; 4usize];
    pub static mut lbl_801C7948_2: [Color3f; 4usize];
    pub static mut lbl_801C7948_3: [Struct802B37F0_sub3; 4usize];
    pub static mut s_rankingBallBmpIds: [s16; 7usize];
    pub static mut lbl_801C79C8: [Struct801C79C8; 7usize];
    pub static mut lbl_802B37F0: _bindgen_ty_75;
    pub fn draw_title_bar(
        x1: ::core::ffi::c_int,
        y1: ::core::ffi::c_int,
        x2: ::core::ffi::c_int,
        y2: ::core::ffi::c_int,
        arg4: *mut Color3f,
        unused: ::core::ffi::c_int,
        arg8: f32,
    );
    pub fn update_ranking_screen();
    pub fn draw_ranking_screen();
    pub static mut lbl_802B395C: _bindgen_ty_76;
    pub fn func_80088D44();
    pub fn ballfrag_draw_func(arg1: *mut MyNode);
    pub static mut aiaiDialogue0_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut aiaiDialogue0_en: [*mut ::core::ffi::c_char; 3usize];
    pub static mut aiaiDialogue1_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut aiaiDialogue1_en: [*mut ::core::ffi::c_char; 3usize];
    pub static mut aiaiDialogue2_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut aiaiDialogue2_en: [*mut ::core::ffi::c_char; 3usize];
    pub static mut aiaiDialogue3_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue3_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut aiaiDialogue4_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue4_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue5_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue5_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue6_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue6_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue7_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue7_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue8_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue8_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut aiaiDialogue9_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue9_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue10_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue10_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue11_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue11_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue12_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue12_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue13_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue13_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue14_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut aiaiDialogue14_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue0_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut meemeeDialogue0_en: [*mut ::core::ffi::c_char; 3usize];
    pub static mut meemeeDialogue1_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut meemeeDialogue1_en: [*mut ::core::ffi::c_char; 3usize];
    pub static mut meemeeDialogue2_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut meemeeDialogue2_en: [*mut ::core::ffi::c_char; 3usize];
    pub static mut meemeeDialogue3_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue3_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut meemeeDialogue4_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue4_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue5_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue5_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut meemeeDialogue6_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue6_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut meemeeDialogue7_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue7_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut meemeeDialogue8_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue8_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut meemeeDialogue9_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue9_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue10_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue10_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue11_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue11_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue12_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue12_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut meemeeDialogue13_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue13_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue14_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut meemeeDialogue14_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut lbl_801E4814_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut babyDialogue0_en: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801E487C_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut babyDialogue1_en: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801E48F4_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut babyDialogue2_en: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801E4A10_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue3_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut lbl_801E4AE4_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue4_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut lbl_801E4B6C_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue5_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut lbl_801E4C28_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue6_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut lbl_801E4CB4_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue7_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut lbl_801E4D34_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue8_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut lbl_801E4DBC_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue9_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut lbl_801E4E5C_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue10_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut lbl_801E4F04_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue11_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut lbl_801E4FCC_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue12_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut lbl_801E5078_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue13_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut lbl_801E5134_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut babyDialogue14_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue0_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut gogonDialogue0_en: [*mut ::core::ffi::c_char; 3usize];
    pub static mut gogonDialogue1_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut gogonDialogue1_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue2_jp: [*mut ::core::ffi::c_char; 3usize];
    pub static mut gogonDialogue2_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue3_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue3_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue4_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue4_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut gogonDialogue5_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue5_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue6_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue6_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut gogonDialogue7_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue7_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue8_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue8_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut gogonDialogue9_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue9_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue10_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue10_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue11_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue11_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue12_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue12_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue13_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue13_en: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue14_jp: [*mut ::core::ffi::c_char; 5usize];
    pub static mut gogonDialogue14_en: [*mut ::core::ffi::c_char; 6usize];
    pub static mut aiaiDialogue: [*mut *mut ::core::ffi::c_char; 15usize];
    pub static mut meemeeDialogue: [*mut *mut ::core::ffi::c_char; 15usize];
    pub static mut babyDialogue: [*mut *mut ::core::ffi::c_char; 15usize];
    pub static mut gongonDialogue: [*mut *mut ::core::ffi::c_char; 15usize];
    pub static mut characterDialogues: [*mut *mut *mut ::core::ffi::c_char; 4usize];
    pub fn get_game_results(arg0: *mut GameResultInfo);
    pub fn get_ending_dlg_lines(
        arg0: *const GameResultInfo,
        arg1: *mut *mut *mut ::core::ffi::c_char,
    ) -> *mut *mut ::core::ffi::c_char;
    pub fn expand_dialogue_placeholders(
        result: *const GameResultInfo,
        out: *mut EndingCharaDialogue,
        buffer: *mut ::core::ffi::c_char,
        lines: *mut *mut ::core::ffi::c_char,
    );
    pub static mut tutorialStickInputs: [Spline; 40usize];
    pub static mut lbl_801B8228: [Spline; 12usize];
    pub static mut lbl_801B82E8: [Spline; 9usize];
    pub static mut lbl_801B8378: [Spline; 11usize];
    pub static mut lbl_801B8428: [Spline; 8usize];
    pub static mut lbl_801B84A8: [Spline; 7usize];
    pub static mut lbl_801B8518: [Spline; 8usize];
    pub static mut lbl_801B8598: [Spline; 8usize];
    pub static mut lbl_801B8618: [Spline; 7usize];
    pub static mut lbl_801B8688: [*mut ::core::ffi::c_void; 8usize];
    pub static mut starpointObjName: [::core::ffi::c_char; 15usize];
    pub static mut string_No_Define_3: [::core::ffi::c_char; 10usize];
    pub static mut sunsetBgObjFind: [BGModelSearch; 3usize];
    pub fn bg_sunset_obj_find_proc(
        arg1: ::core::ffi::c_int,
        arg2: *mut StageBgObject,
    ) -> ::core::ffi::c_int;
    pub fn func_800A71B0(a: *mut ::core::ffi::c_char, b: *mut ::core::ffi::c_char);
    pub fn func_800A722C(a: *mut ::core::ffi::c_char, b: u32_) -> *mut Struct80094870;
    pub fn func_800A7314(a: *mut Struct80094870);
    pub fn func_800A7370(a: *mut Struct80094870, addr: *mut u8_, size: u32_);
    pub fn func_800A7440(a: *mut Struct80094870, addr: *mut u8_, size: u32_);
    pub static mut table1: [BGModelSearch; 8usize];
    pub static mut table2: [BGModelSearch; 6usize];
    pub fn func_80064C30(arg1: *mut GCMMatState_Unit);
    pub fn func_80065084(arg1: ::core::ffi::c_int, arg2: *mut GMAModelEntry) -> ::core::ffi::c_int;
    pub fn func_80065128(arg1: ::core::ffi::c_int, arg2: *mut StageBgObject) -> ::core::ffi::c_int;
    pub static mut lbl_801D3D78: RenderEffectFuncs;
    pub static mut string_No_Define_8: [::core::ffi::c_char; 10usize];
    pub fn relocation_unused();
    pub fn u_reset_channels_in_joints(b: *mut AnimJoint);
    pub fn u_load_channels_from_dat_into_joints(dat: *mut MotDat, b: *mut AnimJoint);
    pub fn u_read_channel_from_dat(a: *mut MotDat, b: *mut MotionChannel);
    pub static mut modloadLzssHeader: [u8_; 32usize];
    pub static mut lbl_802F1F60: f32;
    pub fn lbl_800481A0(arg1: *mut NlVtxTypeB);
    pub fn lbl_800482A4(arg1: *mut NlVtxTypeA);
    pub fn lbl_8004853C(arg1: *mut NlVtxTypeB);
    pub fn lbl_8004863C(arg1: *mut NlVtxTypeA);
    pub static mut lbl_00012180: [::core::ffi::c_char; 26usize];
    pub static mut stormBgModelFind: [BGModelSearch; 4usize];
    pub fn bg_storm_model_find_proc(
        arg1: ::core::ffi::c_int,
        arg2: *mut GMAModelEntry,
    ) -> ::core::ffi::c_int;
    pub static mut lbl_801BA0A4: [Vec; 7usize];
    pub static mut minimapInfo: MinimapInfo;
    pub static mut lbl_80292D30: _bindgen_ty_77;
    pub fn u_draw_some_quad(a: *mut Struct800847FC);
    pub static mut s_speechBubbleColors: [u32_; 4usize];
    pub static mut string_No_Define_12: [::core::ffi::c_char; 10usize];
    pub static mut string_No_Define_13: [::core::ffi::c_char; 10usize];
    pub static mut textBoxLines: [[TextBoxLine; 20usize]; 4usize];
    pub fn _force_bss_order_textBoxLines() -> *mut ::core::ffi::c_void;
    pub static mut textBoxesBackup: [TextBox; 4usize];
    pub fn _force_bss_order_textBoxesBackup() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_textBoxes() -> *mut ::core::ffi::c_void;
    pub fn update_textbox(id: ::core::ffi::c_int, b: *mut TextBox);
    pub fn clear_lines(a: ::core::ffi::c_int);
    pub fn draw_textbox(a: ::core::ffi::c_int, b: *mut TextBox);
    pub fn calc_textbox_text_pos(
        a: *mut TextBox,
        b: *mut ::core::ffi::c_int,
        c: *mut ::core::ffi::c_int,
    );
    pub fn add_textbox_line(id: ::core::ffi::c_int, str_: *const ::core::ffi::c_char);
    pub static mut string_No_Define_4: [::core::ffi::c_char; 10usize];
    pub static mut masterBgModelFind: [BGModelSearch; 6usize];
    pub static mut masterBgObjFind: [BGModelSearch; 6usize];
    pub fn lbl_80063AD8(arg1: *mut GCMMatState_Unit);
    pub fn bg_master_model_find_proc(
        arg1: ::core::ffi::c_int,
        arg2: *mut GMAModelEntry,
    ) -> ::core::ffi::c_int;
    pub fn bg_master_obj_find_proc(
        arg1: ::core::ffi::c_int,
        arg2: *mut StageBgObject,
    ) -> ::core::ffi::c_int;
    pub static mut controllerRepeatCounts: [s32; 4usize];
    pub fn _force_bss_order_controllerInfo() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_lbl_801F3C60() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_analogInputs() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_controllerRepeatCounts() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_g_currPlayerButtons() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_g_currPlayerAnalogButtons() -> *mut ::core::ffi::c_void;
    pub static mut resetCounter: u8_;
    pub static mut lbl_802F1CD1: u8_;
    pub static mut initialized: u8_;
    pub static mut lbl_802F1CD4: u32_;
    pub static mut lbl_802F1CD8: u32_;
    pub static mut padLimit: [[s8; 2usize]; 32usize];
    pub static lbl_80110320: [s8; 100usize];
    pub static mut lbl_80110320_64: [[s8; 2usize]; 8usize];
    pub static mut lbl_80110320_74: [[[s8; 2usize]; 8usize]; 4usize];
    pub fn clamp(
        val: ::core::ffi::c_int,
        min: ::core::ffi::c_int,
        max: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn test3(r6: *mut ControllerInfo, b: *mut PADStatus);
    pub static mut s_nlFogEndZ: f32;
    pub static mut s_nlFogStartZ: f32;
    pub static mut s_nlFogColor: GXColor;
    pub static mut s_nlFogType: GXFogType;
    pub static mut s_nlFogEnabled: s32;
    pub static mut s_nlLightMask: u32_;
    pub static mut s_ambientColor: Color3f;
    pub fn _force_bss_order_s_ambientColor() -> *mut ::core::ffi::c_void;
    pub static mut s_nlMaterialCache: _bindgen_ty_78;
    pub fn _force_bss_order_s_nlMaterialCache() -> *mut ::core::ffi::c_void;
    pub static mut s_lzssHeader: [u8_; 32usize];
    pub static mut s_renderParams: _bindgen_ty_79;
    pub fn nlObjModelListInit(obj: *mut NlObj) -> BOOL;
    pub fn nlObjPutCheckModel(model: *mut NlModel);
    pub fn nlObjPut_InitRenderState();
    pub fn nlObjPut_SetMaterial(pmesh: *mut NlMesh);
    pub fn nlObjPutTrnsl_InitRenderState();
    pub fn nlObjPut_TrnslList_OP(arg1: *mut DrawModelDeferredNode);
    pub static mut textureMatrix: Mtx;
    pub fn nlObjPutTrnsl_TrnslList_OP(arg1: *mut DrawAlphaModelDeferredNode);
    pub static mut lbl_801B79E4: [u32_; 8usize];
    pub static mut lbl_801B7A04: [u32_; 16usize];
    pub static mut lbl_801B7A44: [u32_; 8usize];
    pub static mut lbl_801B7A64: [u32_; 16usize];
    pub static mut lbl_801B7AA4: [*mut ::core::ffi::c_void; 4usize];
    pub static mut lbl_801B7AB4: [GXBlendFactor; 8usize];
    pub static mut lbl_801B7AD4: [GXBlendFactor; 8usize];
    pub static mut s_nlToGXCompare: [GXCompare; 8usize];
    pub static mut s_nlToGXCullModes: [GXCullMode; 4usize];
    pub fn write_vtx_type_a_with_alpha(vtx: *mut NlVtxTypeA);
    pub fn lbl_8005872C(arg1: *mut NlVtxTypeB);
    pub fn lbl_80058764(arg1: *mut NlVtxTypeA);
    pub static mut lbl_801ED920: [Thread; 146usize];
    pub fn __eabi();
    pub fn main();
    pub static mut unkData: [u8_; 12usize];
    pub fn help_sprite_draw(arg1: *mut Sprite);
    pub fn help_sprite_destroy(arg1: *mut Sprite);
    pub static mut lbl_802F2020: s8;
    pub static mut currPage2: s8;
    pub static mut unkPageNum: s8;
    pub static mut lbl_802F2023: s8;
    pub static mut lbl_802F2024: s8;
    pub static mut currPage: s8;
    pub static mut lbl_802F2028: f32;
    pub static mut lbl_802F202C: f32;
    pub static mut lbl_802F2030: f32;
    pub static mut contScale: f32;
    pub static mut lbl_802F2038: f32;
    pub static mut lbl_802F203C: f32;
    pub static mut lbl_802F2040: f32;
    pub static mut lbl_802F2044: f32;
    pub static mut lbl_802F2048: f32;
    pub static mut lbl_802F204C: f32;
    pub static mut lbl_802F2050: f32;
    pub static mut lbl_802F2054: f32;
    pub static mut lbl_802F2058: f32;
    pub static mut pageCounts: [[s8; 9usize]; 2usize];
    pub static mut helpTitlesNormal: [*mut ::core::ffi::c_char; 2usize];
    pub static mut helpTitlesCompetition: [*mut ::core::ffi::c_char; 2usize];
    pub static mut helpTitlesPractice: [*mut ::core::ffi::c_char; 2usize];
    pub static mut helpTitlesRace: [*mut ::core::ffi::c_char; 6usize];
    pub static mut helpTitlesFight: [*mut ::core::ffi::c_char; 3usize];
    pub static mut helpTitlesTarget: [*mut ::core::ffi::c_char; 4usize];
    pub static mut helpTitlesBilliards: [*mut ::core::ffi::c_char; 4usize];
    pub static mut helpTitlesBowling: [*mut ::core::ffi::c_char; 3usize];
    pub static mut helpTitlesGolf: [*mut ::core::ffi::c_char; 4usize];
    pub static mut helpPageTitles: [*mut *mut ::core::ffi::c_char; 9usize];
    pub static mut lbl_801C2318_0x32C: [SomeMessageThing2; 15usize];
    pub static mut lbl_801C2718: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C274C: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2790: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C27AC: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C27D0: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2888: [*mut ::core::ffi::c_char; 8usize];
    pub static mut lbl_801C28DC: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2934: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2980: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C29C4: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C29F4: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2A1C: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2A64: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2A9C: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2AAC: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2AD0: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2B04: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2B68: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2BCC: [*mut ::core::ffi::c_char; 6usize];
    pub static mut lbl_801C2C08: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2C28: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2C50: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2CC8: [*mut ::core::ffi::c_char; 6usize];
    pub static mut lbl_801C2CFC: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2D34: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2D5C: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2D68: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2D84: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2E34: [*mut ::core::ffi::c_char; 6usize];
    pub static mut lbl_801C2E7C: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2ED0: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2EFC: [*mut ::core::ffi::c_char; 4usize];
    pub static mut lbl_801C2F1C: [*mut ::core::ffi::c_char; 3usize];
    pub static mut lbl_801C2F38: [*mut ::core::ffi::c_char; 3usize];
    pub static mut controlsTextboxes: [ControlsTextbox; 35usize];
    pub static mut lbl_802F1190: [s8; 4usize];
    pub static mut lbl_802F1194: [s8; 3usize];
    pub static mut lbl_802F1198: [s8; 4usize];
    pub static mut lbl_802F119C: [s8; 4usize];
    pub static mut lbl_802F11A0: [s8; 4usize];
    pub static mut lbl_802F11A4: [s8; 4usize];
    pub static mut lbl_802F11A8: [s8; 8usize];
    pub static mut lbl_802F11B0: [s8; 7usize];
    pub static mut lbl_802F11B8: [s8; 7usize];
    pub static mut lbl_802F11C0: [s8; 8usize];
    pub static mut lbl_802F11C8: [s8; 8usize];
    pub static mut lbl_801C2318_0xDD0: [*mut s8; 18usize];
    pub static mut lbl_801C2318_0xE18: [SomeHelpThing; 35usize];
    pub fn draw_controls_info(arg0: s32, arg1: *mut Sprite, arg2: *mut NLsprarg);
    pub static mut lbl_801C2318_0x10D4: [u32_; 5usize];
    pub static mut lbl_801C3400: [u32_; 6usize];
    pub static mut lbl_801C3418: [u32_; 4usize];
    pub static mut lbl_801C3428: [u32_; 6usize];
    pub static mut lbl_801C3440: [u32_; 5usize];
    pub static mut messageBgColors: [*mut u32_; 5usize];
    pub static mut lbl_801C3468: [f32; 4usize];
    pub static mut lbl_801C3478: [f32; 5usize];
    pub static mut lbl_801C348C: [f32; 6usize];
    pub static mut lbl_801C2318_0x118C: [*mut f32; 7usize];
    pub static mut lbl_801C34C0: [u32_; 4usize];
    pub static mut lbl_801C34D0: [u32_; 4usize];
    pub static mut lbl_801C34E0: [u32_; 5usize];
    pub static mut lbl_801C2318_0x11DC: [*mut u32_; 3usize];
    pub static mut lbl_801C3500: [u32_; 6usize];
    pub static mut lbl_801C3518: [u32_; 4usize];
    pub static mut lbl_801C3528: [u32_; 6usize];
    pub static mut lbl_801C3540: [u32_; 5usize];
    pub static mut lbl_801C2318_0x123C: [*mut u32_; 5usize];
    pub static mut rulesMessagesNormal: [*mut ::core::ffi::c_char; 8usize];
    pub static mut rulesMessagesCompetition: [*mut ::core::ffi::c_char; 8usize];
    pub static mut rulesMessagesPractice: [*mut ::core::ffi::c_char; 8usize];
    pub static mut rulesMessagesRace: [*mut ::core::ffi::c_char; 24usize];
    pub static mut rulesMessagesFight: [*mut ::core::ffi::c_char; 8usize];
    pub static mut rulesMessagesTarget: [*mut ::core::ffi::c_char; 8usize];
    pub static mut rulesMessagesBilliards: [*mut ::core::ffi::c_char; 16usize];
    pub static mut rulesMessagesBowling: [*mut ::core::ffi::c_char; 18usize];
    pub static mut somespacesidk: [*mut ::core::ffi::c_char; 2usize];
    pub static mut rulesMessagesGolf: [*mut ::core::ffi::c_char; 16usize];
    pub static mut rulesMessages: [*mut *mut ::core::ffi::c_char; 9usize];
    pub static mut otherMessagesRace1: [*mut ::core::ffi::c_char; 12usize];
    pub static mut otherMessagesRace2: [*mut ::core::ffi::c_char; 8usize];
    pub static mut otherMessagesTarget1: [*mut ::core::ffi::c_char; 12usize];
    pub static mut otherMessagesTarget2: [*mut ::core::ffi::c_char; 10usize];
    pub static mut otherMessages: [*mut *mut ::core::ffi::c_char; 9usize];
    pub fn draw_help_blurbs(
        arg0: s8,
        sprite: *mut Sprite,
        params: *mut NLsprarg,
        itemCount: s8,
        arg4: s8,
        arg5: s8,
        arg6: s8,
    );
    pub fn sndSetHooks(hooks: *mut SND_HOOKS);
    pub fn sndVolume(volume: u8_, time: u16_, volgroup: u8_);
    pub fn sndMasterVolume(volume: u8_, time: u16_, music: u8_, fx: u8_);
    pub fn sndFXStartParaInfo(
        fid: SND_FXID,
        vol: u8_,
        pan: u8_,
        studio: u8_,
        paraInfo: *mut SND_PARAMETER_INFO,
    ) -> SND_VOICEID;
    pub fn sndFXCtrl(vid: SND_VOICEID, ctrl: u8_, value: u8_) -> ::core::ffi::c_int;
    pub fn sndFXCtrl14(vid: SND_VOICEID, ctrl: u8_, value: u16_) -> ::core::ffi::c_int;
    pub fn sndAuxCallbackReverbHI(
        reason: u8_,
        info: *mut SND_AUX_INFO,
        user: *mut ::core::ffi::c_void,
    );
    pub fn sndAuxCallbackPrepareReverbHI(rev: *mut SND_AUX_REVERBHI) -> bool_;
    pub fn sndAuxCallbackShutdownReverbHI(rev: *mut SND_AUX_REVERBHI) -> bool_;
    pub fn sndAuxCallbackChorus(
        reason: u8_,
        info: *mut SND_AUX_INFO,
        user: *mut ::core::ffi::c_void,
    );
    pub fn sndAuxCallbackPrepareChorus();
    pub fn sndOutputMode();
    pub fn sndActive();
    pub fn sndPushGroup() -> ::core::ffi::c_int;
    pub fn sndPopGroup();
    pub fn sndFXCheck(arg0: SND_VOICEID) -> SND_VOICEID;
    pub fn sndFXKeyOff(vid: SND_VOICEID) -> bool_;
    pub fn sndStreamFree();
    pub fn sndStreamAllocEx() -> ::core::ffi::c_int;
    pub fn sndSetAuxProcessingCallbacks(
        studio: u8_,
        auxA: SND_AUX_CALLBACK,
        userA: *mut ::core::ffi::c_void,
        midiA: u8_,
        seqIDA: SND_SEQID,
        auxB: SND_AUX_CALLBACK,
        userB: *mut ::core::ffi::c_void,
        midiB: u8_,
        seqIDB: SND_SEQID,
    );
    pub fn func_8002A34C();
    pub fn func_8002A964(arg0: *mut Struct801FE498);
    pub fn func_8002BB20(
        arg0: ::core::ffi::c_int,
        arg1: *mut Vec,
        arg2: *mut s8,
        arg3: *mut s8,
    ) -> s8;
    pub fn func_8002CEB8(arg1: ::core::ffi::c_int);
    pub fn lbl_8002D420(result: s32, fileInfo: *mut DVDFileInfo);
    pub fn lbl_8002D538(result: s32, fileInfo: *mut DVDFileInfo);
    pub static mut lbl_801B2A5C: [Struct801B2A5C; 148usize];
    pub static mut s_aramBlocks: [u32_; 2usize];
    pub static mut sndEfcRev: u8_;
    pub static mut sndEfcCho: u8_;
    pub static mut lbl_802F1D3A: s16;
    pub static mut lbl_802F1D3C: u8_;
    pub static mut lbl_802F1D40: f32;
    pub static mut lbl_802F1D44: f32;
    pub static mut lbl_802F1D48: s32;
    pub static mut lbl_802F1D4C: f32;
    pub static mut lbl_802F1D50: f32;
    pub static mut lbl_802F1D54: f32;
    pub static mut lbl_802F1D58: s32;
    pub static mut lbl_802F1D5C: [s8; 4usize];
    pub static mut lbl_802F1D60: [s8; 4usize];
    pub static mut lbl_802F1D64: s32;
    pub static mut lbl_802F1D68: s32;
    pub static mut lbl_802F1D6C: s32;
    pub static mut lbl_802F1D70: s32;
    pub static mut lbl_802F1D74: s32;
    pub static mut u_volumeRelated3: f32;
    pub static mut s_testStreamLeftBuffer: *mut u8_;
    pub static mut s_testStreamRightBuffer: *mut u8_;
    pub static mut lbl_802F1D84: *mut u8_;
    pub static mut lbl_802F1D88: *mut u8_;
    pub static mut lbl_802F1D8C: u32_;
    pub static mut lbl_802F1D90: u32_;
    pub static mut lbl_802F1D94: s32;
    pub static mut lbl_802F1D98: s32;
    pub static mut lbl_802F1D9C: u32_;
    pub static mut lbl_802F1DA0: u32_;
    pub static mut lbl_802F1DA4: s32;
    pub static mut lbl_802F1DA8: s32;
    pub static mut lbl_802F1DAC: s32;
    pub static mut lbl_802F1DB0: s32;
    pub static mut lbl_802F1DB4: u32_;
    pub static mut lbl_802F1DB8: u32_;
    pub static mut lbl_802F1DBC: u32_;
    pub static mut s_groupIsUsingCharaHeap: BOOL;
    pub static mut lbl_802F1DC4: s32;
    pub static mut lbl_802F1DC8: s32;
    pub static mut s_poolData: [*mut ::core::ffi::c_void; 9usize];
    pub static mut s_projData: [*mut ::core::ffi::c_void; 9usize];
    pub static mut s_sdirData: [*mut ::core::ffi::c_void; 9usize];
    pub static mut s_sampData: [*mut ::core::ffi::c_void; 9usize];
    pub static mut s_poolDataSizes: [u32_; 9usize];
    pub static mut s_projDataSizes: [u32_; 9usize];
    pub static mut s_sdirDataSizes: [u32_; 9usize];
    pub static mut s_sampDataSizes: [u32_; 9usize];
    pub static mut lbl_801F8F38: SND_AUX_REVERBHI;
    pub static mut lbl_801F9118: _bindgen_ty_80;
    pub static mut s_voiceIDs: [[SND_VOICEID; 1061usize]; 4usize];
    pub static mut lbl_801FD404: [[u8_; 1061usize]; 4usize];
    pub static mut lbl_801FE498: [Struct801FE498; 16usize];
    pub static mut lbl_801FE558: _bindgen_ty_81;
    pub static mut lbl_801FE5C8: [f32; 4usize];
    pub static mut s_dtkTracks: [DTKTrack; 148usize];
    pub static mut s_testStreamLeftFile: DVDFileInfo;
    pub static mut s_testStreamRightFile: DVDFileInfo;
    pub static mut lbl_80201490: _bindgen_ty_82;
    pub static mut u_isSoundGroupDataLoaded: [::core::ffi::c_int; 9usize];
    pub static mut s_loadedSoundGroupIDs: [s32; 8usize];
    pub fn sound_error(func: *const ::core::ffi::c_char, msg: *const ::core::ffi::c_char, ...);
    pub fn queue_dtk_tracks(arg0: s32, mode: s32);
    pub fn ReadMusyXData(
        fileName: *const ::core::ffi::c_char,
        sizeOut: *mut u32_,
    ) -> *mut ::core::ffi::c_void;
    pub fn play_stage_sounds();
    pub fn u_alloc(size: u32_) -> *mut ::core::ffi::c_void;
    pub fn u_free(ptr: *mut ::core::ffi::c_void);
    pub static mut lbl_802F07E4: [u8_; 8usize];
    pub static mut lbl_802F07EC: [u8_; 8usize];
    pub static mut lbl_802F07F4: [u8_; 8usize];
    pub static mut lbl_802F07FC: [u8_; 8usize];
    pub static mut lbl_802F0804: [u8_; 8usize];
    pub static mut lbl_802F080C: [u8_; 8usize];
    pub static mut lbl_802F0814: [u8_; 8usize];
    pub static mut lbl_801B3630: [*mut u8_; 16usize];
    pub fn func_8002A22C(arg0: ::core::ffi::c_int, arg1: ::core::ffi::c_int) -> s8;
    pub fn func_8002A324(arg0: ::core::ffi::c_int) -> f32;
    pub static mut lbl_801B3670: [f32; 9usize];
    pub static mut lbl_802F081C: [s8; 4usize];
    pub fn PlayerAutoSurround(
        arg0: *mut u32_,
        sndDesc: *const SoundDesc,
        arg2: u32_,
    ) -> ::core::ffi::c_int;
    pub fn func_8002AE58(
        arg0: *mut u32_,
        sndDesc: *const SoundDesc,
        arg2: u32_,
    ) -> ::core::ffi::c_int;
    pub fn u_get_some_player_id() -> ::core::ffi::c_int;
    pub fn SoundReqID(soundParam: u32_, arg1: s32) -> ::core::ffi::c_int;
    pub fn get_some_id(
        func: *const ::core::ffi::c_char,
        arg1: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub static mut string_SoundMod: [::core::ffi::c_char; 9usize];
    pub fn SoundSearchID(arg0: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub static mut string_SoundVolID: [::core::ffi::c_char; 11usize];
    pub static mut string_SoundPanID: [::core::ffi::c_char; 11usize];
    pub static mut string_SoundPitchID: [::core::ffi::c_char; 13usize];
    pub static mut string_SoundDopID: [::core::ffi::c_char; 11usize];
    pub static mut string_SoundModID: [::core::ffi::c_char; 11usize];
    pub static mut lbl_801B3938: [[Struct801B3938; 3usize]; 4usize];
    pub static mut lbl_801B3998: [Spline; 2usize];
    pub static mut lbl_801B39B8: [Spline; 2usize];
    pub static mut lbl_801B39D8: [Spline; 2usize];
    pub static mut lbl_801B39F8: [*mut Spline; 3usize];
    pub static mut lbl_801B3A04: [Spline; 2usize];
    pub fn lbl_8002D344(result: s32, fileInfo: *mut DVDFileInfo);
    pub fn lbl_8002D45C(result: s32, fileInfo: *mut DVDFileInfo);
    pub fn lbl_8002D574(
        arg0: *mut u8_,
        arg1: u32_,
        unused1: ::core::ffi::c_int,
        unused2: ::core::ffi::c_int,
        arg4: s32,
    ) -> u32_;
    pub static mut drawingFinished: GXBool;
    pub fn draw_done_callback();
    pub fn init_vtx_attr_fmts();
    pub static mut string_No_Define_14: [::core::ffi::c_char; 10usize];
    pub static mut s_currLightGroup: s32;
    pub static mut lightGroupStack: [u32_; 3usize];
    pub fn _force_bss_order_lightGroupStack() -> *mut ::core::ffi::c_void;
    pub static mut s_perStageLights: [Light; 512usize];
    pub fn print_light(light: *mut Light);
    pub fn u_alloc_stage_lights(stageId: ::core::ffi::c_int);
    pub fn alloc_pool_light_idx(
        findExisting: BOOL,
        u_id: ::core::ffi::c_int,
        u_inst: ::core::ffi::c_int,
    ) -> s8;
    pub fn init_light_dir(light: *mut Light);
    pub fn load_light(
        group: *mut LightGroup,
        lightIdxInGroup: ::core::ffi::c_int,
        light: *mut Light,
    );
    pub fn init_bg_lighting(stageId: ::core::ffi::c_int);
    pub static s_u_lightGroupSomethings: [LightGroupInfo; 22usize];
    pub fn init_light_groups();
    pub fn set_avdisp_inf_light(lightGrp: *mut LightGroup);
    pub fn alloc_pool_light(a: ::core::ffi::c_int, b: ::core::ffi::c_int) -> *mut Light;
    pub static mut lbl_801F39EC: _bindgen_ty_85;
    pub static mut s_bilLightGroup_BG_1: [s8; 10usize];
    pub static mut s_bilLightGroup_BG_2: [s8; 18usize];
    pub static mut s_bilLightGroup_BG_3: [s8; 8usize];
    pub static mut s_bilLightGroup_BG_4: [s8; 6usize];
    pub static mut s_bilLightGroup_BG_5: [s8; 10usize];
    pub static mut s_bilLightGroup_BG_6: [s8; 6usize];
    pub static mut s_bilLightGroup_BG_7: [s8; 4usize];
    pub static mut s_bilLightGroup_BG_8: [s8; 10usize];
    pub static mut s_bilLightGroups: [*mut s8; 9usize];
    pub static mut waterBgModelFind: [BGModelSearch; 8usize];
    pub static mut waterBgObjFind: [BGModelSearch; 8usize];
    pub fn lbl_8005E914();
    pub fn bg_water_envmap_stage(arg1: *mut GCMMatState_Unit);
    pub fn bg_water_envmap_background();
    pub fn func_8005ED80(arg1: *mut GCMMatState_Unit);
    pub fn bg_water_envmap_ball(arg1: *mut GCMMatState_Unit);
    pub fn lbl_8005F520(arg1: *mut GCMMatState_Unit);
    pub fn bg_water_model_find_proc(
        arg1: ::core::ffi::c_int,
        arg2: *mut GMAModelEntry,
    ) -> ::core::ffi::c_int;
    pub fn bg_water_obj_find_proc(
        arg1: ::core::ffi::c_int,
        arg2: *mut StageBgObject,
    ) -> ::core::ffi::c_int;
    pub static mut lbl_8027CBF8: TevStageInfo;
    pub static mut minigameGfxFiles: [GfxFileInfo; 8usize];
    pub static mut commonTpl: *mut TPL;
    pub static mut minigameTpl: *mut TPL;
    pub fn u_load_minigame_graphics(index: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub static mut string_init_chara_p_lz: [::core::ffi::c_char; 16usize];
    pub static mut string_init_chara_lz: [::core::ffi::c_char; 14usize];
    pub static mut string_init_sel_p_lz: [::core::ffi::c_char; 14usize];
    pub static mut string_init_sel_lz: [::core::ffi::c_char; 12usize];
    pub static mut playerNumColors: [u8_; 12usize];
    pub static mut lbl_801C14FC: [f32; 7usize];
    pub fn press_start_texbox_callback(a: *mut TextBox);
    pub fn pause_menu_sprite_draw(arg1: *mut Sprite);
    pub fn game_over_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub static mut menuContHowExit: [*mut ::core::ffi::c_char; 3usize];
    pub static mut menuContViewHowExit: [*mut ::core::ffi::c_char; 4usize];
    pub static mut menuContSaveHowExit: [*mut ::core::ffi::c_char; 4usize];
    pub static mut menuContRetryViewHowSelectExit: [*mut ::core::ffi::c_char; 6usize];
    pub static mut menuContRetrySaveHowSelectExit: [*mut ::core::ffi::c_char; 6usize];
    pub static mut menuContRetryHowExit: [*mut ::core::ffi::c_char; 4usize];
    pub static mut menuContGuideHowExit: [*mut ::core::ffi::c_char; 4usize];
    pub static mut pauseMenus: [*mut *mut ::core::ffi::c_char; 10usize];
    pub fn force_lbl_802F4C80() -> f32;
    pub fn lbl_80076710(sprite: *mut Sprite);
    pub fn sega_logo_sprite_main(status: *mut s8, sprite: *mut Sprite);
    pub fn lbl_80076AC0(arg1: *mut Sprite);
    pub fn copyright_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub static mut lbl_80292C00: [Struct80292C00; 12usize];
    pub fn _force_bss_order_lbl_80292C00() -> *mut ::core::ffi::c_void;
    pub static mut lbl_80292C00_alias: [Struct80292C00; 0usize];
    pub static mut lbl_80292C60: Struct80292C60;
    pub fn _force_bss_order_lbl_80292C60() -> *mut ::core::ffi::c_void;
    pub static mut lbl_80292C60_alias: Struct80292C60;
    pub static mut titleSuperOffsets: [TitleLetterOffset; 5usize];
    pub fn _force_bss_order_titleSuperOffsets() -> *mut ::core::ffi::c_void;
    pub static mut titleMonkeyBallOffsets: [TitleLetterOffset; 10usize];
    pub fn _force_bss_order_titleMonkeyBallOffsets() -> *mut ::core::ffi::c_void;
    pub static mut lbl_80292D08: [s8; 16usize];
    pub fn _force_bss_order_lbl_80292D08() -> *mut ::core::ffi::c_void;
    pub static mut titleLettersSuper: [TitleLetter; 5usize];
    pub static mut titleLettersMonkeyBall: [TitleLetter; 10usize];
    pub fn title_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn title_sprite_draw(arg1: *mut Sprite);
    pub fn gamestart_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn options_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn force_lbl_802F4D9C() -> f32;
    pub fn force_lbl_802F4DA0() -> f32;
    pub fn adv_timer_seconds_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn adv_timer_100th_seconds_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn banana_count_sprite_draw(arg1: *mut Sprite);
    pub fn bananas_left_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn adv_demo_banana_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn eieipu_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn eieipu_sprite_draw(arg1: *mut Sprite);
    pub static mut lbl_801C17FC: [Struct801C17FC; 13usize];
    pub static mut lbl_801C1864: [Struct801C17FC; 21usize];
    pub static mut lbl_801C190C: [Struct801C17FC; 15usize];
    pub static mut lbl_801C1984: [u32_; 6usize];
    pub fn floor_intro_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn floor_intro_sprite_draw(arg1: *mut Sprite);
    pub fn bonus_floor_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn final_floor_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn final_floor_sprite_draw(arg1: *mut Sprite);
    pub fn player_num_sprite_main(status: *mut s8, sprite: *mut Sprite);
    pub fn ready_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn lbl_8007A774(arg1: *mut s8, arg2: *mut Sprite);
    pub fn lbl_8007A7B8(arg1: *mut s8, arg2: *mut Sprite);
    pub fn maingame_timer_seconds_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn maingame_timer_100th_seconds_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn lbl_8007B134(arg1: *mut Sprite);
    pub fn score_value_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn normal_ball_speed_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn lbl_8007ADF4(arg1: *mut Sprite);
    pub fn lbl_8007B490(arg1: *mut s8, arg2: *mut Sprite);
    pub fn competition_ball_speed_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn show_competition_player_hud(playerId: ::core::ffi::c_int);
    pub static mut lbl_801C1A0C: [*mut ::core::ffi::c_char; 3usize];
    pub fn competition_round_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn competition_separator_sprite_draw(arg1: *mut Sprite);
    pub fn force_lbl_802F4EA0() -> f32;
    pub static lbl_80118870: [f32; 30usize];
    pub fn go_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn go_sprite_draw(arg1: *mut Sprite);
    pub fn goal_sprite_draw(arg1: *mut Sprite);
    pub fn warp_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn goal_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn lbl_8007CDCC(arg1: *mut s8, arg2: *mut Sprite);
    pub fn fall_out_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn show_bonus_finish_banner();
    pub fn time_over_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn bonus_finish_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn continue_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn num_continues_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn continue_yes_no_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn game_over_player_num_sprite_main(status: *mut s8, sprite: *mut Sprite);
    pub fn oneup_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn hurry_up_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn replay_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub static mut rankTitles: [*mut ::core::ffi::c_char; 5usize];
    pub static mut nameEntryElemsX: [s16; 5usize];
    pub fn name_entry_info_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub static mut string_CONGRATULATIONS: [::core::ffi::c_char; 16usize];
    pub static mut string_THANK__YOU__FOR__PLAYING: [::core::ffi::c_char; 25usize];
    pub static mut lbl_801C1E0C: [_bindgen_ty_86; 44usize];
    pub static mut lbl_801C201C: [u32_; 16usize];
    pub static mut string_ENDING_PICTURE: [::core::ffi::c_char; 15usize];
    pub static mut lbl_801C206C: [_bindgen_ty_87; 5usize];
    pub fn lbl_8007EC80(arg1: *mut s8, arg2: *mut Sprite);
    pub fn lbl_8007EF0C(arg1: *mut s8, arg2: *mut Sprite);
    pub fn lbl_8007F060(arg1: *mut s8, arg2: *mut Sprite);
    pub fn lbl_8007F1A4(arg1: *mut Sprite);
    pub static mut lbl_801C20EC: [Struct801C20EC; 4usize];
    pub static mut lbl_801C212C: [f32; 3usize];
    pub fn clear_score_sprite_draw(arg1: *mut Sprite);
    pub fn warp_bonus_sprite_draw(arg1: *mut Sprite);
    pub fn time_bonus_sprite_draw(arg1: *mut Sprite);
    pub fn floor_score_sprite_draw(arg1: *mut Sprite);
    pub fn func_8007F61C(
        sprite: *mut Sprite,
        t: ::core::ffi::c_int,
        arg2: f32,
    ) -> ::core::ffi::c_int;
    pub fn lbl_8007F754_inline2(
        sprite: *mut Sprite,
        t: ::core::ffi::c_int,
        arg2: f32,
    ) -> ::core::ffi::c_int;
    pub static mut string_result_menu: [::core::ffi::c_char; 12usize];
    pub static mut string_result_mask: [::core::ffi::c_char; 12usize];
    pub static mut lbl_801C2178: [*mut ::core::ffi::c_char; 3usize];
    pub fn best_score_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn best_score_sprite_draw(arg1: *mut Sprite);
    pub fn lbl_800800D4(arg1: *mut Sprite);
    pub fn calc_bomb_scale(timer: u16_) -> f32;
    pub fn scale_bomb_timer(sprite: *mut Sprite);
    pub fn bomb_crack_sprite_main(status: *mut s8, sprite: *mut Sprite);
    pub fn force_lbl_802F50C0() -> f32;
    pub fn bomb_frag_sprite_main(status: *mut s8, sprite: *mut Sprite);
    pub static mut bombFragBitmapIds: [s16; 10usize];
    pub static mut bombFragX: [f32; 10usize];
    pub static mut bombFragY: [f32; 10usize];
    pub fn bomb_sprite_main(status: *mut s8, sprite: *mut Sprite);
    pub static mut recordingState: Struct80250B70;
    pub static mut s_replayData: _bindgen_ty_88;
    pub static mut lbl_802F1F88: _bindgen_ty_89;
    pub fn recplay_cmpr_get_ball_frame_int(arg0: ::core::ffi::c_int, arg1: *mut ReplayBallFrame);
    pub fn recplay_cmpr_get_world_frame_int(arg0: ::core::ffi::c_int, arg1: *mut ReplayWorldFrame);
    pub fn func_8004C2C8() -> ::core::ffi::c_int;
    pub fn compress_rle(src: *const u8_, dest: *mut u8_, srcSize: u32_) -> u32_;
    pub fn decompress_rle(src: *const u8_, dest: *mut u8_, destSize: u32_) -> ::core::ffi::c_int;
    pub fn func_8004C70C_sub() -> ::core::ffi::c_int;
    pub static mut string_No_Define_5: [::core::ffi::c_char; 10usize];
    pub static mut s_somethingLightRelated: s8;
    pub static mut lbl_802B2E70: [u8_; 2304usize];
    pub fn _force_bss_order_lbl_802B2E70() -> *mut ::core::ffi::c_void;
    pub static mut u_hairRelated: [s32; 16usize];
    pub static mut u_blinkRelated: [u32_; 16usize];
    pub fn draw_aiai_hair(arg1: *mut Ape, arg2: *mut BodyPartDesc, arg3: *mut BodyPart);
    pub fn draw_eye(arg1: *mut Ape, arg2: *mut BodyPartDesc, arg3: *mut BodyPart);
    pub fn draw_baby_hand(arg1: *mut Ape, arg2: *mut BodyPartDesc, arg3: *mut BodyPart);
    pub fn draw_left_hand(arg1: *mut Ape, arg2: *mut BodyPartDesc, arg3: *mut BodyPart);
    pub fn draw_right_hand(arg1: *mut Ape, arg2: *mut BodyPartDesc, arg3: *mut BodyPart);
    pub fn assign_shape_colors_1(arg0: ::core::ffi::c_int, arg1: *mut GMAModel);
    pub fn code_3_next_shape(arg1: *mut GMAShape) -> *mut GMAShape;
    pub fn draw_baby_head(ape: *mut Ape, arg1: *mut BodyPartDesc, unused2: *mut BodyPart);
    pub fn draw_head(arg1: *mut Ape, arg2: *mut BodyPartDesc, arg3: *mut BodyPart);
    pub fn draw_ear(ape: *mut Ape, arg1: *mut BodyPartDesc, arg2: *mut BodyPart);
    pub static mut lbl_801C57E0: [GXColor; 8usize];
    pub static mut lbl_801C5800: [GXColor; 8usize];
    pub static mut lbl_801C5820: [GXColor; 28usize];
    pub static mut lbl_801C5890: [GXColor; 28usize];
    pub static mut lbl_801C5900: [*mut GXColor; 4usize];
    pub static mut lbl_801C5A90: [BodyPartNameInfo; 5usize];
    pub static mut lbl_801C5D30: [BodyPartNameInfo; 5usize];
    pub static mut lbl_801C5FD0: [BodyPartNameInfo; 5usize];
    pub static mut lbl_801C6270: [BodyPartNameInfo; 5usize];
    pub static mut lbl_801C6420: [*mut ::core::ffi::c_char; 8usize];
    pub static mut lbl_801C6470: [*mut ::core::ffi::c_char; 5usize];
    pub static mut asdf: [u32_; 113usize];
    pub static mut s_eyeModelIDs: [[u32_; 16usize]; 8usize];
    pub static mut s_aiaiHairModelIDs: [u32_; 45usize];
    pub static mut lbl_801C68FC: [u16_; 4usize];
    pub static mut lbl_801C6904: [s16; 19usize];
    pub static mut lbl_801C692C: [GXColor; 4usize];
    pub static mut lbl_801C693C: [u32_; 8usize];
    pub static mut lbl_801C695C: [*const FacialAnimationSomething; 8usize];
    pub static mut lbl_801C697C: [u32_; 8usize];
    pub static mut lbl_801C699C: [u32_; 8usize];
    pub static mut lbl_801C69BC: [*const FacialAnimationSomething; 8usize];
    pub static mut lbl_801C69DC: [u32_; 8usize];
    pub static mut lbl_801C69FC: [u32_; 8usize];
    pub static mut lbl_801C6A1C: [*const FacialAnimationSomething; 8usize];
    pub static mut lbl_801C6A3C: [u32_; 8usize];
    pub static mut lbl_801C6A5C: [u32_; 8usize];
    pub static mut lbl_801C6A7C: [*const FacialAnimationSomething; 8usize];
    pub static mut lbl_801C6A9C: [u32_; 8usize];
    pub static mut lbl_801C6ABC: [u32_; 16usize];
    pub static mut lbl_801C6AFC: [u32_; 16usize];
    pub static mut lbl_801C6B3C: [u32_; 16usize];
    pub static mut lbl_801C6B7C: [*mut u32_; 4usize];
    pub static mut aiaiBodyPartDescLOD0: [BodyPartDesc; 7usize];
    pub static mut aiaiBodyPartDescLOD1: [BodyPartDesc; 7usize];
    pub static mut aiaiBodyPartDescLOD2: [BodyPartDesc; 6usize];
    pub static mut aiaiBodyPartDescLOD3: [BodyPartDesc; 5usize];
    pub static mut meemeeBodyPartDescLOD0: [BodyPartDesc; 6usize];
    pub static mut meemeeBodyPartDescLOD1: [BodyPartDesc; 6usize];
    pub static mut meemeeBodyPartDescLOD2: [BodyPartDesc; 6usize];
    pub static mut meemeeBodyPartDescLOD3: [BodyPartDesc; 5usize];
    pub static mut babyBodyPartDescLOD0: [BodyPartDesc; 6usize];
    pub static mut babyBodyPartDescLOD1: [BodyPartDesc; 6usize];
    pub static mut babyBodyPartDescLOD2: [BodyPartDesc; 7usize];
    pub static mut babyBodyPartDescLOD3: [BodyPartDesc; 5usize];
    pub static mut gongonBodyPartDescLOD0: [BodyPartDesc; 6usize];
    pub static mut gongonBodyPartDescLOD1: [BodyPartDesc; 6usize];
    pub static mut gongonBodyPartDescLOD2: [BodyPartDesc; 6usize];
    pub static mut gongonBodyPartDescLOD3: [BodyPartDesc; 5usize];
    pub fn set_ambient_light(arg0: ::core::ffi::c_int);
    pub fn func_80085F94_sub(temp_r31: *mut GMAModel, temp_r10: ::core::ffi::c_int);
    pub fn func_800862F4(model: *mut GMAModel) -> *mut GMAShape;
    pub fn func_8008638C(model: *mut GMAModel) -> *mut GMAShape;
    pub fn u_get_shape_with_no_material(model: *mut GMAModel) -> *mut GMAShape;
    pub fn func_80086434_sub2(model: *mut GMAModel) -> *mut GMAShape;
    pub fn assign_shape_colors_2(colorId: ::core::ffi::c_int, model: *mut GMAModel);
    pub fn u_facial_expression_model_distort(
        model: *mut u32_,
        arg1: *const FacialAnimationSomething,
        arg2: ::core::ffi::c_int,
        arg8: f32,
    );
    pub fn force_lbl_802F54A4() -> f32;
    pub fn force_lbl_802F54A8() -> f32;
    pub fn force_lbl_802F54AC() -> f32;
    pub fn force_lbl_802F54B0() -> f64;
    pub fn force_lbl_802F54B8() -> f32;
    pub fn force_lbl_802F54BC() -> f32;
    pub fn force_lbl_802F54C0() -> f64;
    pub fn force_lbl_802F54C8() -> f32;
    pub fn func_80086794_sub2(temp_r27: ::core::ffi::c_int, ape: *mut Ape);
    pub fn func_80086D20(ape: *mut Ape, arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int);
    pub static mut flareWork: [[Vec; 13usize]; 4usize];
    pub static mut lensFlareOpacity: [f32; 4usize];
    pub static mut lensFlareLightPos: Point3d;
    pub static mut shineCoefficients: [f32; 4usize];
    pub static mut lensFlareScale: f32;
    pub fn inline_asm_stuff(a: f32, b: f32, c: f32, d: f32) -> f32;
    pub static flareData: [FlareSpot; 13usize];
    pub static lbl_80171AA4: Vec;
    pub static mut lbl_802F2180: s32;
    pub static mut lbl_802F2184: *mut u8_;
    pub static mut lbl_802F2188: u32_;
    pub fn func_800948EC() -> ::core::ffi::c_int;
    pub static lbl_801147D8: [u8_; 28usize];
    pub static lbl_801147F4: [u8_; 20usize];
    pub static lbl_80114808: [JointRotationSomething; 17usize];
    pub static lbl_801149E4: [JointRotationSomething; 17usize];
    pub static lbl_80114BC0: [JointRotationSomething; 16usize];
    pub static lbl_80114D80: [JointPositionSomething; 7usize];
    pub static lbl_80114D9C: [JointPositionSomething; 8usize];
    pub static lbl_80114DBC: [JointPositionSomething; 1usize];
    pub static lbl_80114DC0: [*const ::core::ffi::c_void; 4usize];
    pub fn u_joint_tree_calc_some_other_matrix(arg1: *mut AnimJoint, arg2: *mut AnimJoint);
    pub fn calc_some_rotation_mtx_from_vec(arg1: *mut Vec);
    pub fn func_80035E7C(arg1: *mut f32, arg2: *mut f32, arg3: f32, arg4: f32, arg5: f32);
    pub static lbl_80114DF0: [u32_; 29usize];
    pub static lbl_80114E64: [u32_; 29usize];
    pub static lbl_80114ED8: [u32_; 18usize];
    pub static lbl_80114F20: [u32_; 18usize];
    pub fn func_800308AC();
    pub fn func_80030914(arg1: *mut PoolInfo_sub, arg2: ::core::ffi::c_int);
    pub fn dummy_func();
    pub static mut dipSwitchNames: [*mut ::core::ffi::c_char; 32usize];
    pub static mut bgBackdropColors: [GXColor; 28usize];
    pub static mut bgTypeNames: [*mut ::core::ffi::c_char; 29usize];
    pub static mut bgInitFuncs: [::core::option::Option<unsafe extern "C" fn()>; 29usize];
    pub static mut bgMainFuncs: [::core::option::Option<unsafe extern "C" fn()>; 29usize];
    pub static mut bgFinishFuncs: [::core::option::Option<unsafe extern "C" fn()>; 29usize];
    pub static mut bgDrawFuncs: [::core::option::Option<unsafe extern "C" fn()>; 29usize];
    pub static mut bgInteractFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>; 29usize];
    pub static mut lbl_801B96CC:
        [::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>; 29usize];
    pub static mut lbl_801B9740: [::core::option::Option<
        unsafe extern "C" fn(arg1: *mut NlModel, arg2: *mut NlModel) -> ::core::ffi::c_int,
    >; 29usize];
    pub static mut bgFileNames: [*mut ::core::ffi::c_char; 29usize];
    pub static mut oldBgFileNames: [*mut ::core::ffi::c_char; 29usize];
    pub static mut bgWorkSizes: [u32_; 29usize];
    pub static mut s_nightWindowAModels: [s16; 14usize];
    pub static mut s_nightWindowBModels: [s16; 11usize];
    pub static mut s_nightWindowCModels: [s16; 18usize];
    pub static mut s_nightWindowDModels: [s16; 18usize];
    pub static mut s_nightWindowEModels: [s16; 18usize];
    pub static mut s_nightWindowFModels: [s16; 16usize];
    pub static mut s_nightWindowGModels: [s16; 15usize];
    pub static mut s_stormFireModels: [s16; 32usize];
    pub static mut lbl_00020DA0: [u32_; 1usize];
    pub static mut lbl_802F21F8: s32;
    pub static mut lbl_802F21FC: s32;
    pub static mut s_readResult: s32;
    pub static mut lbl_802F2204: u32_;
    pub static mut s_errMsgCoverOpen: [ErrorString; 1usize];
    pub static mut s_errMsgNoDisk: [ErrorString; 2usize];
    pub static mut s_errMsgWrongDisk: [ErrorString; 2usize];
    pub static mut s_errMsgReadError: [ErrorString; 3usize];
    pub static mut s_errMsgFatalError: [ErrorString; 6usize];
    pub static mut s_errMessages: [ErrorMessage; 5usize];
    pub static mut s_errMsgCoverOpenDemoFont: [ErrorString; 1usize];
    pub static mut s_errMsgNoDiskDemoFont: [ErrorString; 2usize];
    pub static mut s_errMsgWrongDiskDemoFont: [ErrorString; 2usize];
    pub static mut s_errMsgReadErrorDemoFont: [ErrorString; 3usize];
    pub static mut s_errMsgFatalErrorDemoFont: [ErrorString; 6usize];
    pub static mut s_errMessagesDemoFont: [ErrorMessage; 5usize];
    pub fn force_lbl_802F5E78() -> f32;
    pub fn force_lbl_802F5E7C() -> f32;
    pub fn force_lbl_802F5E80() -> f32;
    pub fn force_lbl_802F5E84() -> f32;
    pub fn force_lbl_802F5E88() -> f32;
    pub fn force_lbl_802F5E8C() -> f32;
    pub fn force_lbl_802F5E90() -> f32;
    pub fn force_lbl_802F5E98() -> f64;
    pub fn force_lbl_802F5EA0() -> f64;
    pub fn force_lbl_802F5EA8() -> f64;
    pub fn force_lbl_802F5EB0() -> f64;
    pub fn force_lbl_802F5EB8() -> f64;
    pub fn func_800AC718_sub();
    pub fn show_dvd_err_msg(msgId: ::core::ffi::c_int);
    pub fn dvd_read_callback(result: s32, file: *mut DVDFileInfo);
    pub fn course_icon_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub fn stage_name_sprite_main(arg1: *mut s8, arg2: *mut Sprite);
    pub static unused_crap: [u32_; 7usize];
    pub static mut string_No_Define_7: [::core::ffi::c_char; 10usize];
    pub static mut s_recordingStatus: [PlayerRecordingStatus; 8usize];
    pub static mut s_replays: [Replay; 11usize];
    pub static mut s_dummyVar: u32_;
    pub static mut s_builtinReplayFilesCount: s32;
    pub static mut s_builtinReplayFileNames: *mut *mut ::core::ffi::c_char;
    pub static mut s_recordingStopTimer: s32;
    pub static mut lbl_802F1F78: _bindgen_ty_92;
    pub fn func_8004A820();
    pub fn end_grading_play();
    pub fn grading_play();
    pub fn func_8004ABD8() -> f32;
    pub fn u_reset_replay_floor_counts();
    pub fn increment_replay_floor_counts(arg1: *mut Replay);
    pub fn decrement_replay_floor_counts(arg1: *mut Replay);
    pub fn get_replay_floor_count(arg1: *mut Replay) -> ::core::ffi::c_int;
    pub fn calc_replay_grade_adjustment(arg1: *mut Replay) -> f32;
    pub fn u_get_highest_grade_replay() -> ::core::ffi::c_int;
    pub fn dummy_return_true(arg1: *mut Replay) -> ::core::ffi::c_int;
    pub static mut someGradingStruct: _bindgen_ty_93;
    pub static mut s_replayCountPerFloor: [[s8; 61usize]; 3usize];
    pub static mut s_replayCountPer10Floors: [[s8; 7usize]; 3usize];
    pub static mut lbl_801B89A0: [u32_; 4usize];
    pub static mut lbl_801B89B0: [u32_; 10usize];
    pub static mut lbl_802F0A04: [u32_; 1usize];
    pub static mut lbl_801B89D8: [*mut ::core::ffi::c_void; 4usize];
    pub static mut lbl_802F1C28: *mut Struct802F1C28;
    pub static mut cameraFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Camera, arg2: *mut Ball)>; 75usize];
    pub static mut onePlayerViewports: [PlayerViewport; 1usize];
    pub static mut twoPlayerViewports: [PlayerViewport; 2usize];
    pub static mut threePlayerViewports: [PlayerViewport; 3usize];
    pub static mut fourPlayerViewports: [PlayerViewport; 4usize];
    pub static mut splitscreenViewports: [*mut PlayerViewport; 4usize];
    pub fn set_current_camera_matrix(cameraId: ::core::ffi::c_int);
    pub fn u_clear_child_camera(child: *mut Camera);
    pub fn camera_face_direction(camera: *mut Camera, lookDir: *mut Vec);
    pub fn weird_inline_stuff(x1: f32, x2: f32, z1: f32, y1: f32, y2: f32, z2: f32) -> f32;
    pub static mut lbl_80177264: [Vec; 6usize];
    pub static mut lbl_801EFB94: [Struct801EFB94; 4usize];
    pub static mut vibrationStartInfo: [Vibration; 4usize];
    pub static mut vibrationStopInfo: [Vibration; 4usize];
    pub static mut lbl_802F1F08: u32_;
    pub static mut s_someLodMask: u32_;
    pub static mut lbl_802F1F10: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut lbl_80205E20: [f32; 4usize];
    pub static mut s_workMatrix: Mtx;
    pub fn func_8003C38C(ball: *mut Ball);
    pub fn clear_some_ball_flags(arg1: *mut Ball);
    pub fn func_80037098(ape: *mut Ape, ball: *mut Ball) -> ::core::ffi::c_int;
    pub fn func_8003721C_inline(ball: *mut Ball) -> ::core::ffi::c_int;
    pub fn get_0_05() -> f32;
    pub fn u_ball_ape_thread(ape: *mut Ape, status: ::core::ffi::c_int);
    pub static mut ballPhysicsParams: [BallPhysicsParams; 2usize];
    pub static mut ballShadowColors: [GXColor; 10usize];
    pub static mut ballFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Ball)>; 29usize];
    pub static lbl_80117884: Vec;
    pub fn ball_draw_callback(arg1: *mut BallDrawNode);
    pub static mut lbl_801B7EC0: _bindgen_ty_94;
    pub fn unref_func_80039320(ball: *mut Ball, b: *mut Struct80039320, c: ::core::ffi::c_int);
    pub fn unref_func_8003938C(ball: *mut Ball, b: *mut Struct80039320, c: ::core::ffi::c_int);
    pub fn unref_func_800393F8(ball: *mut Ball);
    pub fn u_ball_init_1(ball: *mut Ball);
    pub fn adv_ape_thread(arg1: *mut Ape, arg2: ::core::ffi::c_int);
    pub fn func_8003B0F4_inline(ball: *mut Ball);
    pub fn ball_8003BBF4(physBall: *mut PhysicsBall, b: *mut Vec);
    pub fn ball_8003BD68(physBall: *mut PhysicsBall, b: *mut Vec, c: *mut Vec);
    pub static lbl_801179D4: [s16; 8usize];
    pub fn func_8003CDC0_sub(ball: *mut Ball);
    pub fn draw_ball_hemispheres(ball: *mut Ball, unused: ::core::ffi::c_int);
    pub static mut lbl_802F5A88: GXColor;
    pub static mut clip: Vec;
    pub static mut lbl_801EFC24: [Vec; 4usize];
    pub static mut lnormal: [Vec; 4usize];
    pub fn _force_bss_order_clip() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_lbl_801EFC24() -> *mut ::core::ffi::c_void;
    pub fn _force_bss_order_lnormal() -> *mut ::core::ffi::c_void;
    pub fn force_sdata2_802F2F50() -> f64;
    pub fn force_sdata2_802F2F58() -> f64;
    pub fn force_sdata2_802F2F60() -> f32;
    pub fn item_dummy_init(arg1: *mut Item);
    pub fn item_dummy_main(arg1: *mut Item);
    pub fn item_dummy_draw(arg1: *mut Item);
    pub fn item_dummy_collect(arg1: *mut Item, arg2: *mut PhysicsBall);
    pub fn item_dummy_destroy(arg1: *mut Item);
    pub fn item_dummy_release(arg1: *mut Item);
    pub fn item_dummy_debug(arg1: *mut Item);
    pub static mut itemNames: [*mut ::core::ffi::c_char; 6usize];
    pub static mut itemInitFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>; 7usize];
    pub static mut itemMainFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>; 7usize];
    pub static mut itemDrawFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>; 7usize];
    pub static mut itemCollectFuncs: [::core::option::Option<
        unsafe extern "C" fn(arg1: *mut Item, arg2: *mut PhysicsBall),
    >; 7usize];
    pub static mut itemDestroyFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>; 7usize];
    pub static mut itemReleaseFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>; 7usize];
    pub static mut itemDebugFuncs:
        [::core::option::Option<unsafe extern "C" fn(arg1: *mut Item)>; 7usize];
    pub static mut string_STATUS___s_n: [::core::ffi::c_char; 12usize];
    pub static mut lbl_801BDD74: [u8_; 28usize];
    pub static mut string_TYPE___s_n: [::core::ffi::c_char; 10usize];
    pub static mut string_POS__X__7_3f_n: [::core::ffi::c_char; 14usize];
    pub static mut string______Y__7_3f_n: [::core::ffi::c_char; 14usize];
    pub static mut string______Z__7_3f_n: [::core::ffi::c_char; 14usize];
    pub static mut string_SPD__X__7_3f_n: [::core::ffi::c_char; 14usize];
    pub static mut string_ROT__X_0x_04X_n: [::core::ffi::c_char; 15usize];
    pub static mut string______Y_0x_04X_n: [::core::ffi::c_char; 15usize];
    pub static mut string______Z_0x_04X_n: [::core::ffi::c_char; 15usize];
    pub static mut string_ROTSPD__X_0x_04X_n: [::core::ffi::c_char; 18usize];
    pub static mut string_________Y_0x_04X_n: [::core::ffi::c_char; 18usize];
    pub static mut string_________Z_0x_04X_n: [::core::ffi::c_char; 18usize];
    pub static mut string_COLI_RAD___7_3f_n: [::core::ffi::c_char; 17usize];
    pub static mut string_Captured_Time___d_n: [::core::ffi::c_char; 19usize];
    pub static mut string_Flag__0x_08X_n: [::core::ffi::c_char; 14usize];
    pub fn item_create(item: *mut Item) -> ::core::ffi::c_int;
    pub static mut dummyItemFuncs: ItemFuncs;
    pub fn item_replace_type_funcs(itemType: ::core::ffi::c_int, newFuncs: *mut ItemFuncs);
    pub static mut fileLoadQueue: [FileLoadInfo; 16usize];
    pub static mut fileCache: [FileCacheEntry; 32usize];
    pub static mut aramToMramInProgress: ::core::ffi::c_int;
    pub static mut currFileCacheIndex: ::core::ffi::c_int;
    pub static mut mramToAramInProgress: ::core::ffi::c_int;
    pub static mut dvdReadStatus: ::core::ffi::c_int;
    pub static mut loadQueueHead: ::core::ffi::c_int;
    pub static mut loadQueueTail: ::core::ffi::c_int;
    pub static mut lbl_802F2130: u32_;
    pub fn mram_to_aram_callback(arqRequestPtr: u32_);
    pub fn alloc_file_cache_entry(arg1: s32) -> *mut FileCacheEntry;
    pub fn load_dvd_read_callback(arg1: s32, arg2: *mut DVDFileInfo);
    pub fn get_next_file_id(id: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn aram_to_mram_callback(arqRequestPtr: u32_);
    pub fn invalidate_file_cache_range(addr: u32_, size: u32_);
    pub fn add_entrynum_to_load_queue(entryNum: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub static lbl_80114F78: [Struct8003699C_child_child; 2usize];
    pub static lbl_80114F90: [Struct8003699C_child_child; 2usize];
    pub static lbl_80114FA8: [Struct8003699C_child_child; 2usize];
    pub static lbl_80114FC0: [Struct8003699C_child_child; 2usize];
    pub static lbl_80114FD8: [Struct8003699C_child_child; 2usize];
    pub static lbl_80114FF0: [Struct8003699C_child_child; 2usize];
    pub static lbl_80115008: [Struct8003699C_child_child; 2usize];
    pub static lbl_80115020: [Struct8003699C_child_child; 2usize];
    pub static lbl_80115038: [Struct8003699C_child_child; 2usize];
    pub static lbl_80115050: [Struct8003699C_child_child; 2usize];
    pub static lbl_80115068: [Struct8003699C_child_child; 2usize];
    pub static lbl_80115080: [Struct8003699C_child_child; 2usize];
    pub static lbl_80115098: [Struct8003699C_child_child; 3usize];
    pub static lbl_801150BC: [Struct8003699C_child_child; 3usize];
    pub static lbl_801150E0: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115104: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115128: [Struct8003699C_child_child; 3usize];
    pub static lbl_8011514C: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115170: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115194: [Struct8003699C_child_child; 3usize];
    pub static lbl_801151B8: [Struct8003699C_child_child; 3usize];
    pub static lbl_801151DC: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115200: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115224: [Struct8003699C_child_child; 6usize];
    pub static lbl_8011526C: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115290: [Struct8003699C_child_child; 3usize];
    pub static lbl_801152B4: [Struct8003699C_child_child; 12usize];
    pub static lbl_80115344: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115374: [Struct8003699C_child_child; 4usize];
    pub static lbl_801153A4: [Struct8003699C_child_child; 3usize];
    pub static lbl_801153C8: [Struct8003699C_child_child; 4usize];
    pub static lbl_801153F8: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115428: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115458: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115488: [Struct8003699C_child_child; 4usize];
    pub static lbl_801154B8: [Struct8003699C_child_child; 6usize];
    pub static lbl_80115500: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115524: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115554: [Struct8003699C_child_child; 5usize];
    pub static lbl_80115590: [Struct8003699C_child_child; 5usize];
    pub static lbl_801155CC: [Struct8003699C_child_child; 5usize];
    pub static lbl_80115608: [Struct8003699C_child_child; 6usize];
    pub static lbl_80115650: [Struct8003699C_child_child; 5usize];
    pub static lbl_8011568C: [Struct8003699C_child_child; 5usize];
    pub static lbl_801156C8: [Struct8003699C_child_child; 5usize];
    pub static lbl_80115704: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115734: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115764: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115794: [Struct8003699C_child_child; 4usize];
    pub static lbl_801157C4: [Struct8003699C_child_child; 7usize];
    pub static lbl_80115818: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115848: [Struct8003699C_child_child; 7usize];
    pub static lbl_8011589C: [Struct8003699C_child_child; 2usize];
    pub static lbl_801158B4: [Struct8003699C_child_child; 2usize];
    pub static lbl_801158CC: [Struct8003699C_child_child; 2usize];
    pub static lbl_801158E4: [Struct8003699C_child_child; 8usize];
    pub static lbl_80115944: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115968: [Struct8003699C_child_child; 3usize];
    pub static lbl_8011598C: [Struct8003699C_child_child; 6usize];
    pub static lbl_801159D4: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115A04: [Struct8003699C_child_child; 6usize];
    pub static lbl_80115A4C: [Struct8003699C_child_child; 8usize];
    pub static lbl_80115AAC: [Struct8003699C_child_child; 5usize];
    pub static lbl_80115AE8: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115B18: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115B48: [Struct8003699C_child_child; 5usize];
    pub static lbl_80115B84: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115BA8: [Struct8003699C_child_child; 6usize];
    pub static lbl_80115BF0: [Struct8003699C_child_child; 8usize];
    pub static lbl_80115C50: [Struct8003699C_child_child; 7usize];
    pub static lbl_80115CA4: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115CD4: [Struct8003699C_child_child; 5usize];
    pub static lbl_80115D10: [Struct8003699C_child_child; 10usize];
    pub static lbl_80115D88: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115DB8: [Struct8003699C_child_child; 8usize];
    pub static lbl_80115E18: [Struct8003699C_child_child; 5usize];
    pub static lbl_80115E54: [Struct8003699C_child_child; 3usize];
    pub static lbl_80115E78: [Struct8003699C_child_child; 6usize];
    pub static lbl_80115EC0: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115EF0: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115F20: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115F50: [Struct8003699C_child_child; 4usize];
    pub static lbl_80115F80: [Struct8003699C_child_child; 7usize];
    pub static lbl_80115FD4: [Struct8003699C_child_child; 7usize];
    pub static lbl_80116028: [Struct8003699C_child_child; 7usize];
    pub static lbl_8011607C: [Struct8003699C_child_child; 7usize];
    pub static lbl_801160D0: [Struct8003699C_child_child; 3usize];
    pub static lbl_801160F4: [Struct8003699C_child_child; 3usize];
    pub static lbl_80116118: [Struct8003699C_child_child; 6usize];
    pub static lbl_80116160: [Struct8003699C_child_child; 5usize];
    pub static lbl_8011619C: [Struct8003699C_child_child; 7usize];
    pub static lbl_801161F0: [Struct8003699C_child_child; 6usize];
    pub static lbl_80116238: [Struct8003699C_child_child; 4usize];
    pub static lbl_80116268: [Struct8003699C_child_child; 4usize];
    pub static lbl_80116298: [Struct8003699C_child_child; 5usize];
    pub static lbl_801162D4: [Struct8003699C_child_child; 3usize];
    pub static lbl_801162F8: [Struct8003699C_child_child; 3usize];
    pub static lbl_8011631C: [Struct8003699C_child_child; 3usize];
    pub static lbl_80116340: [Struct8003699C_child_child; 3usize];
    pub static lbl_80116364: [Struct8003699C_child_child; 3usize];
    pub static lbl_80116388: [Struct8003699C_child_child; 2usize];
    pub static lbl_801163A0: [Struct8003699C_child_child; 3usize];
    pub static lbl_801163C4: [Struct8003699C_child_child; 2usize];
    pub static lbl_801163DC: [Struct8003699C_child_child; 4usize];
    pub static lbl_8011640C: [Struct8003699C_child_child; 5usize];
    pub static lbl_80116448: [Struct8003699C_child_child; 3usize];
    pub static lbl_8011646C: [Struct8003699C_child_child; 4usize];
    pub static lbl_8011649C: [Struct8003699C_child_child; 5usize];
    pub static lbl_801164D8: [Struct8003699C_child_child; 3usize];
    pub static lbl_801164FC: [Struct8003699C_child_child; 4usize];
    pub static lbl_8011652C: [Struct8003699C_child_child; 3usize];
    pub static lbl_80116550: [Struct8003699C_child_child; 3usize];
    pub static lbl_80116574: [Struct8003699C_child_child; 3usize];
    pub static lbl_80116598: [Struct8003699C_child_child; 4usize];
    pub static lbl_801165C8: [Struct8003699C_child_child; 4usize];
    pub static lbl_801165F8: [Struct8003699C_child_child; 5usize];
    pub static lbl_802F3340: [u8_; 5usize];
    pub static lbl_802F3348: [u8_; 1usize];
    pub static lbl_802F334C: [u8_; 1usize];
    pub static lbl_802F3350: [u8_; 1usize];
    pub static lbl_802F3354: [u8_; 1usize];
    pub static lbl_802F3358: [u8_; 1usize];
    pub static lbl_802F335C: [u8_; 1usize];
    pub static lbl_802F3360: [u8_; 1usize];
    pub static lbl_802F3364: [u8_; 1usize];
    pub static lbl_802F3368: [u8_; 1usize];
    pub static lbl_802F336C: [u8_; 1usize];
    pub static lbl_802F3370: [u8_; 1usize];
    pub static lbl_80116F18: [ChildJointList; 17usize];
    pub static lbl_80116FA0: MotRotation;
    pub static lbl_80116FAC: [u8_; 5usize];
    pub static lbl_80116FB4: [u8_; 1usize];
    pub static lbl_80116FB8: [u8_; 1usize];
    pub static lbl_80116FBC: [u8_; 1usize];
    pub static lbl_80116FC0: [u8_; 1usize];
    pub static lbl_80116FC4: [u8_; 1usize];
    pub static lbl_80116FC8: [u8_; 1usize];
    pub static lbl_80116FCC: [u8_; 1usize];
    pub static lbl_80116FD0: [u8_; 1usize];
    pub static lbl_80116FD4: [u8_; 1usize];
    pub static lbl_80116FD8: [u8_; 1usize];
    pub static lbl_80116FDC: [u8_; 1usize];
    pub static lbl_80116FE0: [ChildJointList; 17usize];
    pub static lbl_80117068: MotRotation;
    pub static childJointLists: [*const ChildJointList; 4usize];
    pub static lbl_80117084: [*const MotRotation; 4usize];
    pub static lbl_80117094: [Vec; 15usize];
    pub static lbl_80117148: [Vec; 15usize];
    pub static lbl_801171FC: [*const Vec; 4usize];
    pub static lbl_8011720C: [Vec; 15usize];
    pub static lbl_801172C0: [Vec; 15usize];
    pub static lbl_80117374: [Vec; 15usize];
    pub static lbl_80117428: [Vec; 15usize];
    pub static lbl_801174DC: [Vec; 15usize];
    pub static lbl_80117590: [Vec; 15usize];
    pub static lbl_80117644: [Vec; 15usize];
    pub static lbl_801176F8: [Vec; 15usize];
    pub static lbl_801177AC: [*const Vec; 9usize];
    pub fn func_800366F8(arg0: *mut Struct8003699C_child_sub);
    pub fn func_80036000(arg0: *mut Struct8003699C_child_sub, arg1: u16_, arg2: u16_);
    pub fn func_80036544(arg0: *mut Struct8003699C_child_sub);
    pub fn func_80036720(arg0: *mut Struct8003699C_child_sub);
    pub fn lbl_0001157C();
    pub static lbl_00013680: UnkFunc;
    pub fn lbl_000008B4();
    pub static mut lbl_00014108: UnkFunc;
    pub fn func_800993A8(rendEfc: *mut RenderEffect);
    pub fn func_800994A8(rendEfc: *mut RenderEffect);
    pub fn func_80099518(rendEfc: *mut RenderEffect);
    pub fn func_80099968(arg0: ::core::ffi::c_int, arg1: *mut RenderEffect);
    pub fn func_800999CC(unused: ::core::ffi::c_int, arg1: *mut RenderEffect);
    pub fn func_8009A13C(arg0: ::core::ffi::c_int, arg1: *mut RenderEffect);
    pub fn func_8009A2A4(rendEfc: *mut RenderEffect);
    pub fn lbl_8009A31C(arg0: *mut GCMMatState_Unit);
    pub fn func_8009A6E0(rendEfc: *mut RenderEffect);
    pub static mut lbl_802C4960: [u8_; 5120usize];
    pub static mut stageViewInfo: *mut StageViewInfo;
    pub fn view_info_sprite_draw(sprite: *mut Sprite);
    pub static mut lbl_801D5854: Struct801D5854;
    pub static mut string_No_Define_6: [::core::ffi::c_char; 10usize];
    pub fn mini_commend_finish();
    pub fn lbl_8009C5E0(arg1: *mut Sprite);
    pub fn func_8009C5E4(arg0: *mut s8, arg1: *mut s8);
    pub fn func_8009CAE0(arg0: *mut s8, arg1: *mut s8, arg2: s8);
    pub fn mini_commend_free_data();
    pub fn func_8009CD5C();
    pub fn func_8009D3AC(arg1: *mut Ape, arg2: ::core::ffi::c_int);
    pub fn func_8009D5F4() -> u32_;
    pub fn func_8009D794() -> ::core::ffi::c_int;
    pub fn func_8009DB40(arg0: *mut [f32_; 4usize]);
    pub static mut lbl_801D3F5C: [s8; 44usize];
    pub static mut lbl_802F1368: [Struct801D404C_child; 1usize];
    pub static mut lbl_802F1370: [Struct801D404C_child; 1usize];
    pub static mut lbl_802F1378: [Struct801D404C_child; 1usize];
    pub static mut lbl_802F1380: [Struct801D404C_child; 1usize];
    pub static mut lbl_801D3F88: [Struct801D404C_child; 2usize];
    pub static mut lbl_801D3F98: [Struct801D404C_child; 3usize];
    pub static mut lbl_801D3FB0: [Struct801D404C_child; 3usize];
    pub static mut lbl_801D3FC8: [Struct801D404C_child; 3usize];
    pub static mut lbl_801D3FE0: [Struct801D404C_child; 3usize];
    pub static mut lbl_801D3FF8: [Struct801D404C_child; 2usize];
    pub static mut lbl_801D404C: [Struct801D404C; 13usize];
    pub static mut mini_commend_unused: [u32_; 40usize];
    pub static mut miniCommendInfo: _bindgen_ty_96;
    pub static lbl_802F59D4: [s8; 4usize];
    pub static lbl_802F59D8: [s8; 5usize];
    pub fn func_8009BF74(arg0: ::core::ffi::c_int);
    pub fn func_8009C178(arg0: *mut s8, arg1: *mut s8, arg2: *mut s8, arg3: ::core::ffi::c_int);
    pub fn func_8009C2A4(status: *mut s8, sprite: *mut Sprite);
    pub fn create_some_sprite();
    pub static lbl_80171B60: [f32; 4usize];
    pub fn func_8009D8A4(arg0: ::core::ffi::c_int, arg1: *mut Vec);
    pub fn func_8009DB9C(arg0: ::core::ffi::c_int);
    pub fn func_8009DDC4(arg0: ::core::ffi::c_int);
    pub static mut lbl_802F1BAC: u32_;
    pub fn func_8000FEC8(arg1: ::core::ffi::c_int);
    pub fn func_80011D90();
    #[doc = " Logo Submode - Shows a rolling 3D Amusement Vision logo"]
    pub static mut prevLogoPos: Vec;
    pub fn update_av_logo_pos_and_sound();
    pub fn update_av_logo();
    pub static introCutsceneScript: [IntroCutsceneCommand; 103usize];
    pub fn banana_textbox_callback(tbox: *mut TextBox);
    pub fn run_cutscene_script();
    pub static mut lbl_80174254: [Spline; 12usize];
    pub static mut lbl_80174314: [Spline; 14usize];
    pub static mut lbl_801743F4: [Spline; 12usize];
    pub static mut lbl_801744B4: [Spline; 12usize];
    pub static mut lbl_80174574: [Spline; 15usize];
    pub static mut lbl_80174664: [Spline; 14usize];
    pub static mut lbl_80174744: [Spline; 14usize];
    pub static mut lbl_80174824: [Spline; 14usize];
    pub static mut lbl_80174904: [Spline; 12usize];
    pub static mut lbl_801749C4: [Spline; 14usize];
    pub static mut lbl_80174AA4: [Spline; 12usize];
    pub static mut lbl_80174B64: [Spline; 12usize];
    pub static mut lbl_80174C24: [Spline; 6usize];
    pub static mut lbl_80174C84: [Spline; 9usize];
    pub static mut lbl_80174D14: [Spline; 6usize];
    pub static mut lbl_80174D74: [Spline; 6usize];
    pub static mut lbl_80174DD4: [*mut Spline; 4usize];
    pub static mut lbl_80174DE4: [*mut Spline; 4usize];
    pub static mut lbl_80174DF4: [*mut Spline; 4usize];
    pub static mut lbl_80174E04: [*mut Spline; 4usize];
    pub static infoScript: [InfoCommand; 47usize];
    pub static mut englishTranslation: [*mut ::core::ffi::c_char; 18usize];
    pub fn adv_dummy_0_5() -> f32;
    #[doc = " Game Ready Submode"]
    pub fn u_choose_some_replay_index_1() -> ::core::ffi::c_int;
    pub fn u_choose_some_replay_index_2() -> ::core::ffi::c_int;
    pub fn func_80011B98() -> ::core::ffi::c_int;
    pub fn func_80011BD4();
    #[doc = " Ranking Submode"]
    pub fn func_80011BE0() -> ::core::ffi::c_int;
    pub static mut unused_801C7ED8: [u32_; 144usize];
    pub static mut unused_japaneseMonkeyNames: [*mut ::core::ffi::c_char; 61usize];
    pub static mut unused_801C8600: [f32; 800usize];
    pub static mut unused_801C9280: [u32_; 131usize];
    pub static mut unused_801C948C: [f32; 6812usize];
    pub static mut string_game_program_directorsystem_programmersParty_game_programmersMini_game_programmers2D_system_programmerStage_design_directorStage_DesignersMotion_design_directorMotion_Designers2d_designerCharacter_designerPlannersSound_DesignMonkey_VoicePublicityCooperationSpecial_ThanksProducer___Director_2:
        [::core::ffi::c_char; 291usize];
    pub static mut unused_801D0020: [f32; 3770usize];
    pub static mut u_minigameMainCallback: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut u_minigameDrawCallback: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut lbl_802F2160: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut lbl_802F2164: s32;
    pub static mut s_minigameRelModule: RelModule;
    pub static mut lbl_802F2170: s16;
    pub fn u_set_minigame_callbacks_2(
        arg0: ::core::option::Option<unsafe extern "C" fn()>,
        arg1: ::core::option::Option<unsafe extern "C" fn()>,
        arg2: ::core::option::Option<unsafe extern "C" fn()>,
        ballCb: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Ball)>,
        cameraCb: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Camera, arg2: *mut Ball)>,
    );
    pub static mut s_minigameRelFileNames: [*mut ::core::ffi::c_char; 23usize];
    pub static mut s_minigameTestMenu: [MinigameTestMenuItem; 11usize];
    pub fn ending_state_init();
    pub fn ending_state_beginner_intro_init();
    pub fn ending_state_beginner_intro_main();
    pub fn ending_state_beginner_dialogue_init();
    pub fn ending_state_beginner_dialogue_main();
    pub fn ending_state_beginner_end_init();
    pub fn ending_state_beginner_end_main();
    pub fn ending_state_advanced_intro_init();
    pub fn ending_state_advanced_intro_main();
    pub fn ending_state_advanced_dialogue_init();
    pub fn ending_state_advanced_dialogue_main();
    pub fn ending_state_advanced_end_init();
    pub fn ending_state_advanced_end_main();
    pub fn ending_state_expert_intro_init();
    pub fn ending_state_expert_intro_main();
    pub fn ending_state_expert_dialogue_init();
    pub fn ending_state_expert_dialogue_main();
    pub fn ending_state_expert_fallbanana_init();
    pub fn ending_state_expert_fallbanana_main();
    pub fn ending_state_expert_house_init();
    pub fn ending_state_expert_house_main();
    pub fn ending_state_expert_walkin_init();
    pub fn ending_state_expert_walkin_main();
    pub fn ending_state_expert_breakin_init();
    pub fn ending_state_expert_breakin_main();
    pub fn ending_state_expert_end_init();
    pub fn ending_state_expert_end_main();
    pub fn ending_state_expert_apecam_init();
    pub fn ending_state_expert_apecam_main();
    pub fn ending_state_expert_gorcam_init();
    pub fn ending_state_expert_gorcam_main();
    pub fn ending_state_end_init();
    pub fn ending_state_end_main();
    pub fn func_800BB068();
    pub fn ending_hgate_main();
    pub fn func_800BBA54();
    pub fn ending_hgate_draw();
    pub fn func_800BBB10(arg1: ::core::ffi::c_int);
    pub fn ending_chara_init();
    pub fn ending_chara_main();
    pub fn func_800BC820();
    pub fn ending_chara_draw();
    pub fn set_ending_chara(arg1: ::core::ffi::c_int, arg2: Character) -> ::core::ffi::c_int;
    pub fn ending_ape_thread(arg1: *mut Ape, arg2: ::core::ffi::c_int);
    pub fn ending_banana_init();
    pub fn ending_banana_main();
    pub fn ending_banana_each_coli();
    pub fn func_800BF2D0();
    pub fn ending_banana_draw();
    pub fn set_house_ending_bananas();
    pub fn func_800BF658();
    pub fn func_800BF774();
    pub fn set_freefall_ending_bananas(arg1: ::core::ffi::c_int);
    pub fn set_cam_ride_ending_bananas(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int);
    pub fn spawn_beginner_banana(arg1: ::core::ffi::c_int);
    pub fn func_800BFA2C();
    pub fn rend_efc_ape_face();
    pub static mut lbl_801E2A98: [Struct801E2A98; 3usize];
    pub static mut lbl_801E2AD4: [Vec; 3usize];
    pub static mut lbl_801E2AD4_2: [Vec; 4usize];
    pub static mut lbl_801E2B28: [[s16; 2usize]; 4usize];
    pub static mut endingFuncs: [::core::option::Option<unsafe extern "C" fn()>; 33usize];
    pub static mut lbl_802F18C0: [s16; 4usize];
    pub static mut lbl_802F18C8: [s16; 4usize];
    pub static mut lbl_802F18D0: [s16; 4usize];
    pub static mut lbl_802F18D8: [s16; 4usize];
    pub static mut lbl_802F18E0: [s16; 4usize];
    pub static mut lbl_802F18E8: [s16; 3usize];
    pub static mut lbl_802F18F0: [s16; 4usize];
    pub static mut lbl_802F18F8: [s16; 4usize];
    pub static mut lbl_801E2C44: [Blah; 15usize];
    pub static mut lbl_801E2DAC: [Blah; 15usize];
    pub static mut lbl_801E2F14: [Blah; 15usize];
    pub static mut lbl_801E307C: [Blah; 15usize];
    pub static mut lbl_801E31E4: [*mut Blah; 4usize];
    pub fn lbl_800BCD30(arg1: *mut EndingDrawNode);
    pub static mut lbl_801BDF60: [ModelLOD; 5usize];
    pub static mut lbl_801BDF88: [ModelLOD; 3usize];
    pub static mut lbl_802F0B38: *mut ModelLOD;
    pub static mut lbl_802F0B3C: *mut ModelLOD;
    pub static mut pilotBananaInfo: [Struct801BDFA0; 5usize];
    pub static mut lbl_802F1FF4: s16;
    pub static mut lbl_802F1FEC: s16;
    pub static mut lbl_802F1FE4: [s16; 4usize];
    pub static mut lbl_802F1FE0: s16;
    pub static mut lbl_802F1FDC: f32;
    pub static mut lbl_802F1FD8: f32;
    pub static mut lbl_802F1FD0: u32_;
    pub static mut lbl_80285A58: [u32_; 4usize];
    pub static mut lbl_80285A80: [u8_; 48usize];
    pub static mut lbl_80285A68: [u8_; 24usize];
    pub static mut lbl_801BE018: [::core::ffi::c_char; 25usize];
    pub static mut sandBgModelFind: [BGModelSearch; 12usize];
    pub static mut sandBgObjFind: [BGModelSearch; 3usize];
    pub fn func_8005C3B8(arg1: *mut RenderEffect);
    pub fn func_8005C4D0(arg1: *mut RenderEffect);
    pub fn func_8005C540(arg1: *mut RenderEffect);
    pub fn func_8005C55C(arg1: ::core::ffi::c_int, arg2: *mut RenderEffect);
    pub fn lbl_8005CB90(arg1: *mut SandDrawNode);
    pub fn lbl_8005CC4C(arg1: *mut MyDrawNode2);
    pub fn lbl_8005CEAC(arg1: *mut GCMMatState_Unit);
    pub fn lbl_8005D4B0(arg1: *mut GCMMatState_Unit);
    pub fn lbl_8005DCA8(arg1: *mut GCMMatState_Unit);
    pub fn bg_sand_model_find_proc(
        arg1: ::core::ffi::c_int,
        arg2: *mut GMAModelEntry,
    ) -> ::core::ffi::c_int;
    pub fn bg_sand_obj_find_proc(
        arg1: ::core::ffi::c_int,
        arg2: *mut StageBgObject,
    ) -> ::core::ffi::c_int;
    pub static mut heatEffectFuncs: RenderEffectFuncs;
    pub fn force_lbl_802F42A0() -> f32;
    pub static mut lbl_8027CBC8: TevStageInfo;
    pub static mut currWindowIndex: ::core::ffi::c_int;
    pub static mut windowCursorStartX: s32;
    pub static mut windowCursorX: s32;
    pub static mut windowCursorY: s32;
    pub static mut textOffsetX: s8;
    pub static mut textOffsetY: s8;
    pub static mut u_windowBoxX: u32_;
    pub static mut u_windowBoxY: u32_;
    pub static mut u_windowBoxWidth: u32_;
    pub static mut u_windowBoxHeight: u32_;
    pub static mut windowColorId: u8_;
    pub static mut currWindowX: u32_;
    pub static mut currWindowY: u32_;
    pub static mut currWindowWidth: u32_;
    pub static mut currWindowHeight: u32_;
    pub static mut u_selectionRelated1: BOOL;
    pub static mut u_selectionRelated2: BOOL;
    pub static mut unused1: u32_;
    pub static mut unused2: u32_;
    pub static mut lbl_802F1E50: s8;
    pub static mut lbl_802F1E51: s8;
    pub static mut lbl_802F1E54: s32;
    pub static mut lbl_802F1E58: s32;
    pub static mut offOnStrTable: [*mut ::core::ffi::c_char; 2usize];
    pub static mut lbl_801B3B18: RangeInt;
    pub static mut posScaleRange: RangeFloat;
    pub static mut lbl_801B3B38: RangeFloat;
    pub static mut lbl_801B3B38_2: RangeFloat;
    pub static mut lbl_801B3B38_3: RangeFloat;
    pub static mut angleRange: RangeInt;
    pub static mut lbl_801B3B78: RangeInt;
    pub static mut dipSwitchWindowItems: [WindowItem; 66usize];
    pub static mut dipSwitchWindow: WindowDesc;
    pub static mut gameWindowItems: [WindowItem; 2usize];
    pub static mut gameWindow: WindowDesc;
    pub static mut modeWIndowItems: [WindowItem; 7usize];
    pub static mut modeWindow: WindowDesc;
    pub static mut eventWindowItems: [WindowItem; 44usize];
    pub static mut eventWindow: WindowDesc;
    pub static mut cameraIdRange: RangeInt;
    pub static mut cameraWindowItems: [WindowItem; 12usize];
    pub static mut cameraWindow: WindowDesc;
    pub static mut effectWindowItems: [WindowItem; 2usize];
    pub static mut effectWindow: WindowDesc;
    pub static mut spritePosRange: RangeFloat;
    pub static mut spriteIdRange: RangeInt;
    pub static mut fontIdRange: RangeInt;
    pub static mut alignRange: RangeInt;
    pub static mut spriteColorRange: RangeInt;
    pub static mut spriteOpacityRange: RangeFloat;
    pub static mut spriteWindowItems: [WindowItem; 23usize];
    pub static mut spriteWindow: WindowDesc;
    pub static mut spotFnStrTable: [*mut ::core::ffi::c_char; 7usize];
    pub static mut lbl_801B5058: RangeInt;
    pub static mut lbl_801B5068: RangeInt;
    pub static mut lbl_801B5078: RangeInt;
    pub static mut lbl_801B5088: RangeFloat;
    pub static mut lbl_801B5098: RangeFloat;
    pub static mut lbl_801B50A8: RangeFloat;
    pub static mut lbl_801B50B8: RangeFloat;
    pub static mut lbl_801B50C8: RangeFloat;
    pub static mut lbl_801B50D8: RangeInt;
    pub static mut lbl_801B50E8: RangeFloat;
    pub static mut lbl_801B50F8: RangeInt;
    pub static mut lightParamWindowItems: [WindowItem; 32usize];
    pub static mut lightParamWindow: WindowDesc;
    pub static mut lbl_801B549C: RangeInt;
    pub static mut lbl_801B54AC: RangeInt;
    pub static mut lightGroupWindowItems: [WindowItem; 21usize];
    pub static mut lightGroupWindow: WindowDesc;
    pub static mut fogTypeStrTable: [*mut ::core::ffi::c_char; 8usize];
    pub static mut lbl_801B57D8: RangeInt;
    pub static mut lbl_801B57E8: RangeFloat;
    pub static mut lbl_801B57F8: RangeInt;
    pub static mut fogWindowItems: [WindowItem; 11usize];
    pub static mut fogWindow: WindowDesc;
    pub static mut lbl_801B598C: RangeInt;
    pub static mut lbl_801B599C: RangeInt;
    pub static mut lbl_801B59AC: RangeInt;
    pub static mut lbl_801B59BC: RangeInt;
    pub static mut lbl_801B59CC: RangeInt;
    pub static mut soundWindowItems: [WindowItem; 16usize];
    pub static mut soundWindow: WindowDesc;
    pub static mut fightWindowItems: [WindowItem; 23usize];
    pub static mut fightWindow: WindowDesc;
    pub static mut unusedRange1: RangeInt;
    pub static mut raceCpuWindowItems: [WindowItem; 2usize];
    pub static mut raceCpuWindow: WindowDesc;
    pub static mut unusedRange2: RangeInt;
    pub static mut unusedRange3: RangeFloat;
    pub static mut raceWindowItems: [WindowItem; 2usize];
    pub static mut raceWindow: WindowDesc;
    pub static mut perfWindowItems: [WindowItem; 74usize];
    pub static mut perfWindow: WindowDesc;
    pub static mut lbl_801B6900: RangeInt;
    pub static mut inputWindowItems: [WindowItem; 24usize];
    pub static mut inputWindow: WindowDesc;
    pub static mut wininfoWindowItems: [WindowItem; 6usize];
    pub static mut wininfoWindow: WindowDesc;
    pub static mut changeParamWindowItems: [WindowItem; 16usize];
    pub static mut changeParamWindow: WindowDesc;
    pub static mut bumperParamWindowItems: [WindowItem; 6usize];
    pub static mut bumperParamWindow: WindowDesc;
    pub static mut heapFreeWindowItems: [WindowItem; 3usize];
    pub static mut heapFreeWindow: WindowDesc;
    pub static mut mainMenuWindowItems: [WindowItem; 21usize];
    pub static mut mainMenuWindow: WindowDesc;
    pub static mut screenBufferChar1: [::core::ffi::c_char; 1961usize];
    pub static mut screenBufferChar2: [::core::ffi::c_char; 1961usize];
    pub static mut screenBufferChar3: [::core::ffi::c_char; 1961usize];
    pub static mut screenBufferColor1: [u8_; 1961usize];
    pub static mut screenBufferColor2: [u8_; 1961usize];
    pub static mut screenBufferColor3: [u8_; 1961usize];
    pub static mut screenBufferXOffset: [s8; 1961usize];
    pub static mut screenBufferYOffset: [s8; 1961usize];
    pub static mut windowList: [*mut WindowDesc; 16usize];
    pub static mut windowWork: [WindowDesc; 16usize];
    pub fn draw_window_frame(arg0: *mut WindowDesc);
    pub fn window_set_text_offset(arg0: ::core::ffi::c_int, arg1: ::core::ffi::c_int);
    pub fn clear_buffer_region(
        arg0: ::core::ffi::c_int,
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
    );
    pub fn draw_char(x: ::core::ffi::c_int, y: ::core::ffi::c_int, charIdx: s8, colorId: u8_);
    pub fn draw_some_window_quad_2(x1: f32, y1: f32, x2: f32, y2: f32);
    pub fn func_8002DC54();
    pub fn func_8002DD5C_inline();
    pub fn func_8002DD5C();
    pub fn cycle_window();
    pub fn window_open(arg0: *mut WindowDesc);
    pub fn process_window(window: *mut WindowDesc);
    pub fn set_some_params(
        a: ::core::ffi::c_int,
        b: ::core::ffi::c_int,
        c: ::core::ffi::c_int,
        d: ::core::ffi::c_int,
    );
    pub fn window_show_items(window: *mut WindowDesc, arg1: u32_);
    pub fn dont_inline_func_8002DD5C();
    pub fn window_printf_1(fmt: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
    pub fn __OSLockSram() -> *mut OSSram;
    pub fn __OSLockSramEx() -> *mut OSSramEx;
    pub fn __OSUnlockSram(commit: BOOL) -> BOOL;
    pub fn __OSUnlockSramEx(commit: BOOL) -> BOOL;
    pub fn __OSGetDIConfig() -> u32_;
    pub fn __OSUnlockAllMutex(thread: *mut OSThread);
    pub static mut RunQueueBits: u32_;
    pub static mut RunQueueHint: BOOL;
    pub static mut Reschedule: s32;
    pub static mut RunQueue: [OSThreadQueue; 32usize];
    pub static mut IdleThread: OSThread;
    pub static mut DefaultThread: OSThread;
    pub static mut IdleContext: OSContext;
    pub static mut _stack_addr: [u8_; 0usize];
    pub static mut _stack_end: [u8_; 0usize];
    pub fn OSInitMutexQueue(queue: *mut OSMutexQueue);
    pub fn __OSThreadInit();
    pub fn OSDisableScheduler() -> s32;
    pub fn OSEnableScheduler() -> s32;
    pub fn SetRun(thread: *mut OSThread);
    pub fn UnsetRun(thread: *mut OSThread);
    pub fn __OSGetEffectivePriority(thread: *mut OSThread) -> OSPriority;
    pub fn SetEffectivePriority(thread: *mut OSThread, priority: OSPriority) -> *mut OSThread;
    pub fn UpdatePriority(thread: *mut OSThread);
    pub fn __OSSwitchThread(nextThread: *mut OSThread);
    pub fn SelectThread(yield_: BOOL) -> *mut OSThread;
    pub fn __OSReschedule();
    pub fn OSCancelThread(thread: *mut OSThread);
    pub static mut OSErrorTable: [OSErrorHandler; 16usize];
    pub fn __OSUnhandledException(error: u8_, context: *mut OSContext, dsisr: u32_, dar: u32_);
    pub static mut ArenaEnd: *mut ::core::ffi::c_void;
    pub static mut ArenaStart: *mut ::core::ffi::c_void;
    pub static mut NumHeaps: ::core::ffi::c_int;
    pub static mut HeapArray: *mut Heap;
    pub fn DLAddFront(neighbor: *mut HeapCell, cell: *mut HeapCell) -> *mut ::core::ffi::c_void;
    pub fn DLExtract(list: *mut HeapCell, cell: *mut HeapCell) -> *mut HeapCell;
    pub fn DLInsert(
        list: *mut HeapCell,
        cell: *mut HeapCell,
        unused: *mut ::core::ffi::c_void,
    ) -> *mut HeapCell;
    pub static mut string__nOSDumpHeap__d___n: [::core::ffi::c_char; 18usize];
    pub static mut string_________Inactive_n: [::core::ffi::c_char; 18usize];
    pub static mut string_addr_tsize_t_tend_tprev_tnext_n: [::core::ffi::c_char; 26usize];
    pub static mut string_________Allocated_n: [::core::ffi::c_char; 19usize];
    pub static mut string__x_t_d_t_x_t_x_t_x_n: [::core::ffi::c_char; 16usize];
    pub static mut string_________Free_n: [::core::ffi::c_char; 14usize];
    pub static mut __OSArenaHi: *mut ::core::ffi::c_void;
    pub static mut __OSArenaLo: *mut ::core::ffi::c_void;
    pub static mut DSPInitCode: [u8_; 128usize];
    pub fn __OSInitAudioSystem();
    pub fn __OSStopAudioSystem();
    pub static mut __CARDBlock: [CARDControl; 2usize];
    pub static mut __CARDDiskNone: DVDDiskID;
    pub static mut __CARDDiskID: *const DVDDiskID;
    pub fn __CARDDefaultApiCallback(chan: s32, result: s32);
    pub fn __CARDSyncCallback(chan: s32, result: s32);
    pub fn __CARDExtHandler(chan: s32, context: *mut OSContext);
    pub fn __CARDExiHandler(chan: s32, context: *mut OSContext);
    pub fn __CARDTxHandler(chan: s32, context: *mut OSContext);
    pub fn __CARDUnlockedHandler(chan: s32, context: *mut OSContext);
    pub fn __CARDReadNintendoID(chan: s32, id: *mut u32_) -> ::core::ffi::c_int;
    pub fn __CARDEnableInterrupt(chan: s32, enable: BOOL) -> s32;
    pub fn __CARDReadStatus(chan: s32, status: *mut u8_) -> s32;
    pub fn __CARDClearStatus(chan: s32) -> s32;
    pub fn __CARDStart(chan: s32, txCallback: CARDCallback, exiCallback: CARDCallback) -> s32;
    pub fn __CARDReadSegment(chan: s32, callback: CARDCallback) -> s32;
    pub fn __CARDWritePage(chan: s32, callback: CARDCallback) -> s32;
    pub fn __CARDEraseSector(chan: s32, addr: u32_, callback: CARDCallback) -> s32;
    pub fn __CARDSetDiskID(id: *const DVDDiskID);
    pub fn __CARDGetControlBlock(chan: s32, pcard: *mut *mut CARDControl) -> s32;
    pub fn __CARDPutControlBlock(card: *mut CARDControl, result: s32) -> s32;
    pub fn __CARDSync(chan: s32) -> s32;
    pub fn __CARDGetDirBlock(arg1: *mut CARDControl) -> *mut CARDDir;
    pub fn __CARDUpdateDir(chan: s32, callback: CARDCallback) -> s32;
    pub fn __CARDCompareFileName(ent: *mut CARDDir, fileName: *const ::core::ffi::c_char) -> BOOL;
    pub fn __CARDAccess(ent: *mut CARDDir) -> s32;
    pub fn __CARDIsPublic(ent: *mut CARDDir) -> s32;
    pub fn __CARDGetFileNo(
        card: *mut CARDControl,
        fileName: *const ::core::ffi::c_char,
        pfileNo: *mut s32,
    ) -> s32;
    pub fn __CARDIsOpened(card: *mut CARDControl, fileNo: s32) -> BOOL;
    pub fn __CARDRead(
        chan: s32,
        addr: u32_,
        length: s32,
        dst: *mut ::core::ffi::c_void,
        callback: CARDCallback,
    ) -> s32;
    pub fn __CARDWrite(
        chan: s32,
        addr: u32_,
        length: s32,
        dst: *mut ::core::ffi::c_void,
        callback: CARDCallback,
    ) -> s32;
    pub fn __CARDSeek(
        fileInfo: *mut CARDFileInfo,
        length: s32,
        offset: s32,
        pcard: *mut *mut CARDControl,
    ) -> s32;
    pub fn __CARDCheckSum(
        ptr: *mut ::core::ffi::c_void,
        length: ::core::ffi::c_int,
        checkSum: *mut u16_,
        checkSumInv: *mut u16_,
    );
    pub fn __CARDVerify(card: *mut CARDControl) -> s32;
    pub fn __CARDFormatRegionAsync(chan: s32, callback: CARDCallback) -> s32;
    pub fn __CARDUnlock(chan: s32, flashID: *mut u8_) -> s32;
    pub fn __CARDGetFatBlock(card: *mut CARDControl) -> *mut ::core::ffi::c_void;
    pub fn __CARDAllocBlock(chan: s32, cBlock: u32_, callback: CARDCallback) -> s32;
    pub fn __CARDFreeBlock(chan: s32, nBlock: u16_, callback: CARDCallback) -> s32;
    pub fn __CARDUpdateFatBlock(chan: s32, fat: *mut u16_, callback: CARDCallback) -> s32;
    pub fn __CARDMountCallback(chan: s32, result: s32);
    pub fn BlockReadCallback(chan: s32, result: s32);
    pub fn BlockWriteCallback(chan: s32, result: s32);
    pub fn WriteCallback(chan: s32, result: s32);
    pub fn EraseCallback(chan: s32, result: s32);
    pub fn EXISetExiCallback(channel: s32, callback: EXICallback) -> EXICallback;
    pub fn EXILock(channel: s32, device: u32_, callback: EXICallback) -> BOOL;
    pub fn EXIUnlock(channel: s32) -> BOOL;
    pub fn EXISelect(channel: s32, device: u32_, frequency: u32_) -> BOOL;
    pub fn EXIDeselect(channel: s32) -> BOOL;
    pub fn EXIImm(
        channel: s32,
        buffer: *mut ::core::ffi::c_void,
        length: s32,
        type_: u32_,
        callback: EXICallback,
    ) -> BOOL;
    pub fn EXIImmEx(
        channel: s32,
        buffer: *mut ::core::ffi::c_void,
        length: s32,
        type_: u32_,
    ) -> BOOL;
    pub fn EXIDma(
        channel: s32,
        buffer: *mut ::core::ffi::c_void,
        length: s32,
        type_: u32_,
        callback: EXICallback,
    ) -> BOOL;
    pub fn EXISync(channel: s32) -> BOOL;
    pub fn EXIProbe(channel: s32) -> BOOL;
    pub fn EXIProbeEx(channel: s32) -> s32;
    pub fn EXIAttach(channel: s32, callback: EXICallback) -> BOOL;
    pub fn EXIDetach(channel: s32) -> BOOL;
    pub fn EXIGetState(channel: s32) -> u32_;
    pub fn EXIGetID(channel: s32, device: u32_, id: *mut u32_) -> s32;
    pub fn InitCallback(task: *mut ::core::ffi::c_void);
    pub fn DoneCallback(task: *mut ::core::ffi::c_void);
    pub static mut CardData: [u8_; 352usize];
    pub fn GetInitVal() -> u32_;
    pub fn exnor_1st(data: u32_, rshift: u32_) -> u32_;
    pub fn exnor(data: u32_, lshift: u32_) -> u32_;
    pub fn bitrev(data: u32_) -> u32_;
    pub fn ReadArrayUnlock(
        chan: s32,
        data: u32_,
        rbuf: *mut ::core::ffi::c_void,
        rlen: s32,
        mode: s32,
    ) -> s32;
    pub fn DummyLen() -> s32;
    pub fn FormatCallback(chan: s32, result: s32);
    pub fn ReadCallback(chan: s32, result: s32);
    pub fn CreateCallbackFat(chan: s32, result: s32);
    pub fn OnReset(f: BOOL) -> BOOL;
    pub fn Retry(chan: s32) -> s32;
    pub static mut ResetFunctionInfo: OSResetFunctionInfo;
    pub fn TimeoutHandler(alarm: *mut OSAlarm, context: *mut OSContext);
    pub fn SetupTimeoutAlarm(card: *mut CARDControl);
    pub fn UnlockedCallback(chan: s32, result: s32);
    pub fn CARDGetSectorSize(chan: s32, size: *mut u32_) -> s32;
    pub fn VerifyID(card: *mut CARDControl) -> s32;
    pub fn VerifyDir(card: *mut CARDControl, outCurrent: *mut ::core::ffi::c_int) -> s32;
    pub fn VerifyFAT(card: *mut CARDControl, outCurrent: *mut ::core::ffi::c_int) -> s32;
    pub fn CARDCheckExAsync(chan: s32, xferBytes: *mut s32, callback: CARDCallback) -> s32;
    pub fn UpdateIconOffsets(ent: *mut CARDDir, stat: *mut CARDStat);
    pub fn DeleteCallback(chan: s32, result: s32);
    pub static mut SectorSizeTable: [u32_; 8usize];
    pub static mut LatencyTable: [u32_; 8usize];
    pub fn DoUnmount(chan: s32, result: s32);
    pub fn DoMount(chan: s32) -> s32;
    pub fn DVDReadAbsAsyncForBS(
        arg1: *mut ::core::ffi::c_void,
        arg2: *mut bb2struct,
        arg3: ::core::ffi::c_int,
        arg4: ::core::ffi::c_int,
        arg5: ::core::option::Option<unsafe extern "C" fn()>,
    );
    pub fn DVDReset();
    pub fn DVDReadDiskID(
        arg1: *mut ::core::ffi::c_void,
        arg2: *mut DVDDiskID,
        arg3: ::core::option::Option<unsafe extern "C" fn()>,
    );
    pub static mut status: u32_;
    pub static mut bb2: *mut bb2struct;
    pub static mut idTmp: *mut DVDDiskID;
    pub static mut bb2Buf: [u8_; 64usize];
    pub static mut block: [u8_; 48usize];
    pub fn cb(param_1: s32, param_2: *mut ::core::ffi::c_void);
    pub fn __fstLoad();
    pub static mut WaitingQueue: [DVDQueue_sub; 4usize];
    pub fn __DVDClearWaitingQueue();
    pub fn __DVDPushWaitingQueue(a: ::core::ffi::c_int, b: *mut DVDQueue_sub)
        -> ::core::ffi::c_int;
    pub fn __DVDPopWaitingQueue() -> *mut DVDQueue_sub;
    pub fn __DVDCheckWaitingQueue() -> BOOL;
    pub fn __DVDDequeueWaitingQueue(a: *mut DVDQueue_sub) -> BOOL;
    pub fn force_lbl_802F6868() -> f32;
    pub fn WriteMTXPS4x3(src: *mut [f32_; 4usize], dest: *mut f32_);
    pub fn WriteMTXPS3x3from3x4(src: *mut [f32_; 4usize], dest: *mut f32_);
    pub fn WriteMTXPS4x2(src: *mut [f32_; 4usize], dest: *mut f32_);
    pub static mut gxData: GX;
    pub fn __force__gxData() -> *mut ::core::ffi::c_void;
    pub static mut FifoObj: GXFifoObj;
    pub static mut __memReg: *mut ::core::ffi::c_void;
    pub static mut __peReg: *mut ::core::ffi::c_void;
    pub fn EnableWriteGatherPipe();
    pub fn __GXDefaultTexRegionCallback(t_obj: *mut GXTexObj, id: GXTexMapID) -> *mut GXTexRegion;
    pub fn __GXDefaultTlutRegionCallback(idx: u32_) -> *mut GXTlutRegion;
    pub fn GXClearGPMetric();
    pub fn GXInitXfRasMetric();
    pub fn __GXSetGenMode();
    pub static mut DisplayListFifo: __GXFifoObj;
    pub static mut __savedGXdata: GX;
    pub static mut OldCPUFifo: *mut ::core::ffi::c_void;
    pub static mut lbl_801E9198: [u32_; 10usize];
    pub static mut __GXCurrentThread: *mut OSThread;
    pub static mut CPGPLinked: u8_;
    pub static mut GXOverflowSuspendInProgress: u32_;
    pub static mut BreakPointCB: ::core::option::Option<unsafe extern "C" fn()>;
    pub static mut __GXOverflowCount: u32_;
    pub static mut GPFifo: *mut GXFifoObj;
    pub static mut CPUFifo: *mut GXFifoObj;
    pub fn __GXFifoReadEnable();
    pub fn __GXFifoReadDisable();
    pub fn __GXFifoLink(arg0: u8_);
    pub fn __GXWriteFifoIntEnable(arg0: u8_, arg1: u8_);
    pub fn __GXWriteFifoIntReset(arg0: u8_, arg1: u8_);
    pub fn GXCPInterruptHandler(unused: __OSInterrupt, ctx: *mut OSContext);
}
