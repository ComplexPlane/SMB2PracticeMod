# Original code created by PistonMiner and Zephiles for Paper Mario: The Thousand-Year Door
# Code ported to Super Monkey Ball by Zephiles

# Gamecode: GMBE8P
# Insertion address: 800068E8

# Set global function/variable/offset locations/values
.set HEAP_HANDLE_OFFSET,-0x66B4
.set INTERNAL_FILENAME_LOCATION,0x80004440
.set MEMCARD_WORK_AREA,0x802BA380
.set CARDProbeEx,0x800D8F40
.set CARDMount,0x800D96EC
.set CARDOpen,0x800DA3F8
.set CARDReadAsync,0x800DABF8
.set CARDGetResultCode,0x800D62D0
.set CARDClose,0x800DA56C
.set CARDUnmount,0x800D97D0
.set OSLink,0x800C6B64
.set OSUnlink,0x800C6F70
.set OSFreeToHeap,0x800C27C8
.set OSAllocFromHeap,0x800C26CC
.set memset,0x80003320
.set DCFlushRange,0x800C2F60

# Initialize static values used for addresses
# Do not overwrite r31
lis r30,0x800D
lis r29,0x800C
lis r28,0x8000

li r27,0 # Used to check if a REL file is loaded or not

# Check if a Memory Card is present
# To avoid an infinite loop, only check for a memory card a set amount of times
lis r26,0x000F
ori r26,r26,0x4240 # Check 1,000,000 times

checkForMemoryCardLoop:
ori r3,r30,CARDProbeEx@l
mtlr r3
li r3,1 # Memory Card Slot B
li r4,0 # Pointer to the Memory Size (Not needed, so NULL)
li r5,0 # Pointer to the Sector Size (Not needed, so NULL)
blrl
cmpwi r3,-1 # CARD_RESULT_BUSY
bne- exitCheckForMemoryCardLoop

# Exit if the limit has been reached
subic. r26,r26,1
bgt+ checkForMemoryCardLoop

exitCheckForMemoryCardLoop:
cmpwi r3,0 # Check if something went wrong
bne- exit

# Mount the Memory Card
ori r3,r30,CARDMount@l
mtlr r3
li r3,1 # Memory Card Slot B
lis r4,MEMCARD_WORK_AREA@h
ori r4,r4,MEMCARD_WORK_AREA@l
li r5,0 # Detach Callback function (Want to avoid using, so NULL)
blrl
cmpwi r3,0 # Check if something went wrong
bne- exit

# Allocate memory for CardFileInfo
li r4,20
bl allocateMemory

# Backup the returned address to be used for later
mr r26,r3

# Open the file
ori r3,r30,CARDOpen@l
mtlr r3
li r3,1 # Memory Card Slot B
ori r4,r28,INTERNAL_FILENAME_LOCATION@l
mr r5,r26 # Pointer to CardFileInfo
blrl
cmpwi r3,0 # Check if something went wrong
bne- freeCardFileInfo

# Allocate 0x200 bytes of memory, as the read size must be in multiples of 0x200 bytes
li r4,0x200 # Bytes to allocate
bl allocateMemory

# Backup the returned address to be used for later
mr r24,r3

# Read from the Card
ori r3,r30,CARDReadAsync@l
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
mr r4,r24 # Pointer to the File Buffer
li r5,0x200 # Amount of bytes to read
li r6,0x2000 # Offset in the file to start reading from
li r7,0 # Read Callback function (Want to avoid using, so NULL)
blrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- freeCurrentMemoryArea

# Get the file size and adjust it to be in multiples of 0x200 bytes
lwz r25,0x40(r24) # File Size
addi r25,r25,511
rlwinm r25,r25,0,0,22

# Free the 0x200 bytes from earlier
mr r4,r24
bl freeMemory

# Allocate more bytes based on the adjusted file size
mr r4,r25
bl allocateMemory

# Backup the returned address to be used for later
mr r24,r3

# Read the REL Area of the file
ori r3,r30,CARDReadAsync@l
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
mr r4,r24 # Pointer to the File Buffer
mr r5,r25 # Adjusted File Size
li r6,0x2200 # Offset in the file to start reading from
li r7,0 # Read Callback Function (Want to avoid using, so NULL)
blrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- freeCurrentMemoryArea

# Get the BSS Area size and allocate memory for it
lwz r4,0x20(r24)
bl allocateMemory

# Backup the returned address to be used for later
mr r25,r3

# Link the functions in the REL
ori r3,r29,OSLink@l
mtlr r3
mr r3,r24 # Pointer to the Module
mr r4,r25 # Pointer to the BSS Area
blrl
cmpwi r3,1 # Check if something went wrong
bne- freeRemainingMemory

# Store the BSS Area and the Module
stw r25,0x44B0(r28) # Pointer to the BSS Area
stw r24,0x44B4(r28) # Pointer to the Module

# Get the REL Prolog Pointer
lwz r27,0x34(r24)

# Done, so close and unmount the card
b closeCard

# Function definitions, error handling, etc.
freeMemory:
ori r3,r29,OSFreeToHeap@l
mtctr r3
lwz r3,HEAP_HANDLE_OFFSET(r13) # Heap to use - Heap 4 (zero-indexed)
bctr

allocateMemory:
stwu sp,-0x10(sp)
mflr r0
stw r0,0x14(sp)
stmw r30,0x8(sp)

mr r31,r4 # Size

# Allocate the memory
ori r3,r29,OSAllocFromHeap@l
mtlr r3
lwz r3,HEAP_HANDLE_OFFSET(r13) # Heap to use - Heap 4 (zero-indexed)
blrl

# Clear the memory
ori r5,r28,memset@l
mtlr r5
mr r30,r3 # Dest
li r4,0
mr r5,r31 # Size
blrl

# Flush the cache of the memory
ori r3,r29,DCFlushRange@l
mtlr r3
mr r3,r30 # Dest
mr r4,r31 # Size
blrl
mr r3,r30 # Dest

lmw r30,0x8(sp)
lwz r0,0x14(sp)
mtlr r0
addi sp,sp,0x10
blr

finishAsyncFunction:
cmpwi r3,0 # Check if something went wrong
bnelr-
mflr r14

finishAsyncFunctionLoop:
ori r3,r30,CARDGetResultCode@l
mtlr r3
li r3,1 # Memory Card Slot B
blrl
cmpwi r3,-1 # CARD_RESULT_BUSY
beq+ finishAsyncFunctionLoop
mtlr r14
blr

freeRemainingMemory:
ori r3,r29,OSUnlink@l
mtlr r3
mr r3,r24 # Pointer to the Module
blrl

# Free the BSS Area and the File Buffer
mr r4,r25 # Pointer to the BSS Area
bl freeMemory

freeCurrentMemoryArea:
mr r4,r24 # Pointer to the File Buffer or the 0x200 Bytes Buffer
bl freeMemory

closeCard:
ori r3,r30,CARDClose@l
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
blrl

freeCardFileInfo:
mr r4,r26
bl freeMemory

# Unmount the Memory Card
ori r3,r30,CARDUnmount@l
mtlr r3
li r3,1 # Memory Card Slot B
blrl

# Run the REL Prolog if the load was successful
cmpwi r27,0
beq- exit
mtlr r27
blrl

exit:
# Add back in the overwritten instruction
lwz r0,0xC(sp)
